
c:/Users/nicky/OneDrive/Documents/GitHub/513_project/Particle/PW_Project/target/4.0.1/argon/PW_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000031f4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7210  000b7210  00007210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b7234  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  2003e0f4  000b7238  0001e0f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000688  2003e168  2003e168  0002e168  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000b72ac  000b72ac  000272ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b72d4  000b72d4  000272d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00111af9  00000000  00000000  000272d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00011d8f  00000000  00000000  00138dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00038368  00000000  00000000  0014ab60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002a18  00000000  00000000  00182ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00009ed8  00000000  00000000  001858e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038e90  00000000  00000000  0018f7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003c819  00000000  00000000  001c8648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001375bf  00000000  00000000  00204e61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000075f4  00000000  00000000  0033c420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f002 fe57 	bl	b6ce0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f002 fe5f 	bl	b6cfc <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e0f4 	.word	0x2003e0f4
   b4048:	000b7238 	.word	0x000b7238
   b404c:	2003e168 	.word	0x2003e168
   b4050:	2003e168 	.word	0x2003e168
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 fbdd 	bl	b581c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b71e0 	.word	0x000b71e0
   b407c:	000b7204 	.word	0x000b7204

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b816 	b.w	b40b0 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f839 	bl	b40fc <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 bb7d 	b.w	b578c <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 bfeb 	b.w	b506c <malloc>

000b4096 <_Znaj>:
   b4096:	f000 bfe9 	b.w	b506c <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 bfef 	b.w	b507c <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr
	...

000b40b0 <setup>:
uint8_t state = 2;
// 0 = Waiting to request measurement, 1 = Request measurement, 2 = Take measurement, 3 = Post measurement



void setup() {
   b40b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.begin(9600);
  max30105.begin();
   b40b2:	4c10      	ldr	r4, [pc, #64]	; (b40f4 <setup+0x44>)
  Serial.begin(9600);
   b40b4:	f001 ff52 	bl	b5f5c <_Z16_fetch_usbserialv>
   b40b8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40bc:	f001 ff42 	bl	b5f44 <_ZN9USBSerial5beginEl>
  max30105.begin();
   b40c0:	4620      	mov	r0, r4
   b40c2:	f000 fa91 	bl	b45e8 <_ZN8MAX301055beginEv>
  max30105.setup(60, 4, 2, 100, 411, 4096);
   b40c6:	f240 139b 	movw	r3, #411	; 0x19b
   b40ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   b40ce:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b40d2:	2364      	movs	r3, #100	; 0x64
   b40d4:	9300      	str	r3, [sp, #0]
   b40d6:	2204      	movs	r2, #4
   b40d8:	2302      	movs	r3, #2
   b40da:	213c      	movs	r1, #60	; 0x3c
   b40dc:	4620      	mov	r0, r4
   b40de:	f000 fb3d 	bl	b475c <_ZN8MAX301055setupEhhhiii>
  Serial.println("Setup finished!");
   b40e2:	f001 ff3b 	bl	b5f5c <_Z16_fetch_usbserialv>
   b40e6:	4904      	ldr	r1, [pc, #16]	; (b40f8 <setup+0x48>)
}
   b40e8:	b004      	add	sp, #16
   b40ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial.println("Setup finished!");
   b40ee:	f001 ba3c 	b.w	b556a <_ZN5Print7printlnEPKc>
   b40f2:	bf00      	nop
   b40f4:	2003e258 	.word	0x2003e258
   b40f8:	000b6ea4 	.word	0x000b6ea4

000b40fc <loop>:

void loop() {
   b40fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  // If we are waiting to take a measurement
  if (state == 0) {
   b4100:	4d7d      	ldr	r5, [pc, #500]	; (b42f8 <loop+0x1fc>)
void loop() {
   b4102:	ed2d 8b02 	vpush	{d8}
  if (state == 0) {
   b4106:	782b      	ldrb	r3, [r5, #0]
void loop() {
   b4108:	b098      	sub	sp, #96	; 0x60
  if (state == 0) {
   b410a:	2b00      	cmp	r3, #0
   b410c:	d13d      	bne.n	b418a <loop+0x8e>

    // Update current time
    current_time = float(Time.hour()) + Time.minute() / 60.00;
   b410e:	f001 facd 	bl	b56ac <_ZN9TimeClass4hourEv>
   b4112:	ee08 0a10 	vmov	s16, r0
   b4116:	f001 fad5 	bl	b56c4 <_ZN9TimeClass6minuteEv>
   b411a:	f002 fafb 	bl	b6714 <__aeabi_i2d>
   b411e:	4b77      	ldr	r3, [pc, #476]	; (b42fc <loop+0x200>)
   b4120:	2200      	movs	r2, #0
   b4122:	f002 fc8b 	bl	b6a3c <__aeabi_ddiv>
   b4126:	eef8 7ac8 	vcvt.f32.s32	s15, s16
   b412a:	4606      	mov	r6, r0
   b412c:	ee17 0a90 	vmov	r0, s15
   b4130:	460f      	mov	r7, r1
   b4132:	f002 fb01 	bl	b6738 <__aeabi_f2d>
   b4136:	460b      	mov	r3, r1
   b4138:	4602      	mov	r2, r0
   b413a:	4639      	mov	r1, r7
   b413c:	4630      	mov	r0, r6
   b413e:	f002 f99d 	bl	b647c <__adddf3>
   b4142:	f002 fd63 	bl	b6c0c <__aeabi_d2f>
   b4146:	4b6e      	ldr	r3, [pc, #440]	; (b4300 <loop+0x204>)
   b4148:	6018      	str	r0, [r3, #0]

    // If we are in the acceptable time frame
    if (current_time > constraint_time_lower && current_time < constraint_time_upper) {
   b414a:	4b6e      	ldr	r3, [pc, #440]	; (b4304 <loop+0x208>)
    current_time = float(Time.hour()) + Time.minute() / 60.00;
   b414c:	ee07 0a90 	vmov	s15, r0
    if (current_time > constraint_time_lower && current_time < constraint_time_upper) {
   b4150:	ed93 7a00 	vldr	s14, [r3]
   b4154:	eef4 7ac7 	vcmpe.f32	s15, s14
   b4158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b415c:	dd15      	ble.n	b418a <loop+0x8e>
   b415e:	4b6a      	ldr	r3, [pc, #424]	; (b4308 <loop+0x20c>)
   b4160:	ed93 7a00 	vldr	s14, [r3]
   b4164:	eef4 7ac7 	vcmpe.f32	s15, s14
   b4168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b416c:	d50d      	bpl.n	b418a <loop+0x8e>
      // If we've waited enough between measurements
      if (millis() - previous_request >= delay_time) {
   b416e:	4c67      	ldr	r4, [pc, #412]	; (b430c <loop+0x210>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4170:	f000 fda0 	bl	b4cb4 <HAL_Timer_Get_Milli_Seconds>
   b4174:	6823      	ldr	r3, [r4, #0]
   b4176:	1ac0      	subs	r0, r0, r3
   b4178:	4b65      	ldr	r3, [pc, #404]	; (b4310 <loop+0x214>)
   b417a:	681b      	ldr	r3, [r3, #0]
   b417c:	4298      	cmp	r0, r3
   b417e:	d304      	bcc.n	b418a <loop+0x8e>
        // Transition to measurement state
        state = 1;
   b4180:	2301      	movs	r3, #1
   b4182:	702b      	strb	r3, [r5, #0]
   b4184:	f000 fd96 	bl	b4cb4 <HAL_Timer_Get_Milli_Seconds>
        previous_request = millis();
   b4188:	6020      	str	r0, [r4, #0]
      // Check for updates from Particle cloud
    }
  }

  // If we are requesting a measurement
  if (state == 1) {
   b418a:	7828      	ldrb	r0, [r5, #0]
   b418c:	2801      	cmp	r0, #1
   b418e:	d125      	bne.n	b41dc <loop+0xe0>

    // Enable LED
    RGB.control(true);
   b4190:	f001 fab1 	bl	b56f6 <_ZN8RGBClass7controlEb>
    RGB.color(0, 0, 255);
   b4194:	2100      	movs	r1, #0
   b4196:	22ff      	movs	r2, #255	; 0xff
   b4198:	4608      	mov	r0, r1
   b419a:	f001 fabc 	bl	b5716 <_ZN8RGBClass5colorEiii>

    // If the user places their finger on the sensor
    if (1) {
      // Transition to measurement state
      state = 2;
   b419e:	2302      	movs	r3, #2
   b41a0:	702b      	strb	r3, [r5, #0]
  }

  // If we are taking a measurement:
  if (state == 2) {

    bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
   b41a2:	f8df 81ac 	ldr.w	r8, [pc, #428]	; b4350 <loop+0x254>
  
    //read the first 300 samples, and determine the signal range
    Serial.println("Entering measumrent loop");
    for (byte i = 0 ; i < bufferLength ; i++) {
      while (max30105.available() == false) //do we have new data?
   b41a6:	4c5b      	ldr	r4, [pc, #364]	; (b4314 <loop+0x218>)
        max30105.check(); //Check the sensor for new data

        redBuffer[i] = max30105.getRed();
   b41a8:	f8df a17c 	ldr.w	sl, [pc, #380]	; b4328 <loop+0x22c>
        irBuffer[i] = max30105.getIR();
   b41ac:	f8df 9180 	ldr.w	r9, [pc, #384]	; b4330 <loop+0x234>
    bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
   b41b0:	2364      	movs	r3, #100	; 0x64
   b41b2:	f8c8 3000 	str.w	r3, [r8]
    Serial.println("Entering measumrent loop");
   b41b6:	f001 fed1 	bl	b5f5c <_Z16_fetch_usbserialv>
   b41ba:	4957      	ldr	r1, [pc, #348]	; (b4318 <loop+0x21c>)
   b41bc:	f001 f9d5 	bl	b556a <_ZN5Print7printlnEPKc>
   b41c0:	2600      	movs	r6, #0
    for (byte i = 0 ; i < bufferLength ; i++) {
   b41c2:	f8d8 1000 	ldr.w	r1, [r8]
   b41c6:	b2f7      	uxtb	r7, r6
   b41c8:	428f      	cmp	r7, r1
   b41ca:	da1f      	bge.n	b420c <loop+0x110>
      while (max30105.available() == false) //do we have new data?
   b41cc:	4620      	mov	r0, r4
   b41ce:	f000 f8d7 	bl	b4380 <_ZN8MAX301059availableEv>
   b41d2:	b960      	cbnz	r0, b41ee <loop+0xf2>
        max30105.check(); //Check the sensor for new data
   b41d4:	4620      	mov	r0, r4
   b41d6:	f000 f91b 	bl	b4410 <_ZN8MAX301055checkEv>
      while (max30105.available() == false) //do we have new data?
   b41da:	e7f7      	b.n	b41cc <loop+0xd0>
  if (state == 2) {
   b41dc:	2802      	cmp	r0, #2
   b41de:	d0e0      	beq.n	b41a2 <loop+0xa6>
      state = 3;
    //}
  }

  // If we are posting data to the server
  if (state == 3) {
   b41e0:	2803      	cmp	r0, #3
   b41e2:	d020      	beq.n	b4226 <loop+0x12a>
      Serial.println(send_data);

      // Transition to wait state
      state = 2;
  }
   b41e4:	b018      	add	sp, #96	; 0x60
   b41e6:	ecbd 8b02 	vpop	{d8}
   b41ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        redBuffer[i] = max30105.getRed();
   b41ee:	4620      	mov	r0, r4
   b41f0:	f000 f9d2 	bl	b4598 <_ZN8MAX301056getRedEv>
   b41f4:	f82a 0017 	strh.w	r0, [sl, r7, lsl #1]
        irBuffer[i] = max30105.getIR();
   b41f8:	4620      	mov	r0, r4
   b41fa:	f000 f9db 	bl	b45b4 <_ZN8MAX301055getIREv>
   b41fe:	f829 0017 	strh.w	r0, [r9, r7, lsl #1]
        max30105.nextSample(); //We're finished with this sample so move to next sample
   b4202:	4620      	mov	r0, r4
   b4204:	f000 f8c6 	bl	b4394 <_ZN8MAX3010510nextSampleEv>
    for (byte i = 0 ; i < bufferLength ; i++) {
   b4208:	3601      	adds	r6, #1
   b420a:	e7da      	b.n	b41c2 <loop+0xc6>
    maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
   b420c:	4b43      	ldr	r3, [pc, #268]	; (b431c <loop+0x220>)
   b420e:	9302      	str	r3, [sp, #8]
   b4210:	4b43      	ldr	r3, [pc, #268]	; (b4320 <loop+0x224>)
   b4212:	9301      	str	r3, [sp, #4]
   b4214:	4b43      	ldr	r3, [pc, #268]	; (b4324 <loop+0x228>)
   b4216:	9300      	str	r3, [sp, #0]
   b4218:	4a43      	ldr	r2, [pc, #268]	; (b4328 <loop+0x22c>)
   b421a:	4b44      	ldr	r3, [pc, #272]	; (b432c <loop+0x230>)
   b421c:	4844      	ldr	r0, [pc, #272]	; (b4330 <loop+0x234>)
   b421e:	f000 fbfb 	bl	b4a18 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_>
      state = 3;
   b4222:	2303      	movs	r3, #3
   b4224:	702b      	strb	r3, [r5, #0]
    Serial.println("entering print state");
   b4226:	f001 fe99 	bl	b5f5c <_Z16_fetch_usbserialv>
   b422a:	4942      	ldr	r1, [pc, #264]	; (b4334 <loop+0x238>)
   b422c:	f001 f99d 	bl	b556a <_ZN5Print7printlnEPKc>
      String send_data = String("{ \"beat\": \"") + String(heartRate) + "\"" + ", \"ox\": " + String(spo2) + "}";
   b4230:	4941      	ldr	r1, [pc, #260]	; (b4338 <loop+0x23c>)
   b4232:	a808      	add	r0, sp, #32
   b4234:	f001 f885 	bl	b5342 <_ZN6StringC1EPK19__FlashStringHelper>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b4238:	a908      	add	r1, sp, #32
   b423a:	a810      	add	r0, sp, #64	; 0x40
   b423c:	f001 f8a4 	bl	b5388 <_ZN6StringC1ERKS_>
   b4240:	4b37      	ldr	r3, [pc, #220]	; (b4320 <loop+0x224>)
   b4242:	220a      	movs	r2, #10
   b4244:	6819      	ldr	r1, [r3, #0]
   b4246:	a80c      	add	r0, sp, #48	; 0x30
   b4248:	f001 f8ce 	bl	b53e8 <_ZN6StringC1Elh>
   b424c:	a90c      	add	r1, sp, #48	; 0x30
   b424e:	a810      	add	r0, sp, #64	; 0x40
   b4250:	f001 f8f4 	bl	b543c <_ZplRK15StringSumHelperRK6String>
   b4254:	4939      	ldr	r1, [pc, #228]	; (b433c <loop+0x240>)
   b4256:	f001 f8fd 	bl	b5454 <_ZplRK15StringSumHelperPKc>
   b425a:	4939      	ldr	r1, [pc, #228]	; (b4340 <loop+0x244>)
   b425c:	f001 f8fa 	bl	b5454 <_ZplRK15StringSumHelperPKc>
   b4260:	4b32      	ldr	r3, [pc, #200]	; (b432c <loop+0x230>)
   b4262:	220a      	movs	r2, #10
   b4264:	6819      	ldr	r1, [r3, #0]
   b4266:	4604      	mov	r4, r0
   b4268:	a814      	add	r0, sp, #80	; 0x50
   b426a:	f001 f8bd 	bl	b53e8 <_ZN6StringC1Elh>
   b426e:	a914      	add	r1, sp, #80	; 0x50
   b4270:	4620      	mov	r0, r4
   b4272:	f001 f8e3 	bl	b543c <_ZplRK15StringSumHelperRK6String>
   b4276:	4933      	ldr	r1, [pc, #204]	; (b4344 <loop+0x248>)
   b4278:	f001 f8ec 	bl	b5454 <_ZplRK15StringSumHelperPKc>
   b427c:	4601      	mov	r1, r0
   b427e:	a804      	add	r0, sp, #16
   b4280:	f001 f882 	bl	b5388 <_ZN6StringC1ERKS_>
   b4284:	a814      	add	r0, sp, #80	; 0x50
   b4286:	f001 f811 	bl	b52ac <_ZN6StringD1Ev>
   b428a:	a80c      	add	r0, sp, #48	; 0x30
   b428c:	f001 f80e 	bl	b52ac <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4290:	a810      	add	r0, sp, #64	; 0x40
   b4292:	f001 f80b 	bl	b52ac <_ZN6StringD1Ev>
   b4296:	a808      	add	r0, sp, #32
   b4298:	f001 f808 	bl	b52ac <_ZN6StringD1Ev>
      Particle.publish("Reading", String(send_data), PRIVATE);
   b429c:	a904      	add	r1, sp, #16
   b429e:	a814      	add	r0, sp, #80	; 0x50
   b42a0:	f001 f872 	bl	b5388 <_ZN6StringC1ERKS_>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b42a4:	4b28      	ldr	r3, [pc, #160]	; (b4348 <loop+0x24c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b42a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b42a8:	781b      	ldrb	r3, [r3, #0]
   b42aa:	f88d 3000 	strb.w	r3, [sp]
   b42ae:	4927      	ldr	r1, [pc, #156]	; (b434c <loop+0x250>)
   b42b0:	233c      	movs	r3, #60	; 0x3c
   b42b2:	a810      	add	r0, sp, #64	; 0x40
   b42b4:	f001 fc10 	bl	b5ad8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b42b8:	9c11      	ldr	r4, [sp, #68]	; 0x44
   b42ba:	b17c      	cbz	r4, b42dc <loop+0x1e0>
      if (--_M_use_count == 0)
   b42bc:	6863      	ldr	r3, [r4, #4]
   b42be:	3b01      	subs	r3, #1
   b42c0:	6063      	str	r3, [r4, #4]
   b42c2:	b95b      	cbnz	r3, b42dc <loop+0x1e0>
          _M_dispose();
   b42c4:	6823      	ldr	r3, [r4, #0]
   b42c6:	4620      	mov	r0, r4
   b42c8:	689b      	ldr	r3, [r3, #8]
   b42ca:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b42cc:	68a3      	ldr	r3, [r4, #8]
   b42ce:	3b01      	subs	r3, #1
   b42d0:	60a3      	str	r3, [r4, #8]
   b42d2:	b91b      	cbnz	r3, b42dc <loop+0x1e0>
            _M_destroy();
   b42d4:	6823      	ldr	r3, [r4, #0]
   b42d6:	4620      	mov	r0, r4
   b42d8:	68db      	ldr	r3, [r3, #12]
   b42da:	4798      	blx	r3
   b42dc:	a814      	add	r0, sp, #80	; 0x50
   b42de:	f000 ffe5 	bl	b52ac <_ZN6StringD1Ev>
      Serial.println(send_data);
   b42e2:	f001 fe3b 	bl	b5f5c <_Z16_fetch_usbserialv>
   b42e6:	9904      	ldr	r1, [sp, #16]
   b42e8:	f001 f93f 	bl	b556a <_ZN5Print7printlnEPKc>
      state = 2;
   b42ec:	2302      	movs	r3, #2
      String send_data = String("{ \"beat\": \"") + String(heartRate) + "\"" + ", \"ox\": " + String(spo2) + "}";
   b42ee:	a804      	add	r0, sp, #16
      state = 2;
   b42f0:	702b      	strb	r3, [r5, #0]
      String send_data = String("{ \"beat\": \"") + String(heartRate) + "\"" + ", \"ox\": " + String(spo2) + "}";
   b42f2:	f000 ffdb 	bl	b52ac <_ZN6StringD1Ev>
   b42f6:	e775      	b.n	b41e4 <loop+0xe8>
   b42f8:	2003e0f8 	.word	0x2003e0f8
   b42fc:	404e0000 	.word	0x404e0000
   b4300:	2003e178 	.word	0x2003e178
   b4304:	2003e170 	.word	0x2003e170
   b4308:	2003e174 	.word	0x2003e174
   b430c:	2003e260 	.word	0x2003e260
   b4310:	2003e0f4 	.word	0x2003e0f4
   b4314:	2003e258 	.word	0x2003e258
   b4318:	000b6eb4 	.word	0x000b6eb4
   b431c:	2003e330 	.word	0x2003e330
   b4320:	2003e18c 	.word	0x2003e18c
   b4324:	2003e331 	.word	0x2003e331
   b4328:	2003e264 	.word	0x2003e264
   b432c:	2003e32c 	.word	0x2003e32c
   b4330:	2003e190 	.word	0x2003e190
   b4334:	000b6ecd 	.word	0x000b6ecd
   b4338:	000b6ee2 	.word	0x000b6ee2
   b433c:	000b6eec 	.word	0x000b6eec
   b4340:	000b6eee 	.word	0x000b6eee
   b4344:	000b6ef7 	.word	0x000b6ef7
   b4348:	2003e168 	.word	0x2003e168
   b434c:	000b6ef9 	.word	0x000b6ef9
   b4350:	2003e16c 	.word	0x2003e16c

000b4354 <_GLOBAL__sub_I_max30105>:
   b4354:	b508      	push	{r3, lr}
        val_(val) {
   b4356:	4b06      	ldr	r3, [pc, #24]	; (b4370 <_GLOBAL__sub_I_max30105+0x1c>)
MAX30105 max30105;                    // Sensor
   b4358:	4806      	ldr	r0, [pc, #24]	; (b4374 <_GLOBAL__sub_I_max30105+0x20>)
   b435a:	2201      	movs	r2, #1
   b435c:	701a      	strb	r2, [r3, #0]
   b435e:	f000 f80d 	bl	b437c <_ZN8MAX30105C1Ev>
String data = String(10);             //data to be sent to server
   b4362:	220a      	movs	r2, #10
   b4364:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
String data = String(10);             //data to be sent to server
   b4368:	4803      	ldr	r0, [pc, #12]	; (b4378 <_GLOBAL__sub_I_max30105+0x24>)
   b436a:	4611      	mov	r1, r2
   b436c:	f001 b829 	b.w	b53c2 <_ZN6StringC1Eih>
   b4370:	2003e168 	.word	0x2003e168
   b4374:	2003e258 	.word	0x2003e258
   b4378:	2003e17c 	.word	0x2003e17c

000b437c <_ZN8MAX30105C1Ev>:
  byte tail;
} sense; //This is our circular buffer of readings from the sensor

MAX30105::MAX30105() {
  // Constructor
}
   b437c:	4770      	bx	lr
	...

000b4380 <_ZN8MAX301059availableEv>:
//

//Tell caller how many samples are available
uint8_t MAX30105::available(void)
{
  uint8_t numberOfSamples = sense.head - sense.tail;
   b4380:	4b03      	ldr	r3, [pc, #12]	; (b4390 <_ZN8MAX301059availableEv+0x10>)
   b4382:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
   b4386:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   b438a:	1ac0      	subs	r0, r0, r3
  if (numberOfSamples < 0) numberOfSamples += STORAGE_SIZE;

  return (numberOfSamples);
}
   b438c:	b2c0      	uxtb	r0, r0
   b438e:	4770      	bx	lr
   b4390:	2003e334 	.word	0x2003e334

000b4394 <_ZN8MAX3010510nextSampleEv>:
  uint8_t numberOfSamples = sense.head - sense.tail;
   b4394:	4a06      	ldr	r2, [pc, #24]	; (b43b0 <_ZN8MAX3010510nextSampleEv+0x1c>)
   b4396:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
}

//Advance the tail
void MAX30105::nextSample(void)
{
  if(available()) //Only advance the tail if new data is available
   b439a:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
   b439e:	4299      	cmp	r1, r3
  {
    sense.tail++;
   b43a0:	bf1e      	ittt	ne
   b43a2:	3301      	addne	r3, #1
    sense.tail %= STORAGE_SIZE; //Wrap condition
   b43a4:	f003 0303 	andne.w	r3, r3, #3
   b43a8:	f882 3031 	strbne.w	r3, [r2, #49]	; 0x31
  }
}
   b43ac:	4770      	bx	lr
   b43ae:	bf00      	nop
   b43b0:	2003e334 	.word	0x2003e334

000b43b4 <_ZN8MAX3010513readRegister8Ehh>:
}

//
// Low-level I2C Communication
//
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
   b43b4:	b538      	push	{r3, r4, r5, lr}
   b43b6:	460c      	mov	r4, r1
   b43b8:	4615      	mov	r5, r2

	Wire.beginTransmission(address);
   b43ba:	f002 f82f 	bl	b641c <_Z19__fetch_global_Wirev>
   b43be:	4621      	mov	r1, r4
   b43c0:	f001 fed4 	bl	b616c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(reg);
   b43c4:	f002 f82a 	bl	b641c <_Z19__fetch_global_Wirev>
   b43c8:	6803      	ldr	r3, [r0, #0]
   b43ca:	4629      	mov	r1, r5
   b43cc:	689b      	ldr	r3, [r3, #8]
   b43ce:	4798      	blx	r3
	Wire.endTransmission();
   b43d0:	f002 f824 	bl	b641c <_Z19__fetch_global_Wirev>
   b43d4:	f001 fed2 	bl	b617c <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(address, 1);
   b43d8:	f002 f820 	bl	b641c <_Z19__fetch_global_Wirev>
   b43dc:	2201      	movs	r2, #1
   b43de:	4621      	mov	r1, r4
   b43e0:	f001 fec1 	bl	b6166 <_ZN7TwoWire11requestFromEhj>
	while ( Wire.available() ) // slave may send less than requested
   b43e4:	f002 f81a 	bl	b641c <_Z19__fetch_global_Wirev>
   b43e8:	6803      	ldr	r3, [r0, #0]
   b43ea:	691b      	ldr	r3, [r3, #16]
   b43ec:	4798      	blx	r3
   b43ee:	b128      	cbz	r0, b43fc <_ZN8MAX3010513readRegister8Ehh+0x48>
	{
		return(Wire.read()); // receive a byte as a proper uint8_t
   b43f0:	f002 f814 	bl	b641c <_Z19__fetch_global_Wirev>
   b43f4:	6803      	ldr	r3, [r0, #0]
   b43f6:	695b      	ldr	r3, [r3, #20]
   b43f8:	4798      	blx	r3
   b43fa:	b2c0      	uxtb	r0, r0
	}

}

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
   b43fc:	bd38      	pop	{r3, r4, r5, pc}

000b43fe <_ZN8MAX3010515getWritePointerEv>:
  return (readRegister8(MAX30105_ADDRESS, MAX30105_FIFOWRITEPTR));
   b43fe:	2204      	movs	r2, #4
   b4400:	2157      	movs	r1, #87	; 0x57
   b4402:	f7ff bfd7 	b.w	b43b4 <_ZN8MAX3010513readRegister8Ehh>

000b4406 <_ZN8MAX3010514getReadPointerEv>:
  return (readRegister8(MAX30105_ADDRESS, MAX30105_FIFOREADPTR));
   b4406:	2206      	movs	r2, #6
   b4408:	2157      	movs	r1, #87	; 0x57
   b440a:	f7ff bfd3 	b.w	b43b4 <_ZN8MAX3010513readRegister8Ehh>
	...

000b4410 <_ZN8MAX301055checkEv>:
{
   b4410:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b4414:	4607      	mov	r7, r0
  byte readPointer = getReadPointer();
   b4416:	f7ff fff6 	bl	b4406 <_ZN8MAX3010514getReadPointerEv>
   b441a:	4604      	mov	r4, r0
  byte writePointer = getWritePointer();
   b441c:	4638      	mov	r0, r7
   b441e:	f7ff ffee 	bl	b43fe <_ZN8MAX3010515getWritePointerEv>
  if (readPointer != writePointer)
   b4422:	4284      	cmp	r4, r0
   b4424:	f000 809b 	beq.w	b455e <_ZN8MAX301055checkEv+0x14e>
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
   b4428:	1b04      	subs	r4, r0, r4
   b442a:	bf48      	it	mi
   b442c:	3420      	addmi	r4, #32
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
   b442e:	797e      	ldrb	r6, [r7, #5]
        sense.head %= STORAGE_SIZE; //Wrap condition
   b4430:	f8df 8134 	ldr.w	r8, [pc, #308]	; b4568 <_ZN8MAX301055checkEv+0x158>
    Wire.beginTransmission(MAX30105_ADDRESS);
   b4434:	f001 fff2 	bl	b641c <_Z19__fetch_global_Wirev>
   b4438:	2157      	movs	r1, #87	; 0x57
   b443a:	f001 fe97 	bl	b616c <_ZN7TwoWire17beginTransmissionEh>
    Wire.write(MAX30105_FIFODATA);
   b443e:	f001 ffed 	bl	b641c <_Z19__fetch_global_Wirev>
   b4442:	6803      	ldr	r3, [r0, #0]
   b4444:	2107      	movs	r1, #7
   b4446:	689b      	ldr	r3, [r3, #8]
   b4448:	4798      	blx	r3
    Wire.endTransmission();
   b444a:	f001 ffe7 	bl	b641c <_Z19__fetch_global_Wirev>
   b444e:	f001 fe95 	bl	b617c <_ZN7TwoWire15endTransmissionEv>
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
   b4452:	4366      	muls	r6, r4
   b4454:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    while (bytesLeftToRead > 0)
   b4458:	2e00      	cmp	r6, #0
   b445a:	f340 8081 	ble.w	b4560 <_ZN8MAX301055checkEv+0x150>
      if (toGet > I2C_BUFFER_LENGTH)
   b445e:	2e20      	cmp	r6, #32
        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   b4460:	bfc3      	ittte	gt
   b4462:	797d      	ldrbgt	r5, [r7, #5]
   b4464:	eb05 0345 	addgt.w	r3, r5, r5, lsl #1
   b4468:	2520      	movgt	r5, #32
   b446a:	4635      	movle	r5, r6
   b446c:	bfc4      	itt	gt
   b446e:	fbb5 f5f3 	udivgt	r5, r5, r3
   b4472:	435d      	mulgt	r5, r3
      Wire.requestFrom(MAX30105_ADDRESS, toGet);
   b4474:	f001 ffd2 	bl	b641c <_Z19__fetch_global_Wirev>
   b4478:	462a      	mov	r2, r5
   b447a:	2157      	movs	r1, #87	; 0x57
   b447c:	f001 fe73 	bl	b6166 <_ZN7TwoWire11requestFromEhj>
      bytesLeftToRead -= toGet;
   b4480:	1b76      	subs	r6, r6, r5
        temp[3] = 0;
   b4482:	f04f 0900 	mov.w	r9, #0
      while (toGet > 0)
   b4486:	2d00      	cmp	r5, #0
   b4488:	dde6      	ble.n	b4458 <_ZN8MAX301055checkEv+0x48>
        sense.head++; //Advance the head of the storage struct
   b448a:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
        temp[3] = 0;
   b448e:	f88d 9007 	strb.w	r9, [sp, #7]
        sense.head++; //Advance the head of the storage struct
   b4492:	3301      	adds	r3, #1
        sense.head %= STORAGE_SIZE; //Wrap condition
   b4494:	f003 0303 	and.w	r3, r3, #3
   b4498:	f888 3030 	strb.w	r3, [r8, #48]	; 0x30
        temp[2] = Wire.read();
   b449c:	f001 ffbe 	bl	b641c <_Z19__fetch_global_Wirev>
   b44a0:	6803      	ldr	r3, [r0, #0]
   b44a2:	695b      	ldr	r3, [r3, #20]
   b44a4:	4798      	blx	r3
   b44a6:	f88d 0006 	strb.w	r0, [sp, #6]
        temp[1] = Wire.read();
   b44aa:	f001 ffb7 	bl	b641c <_Z19__fetch_global_Wirev>
   b44ae:	6803      	ldr	r3, [r0, #0]
   b44b0:	695b      	ldr	r3, [r3, #20]
   b44b2:	4798      	blx	r3
   b44b4:	f88d 0005 	strb.w	r0, [sp, #5]
        temp[0] = Wire.read();
   b44b8:	f001 ffb0 	bl	b641c <_Z19__fetch_global_Wirev>
   b44bc:	6803      	ldr	r3, [r0, #0]
   b44be:	695b      	ldr	r3, [r3, #20]
   b44c0:	4798      	blx	r3
   b44c2:	f88d 0004 	strb.w	r0, [sp, #4]
		tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b44c6:	9b01      	ldr	r3, [sp, #4]
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   b44c8:	f898 2030 	ldrb.w	r2, [r8, #48]	; 0x30
		tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b44cc:	f3c3 0311 	ubfx	r3, r3, #0, #18
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   b44d0:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
        if (activeLEDs > 1)
   b44d4:	797b      	ldrb	r3, [r7, #5]
   b44d6:	2b01      	cmp	r3, #1
   b44d8:	d91c      	bls.n	b4514 <_ZN8MAX301055checkEv+0x104>
          temp[2] = Wire.read();
   b44da:	f001 ff9f 	bl	b641c <_Z19__fetch_global_Wirev>
   b44de:	6803      	ldr	r3, [r0, #0]
   b44e0:	695b      	ldr	r3, [r3, #20]
   b44e2:	4798      	blx	r3
   b44e4:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = Wire.read();
   b44e8:	f001 ff98 	bl	b641c <_Z19__fetch_global_Wirev>
   b44ec:	6803      	ldr	r3, [r0, #0]
   b44ee:	695b      	ldr	r3, [r3, #20]
   b44f0:	4798      	blx	r3
   b44f2:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = Wire.read();
   b44f6:	f001 ff91 	bl	b641c <_Z19__fetch_global_Wirev>
   b44fa:	6803      	ldr	r3, [r0, #0]
   b44fc:	695b      	ldr	r3, [r3, #20]
   b44fe:	4798      	blx	r3
		  sense.IR[sense.head] = tempLong;
   b4500:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
          temp[0] = Wire.read();
   b4504:	f88d 0004 	strb.w	r0, [sp, #4]
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b4508:	9a01      	ldr	r2, [sp, #4]
		  sense.IR[sense.head] = tempLong;
   b450a:	3304      	adds	r3, #4
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b450c:	f3c2 0211 	ubfx	r2, r2, #0, #18
		  sense.IR[sense.head] = tempLong;
   b4510:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
        if (activeLEDs > 2)
   b4514:	797b      	ldrb	r3, [r7, #5]
   b4516:	2b02      	cmp	r3, #2
   b4518:	d91c      	bls.n	b4554 <_ZN8MAX301055checkEv+0x144>
          temp[2] = Wire.read();
   b451a:	f001 ff7f 	bl	b641c <_Z19__fetch_global_Wirev>
   b451e:	6803      	ldr	r3, [r0, #0]
   b4520:	695b      	ldr	r3, [r3, #20]
   b4522:	4798      	blx	r3
   b4524:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = Wire.read();
   b4528:	f001 ff78 	bl	b641c <_Z19__fetch_global_Wirev>
   b452c:	6803      	ldr	r3, [r0, #0]
   b452e:	695b      	ldr	r3, [r3, #20]
   b4530:	4798      	blx	r3
   b4532:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = Wire.read();
   b4536:	f001 ff71 	bl	b641c <_Z19__fetch_global_Wirev>
   b453a:	6803      	ldr	r3, [r0, #0]
   b453c:	695b      	ldr	r3, [r3, #20]
   b453e:	4798      	blx	r3
          sense.green[sense.head] = tempLong;
   b4540:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
          temp[0] = Wire.read();
   b4544:	f88d 0004 	strb.w	r0, [sp, #4]
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b4548:	9a01      	ldr	r2, [sp, #4]
          sense.green[sense.head] = tempLong;
   b454a:	3308      	adds	r3, #8
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b454c:	f3c2 0211 	ubfx	r2, r2, #0, #18
          sense.green[sense.head] = tempLong;
   b4550:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
        toGet -= activeLEDs * 3;
   b4554:	797b      	ldrb	r3, [r7, #5]
   b4556:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   b455a:	441d      	add	r5, r3
      while (toGet > 0)
   b455c:	e793      	b.n	b4486 <_ZN8MAX301055checkEv+0x76>
  int numberOfSamples = 0;
   b455e:	2400      	movs	r4, #0
}
   b4560:	b2a0      	uxth	r0, r4
   b4562:	b003      	add	sp, #12
   b4564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4568:	2003e334 	.word	0x2003e334

000b456c <_ZN8MAX301059safeCheckEh>:
{
   b456c:	b570      	push	{r4, r5, r6, lr}
   b456e:	4605      	mov	r5, r0
   b4570:	460e      	mov	r6, r1
   b4572:	f000 fb9f 	bl	b4cb4 <HAL_Timer_Get_Milli_Seconds>
   b4576:	4604      	mov	r4, r0
   b4578:	f000 fb9c 	bl	b4cb4 <HAL_Timer_Get_Milli_Seconds>
	if(millis() - markTime > maxTimeToCheck) return(false);
   b457c:	1b00      	subs	r0, r0, r4
   b457e:	42b0      	cmp	r0, r6
   b4580:	d808      	bhi.n	b4594 <_ZN8MAX301059safeCheckEh+0x28>
	if(check() == true) //We found new data!
   b4582:	4628      	mov	r0, r5
   b4584:	f7ff ff44 	bl	b4410 <_ZN8MAX301055checkEv>
   b4588:	2801      	cmp	r0, #1
   b458a:	d004      	beq.n	b4596 <_ZN8MAX301059safeCheckEh+0x2a>
	delay(1);
   b458c:	2001      	movs	r0, #1
   b458e:	f001 f8af 	bl	b56f0 <delay>
	if(millis() - markTime > maxTimeToCheck) return(false);
   b4592:	e7f1      	b.n	b4578 <_ZN8MAX301059safeCheckEh+0xc>
   b4594:	2000      	movs	r0, #0
}
   b4596:	bd70      	pop	{r4, r5, r6, pc}

000b4598 <_ZN8MAX301056getRedEv>:
{
   b4598:	b508      	push	{r3, lr}
  if(safeCheck(250))
   b459a:	21fa      	movs	r1, #250	; 0xfa
   b459c:	f7ff ffe6 	bl	b456c <_ZN8MAX301059safeCheckEh>
   b45a0:	b120      	cbz	r0, b45ac <_ZN8MAX301056getRedEv+0x14>
    return (sense.red[sense.head]);
   b45a2:	4b03      	ldr	r3, [pc, #12]	; (b45b0 <_ZN8MAX301056getRedEv+0x18>)
   b45a4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   b45a8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
}
   b45ac:	bd08      	pop	{r3, pc}
   b45ae:	bf00      	nop
   b45b0:	2003e334 	.word	0x2003e334

000b45b4 <_ZN8MAX301055getIREv>:
{
   b45b4:	b508      	push	{r3, lr}
  if(safeCheck(250))
   b45b6:	21fa      	movs	r1, #250	; 0xfa
   b45b8:	f7ff ffd8 	bl	b456c <_ZN8MAX301059safeCheckEh>
   b45bc:	b128      	cbz	r0, b45ca <_ZN8MAX301055getIREv+0x16>
    return (sense.IR[sense.head]);
   b45be:	4a03      	ldr	r2, [pc, #12]	; (b45cc <_ZN8MAX301055getIREv+0x18>)
   b45c0:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   b45c4:	3304      	adds	r3, #4
   b45c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
}
   b45ca:	bd08      	pop	{r3, pc}
   b45cc:	2003e334 	.word	0x2003e334

000b45d0 <_ZN8MAX3010510readPartIDEv>:
  return readRegister8(MAX30105_ADDRESS, MAX30105_PARTID);
   b45d0:	22ff      	movs	r2, #255	; 0xff
   b45d2:	2157      	movs	r1, #87	; 0x57
   b45d4:	f7ff beee 	b.w	b43b4 <_ZN8MAX3010513readRegister8Ehh>

000b45d8 <_ZN8MAX3010514readRevisionIDEv>:
void MAX30105::readRevisionID() {
   b45d8:	b510      	push	{r4, lr}
  revisionID = readRegister8(MAX30105_ADDRESS, MAX30105_REVISIONID);
   b45da:	22fe      	movs	r2, #254	; 0xfe
   b45dc:	2157      	movs	r1, #87	; 0x57
void MAX30105::readRevisionID() {
   b45de:	4604      	mov	r4, r0
  revisionID = readRegister8(MAX30105_ADDRESS, MAX30105_REVISIONID);
   b45e0:	f7ff fee8 	bl	b43b4 <_ZN8MAX3010513readRegister8Ehh>
   b45e4:	71a0      	strb	r0, [r4, #6]
}
   b45e6:	bd10      	pop	{r4, pc}

000b45e8 <_ZN8MAX301055beginEv>:
boolean MAX30105::begin() {
   b45e8:	b510      	push	{r4, lr}
   b45ea:	4604      	mov	r4, r0
 	Wire.begin();
   b45ec:	f001 ff16 	bl	b641c <_Z19__fetch_global_Wirev>
   b45f0:	f001 fd8a 	bl	b6108 <_ZN7TwoWire5beginEv>
  if (!readPartID() == MAX_30105_EXPECTEDPARTID) {
   b45f4:	4620      	mov	r0, r4
   b45f6:	f7ff ffeb 	bl	b45d0 <_ZN8MAX3010510readPartIDEv>
  readRevisionID();
   b45fa:	4620      	mov	r0, r4
   b45fc:	f7ff ffec 	bl	b45d8 <_ZN8MAX3010514readRevisionIDEv>
}
   b4600:	2001      	movs	r0, #1
   b4602:	bd10      	pop	{r4, pc}

000b4604 <_ZN8MAX3010514writeRegister8Ehhh>:
  Wire.beginTransmission(address);
  Wire.write(reg);
   b4604:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4606:	4615      	mov	r5, r2
   b4608:	461c      	mov	r4, r3
   b460a:	9101      	str	r1, [sp, #4]
  Wire.write(value);
   b460c:	f001 ff06 	bl	b641c <_Z19__fetch_global_Wirev>
   b4610:	9901      	ldr	r1, [sp, #4]
   b4612:	f001 fdab 	bl	b616c <_ZN7TwoWire17beginTransmissionEh>
  Wire.endTransmission();
   b4616:	f001 ff01 	bl	b641c <_Z19__fetch_global_Wirev>
   b461a:	6803      	ldr	r3, [r0, #0]
   b461c:	4629      	mov	r1, r5
   b461e:	689b      	ldr	r3, [r3, #8]
   b4620:	4798      	blx	r3
}
   b4622:	f001 fefb 	bl	b641c <_Z19__fetch_global_Wirev>
   b4626:	6803      	ldr	r3, [r0, #0]
   b4628:	4621      	mov	r1, r4
   b462a:	689b      	ldr	r3, [r3, #8]
   b462c:	4798      	blx	r3
   b462e:	f001 fef5 	bl	b641c <_Z19__fetch_global_Wirev>
   b4632:	b003      	add	sp, #12
   b4634:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   b4638:	f001 bda0 	b.w	b617c <_ZN7TwoWire15endTransmissionEv>

000b463c <_ZN8MAX3010520setPulseAmplitudeRedEh>:
void MAX30105::setPulseAmplitudeRed(uint8_t amplitude) {
   b463c:	460b      	mov	r3, r1
  writeRegister8(MAX30105_ADDRESS, MAX30105_LED1_PULSEAMP, amplitude);
   b463e:	220c      	movs	r2, #12
   b4640:	2157      	movs	r1, #87	; 0x57
   b4642:	f7ff bfdf 	b.w	b4604 <_ZN8MAX3010514writeRegister8Ehhh>

000b4646 <_ZN8MAX3010519setPulseAmplitudeIREh>:
void MAX30105::setPulseAmplitudeIR(uint8_t amplitude) {
   b4646:	460b      	mov	r3, r1
  writeRegister8(MAX30105_ADDRESS, MAX30105_LED2_PULSEAMP, amplitude);
   b4648:	220d      	movs	r2, #13
   b464a:	2157      	movs	r1, #87	; 0x57
   b464c:	f7ff bfda 	b.w	b4604 <_ZN8MAX3010514writeRegister8Ehhh>

000b4650 <_ZN8MAX3010522setPulseAmplitudeGreenEh>:
void MAX30105::setPulseAmplitudeGreen(uint8_t amplitude) {
   b4650:	460b      	mov	r3, r1
  writeRegister8(MAX30105_ADDRESS, MAX30105_LED3_PULSEAMP, amplitude);
   b4652:	220e      	movs	r2, #14
   b4654:	2157      	movs	r1, #87	; 0x57
   b4656:	f7ff bfd5 	b.w	b4604 <_ZN8MAX3010514writeRegister8Ehhh>

000b465a <_ZN8MAX3010526setPulseAmplitudeProximityEh>:
void MAX30105::setPulseAmplitudeProximity(uint8_t amplitude) {
   b465a:	460b      	mov	r3, r1
  writeRegister8(MAX30105_ADDRESS, MAX30105_LED_PROX_AMP, amplitude);
   b465c:	2210      	movs	r2, #16
   b465e:	2157      	movs	r1, #87	; 0x57
   b4660:	f7ff bfd0 	b.w	b4604 <_ZN8MAX3010514writeRegister8Ehhh>

000b4664 <_ZN8MAX301059clearFIFOEv>:
void MAX30105::clearFIFO(void) {
   b4664:	b510      	push	{r4, lr}
  writeRegister8(MAX30105_ADDRESS, MAX30105_FIFOWRITEPTR, 0);
   b4666:	2300      	movs	r3, #0
void MAX30105::clearFIFO(void) {
   b4668:	4604      	mov	r4, r0
  writeRegister8(MAX30105_ADDRESS, MAX30105_FIFOWRITEPTR, 0);
   b466a:	2204      	movs	r2, #4
   b466c:	2157      	movs	r1, #87	; 0x57
   b466e:	f7ff ffc9 	bl	b4604 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(MAX30105_ADDRESS, MAX30105_FIFOOVERFLOW, 0);
   b4672:	4620      	mov	r0, r4
   b4674:	2300      	movs	r3, #0
   b4676:	2205      	movs	r2, #5
   b4678:	2157      	movs	r1, #87	; 0x57
   b467a:	f7ff ffc3 	bl	b4604 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(MAX30105_ADDRESS, MAX30105_FIFOREADPTR, 0);
   b467e:	4620      	mov	r0, r4
   b4680:	2300      	movs	r3, #0
}
   b4682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeRegister8(MAX30105_ADDRESS, MAX30105_FIFOREADPTR, 0);
   b4686:	2206      	movs	r2, #6
   b4688:	2157      	movs	r1, #87	; 0x57
   b468a:	f7ff bfbb 	b.w	b4604 <_ZN8MAX3010514writeRegister8Ehhh>

000b468e <_ZN8MAX301057bitMaskEhhh>:
{
   b468e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4692:	460c      	mov	r4, r1
   b4694:	4617      	mov	r7, r2
  uint8_t originalContents = readRegister8(MAX30105_ADDRESS, reg);
   b4696:	460a      	mov	r2, r1
   b4698:	2157      	movs	r1, #87	; 0x57
{
   b469a:	4605      	mov	r5, r0
   b469c:	461e      	mov	r6, r3
  uint8_t originalContents = readRegister8(MAX30105_ADDRESS, reg);
   b469e:	f7ff fe89 	bl	b43b4 <_ZN8MAX3010513readRegister8Ehh>
  originalContents = originalContents & mask;
   b46a2:	4038      	ands	r0, r7
  writeRegister8(MAX30105_ADDRESS, reg, originalContents | thing);
   b46a4:	ea46 0300 	orr.w	r3, r6, r0
   b46a8:	4622      	mov	r2, r4
   b46aa:	4628      	mov	r0, r5
   b46ac:	2157      	movs	r1, #87	; 0x57
}
   b46ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  writeRegister8(MAX30105_ADDRESS, reg, originalContents | thing);
   b46b2:	f7ff bfa7 	b.w	b4604 <_ZN8MAX3010514writeRegister8Ehhh>

000b46b6 <_ZN8MAX301059softResetEv>:
void MAX30105::softReset(void) {
   b46b6:	b538      	push	{r3, r4, r5, lr}
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
   b46b8:	22bf      	movs	r2, #191	; 0xbf
   b46ba:	2340      	movs	r3, #64	; 0x40
   b46bc:	2109      	movs	r1, #9
void MAX30105::softReset(void) {
   b46be:	4605      	mov	r5, r0
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
   b46c0:	f7ff ffe5 	bl	b468e <_ZN8MAX301057bitMaskEhhh>
   b46c4:	f000 faf6 	bl	b4cb4 <HAL_Timer_Get_Milli_Seconds>
   b46c8:	4604      	mov	r4, r0
   b46ca:	f000 faf3 	bl	b4cb4 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < 100)
   b46ce:	1b00      	subs	r0, r0, r4
   b46d0:	2863      	cmp	r0, #99	; 0x63
   b46d2:	d80a      	bhi.n	b46ea <_ZN8MAX301059softResetEv+0x34>
    uint8_t response = readRegister8(MAX30105_ADDRESS, MAX30105_MODECONFIG);
   b46d4:	2209      	movs	r2, #9
   b46d6:	2157      	movs	r1, #87	; 0x57
   b46d8:	4628      	mov	r0, r5
   b46da:	f7ff fe6b 	bl	b43b4 <_ZN8MAX3010513readRegister8Ehh>
    if ((response & MAX30105_RESET) == 0) break; //We're done!
   b46de:	0643      	lsls	r3, r0, #25
   b46e0:	d503      	bpl.n	b46ea <_ZN8MAX301059softResetEv+0x34>
    delay(1); //Let's not over burden the I2C bus
   b46e2:	2001      	movs	r0, #1
   b46e4:	f001 f804 	bl	b56f0 <delay>
  while (millis() - startTime < 100)
   b46e8:	e7ef      	b.n	b46ca <_ZN8MAX301059softResetEv+0x14>
}
   b46ea:	bd38      	pop	{r3, r4, r5, pc}

000b46ec <_ZN8MAX3010510setLEDModeEh>:
void MAX30105::setLEDMode(uint8_t mode) {
   b46ec:	460b      	mov	r3, r1
  bitMask(MAX30105_MODECONFIG, MAX30105_MODE_MASK, mode);
   b46ee:	22f8      	movs	r2, #248	; 0xf8
   b46f0:	2109      	movs	r1, #9
   b46f2:	f7ff bfcc 	b.w	b468e <_ZN8MAX301057bitMaskEhhh>

000b46f6 <_ZN8MAX3010511setADCRangeEh>:
void MAX30105::setADCRange(uint8_t adcRange) {
   b46f6:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_ADCRANGE_MASK, adcRange);
   b46f8:	229f      	movs	r2, #159	; 0x9f
   b46fa:	210a      	movs	r1, #10
   b46fc:	f7ff bfc7 	b.w	b468e <_ZN8MAX301057bitMaskEhhh>

000b4700 <_ZN8MAX3010513setSampleRateEh>:
void MAX30105::setSampleRate(uint8_t sampleRate) {
   b4700:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_SAMPLERATE_MASK, sampleRate);
   b4702:	22e3      	movs	r2, #227	; 0xe3
   b4704:	210a      	movs	r1, #10
   b4706:	f7ff bfc2 	b.w	b468e <_ZN8MAX301057bitMaskEhhh>

000b470a <_ZN8MAX3010513setPulseWidthEh>:
void MAX30105::setPulseWidth(uint8_t pulseWidth) {
   b470a:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_PULSEWIDTH_MASK, pulseWidth);
   b470c:	22fc      	movs	r2, #252	; 0xfc
   b470e:	210a      	movs	r1, #10
   b4710:	f7ff bfbd 	b.w	b468e <_ZN8MAX301057bitMaskEhhh>

000b4714 <_ZN8MAX3010510enableSlotEhh>:
  switch (slotNumber) {
   b4714:	3901      	subs	r1, #1
void MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {
   b4716:	4613      	mov	r3, r2
   b4718:	2903      	cmp	r1, #3
   b471a:	d814      	bhi.n	b4746 <_ZN8MAX3010510enableSlotEhh+0x32>
   b471c:	e8df f001 	tbb	[pc, r1]
   b4720:	0e0b0602 	.word	0x0e0b0602
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
   b4724:	22f8      	movs	r2, #248	; 0xf8
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   b4726:	2111      	movs	r1, #17
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
   b4728:	f7ff bfb1 	b.w	b468e <_ZN8MAX301057bitMaskEhhh>
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   b472c:	011b      	lsls	r3, r3, #4
   b472e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   b4732:	228f      	movs	r2, #143	; 0x8f
   b4734:	e7f7      	b.n	b4726 <_ZN8MAX3010510enableSlotEhh+0x12>
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT3_MASK, device);
   b4736:	22f8      	movs	r2, #248	; 0xf8
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
   b4738:	2112      	movs	r1, #18
   b473a:	e7f5      	b.n	b4728 <_ZN8MAX3010510enableSlotEhh+0x14>
   b473c:	011b      	lsls	r3, r3, #4
   b473e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   b4742:	228f      	movs	r2, #143	; 0x8f
   b4744:	e7f8      	b.n	b4738 <_ZN8MAX3010510enableSlotEhh+0x24>
}
   b4746:	4770      	bx	lr

000b4748 <_ZN8MAX3010514setFIFOAverageEh>:
void MAX30105::setFIFOAverage(uint8_t numberOfSamples) {
   b4748:	460b      	mov	r3, r1
  bitMask(MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);
   b474a:	221f      	movs	r2, #31
   b474c:	2108      	movs	r1, #8
   b474e:	f7ff bf9e 	b.w	b468e <_ZN8MAX301057bitMaskEhhh>

000b4752 <_ZN8MAX3010518enableFIFORolloverEv>:
  bitMask(MAX30105_FIFOCONFIG, MAX30105_ROLLOVER_MASK, MAX30105_ROLLOVER_ENABLE);
   b4752:	2310      	movs	r3, #16
   b4754:	22ef      	movs	r2, #239	; 0xef
   b4756:	2108      	movs	r1, #8
   b4758:	f7ff bf99 	b.w	b468e <_ZN8MAX301057bitMaskEhhh>

000b475c <_ZN8MAX301055setupEhhhiii>:
void MAX30105::setup(byte powerLevel, byte sampleAverage, byte ledMode, int sampleRate, int pulseWidth, int adcRange) {
   b475c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4760:	4615      	mov	r5, r2
   b4762:	e9dd 7908 	ldrd	r7, r9, [sp, #32]
   b4766:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   b476a:	4604      	mov	r4, r0
   b476c:	4688      	mov	r8, r1
   b476e:	461e      	mov	r6, r3
  softReset(); //Reset all configuration, threshold, and data registers to POR values
   b4770:	f7ff ffa1 	bl	b46b6 <_ZN8MAX301059softResetEv>
  if (sampleAverage == 1) setFIFOAverage(MAX30105_SAMPLEAVG_1); //No averaging per FIFO record
   b4774:	2d01      	cmp	r5, #1
   b4776:	d149      	bne.n	b480c <_ZN8MAX301055setupEhhhiii+0xb0>
   b4778:	2100      	movs	r1, #0
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
   b477a:	4620      	mov	r0, r4
   b477c:	f7ff ffe4 	bl	b4748 <_ZN8MAX3010514setFIFOAverageEh>
  enableFIFORollover(); //Allow FIFO to wrap/roll over
   b4780:	4620      	mov	r0, r4
   b4782:	f7ff ffe6 	bl	b4752 <_ZN8MAX3010518enableFIFORolloverEv>
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
   b4786:	2e03      	cmp	r6, #3
   b4788:	d154      	bne.n	b4834 <_ZN8MAX301055setupEhhhiii+0xd8>
   b478a:	2107      	movs	r1, #7
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
   b478c:	4620      	mov	r0, r4
   b478e:	f7ff ffad 	bl	b46ec <_ZN8MAX3010510setLEDModeEh>
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
   b4792:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
   b4796:	7166      	strb	r6, [r4, #5]
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
   b4798:	da51      	bge.n	b483e <_ZN8MAX301055setupEhhhiii+0xe2>
   b479a:	2100      	movs	r1, #0
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
   b479c:	4620      	mov	r0, r4
   b479e:	f7ff ffaa 	bl	b46f6 <_ZN8MAX3010511setADCRangeEh>
  if (sampleRate < 100) setSampleRate(MAX30105_SAMPLERATE_50); //Take 50 samples per second
   b47a2:	2f63      	cmp	r7, #99	; 0x63
   b47a4:	dc58      	bgt.n	b4858 <_ZN8MAX301055setupEhhhiii+0xfc>
   b47a6:	2100      	movs	r1, #0
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
   b47a8:	4620      	mov	r0, r4
   b47aa:	f7ff ffa9 	bl	b4700 <_ZN8MAX3010513setSampleRateEh>
  if (pulseWidth < 118) setPulseWidth(MAX30105_PULSEWIDTH_69); //Page 26, Gets us 15 bit resolution
   b47ae:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
   b47b2:	dc71      	bgt.n	b4898 <_ZN8MAX301055setupEhhhiii+0x13c>
   b47b4:	2100      	movs	r1, #0
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
   b47b6:	4620      	mov	r0, r4
   b47b8:	f7ff ffa7 	bl	b470a <_ZN8MAX3010513setPulseWidthEh>
  setPulseAmplitudeRed(powerLevel);
   b47bc:	4641      	mov	r1, r8
   b47be:	4620      	mov	r0, r4
   b47c0:	f7ff ff3c 	bl	b463c <_ZN8MAX3010520setPulseAmplitudeRedEh>
  setPulseAmplitudeIR(powerLevel);
   b47c4:	4641      	mov	r1, r8
   b47c6:	4620      	mov	r0, r4
   b47c8:	f7ff ff3d 	bl	b4646 <_ZN8MAX3010519setPulseAmplitudeIREh>
  setPulseAmplitudeGreen(powerLevel);
   b47cc:	4641      	mov	r1, r8
   b47ce:	4620      	mov	r0, r4
   b47d0:	f7ff ff3e 	bl	b4650 <_ZN8MAX3010522setPulseAmplitudeGreenEh>
  setPulseAmplitudeProximity(powerLevel);
   b47d4:	4641      	mov	r1, r8
   b47d6:	4620      	mov	r0, r4
   b47d8:	f7ff ff3f 	bl	b465a <_ZN8MAX3010526setPulseAmplitudeProximityEh>
  enableSlot(1, SLOT_RED_LED);
   b47dc:	2201      	movs	r2, #1
   b47de:	4611      	mov	r1, r2
   b47e0:	4620      	mov	r0, r4
   b47e2:	f7ff ff97 	bl	b4714 <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
   b47e6:	2e01      	cmp	r6, #1
   b47e8:	d90b      	bls.n	b4802 <_ZN8MAX301055setupEhhhiii+0xa6>
   b47ea:	2202      	movs	r2, #2
   b47ec:	4611      	mov	r1, r2
   b47ee:	4620      	mov	r0, r4
   b47f0:	f7ff ff90 	bl	b4714 <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 2) enableSlot(3, SLOT_GREEN_LED);
   b47f4:	2e02      	cmp	r6, #2
   b47f6:	d004      	beq.n	b4802 <_ZN8MAX301055setupEhhhiii+0xa6>
   b47f8:	2203      	movs	r2, #3
   b47fa:	4611      	mov	r1, r2
   b47fc:	4620      	mov	r0, r4
   b47fe:	f7ff ff89 	bl	b4714 <_ZN8MAX3010510enableSlotEhh>
  clearFIFO(); //Reset the FIFO before we begin checking the sensor
   b4802:	4620      	mov	r0, r4
}
   b4804:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  clearFIFO(); //Reset the FIFO before we begin checking the sensor
   b4808:	f7ff bf2c 	b.w	b4664 <_ZN8MAX301059clearFIFOEv>
  else if (sampleAverage == 2) setFIFOAverage(MAX30105_SAMPLEAVG_2);
   b480c:	2d02      	cmp	r5, #2
   b480e:	d101      	bne.n	b4814 <_ZN8MAX301055setupEhhhiii+0xb8>
   b4810:	2120      	movs	r1, #32
   b4812:	e7b2      	b.n	b477a <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 4) setFIFOAverage(MAX30105_SAMPLEAVG_4);
   b4814:	2d04      	cmp	r5, #4
   b4816:	d101      	bne.n	b481c <_ZN8MAX301055setupEhhhiii+0xc0>
   b4818:	2140      	movs	r1, #64	; 0x40
   b481a:	e7ae      	b.n	b477a <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 8) setFIFOAverage(MAX30105_SAMPLEAVG_8);
   b481c:	2d08      	cmp	r5, #8
   b481e:	d101      	bne.n	b4824 <_ZN8MAX301055setupEhhhiii+0xc8>
   b4820:	2160      	movs	r1, #96	; 0x60
   b4822:	e7aa      	b.n	b477a <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 16) setFIFOAverage(MAX30105_SAMPLEAVG_16);
   b4824:	2d10      	cmp	r5, #16
   b4826:	d101      	bne.n	b482c <_ZN8MAX301055setupEhhhiii+0xd0>
   b4828:	2180      	movs	r1, #128	; 0x80
   b482a:	e7a6      	b.n	b477a <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
   b482c:	2d20      	cmp	r5, #32
   b482e:	d1f3      	bne.n	b4818 <_ZN8MAX301055setupEhhhiii+0xbc>
   b4830:	21a0      	movs	r1, #160	; 0xa0
   b4832:	e7a2      	b.n	b477a <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
   b4834:	2e02      	cmp	r6, #2
   b4836:	bf0c      	ite	eq
   b4838:	2103      	moveq	r1, #3
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
   b483a:	2102      	movne	r1, #2
   b483c:	e7a6      	b.n	b478c <_ZN8MAX301055setupEhhhiii+0x30>
  else if(adcRange < 8192) setADCRange(MAX30105_ADCRANGE_4096); //15.63pA per LSB
   b483e:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
   b4842:	da01      	bge.n	b4848 <_ZN8MAX301055setupEhhhiii+0xec>
   b4844:	2120      	movs	r1, #32
   b4846:	e7a9      	b.n	b479c <_ZN8MAX301055setupEhhhiii+0x40>
  else if(adcRange < 16384) setADCRange(MAX30105_ADCRANGE_8192); //31.25pA per LSB
   b4848:	f5ba 4f80 	cmp.w	sl, #16384	; 0x4000
   b484c:	da01      	bge.n	b4852 <_ZN8MAX301055setupEhhhiii+0xf6>
   b484e:	2140      	movs	r1, #64	; 0x40
   b4850:	e7a4      	b.n	b479c <_ZN8MAX301055setupEhhhiii+0x40>
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
   b4852:	d1a2      	bne.n	b479a <_ZN8MAX301055setupEhhhiii+0x3e>
   b4854:	2160      	movs	r1, #96	; 0x60
   b4856:	e7a1      	b.n	b479c <_ZN8MAX301055setupEhhhiii+0x40>
  else if (sampleRate < 200) setSampleRate(MAX30105_SAMPLERATE_100);
   b4858:	2fc7      	cmp	r7, #199	; 0xc7
   b485a:	dc01      	bgt.n	b4860 <_ZN8MAX301055setupEhhhiii+0x104>
   b485c:	2104      	movs	r1, #4
   b485e:	e7a3      	b.n	b47a8 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 400) setSampleRate(MAX30105_SAMPLERATE_200);
   b4860:	f5b7 7fc8 	cmp.w	r7, #400	; 0x190
   b4864:	da01      	bge.n	b486a <_ZN8MAX301055setupEhhhiii+0x10e>
   b4866:	2108      	movs	r1, #8
   b4868:	e79e      	b.n	b47a8 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 800) setSampleRate(MAX30105_SAMPLERATE_400);
   b486a:	f5b7 7f48 	cmp.w	r7, #800	; 0x320
   b486e:	da01      	bge.n	b4874 <_ZN8MAX301055setupEhhhiii+0x118>
   b4870:	210c      	movs	r1, #12
   b4872:	e799      	b.n	b47a8 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 1000) setSampleRate(MAX30105_SAMPLERATE_800);
   b4874:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
   b4878:	da01      	bge.n	b487e <_ZN8MAX301055setupEhhhiii+0x122>
   b487a:	2110      	movs	r1, #16
   b487c:	e794      	b.n	b47a8 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 1600) setSampleRate(MAX30105_SAMPLERATE_1000);
   b487e:	f5b7 6fc8 	cmp.w	r7, #1600	; 0x640
   b4882:	da01      	bge.n	b4888 <_ZN8MAX301055setupEhhhiii+0x12c>
   b4884:	2114      	movs	r1, #20
   b4886:	e78f      	b.n	b47a8 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 3200) setSampleRate(MAX30105_SAMPLERATE_1600);
   b4888:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
   b488c:	da01      	bge.n	b4892 <_ZN8MAX301055setupEhhhiii+0x136>
   b488e:	2118      	movs	r1, #24
   b4890:	e78a      	b.n	b47a8 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
   b4892:	d188      	bne.n	b47a6 <_ZN8MAX301055setupEhhhiii+0x4a>
   b4894:	211c      	movs	r1, #28
   b4896:	e787      	b.n	b47a8 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (pulseWidth < 215) setPulseWidth(MAX30105_PULSEWIDTH_118); //16 bit resolution
   b4898:	f1b9 0fd6 	cmp.w	r9, #214	; 0xd6
   b489c:	dc01      	bgt.n	b48a2 <_ZN8MAX301055setupEhhhiii+0x146>
   b489e:	2101      	movs	r1, #1
   b48a0:	e789      	b.n	b47b6 <_ZN8MAX301055setupEhhhiii+0x5a>
  else if (pulseWidth < 411) setPulseWidth(MAX30105_PULSEWIDTH_215); //17 bit resolution
   b48a2:	f5b9 7fcd 	cmp.w	r9, #410	; 0x19a
   b48a6:	dc01      	bgt.n	b48ac <_ZN8MAX301055setupEhhhiii+0x150>
   b48a8:	2102      	movs	r1, #2
   b48aa:	e784      	b.n	b47b6 <_ZN8MAX301055setupEhhhiii+0x5a>
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
   b48ac:	f240 139b 	movw	r3, #411	; 0x19b
   b48b0:	4599      	cmp	r9, r3
   b48b2:	f47f af7f 	bne.w	b47b4 <_ZN8MAX301055setupEhhhiii+0x58>
   b48b6:	2103      	movs	r1, #3
   b48b8:	e77d      	b.n	b47b6 <_ZN8MAX301055setupEhhhiii+0x5a>

000b48ba <_Z28maxim_peaks_above_min_heightPlS_S_ll>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
   b48ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int32_t i = 1, n_width;
  *n_npks = 0;
   b48be:	2400      	movs	r4, #0
   b48c0:	600c      	str	r4, [r1, #0]
  
  while (i < n_size-1){
   b48c2:	f103 38ff 	add.w	r8, r3, #4294967295
  int32_t i = 1, n_width;
   b48c6:	2401      	movs	r4, #1
  while (i < n_size-1){
   b48c8:	45a0      	cmp	r8, r4
   b48ca:	dd27      	ble.n	b491c <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x62>
    if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){      // find left edge of potential peaks
   b48cc:	9d06      	ldr	r5, [sp, #24]
   b48ce:	f852 c024 	ldr.w	ip, [r2, r4, lsl #2]
   b48d2:	45ac      	cmp	ip, r5
   b48d4:	ea4f 0684 	mov.w	r6, r4, lsl #2
   b48d8:	f104 0501 	add.w	r5, r4, #1
   b48dc:	dd1c      	ble.n	b4918 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
   b48de:	4416      	add	r6, r2
   b48e0:	f856 6c04 	ldr.w	r6, [r6, #-4]
   b48e4:	45b4      	cmp	ip, r6
   b48e6:	dd17      	ble.n	b4918 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
   b48e8:	462e      	mov	r6, r5
      n_width = 1;
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
   b48ea:	429e      	cmp	r6, r3
   b48ec:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
   b48f0:	eba6 0e04 	sub.w	lr, r6, r4
   b48f4:	4635      	mov	r5, r6
   b48f6:	d003      	beq.n	b4900 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x46>
   b48f8:	45bc      	cmp	ip, r7
   b48fa:	f106 0601 	add.w	r6, r6, #1
   b48fe:	d0f4      	beq.n	b48ea <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x30>
        n_width++;
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
   b4900:	45bc      	cmp	ip, r7
   b4902:	dd09      	ble.n	b4918 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
   b4904:	680e      	ldr	r6, [r1, #0]
   b4906:	2e0e      	cmp	r6, #14
   b4908:	dc06      	bgt.n	b4918 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
        pn_locs[(*n_npks)++] = i;    
   b490a:	1c75      	adds	r5, r6, #1
   b490c:	600d      	str	r5, [r1, #0]
        // for flat peaks, peak location is left edge
        i += n_width+1;
   b490e:	f10e 0501 	add.w	r5, lr, #1
        pn_locs[(*n_npks)++] = i;    
   b4912:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
        i += n_width+1;
   b4916:	4425      	add	r5, r4
{
   b4918:	462c      	mov	r4, r5
   b491a:	e7d5      	b.n	b48c8 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0xe>
        i += n_width;
    }
    else
      i++;
  }
}
   b491c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4920 <_Z17maxim_sort_ascendPll>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
   b4920:	b5f0      	push	{r4, r5, r6, r7, lr}
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
   b4922:	2301      	movs	r3, #1
   b4924:	4604      	mov	r4, r0
   b4926:	428b      	cmp	r3, r1
   b4928:	da0f      	bge.n	b494a <_Z17maxim_sort_ascendPll+0x2a>
    n_temp = pn_x[i];
   b492a:	f854 6f04 	ldr.w	r6, [r4, #4]!
   b492e:	461a      	mov	r2, r3
   b4930:	4625      	mov	r5, r4
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
   b4932:	f855 7c04 	ldr.w	r7, [r5, #-4]
   b4936:	42b7      	cmp	r7, r6
   b4938:	dd03      	ble.n	b4942 <_Z17maxim_sort_ascendPll+0x22>
   b493a:	3a01      	subs	r2, #1
        pn_x[j] = pn_x[j-1];
   b493c:	f845 7904 	str.w	r7, [r5], #-4
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
   b4940:	d1f7      	bne.n	b4932 <_Z17maxim_sort_ascendPll+0x12>
    pn_x[j] = n_temp;
   b4942:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
  for (i = 1; i < n_size; i++) {
   b4946:	3301      	adds	r3, #1
   b4948:	e7ed      	b.n	b4926 <_Z17maxim_sort_ascendPll+0x6>
  }
}
   b494a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b494c <_Z26maxim_sort_indices_descendPlS_l>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/ 
{
   b494c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
   b4950:	2301      	movs	r3, #1
{
   b4952:	4690      	mov	r8, r2
   b4954:	460d      	mov	r5, r1
  for (i = 1; i < n_size; i++) {
   b4956:	4543      	cmp	r3, r8
   b4958:	da16      	bge.n	b4988 <_Z26maxim_sort_indices_descendPlS_l+0x3c>
    n_temp = pn_indx[i];
   b495a:	f855 6f04 	ldr.w	r6, [r5, #4]!
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
   b495e:	461c      	mov	r4, r3
   b4960:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   b4964:	46ac      	mov	ip, r5
   b4966:	f8d9 2000 	ldr.w	r2, [r9]
   b496a:	f85c 7c04 	ldr.w	r7, [ip, #-4]
   b496e:	4696      	mov	lr, r2
   b4970:	f850 2027 	ldr.w	r2, [r0, r7, lsl #2]
   b4974:	4596      	cmp	lr, r2
   b4976:	dd03      	ble.n	b4980 <_Z26maxim_sort_indices_descendPlS_l+0x34>
   b4978:	3c01      	subs	r4, #1
      pn_indx[j] = pn_indx[j-1];
   b497a:	f84c 7904 	str.w	r7, [ip], #-4
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
   b497e:	d1f2      	bne.n	b4966 <_Z26maxim_sort_indices_descendPlS_l+0x1a>
    pn_indx[j] = n_temp;
   b4980:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
  for (i = 1; i < n_size; i++) {
   b4984:	3301      	adds	r3, #1
   b4986:	e7e6      	b.n	b4956 <_Z26maxim_sort_indices_descendPlS_l+0xa>
  }
}
   b4988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b498c <_Z24maxim_remove_close_peaksPlS_S_l>:
{
   b498c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4990:	4604      	mov	r4, r0
   b4992:	461f      	mov	r7, r3
   b4994:	4610      	mov	r0, r2
   b4996:	460d      	mov	r5, r1
  maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
   b4998:	680a      	ldr	r2, [r1, #0]
   b499a:	4621      	mov	r1, r4
   b499c:	f7ff ffd6 	bl	b494c <_Z26maxim_sort_indices_descendPlS_l>
   b49a0:	f04f 32ff 	mov.w	r2, #4294967295
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
   b49a4:	f1c7 0e00 	rsb	lr, r7, #0
  for ( i = -1; i < *pn_npks; i++ ){
   b49a8:	6829      	ldr	r1, [r5, #0]
   b49aa:	4291      	cmp	r1, r2
   b49ac:	dd1d      	ble.n	b49ea <_Z24maxim_remove_close_peaksPlS_S_l+0x5e>
    *pn_npks = i+1;
   b49ae:	1c53      	adds	r3, r2, #1
   b49b0:	461e      	mov	r6, r3
   b49b2:	602b      	str	r3, [r5, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
   b49b4:	42b1      	cmp	r1, r6
   b49b6:	d016      	beq.n	b49e6 <_Z24maxim_remove_close_peaksPlS_S_l+0x5a>
      n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
   b49b8:	1c50      	adds	r0, r2, #1
   b49ba:	bf18      	it	ne
   b49bc:	f854 0022 	ldrne.w	r0, [r4, r2, lsl #2]
   b49c0:	f854 c026 	ldr.w	ip, [r4, r6, lsl #2]
   b49c4:	bf08      	it	eq
   b49c6:	4610      	moveq	r0, r2
   b49c8:	ebac 0000 	sub.w	r0, ip, r0
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
   b49cc:	42b8      	cmp	r0, r7
   b49ce:	dc01      	bgt.n	b49d4 <_Z24maxim_remove_close_peaksPlS_S_l+0x48>
   b49d0:	4586      	cmp	lr, r0
   b49d2:	dd06      	ble.n	b49e2 <_Z24maxim_remove_close_peaksPlS_S_l+0x56>
        pn_locs[(*pn_npks)++] = pn_locs[j];
   b49d4:	6828      	ldr	r0, [r5, #0]
   b49d6:	f100 0801 	add.w	r8, r0, #1
   b49da:	f8c5 8000 	str.w	r8, [r5]
   b49de:	f844 c020 	str.w	ip, [r4, r0, lsl #2]
    for ( j = i+1; j < n_old_npks; j++ ){
   b49e2:	3601      	adds	r6, #1
   b49e4:	e7e6      	b.n	b49b4 <_Z24maxim_remove_close_peaksPlS_S_l+0x28>
   b49e6:	461a      	mov	r2, r3
   b49e8:	e7de      	b.n	b49a8 <_Z24maxim_remove_close_peaksPlS_S_l+0x1c>
  maxim_sort_ascend( pn_locs, *pn_npks );
   b49ea:	4620      	mov	r0, r4
}
   b49ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  maxim_sort_ascend( pn_locs, *pn_npks );
   b49f0:	f7ff bf96 	b.w	b4920 <_Z17maxim_sort_ascendPll>

000b49f4 <_Z16maxim_find_peaksPlS_S_llll>:
{
   b49f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
   b49f6:	9d06      	ldr	r5, [sp, #24]
   b49f8:	9500      	str	r5, [sp, #0]
   b49fa:	f7ff ff5e 	bl	b48ba <_Z28maxim_peaks_above_min_heightPlS_S_ll>
{
   b49fe:	460c      	mov	r4, r1
  maxim_remove_close_peaks( pn_locs, n_npks, pn_x, n_min_distance );
   b4a00:	9b07      	ldr	r3, [sp, #28]
   b4a02:	f7ff ffc3 	bl	b498c <_Z24maxim_remove_close_peaksPlS_S_l>
  *n_npks = min( *n_npks, n_max_num );
   b4a06:	6822      	ldr	r2, [r4, #0]
   b4a08:	9b08      	ldr	r3, [sp, #32]
   b4a0a:	429a      	cmp	r2, r3
   b4a0c:	bfd4      	ite	le
   b4a0e:	6022      	strle	r2, [r4, #0]
   b4a10:	6023      	strgt	r3, [r4, #0]
}
   b4a12:	b003      	add	sp, #12
   b4a14:	bd30      	pop	{r4, r5, pc}
	...

000b4a18 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_>:
{
   b4a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4a1c:	b09d      	sub	sp, #116	; 0x74
   b4a1e:	e9dd 9827 	ldrd	r9, r8, [sp, #156]	; 0x9c
   b4a22:	4616      	mov	r6, r2
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
   b4a24:	2200      	movs	r2, #0
{
   b4a26:	469b      	mov	fp, r3
   b4a28:	4605      	mov	r5, r0
   b4a2a:	460c      	mov	r4, r1
  un_ir_mean =0; 
   b4a2c:	4613      	mov	r3, r2
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
   b4a2e:	42a2      	cmp	r2, r4
   b4a30:	da04      	bge.n	b4a3c <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x24>
   b4a32:	f835 1012 	ldrh.w	r1, [r5, r2, lsl #1]
   b4a36:	3201      	adds	r2, #1
   b4a38:	440b      	add	r3, r1
   b4a3a:	e7f8      	b.n	b4a2e <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x16>
  un_ir_mean =un_ir_mean/n_ir_buffer_length ;
   b4a3c:	4f8d      	ldr	r7, [pc, #564]	; (b4c74 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x25c>)
   b4a3e:	fbb3 f3f4 	udiv	r3, r3, r4
   b4a42:	4638      	mov	r0, r7
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
   b4a44:	2200      	movs	r2, #0
   b4a46:	42a2      	cmp	r2, r4
   b4a48:	da06      	bge.n	b4a58 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x40>
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ; 
   b4a4a:	f835 1012 	ldrh.w	r1, [r5, r2, lsl #1]
   b4a4e:	1a59      	subs	r1, r3, r1
   b4a50:	f840 1b04 	str.w	r1, [r0], #4
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
   b4a54:	3201      	adds	r2, #1
   b4a56:	e7f6      	b.n	b4a46 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x2e>
   b4a58:	4a86      	ldr	r2, [pc, #536]	; (b4c74 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x25c>)
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
   b4a5a:	2100      	movs	r1, #0
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
   b4a5c:	6813      	ldr	r3, [r2, #0]
   b4a5e:	f852 0f04 	ldr.w	r0, [r2, #4]!
   b4a62:	4403      	add	r3, r0
   b4a64:	6850      	ldr	r0, [r2, #4]
   b4a66:	4403      	add	r3, r0
   b4a68:	6890      	ldr	r0, [r2, #8]
   b4a6a:	181b      	adds	r3, r3, r0
   b4a6c:	bf48      	it	mi
   b4a6e:	3303      	addmi	r3, #3
   b4a70:	3101      	adds	r1, #1
   b4a72:	109b      	asrs	r3, r3, #2
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
   b4a74:	2960      	cmp	r1, #96	; 0x60
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
   b4a76:	f842 3c04 	str.w	r3, [r2, #-4]
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
   b4a7a:	d1ef      	bne.n	b4a5c <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x44>
  n_th1=0; 
   b4a7c:	2300      	movs	r3, #0
   b4a7e:	4a7d      	ldr	r2, [pc, #500]	; (b4c74 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x25c>)
  for ( k=0 ; k<BUFFER_SIZE ;k++){
   b4a80:	469a      	mov	sl, r3
    n_th1 +=  an_x[k];
   b4a82:	f852 1b04 	ldr.w	r1, [r2], #4
  for ( k=0 ; k<BUFFER_SIZE ;k++){
   b4a86:	f10a 0a01 	add.w	sl, sl, #1
   b4a8a:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
    n_th1 +=  an_x[k];
   b4a8e:	440b      	add	r3, r1
  for ( k=0 ; k<BUFFER_SIZE ;k++){
   b4a90:	d1f7      	bne.n	b4a82 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x6a>
  if( n_th1<30) n_th1=30; // min allowed
   b4a92:	f640 32b7 	movw	r2, #2999	; 0xbb7
   b4a96:	4293      	cmp	r3, r2
   b4a98:	dd4f      	ble.n	b4b3a <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x122>
  n_th1=  n_th1/ ( BUFFER_SIZE);
   b4a9a:	fb93 fafa 	sdiv	sl, r3, sl
   b4a9e:	f1ba 0f3c 	cmp.w	sl, #60	; 0x3c
   b4aa2:	bfa8      	it	ge
   b4aa4:	f04f 0a3c 	movge.w	sl, #60	; 0x3c
  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
   b4aa8:	223c      	movs	r2, #60	; 0x3c
   b4aaa:	2100      	movs	r1, #0
   b4aac:	a80d      	add	r0, sp, #52	; 0x34
   b4aae:	f002 f925 	bl	b6cfc <memset>
  maxim_find_peaks( an_ir_valley_locs, &n_npks, an_x, BUFFER_SIZE, n_th1, 4, 15 );//peak_height, peak_distance, max_num_peaks 
   b4ab2:	2304      	movs	r3, #4
   b4ab4:	220f      	movs	r2, #15
   b4ab6:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b4aba:	f8cd a000 	str.w	sl, [sp]
   b4abe:	4a6d      	ldr	r2, [pc, #436]	; (b4c74 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x25c>)
   b4ac0:	2364      	movs	r3, #100	; 0x64
   b4ac2:	a907      	add	r1, sp, #28
   b4ac4:	a80d      	add	r0, sp, #52	; 0x34
   b4ac6:	f7ff ff95 	bl	b49f4 <_Z16maxim_find_peaksPlS_S_llll>
  if (n_npks>=2){
   b4aca:	9b07      	ldr	r3, [sp, #28]
   b4acc:	2b01      	cmp	r3, #1
   b4ace:	f04f 0200 	mov.w	r2, #0
   b4ad2:	dd35      	ble.n	b4b40 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x128>
   b4ad4:	a90d      	add	r1, sp, #52	; 0x34
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
   b4ad6:	f04f 0c01 	mov.w	ip, #1
   b4ada:	4608      	mov	r0, r1
   b4adc:	f8d1 e004 	ldr.w	lr, [r1, #4]
   b4ae0:	6800      	ldr	r0, [r0, #0]
   b4ae2:	f10c 0c01 	add.w	ip, ip, #1
   b4ae6:	ebae 0000 	sub.w	r0, lr, r0
   b4aea:	4563      	cmp	r3, ip
   b4aec:	f101 0104 	add.w	r1, r1, #4
   b4af0:	4402      	add	r2, r0
   b4af2:	d1f2      	bne.n	b4ada <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0xc2>
    n_peak_interval_sum =n_peak_interval_sum/(n_npks-1);
   b4af4:	1e59      	subs	r1, r3, #1
   b4af6:	fb92 f2f1 	sdiv	r2, r2, r1
    *pn_heart_rate =(int32_t)( (FreqS*60)/ n_peak_interval_sum );
   b4afa:	f240 51dc 	movw	r1, #1500	; 0x5dc
   b4afe:	fb91 f2f2 	sdiv	r2, r1, r2
   b4b02:	f8c9 2000 	str.w	r2, [r9]
    *pch_hr_valid  = 1;
   b4b06:	2201      	movs	r2, #1
   b4b08:	495b      	ldr	r1, [pc, #364]	; (b4c78 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x260>)
   b4b0a:	f888 2000 	strb.w	r2, [r8]
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
   b4b0e:	2200      	movs	r2, #0
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
   b4b10:	42a2      	cmp	r2, r4
   b4b12:	db19      	blt.n	b4b48 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x130>
  for(k=0; k< 5; k++) an_ratio[k]=0;
   b4b14:	2200      	movs	r2, #0
   b4b16:	e9cd 2208 	strd	r2, r2, [sp, #32]
   b4b1a:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
   b4b1e:	ae0d      	add	r6, sp, #52	; 0x34
   b4b20:	920c      	str	r2, [sp, #48]	; 0x30
   b4b22:	4631      	mov	r1, r6
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
   b4b24:	4293      	cmp	r3, r2
   b4b26:	dd1b      	ble.n	b4b60 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x148>
    if (an_ir_valley_locs[k] > BUFFER_SIZE ){
   b4b28:	f851 0b04 	ldr.w	r0, [r1], #4
   b4b2c:	2864      	cmp	r0, #100	; 0x64
   b4b2e:	dd15      	ble.n	b4b5c <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x144>
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
   b4b30:	4b52      	ldr	r3, [pc, #328]	; (b4c7c <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x264>)
   b4b32:	f8cb 3000 	str.w	r3, [fp]
    *pch_spo2_valid  = 0; 
   b4b36:	2300      	movs	r3, #0
   b4b38:	e092      	b.n	b4c60 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x248>
  if( n_th1<30) n_th1=30; // min allowed
   b4b3a:	f04f 0a1e 	mov.w	sl, #30
   b4b3e:	e7b3      	b.n	b4aa8 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x90>
    *pn_heart_rate = -999; // unable to calculate because # of peaks are too small
   b4b40:	494e      	ldr	r1, [pc, #312]	; (b4c7c <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x264>)
   b4b42:	f8c9 1000 	str.w	r1, [r9]
    *pch_hr_valid  = 0;
   b4b46:	e7df      	b.n	b4b08 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0xf0>
      an_x[k] =  pun_ir_buffer[k] ; 
   b4b48:	f835 0012 	ldrh.w	r0, [r5, r2, lsl #1]
   b4b4c:	f847 0b04 	str.w	r0, [r7], #4
      an_y[k] =  pun_red_buffer[k] ; 
   b4b50:	f836 0012 	ldrh.w	r0, [r6, r2, lsl #1]
   b4b54:	f841 0b04 	str.w	r0, [r1], #4
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
   b4b58:	3201      	adds	r2, #1
   b4b5a:	e7d9      	b.n	b4b10 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0xf8>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
   b4b5c:	3201      	adds	r2, #1
   b4b5e:	e7e1      	b.n	b4b24 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x10c>
  int32_t n_x_dc_max_idx = 0; 
   b4b60:	2400      	movs	r4, #0
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
   b4b62:	3b01      	subs	r3, #1
   b4b64:	4f43      	ldr	r7, [pc, #268]	; (b4c74 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x25c>)
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   b4b66:	f8df c110 	ldr.w	ip, [pc, #272]	; b4c78 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x260>
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
   b4b6a:	9404      	str	r4, [sp, #16]
  int32_t n_y_dc_max_idx = 0;
   b4b6c:	4625      	mov	r5, r4
  n_i_ratio_count = 0; 
   b4b6e:	4621      	mov	r1, r4
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
   b4b70:	9305      	str	r3, [sp, #20]
   b4b72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b4b76:	4293      	cmp	r3, r2
   b4b78:	dd56      	ble.n	b4c28 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x210>
    if (an_ir_valley_locs[k+1]-an_ir_valley_locs[k] >3){
   b4b7a:	f8d6 8004 	ldr.w	r8, [r6, #4]
   b4b7e:	f856 0b04 	ldr.w	r0, [r6], #4
   b4b82:	4613      	mov	r3, r2
   b4b84:	eba8 0900 	sub.w	r9, r8, r0
   b4b88:	3301      	adds	r3, #1
   b4b8a:	f1b9 0f03 	cmp.w	r9, #3
   b4b8e:	9304      	str	r3, [sp, #16]
   b4b90:	ddef      	ble.n	b4b72 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x15a>
    n_x_dc_max= -16777216; 
   b4b92:	f04f 4e7f 	mov.w	lr, #4278190080	; 0xff000000
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
   b4b96:	4603      	mov	r3, r0
    n_y_dc_max= -16777216 ; 
   b4b98:	46f2      	mov	sl, lr
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
   b4b9a:	4598      	cmp	r8, r3
   b4b9c:	dd0e      	ble.n	b4bbc <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x1a4>
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
   b4b9e:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
   b4ba2:	4572      	cmp	r2, lr
   b4ba4:	bfc8      	it	gt
   b4ba6:	4696      	movgt	lr, r2
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   b4ba8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
   b4bac:	bfc8      	it	gt
   b4bae:	461c      	movgt	r4, r3
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   b4bb0:	4552      	cmp	r2, sl
   b4bb2:	bfc4      	itt	gt
   b4bb4:	461d      	movgt	r5, r3
   b4bb6:	4692      	movgt	sl, r2
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
   b4bb8:	3301      	adds	r3, #1
   b4bba:	e7ee      	b.n	b4b9a <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x182>
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
   b4bbc:	f857 2020 	ldr.w	r2, [r7, r0, lsl #2]
   b4bc0:	f857 3028 	ldr.w	r3, [r7, r8, lsl #2]
   b4bc4:	1a9b      	subs	r3, r3, r2
   b4bc6:	1a22      	subs	r2, r4, r0
   b4bc8:	4353      	muls	r3, r2
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]); 
   b4bca:	f857 2020 	ldr.w	r2, [r7, r0, lsl #2]
   b4bce:	fb93 f3f9 	sdiv	r3, r3, r9
   b4bd2:	4413      	add	r3, r2
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
   b4bd4:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
   b4bd8:	1ad2      	subs	r2, r2, r3
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
   b4bda:	fb0a f202 	mul.w	r2, sl, r2
   b4bde:	ea4f 1ae2 	mov.w	sl, r2, asr #7
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
   b4be2:	f1ba 0f00 	cmp.w	sl, #0
   b4be6:	ddc4      	ble.n	b4b72 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x15a>
   b4be8:	2904      	cmp	r1, #4
   b4bea:	dcc2      	bgt.n	b4b72 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x15a>
      n_y_ac= (an_y[an_ir_valley_locs[k+1]] - an_y[an_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_ir_valley_locs[k]); //red
   b4bec:	f85c 3020 	ldr.w	r3, [ip, r0, lsl #2]
   b4bf0:	f85c 2028 	ldr.w	r2, [ip, r8, lsl #2]
   b4bf4:	1a28      	subs	r0, r5, r0
   b4bf6:	1ad2      	subs	r2, r2, r3
   b4bf8:	4350      	muls	r0, r2
      n_y_ac=  an_y[an_ir_valley_locs[k]] + n_y_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k])  ; 
   b4bfa:	fb90 f0f9 	sdiv	r0, r0, r9
   b4bfe:	4418      	add	r0, r3
      n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw 
   b4c00:	f85c 3025 	ldr.w	r3, [ip, r5, lsl #2]
   b4c04:	1a1b      	subs	r3, r3, r0
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
   b4c06:	fb0e fe03 	mul.w	lr, lr, r3
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
   b4c0a:	ea5f 1eee 	movs.w	lr, lr, asr #7
   b4c0e:	d0b0      	beq.n	b4b72 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x15a>
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
   b4c10:	ab1c      	add	r3, sp, #112	; 0x70
   b4c12:	eb03 0881 	add.w	r8, r3, r1, lsl #2
   b4c16:	2364      	movs	r3, #100	; 0x64
   b4c18:	fb03 f20e 	mul.w	r2, r3, lr
        n_i_ratio_count++;
   b4c1c:	3101      	adds	r1, #1
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
   b4c1e:	fb92 f2fa 	sdiv	r2, r2, sl
   b4c22:	f848 2c50 	str.w	r2, [r8, #-80]
        n_i_ratio_count++;
   b4c26:	e7a4      	b.n	b4b72 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x15a>
  maxim_sort_ascend(an_ratio, n_i_ratio_count);
   b4c28:	a808      	add	r0, sp, #32
   b4c2a:	f7ff fe79 	bl	b4920 <_Z17maxim_sort_ascendPll>
  n_middle_idx= n_i_ratio_count/2;
   b4c2e:	104a      	asrs	r2, r1, #1
  if (n_middle_idx >1)
   b4c30:	2903      	cmp	r1, #3
   b4c32:	ea4f 0382 	mov.w	r3, r2, lsl #2
   b4c36:	dd18      	ble.n	b4c6a <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x252>
    n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
   b4c38:	a91c      	add	r1, sp, #112	; 0x70
   b4c3a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   b4c3e:	f851 3c54 	ldr.w	r3, [r1, #-84]
   b4c42:	f851 2c50 	ldr.w	r2, [r1, #-80]
   b4c46:	4413      	add	r3, r2
   b4c48:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   b4c4c:	105b      	asrs	r3, r3, #1
  if( n_ratio_average>2 && n_ratio_average <184){
   b4c4e:	1eda      	subs	r2, r3, #3
   b4c50:	2ab4      	cmp	r2, #180	; 0xb4
   b4c52:	f63f af6d 	bhi.w	b4b30 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x118>
    n_spo2_calc= uch_spo2_table[n_ratio_average] ;
   b4c56:	4a0a      	ldr	r2, [pc, #40]	; (b4c80 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x268>)
   b4c58:	5cd3      	ldrb	r3, [r2, r3]
   b4c5a:	f8cb 3000 	str.w	r3, [fp]
    *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
   b4c5e:	2301      	movs	r3, #1
    *pch_spo2_valid  = 0; 
   b4c60:	9a26      	ldr	r2, [sp, #152]	; 0x98
   b4c62:	7013      	strb	r3, [r2, #0]
}
   b4c64:	b01d      	add	sp, #116	; 0x74
   b4c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    n_ratio_average = an_ratio[n_middle_idx ];
   b4c6a:	aa1c      	add	r2, sp, #112	; 0x70
   b4c6c:	4413      	add	r3, r2
   b4c6e:	f853 3c50 	ldr.w	r3, [r3, #-80]
   b4c72:	e7ec      	b.n	b4c4e <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x236>
   b4c74:	2003e368 	.word	0x2003e368
   b4c78:	2003e4f8 	.word	0x2003e4f8
   b4c7c:	fffffc19 	.word	0xfffffc19
   b4c80:	000b6f01 	.word	0x000b6f01

000b4c84 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4c84:	b508      	push	{r3, lr}
   b4c86:	4b02      	ldr	r3, [pc, #8]	; (b4c90 <netdb_freeaddrinfo+0xc>)
   b4c88:	681b      	ldr	r3, [r3, #0]
   b4c8a:	689b      	ldr	r3, [r3, #8]
   b4c8c:	9301      	str	r3, [sp, #4]
   b4c8e:	bd08      	pop	{r3, pc}
   b4c90:	00030268 	.word	0x00030268

000b4c94 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4c94:	b508      	push	{r3, lr}
   b4c96:	4b02      	ldr	r3, [pc, #8]	; (b4ca0 <netdb_getaddrinfo+0xc>)
   b4c98:	681b      	ldr	r3, [r3, #0]
   b4c9a:	68db      	ldr	r3, [r3, #12]
   b4c9c:	9301      	str	r3, [sp, #4]
   b4c9e:	bd08      	pop	{r3, pc}
   b4ca0:	00030268 	.word	0x00030268

000b4ca4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4ca4:	b508      	push	{r3, lr}
   b4ca6:	4b02      	ldr	r3, [pc, #8]	; (b4cb0 <HAL_RNG_GetRandomNumber+0xc>)
   b4ca8:	681b      	ldr	r3, [r3, #0]
   b4caa:	685b      	ldr	r3, [r3, #4]
   b4cac:	9301      	str	r3, [sp, #4]
   b4cae:	bd08      	pop	{r3, pc}
   b4cb0:	00030218 	.word	0x00030218

000b4cb4 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4cb4:	b508      	push	{r3, lr}
   b4cb6:	4b02      	ldr	r3, [pc, #8]	; (b4cc0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4cb8:	681b      	ldr	r3, [r3, #0]
   b4cba:	695b      	ldr	r3, [r3, #20]
   b4cbc:	9301      	str	r3, [sp, #4]
   b4cbe:	bd08      	pop	{r3, pc}
   b4cc0:	00030218 	.word	0x00030218

000b4cc4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b4cc4:	b508      	push	{r3, lr}
   b4cc6:	4b02      	ldr	r3, [pc, #8]	; (b4cd0 <hal_rtc_time_is_valid+0xc>)
   b4cc8:	681b      	ldr	r3, [r3, #0]
   b4cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b4ccc:	9301      	str	r3, [sp, #4]
   b4cce:	bd08      	pop	{r3, pc}
   b4cd0:	00030218 	.word	0x00030218

000b4cd4 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b4cd4:	b508      	push	{r3, lr}
   b4cd6:	4b02      	ldr	r3, [pc, #8]	; (b4ce0 <hal_rtc_get_time+0xc>)
   b4cd8:	681b      	ldr	r3, [r3, #0]
   b4cda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b4cdc:	9301      	str	r3, [sp, #4]
   b4cde:	bd08      	pop	{r3, pc}
   b4ce0:	00030218 	.word	0x00030218

000b4ce4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4ce4:	b508      	push	{r3, lr}
   b4ce6:	4b02      	ldr	r3, [pc, #8]	; (b4cf0 <os_mutex_recursive_create+0xc>)
   b4ce8:	681b      	ldr	r3, [r3, #0]
   b4cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4cec:	9301      	str	r3, [sp, #4]
   b4cee:	bd08      	pop	{r3, pc}
   b4cf0:	00030248 	.word	0x00030248

000b4cf4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4cf4:	b508      	push	{r3, lr}
   b4cf6:	4b02      	ldr	r3, [pc, #8]	; (b4d00 <inet_inet_ntop+0xc>)
   b4cf8:	681b      	ldr	r3, [r3, #0]
   b4cfa:	695b      	ldr	r3, [r3, #20]
   b4cfc:	9301      	str	r3, [sp, #4]
   b4cfe:	bd08      	pop	{r3, pc}
   b4d00:	00030264 	.word	0x00030264

000b4d04 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4d04:	b508      	push	{r3, lr}
   b4d06:	4b02      	ldr	r3, [pc, #8]	; (b4d10 <hal_usart_write+0xc>)
   b4d08:	681b      	ldr	r3, [r3, #0]
   b4d0a:	68db      	ldr	r3, [r3, #12]
   b4d0c:	9301      	str	r3, [sp, #4]
   b4d0e:	bd08      	pop	{r3, pc}
   b4d10:	0003023c 	.word	0x0003023c

000b4d14 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4d14:	b508      	push	{r3, lr}
   b4d16:	4b02      	ldr	r3, [pc, #8]	; (b4d20 <hal_usart_available+0xc>)
   b4d18:	681b      	ldr	r3, [r3, #0]
   b4d1a:	691b      	ldr	r3, [r3, #16]
   b4d1c:	9301      	str	r3, [sp, #4]
   b4d1e:	bd08      	pop	{r3, pc}
   b4d20:	0003023c 	.word	0x0003023c

000b4d24 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4d24:	b508      	push	{r3, lr}
   b4d26:	4b02      	ldr	r3, [pc, #8]	; (b4d30 <hal_usart_read+0xc>)
   b4d28:	681b      	ldr	r3, [r3, #0]
   b4d2a:	695b      	ldr	r3, [r3, #20]
   b4d2c:	9301      	str	r3, [sp, #4]
   b4d2e:	bd08      	pop	{r3, pc}
   b4d30:	0003023c 	.word	0x0003023c

000b4d34 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4d34:	b508      	push	{r3, lr}
   b4d36:	4b02      	ldr	r3, [pc, #8]	; (b4d40 <hal_usart_peek+0xc>)
   b4d38:	681b      	ldr	r3, [r3, #0]
   b4d3a:	699b      	ldr	r3, [r3, #24]
   b4d3c:	9301      	str	r3, [sp, #4]
   b4d3e:	bd08      	pop	{r3, pc}
   b4d40:	0003023c 	.word	0x0003023c

000b4d44 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4d44:	b508      	push	{r3, lr}
   b4d46:	4b02      	ldr	r3, [pc, #8]	; (b4d50 <hal_usart_flush+0xc>)
   b4d48:	681b      	ldr	r3, [r3, #0]
   b4d4a:	69db      	ldr	r3, [r3, #28]
   b4d4c:	9301      	str	r3, [sp, #4]
   b4d4e:	bd08      	pop	{r3, pc}
   b4d50:	0003023c 	.word	0x0003023c

000b4d54 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4d54:	b508      	push	{r3, lr}
   b4d56:	4b02      	ldr	r3, [pc, #8]	; (b4d60 <hal_usart_available_data_for_write+0xc>)
   b4d58:	681b      	ldr	r3, [r3, #0]
   b4d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4d5c:	9301      	str	r3, [sp, #4]
   b4d5e:	bd08      	pop	{r3, pc}
   b4d60:	0003023c 	.word	0x0003023c

000b4d64 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4d64:	b508      	push	{r3, lr}
   b4d66:	4b02      	ldr	r3, [pc, #8]	; (b4d70 <hal_usart_init_ex+0xc>)
   b4d68:	681b      	ldr	r3, [r3, #0]
   b4d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d6c:	9301      	str	r3, [sp, #4]
   b4d6e:	bd08      	pop	{r3, pc}
   b4d70:	0003023c 	.word	0x0003023c

000b4d74 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4d74:	b508      	push	{r3, lr}
   b4d76:	4b02      	ldr	r3, [pc, #8]	; (b4d80 <hal_i2c_begin+0xc>)
   b4d78:	681b      	ldr	r3, [r3, #0]
   b4d7a:	68db      	ldr	r3, [r3, #12]
   b4d7c:	9301      	str	r3, [sp, #4]
   b4d7e:	bd08      	pop	{r3, pc}
   b4d80:	00030228 	.word	0x00030228

000b4d84 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4d84:	b508      	push	{r3, lr}
   b4d86:	4b02      	ldr	r3, [pc, #8]	; (b4d90 <hal_i2c_begin_transmission+0xc>)
   b4d88:	681b      	ldr	r3, [r3, #0]
   b4d8a:	699b      	ldr	r3, [r3, #24]
   b4d8c:	9301      	str	r3, [sp, #4]
   b4d8e:	bd08      	pop	{r3, pc}
   b4d90:	00030228 	.word	0x00030228

000b4d94 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4d94:	b508      	push	{r3, lr}
   b4d96:	4b02      	ldr	r3, [pc, #8]	; (b4da0 <hal_i2c_end_transmission+0xc>)
   b4d98:	681b      	ldr	r3, [r3, #0]
   b4d9a:	69db      	ldr	r3, [r3, #28]
   b4d9c:	9301      	str	r3, [sp, #4]
   b4d9e:	bd08      	pop	{r3, pc}
   b4da0:	00030228 	.word	0x00030228

000b4da4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4da4:	b508      	push	{r3, lr}
   b4da6:	4b02      	ldr	r3, [pc, #8]	; (b4db0 <hal_i2c_write+0xc>)
   b4da8:	681b      	ldr	r3, [r3, #0]
   b4daa:	6a1b      	ldr	r3, [r3, #32]
   b4dac:	9301      	str	r3, [sp, #4]
   b4dae:	bd08      	pop	{r3, pc}
   b4db0:	00030228 	.word	0x00030228

000b4db4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4db4:	b508      	push	{r3, lr}
   b4db6:	4b02      	ldr	r3, [pc, #8]	; (b4dc0 <hal_i2c_available+0xc>)
   b4db8:	681b      	ldr	r3, [r3, #0]
   b4dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4dbc:	9301      	str	r3, [sp, #4]
   b4dbe:	bd08      	pop	{r3, pc}
   b4dc0:	00030228 	.word	0x00030228

000b4dc4 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4dc4:	b508      	push	{r3, lr}
   b4dc6:	4b02      	ldr	r3, [pc, #8]	; (b4dd0 <hal_i2c_read+0xc>)
   b4dc8:	681b      	ldr	r3, [r3, #0]
   b4dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4dcc:	9301      	str	r3, [sp, #4]
   b4dce:	bd08      	pop	{r3, pc}
   b4dd0:	00030228 	.word	0x00030228

000b4dd4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4dd4:	b508      	push	{r3, lr}
   b4dd6:	4b02      	ldr	r3, [pc, #8]	; (b4de0 <hal_i2c_peek+0xc>)
   b4dd8:	681b      	ldr	r3, [r3, #0]
   b4dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4ddc:	9301      	str	r3, [sp, #4]
   b4dde:	bd08      	pop	{r3, pc}
   b4de0:	00030228 	.word	0x00030228

000b4de4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4de4:	b508      	push	{r3, lr}
   b4de6:	4b02      	ldr	r3, [pc, #8]	; (b4df0 <hal_i2c_flush+0xc>)
   b4de8:	681b      	ldr	r3, [r3, #0]
   b4dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4dec:	9301      	str	r3, [sp, #4]
   b4dee:	bd08      	pop	{r3, pc}
   b4df0:	00030228 	.word	0x00030228

000b4df4 <hal_i2c_init>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4df4:	b508      	push	{r3, lr}
   b4df6:	4b02      	ldr	r3, [pc, #8]	; (b4e00 <hal_i2c_init+0xc>)
   b4df8:	681b      	ldr	r3, [r3, #0]
   b4dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4dfc:	9301      	str	r3, [sp, #4]
   b4dfe:	bd08      	pop	{r3, pc}
   b4e00:	00030228 	.word	0x00030228

000b4e04 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b4e04:	b508      	push	{r3, lr}
   b4e06:	4b02      	ldr	r3, [pc, #8]	; (b4e10 <hal_i2c_request_ex+0xc>)
   b4e08:	681b      	ldr	r3, [r3, #0]
   b4e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4e0c:	9301      	str	r3, [sp, #4]
   b4e0e:	bd08      	pop	{r3, pc}
   b4e10:	00030228 	.word	0x00030228

000b4e14 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4e14:	b508      	push	{r3, lr}
   b4e16:	4b02      	ldr	r3, [pc, #8]	; (b4e20 <HAL_USB_USART_Init+0xc>)
   b4e18:	681b      	ldr	r3, [r3, #0]
   b4e1a:	681b      	ldr	r3, [r3, #0]
   b4e1c:	9301      	str	r3, [sp, #4]
   b4e1e:	bd08      	pop	{r3, pc}
   b4e20:	0003024c 	.word	0x0003024c

000b4e24 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4e24:	b508      	push	{r3, lr}
   b4e26:	4b02      	ldr	r3, [pc, #8]	; (b4e30 <HAL_USB_USART_Begin+0xc>)
   b4e28:	681b      	ldr	r3, [r3, #0]
   b4e2a:	685b      	ldr	r3, [r3, #4]
   b4e2c:	9301      	str	r3, [sp, #4]
   b4e2e:	bd08      	pop	{r3, pc}
   b4e30:	0003024c 	.word	0x0003024c

000b4e34 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4e34:	b508      	push	{r3, lr}
   b4e36:	4b02      	ldr	r3, [pc, #8]	; (b4e40 <HAL_USB_USART_Available_Data+0xc>)
   b4e38:	681b      	ldr	r3, [r3, #0]
   b4e3a:	691b      	ldr	r3, [r3, #16]
   b4e3c:	9301      	str	r3, [sp, #4]
   b4e3e:	bd08      	pop	{r3, pc}
   b4e40:	0003024c 	.word	0x0003024c

000b4e44 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4e44:	b508      	push	{r3, lr}
   b4e46:	4b02      	ldr	r3, [pc, #8]	; (b4e50 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4e48:	681b      	ldr	r3, [r3, #0]
   b4e4a:	695b      	ldr	r3, [r3, #20]
   b4e4c:	9301      	str	r3, [sp, #4]
   b4e4e:	bd08      	pop	{r3, pc}
   b4e50:	0003024c 	.word	0x0003024c

000b4e54 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4e54:	b508      	push	{r3, lr}
   b4e56:	4b02      	ldr	r3, [pc, #8]	; (b4e60 <HAL_USB_USART_Receive_Data+0xc>)
   b4e58:	681b      	ldr	r3, [r3, #0]
   b4e5a:	699b      	ldr	r3, [r3, #24]
   b4e5c:	9301      	str	r3, [sp, #4]
   b4e5e:	bd08      	pop	{r3, pc}
   b4e60:	0003024c 	.word	0x0003024c

000b4e64 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4e64:	b508      	push	{r3, lr}
   b4e66:	4b02      	ldr	r3, [pc, #8]	; (b4e70 <HAL_USB_USART_Send_Data+0xc>)
   b4e68:	681b      	ldr	r3, [r3, #0]
   b4e6a:	69db      	ldr	r3, [r3, #28]
   b4e6c:	9301      	str	r3, [sp, #4]
   b4e6e:	bd08      	pop	{r3, pc}
   b4e70:	0003024c 	.word	0x0003024c

000b4e74 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4e74:	b508      	push	{r3, lr}
   b4e76:	4b02      	ldr	r3, [pc, #8]	; (b4e80 <HAL_USB_USART_Flush_Data+0xc>)
   b4e78:	681b      	ldr	r3, [r3, #0]
   b4e7a:	6a1b      	ldr	r3, [r3, #32]
   b4e7c:	9301      	str	r3, [sp, #4]
   b4e7e:	bd08      	pop	{r3, pc}
   b4e80:	0003024c 	.word	0x0003024c

000b4e84 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   b4e84:	b508      	push	{r3, lr}
   b4e86:	4b02      	ldr	r3, [pc, #8]	; (b4e90 <LED_SetSignalingColor+0xc>)
   b4e88:	681b      	ldr	r3, [r3, #0]
   b4e8a:	685b      	ldr	r3, [r3, #4]
   b4e8c:	9301      	str	r3, [sp, #4]
   b4e8e:	bd08      	pop	{r3, pc}
   b4e90:	00030260 	.word	0x00030260

000b4e94 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   b4e94:	b508      	push	{r3, lr}
   b4e96:	4b02      	ldr	r3, [pc, #8]	; (b4ea0 <LED_Signaling_Start+0xc>)
   b4e98:	681b      	ldr	r3, [r3, #0]
   b4e9a:	689b      	ldr	r3, [r3, #8]
   b4e9c:	9301      	str	r3, [sp, #4]
   b4e9e:	bd08      	pop	{r3, pc}
   b4ea0:	00030260 	.word	0x00030260

000b4ea4 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   b4ea4:	b508      	push	{r3, lr}
   b4ea6:	4b02      	ldr	r3, [pc, #8]	; (b4eb0 <LED_Signaling_Stop+0xc>)
   b4ea8:	681b      	ldr	r3, [r3, #0]
   b4eaa:	68db      	ldr	r3, [r3, #12]
   b4eac:	9301      	str	r3, [sp, #4]
   b4eae:	bd08      	pop	{r3, pc}
   b4eb0:	00030260 	.word	0x00030260

000b4eb4 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   b4eb4:	b508      	push	{r3, lr}
   b4eb6:	4b02      	ldr	r3, [pc, #8]	; (b4ec0 <LED_RGB_IsOverRidden+0xc>)
   b4eb8:	681b      	ldr	r3, [r3, #0]
   b4eba:	699b      	ldr	r3, [r3, #24]
   b4ebc:	9301      	str	r3, [sp, #4]
   b4ebe:	bd08      	pop	{r3, pc}
   b4ec0:	00030260 	.word	0x00030260

000b4ec4 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   b4ec4:	b508      	push	{r3, lr}
   b4ec6:	4b02      	ldr	r3, [pc, #8]	; (b4ed0 <LED_On+0xc>)
   b4ec8:	681b      	ldr	r3, [r3, #0]
   b4eca:	69db      	ldr	r3, [r3, #28]
   b4ecc:	9301      	str	r3, [sp, #4]
   b4ece:	bd08      	pop	{r3, pc}
   b4ed0:	00030260 	.word	0x00030260

000b4ed4 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b4ed4:	b508      	push	{r3, lr}
   b4ed6:	4b02      	ldr	r3, [pc, #8]	; (b4ee0 <system_mode+0xc>)
   b4ed8:	681b      	ldr	r3, [r3, #0]
   b4eda:	681b      	ldr	r3, [r3, #0]
   b4edc:	9301      	str	r3, [sp, #4]
   b4ede:	bd08      	pop	{r3, pc}
   b4ee0:	00030220 	.word	0x00030220

000b4ee4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4ee4:	b508      	push	{r3, lr}
   b4ee6:	4b02      	ldr	r3, [pc, #8]	; (b4ef0 <set_system_mode+0xc>)
   b4ee8:	681b      	ldr	r3, [r3, #0]
   b4eea:	685b      	ldr	r3, [r3, #4]
   b4eec:	9301      	str	r3, [sp, #4]
   b4eee:	bd08      	pop	{r3, pc}
   b4ef0:	00030220 	.word	0x00030220

000b4ef4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4ef4:	b508      	push	{r3, lr}
   b4ef6:	4b02      	ldr	r3, [pc, #8]	; (b4f00 <system_delay_ms+0xc>)
   b4ef8:	681b      	ldr	r3, [r3, #0]
   b4efa:	695b      	ldr	r3, [r3, #20]
   b4efc:	9301      	str	r3, [sp, #4]
   b4efe:	bd08      	pop	{r3, pc}
   b4f00:	00030220 	.word	0x00030220

000b4f04 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b4f04:	b508      	push	{r3, lr}
   b4f06:	4b02      	ldr	r3, [pc, #8]	; (b4f10 <application_thread_current+0xc>)
   b4f08:	681b      	ldr	r3, [r3, #0]
   b4f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4f0c:	9301      	str	r3, [sp, #4]
   b4f0e:	bd08      	pop	{r3, pc}
   b4f10:	00030220 	.word	0x00030220

000b4f14 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b4f14:	b508      	push	{r3, lr}
   b4f16:	4b02      	ldr	r3, [pc, #8]	; (b4f20 <application_thread_invoke+0xc>)
   b4f18:	681b      	ldr	r3, [r3, #0]
   b4f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4f1c:	9301      	str	r3, [sp, #4]
   b4f1e:	bd08      	pop	{r3, pc}
   b4f20:	00030220 	.word	0x00030220

000b4f24 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b4f24:	b508      	push	{r3, lr}
   b4f26:	4b02      	ldr	r3, [pc, #8]	; (b4f30 <system_thread_get_state+0xc>)
   b4f28:	681b      	ldr	r3, [r3, #0]
   b4f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b4f2c:	9301      	str	r3, [sp, #4]
   b4f2e:	bd08      	pop	{r3, pc}
   b4f30:	00030220 	.word	0x00030220

000b4f34 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4f34:	b508      	push	{r3, lr}
   b4f36:	4b03      	ldr	r3, [pc, #12]	; (b4f44 <system_ctrl_set_app_request_handler+0x10>)
   b4f38:	681b      	ldr	r3, [r3, #0]
   b4f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4f3e:	9301      	str	r3, [sp, #4]
   b4f40:	bd08      	pop	{r3, pc}
   b4f42:	0000      	.short	0x0000
   b4f44:	00030220 	.word	0x00030220

000b4f48 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4f48:	b508      	push	{r3, lr}
   b4f4a:	4b03      	ldr	r3, [pc, #12]	; (b4f58 <system_ctrl_set_result+0x10>)
   b4f4c:	681b      	ldr	r3, [r3, #0]
   b4f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4f52:	9301      	str	r3, [sp, #4]
   b4f54:	bd08      	pop	{r3, pc}
   b4f56:	0000      	.short	0x0000
   b4f58:	00030220 	.word	0x00030220

000b4f5c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4f5c:	b508      	push	{r3, lr}
   b4f5e:	4b02      	ldr	r3, [pc, #8]	; (b4f68 <network_connect+0xc>)
   b4f60:	681b      	ldr	r3, [r3, #0]
   b4f62:	685b      	ldr	r3, [r3, #4]
   b4f64:	9301      	str	r3, [sp, #4]
   b4f66:	bd08      	pop	{r3, pc}
   b4f68:	00030240 	.word	0x00030240

000b4f6c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4f6c:	b508      	push	{r3, lr}
   b4f6e:	4b02      	ldr	r3, [pc, #8]	; (b4f78 <network_connecting+0xc>)
   b4f70:	681b      	ldr	r3, [r3, #0]
   b4f72:	689b      	ldr	r3, [r3, #8]
   b4f74:	9301      	str	r3, [sp, #4]
   b4f76:	bd08      	pop	{r3, pc}
   b4f78:	00030240 	.word	0x00030240

000b4f7c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4f7c:	b508      	push	{r3, lr}
   b4f7e:	4b02      	ldr	r3, [pc, #8]	; (b4f88 <network_disconnect+0xc>)
   b4f80:	681b      	ldr	r3, [r3, #0]
   b4f82:	68db      	ldr	r3, [r3, #12]
   b4f84:	9301      	str	r3, [sp, #4]
   b4f86:	bd08      	pop	{r3, pc}
   b4f88:	00030240 	.word	0x00030240

000b4f8c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4f8c:	b508      	push	{r3, lr}
   b4f8e:	4b02      	ldr	r3, [pc, #8]	; (b4f98 <network_ready+0xc>)
   b4f90:	681b      	ldr	r3, [r3, #0]
   b4f92:	691b      	ldr	r3, [r3, #16]
   b4f94:	9301      	str	r3, [sp, #4]
   b4f96:	bd08      	pop	{r3, pc}
   b4f98:	00030240 	.word	0x00030240

000b4f9c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4f9c:	b508      	push	{r3, lr}
   b4f9e:	4b02      	ldr	r3, [pc, #8]	; (b4fa8 <network_on+0xc>)
   b4fa0:	681b      	ldr	r3, [r3, #0]
   b4fa2:	695b      	ldr	r3, [r3, #20]
   b4fa4:	9301      	str	r3, [sp, #4]
   b4fa6:	bd08      	pop	{r3, pc}
   b4fa8:	00030240 	.word	0x00030240

000b4fac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4fac:	b508      	push	{r3, lr}
   b4fae:	4b02      	ldr	r3, [pc, #8]	; (b4fb8 <network_off+0xc>)
   b4fb0:	681b      	ldr	r3, [r3, #0]
   b4fb2:	699b      	ldr	r3, [r3, #24]
   b4fb4:	9301      	str	r3, [sp, #4]
   b4fb6:	bd08      	pop	{r3, pc}
   b4fb8:	00030240 	.word	0x00030240

000b4fbc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4fbc:	b508      	push	{r3, lr}
   b4fbe:	4b02      	ldr	r3, [pc, #8]	; (b4fc8 <network_listen+0xc>)
   b4fc0:	681b      	ldr	r3, [r3, #0]
   b4fc2:	69db      	ldr	r3, [r3, #28]
   b4fc4:	9301      	str	r3, [sp, #4]
   b4fc6:	bd08      	pop	{r3, pc}
   b4fc8:	00030240 	.word	0x00030240

000b4fcc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4fcc:	b508      	push	{r3, lr}
   b4fce:	4b02      	ldr	r3, [pc, #8]	; (b4fd8 <network_listening+0xc>)
   b4fd0:	681b      	ldr	r3, [r3, #0]
   b4fd2:	6a1b      	ldr	r3, [r3, #32]
   b4fd4:	9301      	str	r3, [sp, #4]
   b4fd6:	bd08      	pop	{r3, pc}
   b4fd8:	00030240 	.word	0x00030240

000b4fdc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4fdc:	b508      	push	{r3, lr}
   b4fde:	4b02      	ldr	r3, [pc, #8]	; (b4fe8 <network_set_listen_timeout+0xc>)
   b4fe0:	681b      	ldr	r3, [r3, #0]
   b4fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4fe4:	9301      	str	r3, [sp, #4]
   b4fe6:	bd08      	pop	{r3, pc}
   b4fe8:	00030240 	.word	0x00030240

000b4fec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4fec:	b508      	push	{r3, lr}
   b4fee:	4b02      	ldr	r3, [pc, #8]	; (b4ff8 <network_get_listen_timeout+0xc>)
   b4ff0:	681b      	ldr	r3, [r3, #0]
   b4ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4ff4:	9301      	str	r3, [sp, #4]
   b4ff6:	bd08      	pop	{r3, pc}
   b4ff8:	00030240 	.word	0x00030240

000b4ffc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4ffc:	b508      	push	{r3, lr}
   b4ffe:	4b02      	ldr	r3, [pc, #8]	; (b5008 <network_is_on+0xc>)
   b5000:	681b      	ldr	r3, [r3, #0]
   b5002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5004:	9301      	str	r3, [sp, #4]
   b5006:	bd08      	pop	{r3, pc}
   b5008:	00030240 	.word	0x00030240

000b500c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b500c:	b508      	push	{r3, lr}
   b500e:	4b02      	ldr	r3, [pc, #8]	; (b5018 <network_is_off+0xc>)
   b5010:	681b      	ldr	r3, [r3, #0]
   b5012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5014:	9301      	str	r3, [sp, #4]
   b5016:	bd08      	pop	{r3, pc}
   b5018:	00030240 	.word	0x00030240

000b501c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b501c:	b508      	push	{r3, lr}
   b501e:	4b02      	ldr	r3, [pc, #8]	; (b5028 <spark_process+0xc>)
   b5020:	681b      	ldr	r3, [r3, #0]
   b5022:	689b      	ldr	r3, [r3, #8]
   b5024:	9301      	str	r3, [sp, #4]
   b5026:	bd08      	pop	{r3, pc}
   b5028:	00030244 	.word	0x00030244

000b502c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b502c:	b508      	push	{r3, lr}
   b502e:	4b02      	ldr	r3, [pc, #8]	; (b5038 <spark_cloud_flag_connected+0xc>)
   b5030:	681b      	ldr	r3, [r3, #0]
   b5032:	695b      	ldr	r3, [r3, #20]
   b5034:	9301      	str	r3, [sp, #4]
   b5036:	bd08      	pop	{r3, pc}
   b5038:	00030244 	.word	0x00030244

000b503c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b503c:	b508      	push	{r3, lr}
   b503e:	4b02      	ldr	r3, [pc, #8]	; (b5048 <spark_send_event+0xc>)
   b5040:	681b      	ldr	r3, [r3, #0]
   b5042:	6a1b      	ldr	r3, [r3, #32]
   b5044:	9301      	str	r3, [sp, #4]
   b5046:	bd08      	pop	{r3, pc}
   b5048:	00030244 	.word	0x00030244

000b504c <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b504c:	b508      	push	{r3, lr}
   b504e:	4b02      	ldr	r3, [pc, #8]	; (b5058 <spark_sync_time_pending+0xc>)
   b5050:	681b      	ldr	r3, [r3, #0]
   b5052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5054:	9301      	str	r3, [sp, #4]
   b5056:	bd08      	pop	{r3, pc}
   b5058:	00030244 	.word	0x00030244

000b505c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b505c:	b508      	push	{r3, lr}
   b505e:	4b02      	ldr	r3, [pc, #8]	; (b5068 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5060:	681b      	ldr	r3, [r3, #0]
   b5062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5064:	9301      	str	r3, [sp, #4]
   b5066:	bd08      	pop	{r3, pc}
   b5068:	00030244 	.word	0x00030244

000b506c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b506c:	b508      	push	{r3, lr}
   b506e:	4b02      	ldr	r3, [pc, #8]	; (b5078 <malloc+0xc>)
   b5070:	681b      	ldr	r3, [r3, #0]
   b5072:	681b      	ldr	r3, [r3, #0]
   b5074:	9301      	str	r3, [sp, #4]
   b5076:	bd08      	pop	{r3, pc}
   b5078:	0003021c 	.word	0x0003021c

000b507c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b507c:	b508      	push	{r3, lr}
   b507e:	4b02      	ldr	r3, [pc, #8]	; (b5088 <free+0xc>)
   b5080:	681b      	ldr	r3, [r3, #0]
   b5082:	685b      	ldr	r3, [r3, #4]
   b5084:	9301      	str	r3, [sp, #4]
   b5086:	bd08      	pop	{r3, pc}
   b5088:	0003021c 	.word	0x0003021c

000b508c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b508c:	b508      	push	{r3, lr}
   b508e:	4b02      	ldr	r3, [pc, #8]	; (b5098 <realloc+0xc>)
   b5090:	681b      	ldr	r3, [r3, #0]
   b5092:	689b      	ldr	r3, [r3, #8]
   b5094:	9301      	str	r3, [sp, #4]
   b5096:	bd08      	pop	{r3, pc}
   b5098:	0003021c 	.word	0x0003021c

000b509c <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b509c:	b508      	push	{r3, lr}
   b509e:	4b02      	ldr	r3, [pc, #8]	; (b50a8 <abort+0xc>)
   b50a0:	681b      	ldr	r3, [r3, #0]
   b50a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b50a4:	9301      	str	r3, [sp, #4]
   b50a6:	bd08      	pop	{r3, pc}
   b50a8:	0003021c 	.word	0x0003021c

000b50ac <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b50ac:	b508      	push	{r3, lr}
   b50ae:	4b02      	ldr	r3, [pc, #8]	; (b50b8 <_malloc_r+0xc>)
   b50b0:	681b      	ldr	r3, [r3, #0]
   b50b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b50b4:	9301      	str	r3, [sp, #4]
   b50b6:	bd08      	pop	{r3, pc}
   b50b8:	0003021c 	.word	0x0003021c

000b50bc <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b50bc:	b508      	push	{r3, lr}
   b50be:	4b02      	ldr	r3, [pc, #8]	; (b50c8 <__assert_func+0xc>)
   b50c0:	681b      	ldr	r3, [r3, #0]
   b50c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b50c4:	9301      	str	r3, [sp, #4]
   b50c6:	bd08      	pop	{r3, pc}
   b50c8:	0003021c 	.word	0x0003021c

000b50cc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b50cc:	b508      	push	{r3, lr}
   b50ce:	4b02      	ldr	r3, [pc, #8]	; (b50d8 <newlib_impure_ptr_callback+0xc>)
   b50d0:	681b      	ldr	r3, [r3, #0]
   b50d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b50d4:	9301      	str	r3, [sp, #4]
   b50d6:	bd08      	pop	{r3, pc}
   b50d8:	0003021c 	.word	0x0003021c

000b50dc <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b50dc:	b508      	push	{r3, lr}
   b50de:	4b02      	ldr	r3, [pc, #8]	; (b50e8 <localtime_r+0xc>)
   b50e0:	681b      	ldr	r3, [r3, #0]
   b50e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b50e4:	9301      	str	r3, [sp, #4]
   b50e6:	bd08      	pop	{r3, pc}
   b50e8:	0003021c 	.word	0x0003021c

000b50ec <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b50ec:	2200      	movs	r2, #0
   b50ee:	6840      	ldr	r0, [r0, #4]
   b50f0:	4611      	mov	r1, r2
   b50f2:	f7ff bf6b 	b.w	b4fcc <network_listening>

000b50f6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b50f6:	2200      	movs	r2, #0
   b50f8:	6840      	ldr	r0, [r0, #4]
   b50fa:	4611      	mov	r1, r2
   b50fc:	f7ff bf76 	b.w	b4fec <network_get_listen_timeout>

000b5100 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5100:	6840      	ldr	r0, [r0, #4]
   b5102:	2200      	movs	r2, #0
   b5104:	f7ff bf6a 	b.w	b4fdc <network_set_listen_timeout>

000b5108 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5108:	6840      	ldr	r0, [r0, #4]
   b510a:	2200      	movs	r2, #0
   b510c:	f081 0101 	eor.w	r1, r1, #1
   b5110:	f7ff bf54 	b.w	b4fbc <network_listen>

000b5114 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5114:	2300      	movs	r3, #0
   b5116:	6840      	ldr	r0, [r0, #4]
   b5118:	461a      	mov	r2, r3
   b511a:	4619      	mov	r1, r3
   b511c:	f7ff bf46 	b.w	b4fac <network_off>

000b5120 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5120:	2300      	movs	r3, #0
   b5122:	6840      	ldr	r0, [r0, #4]
   b5124:	461a      	mov	r2, r3
   b5126:	4619      	mov	r1, r3
   b5128:	f7ff bf38 	b.w	b4f9c <network_on>

000b512c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b512c:	2200      	movs	r2, #0
   b512e:	6840      	ldr	r0, [r0, #4]
   b5130:	4611      	mov	r1, r2
   b5132:	f7ff bf2b 	b.w	b4f8c <network_ready>

000b5136 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5136:	2200      	movs	r2, #0
   b5138:	6840      	ldr	r0, [r0, #4]
   b513a:	4611      	mov	r1, r2
   b513c:	f7ff bf16 	b.w	b4f6c <network_connecting>

000b5140 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5140:	6840      	ldr	r0, [r0, #4]
   b5142:	2200      	movs	r2, #0
   b5144:	2102      	movs	r1, #2
   b5146:	f7ff bf19 	b.w	b4f7c <network_disconnect>

000b514a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b514a:	2300      	movs	r3, #0
   b514c:	6840      	ldr	r0, [r0, #4]
   b514e:	461a      	mov	r2, r3
   b5150:	f7ff bf04 	b.w	b4f5c <network_connect>

000b5154 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5154:	4b02      	ldr	r3, [pc, #8]	; (b5160 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5156:	2203      	movs	r2, #3
   b5158:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b515a:	4a02      	ldr	r2, [pc, #8]	; (b5164 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b515c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b515e:	4770      	bx	lr
   b5160:	2003e688 	.word	0x2003e688
   b5164:	000b6fc4 	.word	0x000b6fc4

000b5168 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5168:	4b05      	ldr	r3, [pc, #20]	; (b5180 <_GLOBAL__sub_I_System+0x18>)
   b516a:	2202      	movs	r2, #2
   b516c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b516e:	4b05      	ldr	r3, [pc, #20]	; (b5184 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5170:	4a05      	ldr	r2, [pc, #20]	; (b5188 <_GLOBAL__sub_I_System+0x20>)
   b5172:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5174:	2000      	movs	r0, #0
   b5176:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b517a:	f7ff beb3 	b.w	b4ee4 <set_system_mode>
   b517e:	bf00      	nop
   b5180:	2003e69c 	.word	0x2003e69c
   b5184:	2003e690 	.word	0x2003e690
   b5188:	ffff0000 	.word	0xffff0000

000b518c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b518c:	b510      	push	{r4, lr}
   b518e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b5190:	f001 fe0f 	bl	b6db2 <strlen>
   b5194:	3801      	subs	r0, #1
   b5196:	1823      	adds	r3, r4, r0
   b5198:	4620      	mov	r0, r4
	while(i<j){
   b519a:	4283      	cmp	r3, r0
   b519c:	d906      	bls.n	b51ac <_Z11str_reversePc+0x20>
		c = *i;
   b519e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b51a0:	7819      	ldrb	r1, [r3, #0]
   b51a2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b51a6:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b51aa:	e7f6      	b.n	b519a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b51ac:	bd10      	pop	{r4, pc}

000b51ae <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b51ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b51b2:	1e93      	subs	r3, r2, #2
{
   b51b4:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b51b6:	2b22      	cmp	r3, #34	; 0x22
   b51b8:	f04f 0300 	mov.w	r3, #0
{
   b51bc:	460d      	mov	r5, r1
   b51be:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b51c0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b51c4:	d927      	bls.n	b5216 <ltoa+0x68>

      if (10 == base && N < 0L)
   b51c6:	2800      	cmp	r0, #0
   b51c8:	da2a      	bge.n	b5220 <ltoa+0x72>
      {
            *head++ = '-';
   b51ca:	462e      	mov	r6, r5
   b51cc:	232d      	movs	r3, #45	; 0x2d
   b51ce:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b51d2:	4240      	negs	r0, r0
   b51d4:	240a      	movs	r4, #10
      *tail-- = '\0';
   b51d6:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b51da:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b51de:	4622      	mov	r2, r4
   b51e0:	4601      	mov	r1, r0
   b51e2:	a801      	add	r0, sp, #4
   b51e4:	f001 fd68 	bl	b6cb8 <ldiv>
   b51e8:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b51ea:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b51ec:	2b09      	cmp	r3, #9
   b51ee:	bfcc      	ite	gt
   b51f0:	2237      	movgt	r2, #55	; 0x37
   b51f2:	2230      	movle	r2, #48	; 0x30
   b51f4:	fa52 f383 	uxtab	r3, r2, r3
   b51f8:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b51fc:	f108 0801 	add.w	r8, r8, #1
   b5200:	2800      	cmp	r0, #0
   b5202:	d1ec      	bne.n	b51de <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b5204:	4642      	mov	r2, r8
   b5206:	1c79      	adds	r1, r7, #1
   b5208:	4630      	mov	r0, r6
   b520a:	f001 fd69 	bl	b6ce0 <memcpy>
      return str;
}
   b520e:	4628      	mov	r0, r5
   b5210:	b00c      	add	sp, #48	; 0x30
   b5212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b5216:	2a0a      	cmp	r2, #10
   b5218:	d0d5      	beq.n	b51c6 <ltoa+0x18>
      if (uarg)
   b521a:	b118      	cbz	r0, b5224 <ltoa+0x76>
   b521c:	462e      	mov	r6, r5
   b521e:	e7da      	b.n	b51d6 <ltoa+0x28>
   b5220:	240a      	movs	r4, #10
   b5222:	e7fa      	b.n	b521a <ltoa+0x6c>
      else  *tail-- = '0';
   b5224:	2330      	movs	r3, #48	; 0x30
   b5226:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b522a:	462e      	mov	r6, r5
   b522c:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b5230:	f04f 0802 	mov.w	r8, #2
   b5234:	e7e6      	b.n	b5204 <ltoa+0x56>

000b5236 <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b5236:	b570      	push	{r4, r5, r6, lr}
   b5238:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b523a:	1e91      	subs	r1, r2, #2
   b523c:	2922      	cmp	r1, #34	; 0x22
   b523e:	d81d      	bhi.n	b527c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b5240:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b5242:	b930      	cbnz	r0, b5252 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b5244:	4423      	add	r3, r4
            *ptr++ = '0';
   b5246:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b5248:	429d      	cmp	r5, r3
   b524a:	d210      	bcs.n	b526e <ultoa+0x38>
            *ptr++ = '0';
   b524c:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b5250:	e7fa      	b.n	b5248 <ultoa+0x12>
            result.quot = a/radix;
   b5252:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b5256:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b525a:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b525c:	2809      	cmp	r0, #9
                *ptr += '0';
   b525e:	bf94      	ite	ls
   b5260:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b5262:	3157      	addhi	r1, #87	; 0x57
   b5264:	b2c9      	uxtb	r1, r1
   b5266:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b526a:	4630      	mov	r0, r6
	while(a){
   b526c:	e7e9      	b.n	b5242 <ultoa+0xc>

	*ptr = '\0';
   b526e:	2300      	movs	r3, #0
	str_reverse(buffer);
   b5270:	4620      	mov	r0, r4
	*ptr = '\0';
   b5272:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b5274:	f7ff ff8a 	bl	b518c <_Z11str_reversePc>
	return buffer;
   b5278:	4620      	mov	r0, r4
}
   b527a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b527c:	2000      	movs	r0, #0
   b527e:	e7fc      	b.n	b527a <ultoa+0x44>

000b5280 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b5280:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b5282:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b5284:	460c      	mov	r4, r1
   b5286:	4615      	mov	r5, r2
	if(a<0){
   b5288:	da0e      	bge.n	b52a8 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b528a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b528e:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b5292:	bf14      	ite	ne
   b5294:	4258      	negne	r0, r3
   b5296:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b5298:	2301      	movs	r3, #1
		*buffer = '-';
   b529a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b529c:	462a      	mov	r2, r5
   b529e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b52a0:	f7ff ffc9 	bl	b5236 <ultoa>
	}
	return buffer;
}
   b52a4:	4620      	mov	r0, r4
   b52a6:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b52a8:	2301      	movs	r3, #1
   b52aa:	e7f9      	b.n	b52a0 <itoa+0x20>

000b52ac <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b52ac:	b510      	push	{r4, lr}
   b52ae:	4604      	mov	r4, r0
{
	free(buffer);
   b52b0:	6800      	ldr	r0, [r0, #0]
   b52b2:	f7ff fee3 	bl	b507c <free>
}
   b52b6:	4620      	mov	r0, r4
   b52b8:	bd10      	pop	{r4, pc}

000b52ba <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b52ba:	b510      	push	{r4, lr}
   b52bc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b52be:	6800      	ldr	r0, [r0, #0]
   b52c0:	b108      	cbz	r0, b52c6 <_ZN6String10invalidateEv+0xc>
   b52c2:	f7ff fedb 	bl	b507c <free>
	buffer = NULL;
   b52c6:	2300      	movs	r3, #0
	capacity = len = 0;
   b52c8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b52cc:	6023      	str	r3, [r4, #0]
}
   b52ce:	bd10      	pop	{r4, pc}

000b52d0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b52d0:	b538      	push	{r3, r4, r5, lr}
   b52d2:	4604      	mov	r4, r0
   b52d4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b52d6:	6800      	ldr	r0, [r0, #0]
   b52d8:	3101      	adds	r1, #1
   b52da:	f7ff fed7 	bl	b508c <realloc>
	if (newbuffer) {
   b52de:	b110      	cbz	r0, b52e6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b52e0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b52e4:	2001      	movs	r0, #1
	}
	return 0;
}
   b52e6:	bd38      	pop	{r3, r4, r5, pc}

000b52e8 <_ZN6String7reserveEj>:
{
   b52e8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b52ea:	6803      	ldr	r3, [r0, #0]
{
   b52ec:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b52ee:	b123      	cbz	r3, b52fa <_ZN6String7reserveEj+0x12>
   b52f0:	6843      	ldr	r3, [r0, #4]
   b52f2:	428b      	cmp	r3, r1
   b52f4:	d301      	bcc.n	b52fa <_ZN6String7reserveEj+0x12>
   b52f6:	2001      	movs	r0, #1
}
   b52f8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b52fa:	4620      	mov	r0, r4
   b52fc:	f7ff ffe8 	bl	b52d0 <_ZN6String12changeBufferEj>
   b5300:	2800      	cmp	r0, #0
   b5302:	d0f9      	beq.n	b52f8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5304:	68a3      	ldr	r3, [r4, #8]
   b5306:	2b00      	cmp	r3, #0
   b5308:	d1f5      	bne.n	b52f6 <_ZN6String7reserveEj+0xe>
   b530a:	6822      	ldr	r2, [r4, #0]
   b530c:	7013      	strb	r3, [r2, #0]
   b530e:	e7f2      	b.n	b52f6 <_ZN6String7reserveEj+0xe>

000b5310 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5310:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5312:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5314:	4611      	mov	r1, r2
   b5316:	9201      	str	r2, [sp, #4]
{
   b5318:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b531a:	f7ff ffe5 	bl	b52e8 <_ZN6String7reserveEj>
   b531e:	9a01      	ldr	r2, [sp, #4]
   b5320:	b928      	cbnz	r0, b532e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5322:	4620      	mov	r0, r4
   b5324:	f7ff ffc9 	bl	b52ba <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5328:	4620      	mov	r0, r4
   b532a:	b003      	add	sp, #12
   b532c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b532e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5330:	4629      	mov	r1, r5
   b5332:	6820      	ldr	r0, [r4, #0]
   b5334:	f001 fcd4 	bl	b6ce0 <memcpy>
	buffer[len] = 0;
   b5338:	6822      	ldr	r2, [r4, #0]
   b533a:	68a3      	ldr	r3, [r4, #8]
   b533c:	2100      	movs	r1, #0
   b533e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5340:	e7f2      	b.n	b5328 <_ZN6String4copyEPKcj+0x18>

000b5342 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5342:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5344:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b5346:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b534a:	4604      	mov	r4, r0
	len = 0;
   b534c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b534e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5350:	b141      	cbz	r1, b5364 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5352:	4608      	mov	r0, r1
   b5354:	9101      	str	r1, [sp, #4]
   b5356:	f001 fd2c 	bl	b6db2 <strlen>
   b535a:	9901      	ldr	r1, [sp, #4]
   b535c:	4602      	mov	r2, r0
   b535e:	4620      	mov	r0, r4
   b5360:	f7ff ffd6 	bl	b5310 <_ZN6String4copyEPKcj>
}
   b5364:	4620      	mov	r0, r4
   b5366:	b002      	add	sp, #8
   b5368:	bd10      	pop	{r4, pc}

000b536a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b536a:	4288      	cmp	r0, r1
{
   b536c:	b510      	push	{r4, lr}
   b536e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b5370:	d005      	beq.n	b537e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b5372:	680b      	ldr	r3, [r1, #0]
   b5374:	b12b      	cbz	r3, b5382 <_ZN6StringaSERKS_+0x18>
   b5376:	688a      	ldr	r2, [r1, #8]
   b5378:	4619      	mov	r1, r3
   b537a:	f7ff ffc9 	bl	b5310 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b537e:	4620      	mov	r0, r4
   b5380:	bd10      	pop	{r4, pc}
	else invalidate();
   b5382:	f7ff ff9a 	bl	b52ba <_ZN6String10invalidateEv>
   b5386:	e7fa      	b.n	b537e <_ZN6StringaSERKS_+0x14>

000b5388 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b5388:	b510      	push	{r4, lr}
	buffer = NULL;
   b538a:	2300      	movs	r3, #0
String::String(const String &value)
   b538c:	4604      	mov	r4, r0
	capacity = 0;
   b538e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b5392:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5394:	7303      	strb	r3, [r0, #12]
	*this = value;
   b5396:	f7ff ffe8 	bl	b536a <_ZN6StringaSERKS_>
}
   b539a:	4620      	mov	r0, r4
   b539c:	bd10      	pop	{r4, pc}

000b539e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b539e:	b513      	push	{r0, r1, r4, lr}
   b53a0:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b53a2:	b159      	cbz	r1, b53bc <_ZN6StringaSEPKc+0x1e>
   b53a4:	4608      	mov	r0, r1
   b53a6:	9101      	str	r1, [sp, #4]
   b53a8:	f001 fd03 	bl	b6db2 <strlen>
   b53ac:	9901      	ldr	r1, [sp, #4]
   b53ae:	4602      	mov	r2, r0
   b53b0:	4620      	mov	r0, r4
   b53b2:	f7ff ffad 	bl	b5310 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b53b6:	4620      	mov	r0, r4
   b53b8:	b002      	add	sp, #8
   b53ba:	bd10      	pop	{r4, pc}
	else invalidate();
   b53bc:	f7ff ff7d 	bl	b52ba <_ZN6String10invalidateEv>
   b53c0:	e7f9      	b.n	b53b6 <_ZN6StringaSEPKc+0x18>

000b53c2 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b53c2:	b510      	push	{r4, lr}
   b53c4:	4604      	mov	r4, r0
   b53c6:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b53c8:	2300      	movs	r3, #0
	capacity = 0;
   b53ca:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b53ce:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b53d0:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b53d2:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b53d4:	a901      	add	r1, sp, #4
   b53d6:	f7ff ff53 	bl	b5280 <itoa>
	*this = buf;
   b53da:	a901      	add	r1, sp, #4
   b53dc:	4620      	mov	r0, r4
   b53de:	f7ff ffde 	bl	b539e <_ZN6StringaSEPKc>
}
   b53e2:	4620      	mov	r0, r4
   b53e4:	b00a      	add	sp, #40	; 0x28
   b53e6:	bd10      	pop	{r4, pc}

000b53e8 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   b53e8:	b510      	push	{r4, lr}
   b53ea:	4604      	mov	r4, r0
   b53ec:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b53ee:	2300      	movs	r3, #0
	capacity = 0;
   b53f0:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b53f4:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b53f6:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   b53f8:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   b53fa:	a901      	add	r1, sp, #4
   b53fc:	f7ff fed7 	bl	b51ae <ltoa>
	*this = buf;
   b5400:	a901      	add	r1, sp, #4
   b5402:	4620      	mov	r0, r4
   b5404:	f7ff ffcb 	bl	b539e <_ZN6StringaSEPKc>
}
   b5408:	4620      	mov	r0, r4
   b540a:	b00a      	add	sp, #40	; 0x28
   b540c:	bd10      	pop	{r4, pc}

000b540e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b540e:	b570      	push	{r4, r5, r6, lr}
   b5410:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b5412:	460e      	mov	r6, r1
   b5414:	b909      	cbnz	r1, b541a <_ZN6String6concatEPKcj+0xc>
   b5416:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b5418:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b541a:	b16a      	cbz	r2, b5438 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b541c:	6884      	ldr	r4, [r0, #8]
   b541e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b5420:	4621      	mov	r1, r4
   b5422:	f7ff ff61 	bl	b52e8 <_ZN6String7reserveEj>
   b5426:	2800      	cmp	r0, #0
   b5428:	d0f5      	beq.n	b5416 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b542a:	6828      	ldr	r0, [r5, #0]
   b542c:	68ab      	ldr	r3, [r5, #8]
   b542e:	4631      	mov	r1, r6
   b5430:	4418      	add	r0, r3
   b5432:	f001 fc99 	bl	b6d68 <strcpy>
	len = newlen;
   b5436:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b5438:	2001      	movs	r0, #1
   b543a:	e7ed      	b.n	b5418 <_ZN6String6concatEPKcj+0xa>

000b543c <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b543c:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b543e:	688a      	ldr	r2, [r1, #8]
   b5440:	6809      	ldr	r1, [r1, #0]
{
   b5442:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b5444:	f7ff ffe3 	bl	b540e <_ZN6String6concatEPKcj>
   b5448:	b910      	cbnz	r0, b5450 <_ZplRK15StringSumHelperRK6String+0x14>
   b544a:	4620      	mov	r0, r4
   b544c:	f7ff ff35 	bl	b52ba <_ZN6String10invalidateEv>
	return a;
}
   b5450:	4620      	mov	r0, r4
   b5452:	bd10      	pop	{r4, pc}

000b5454 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b5454:	b513      	push	{r0, r1, r4, lr}
   b5456:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b5458:	b929      	cbnz	r1, b5466 <_ZplRK15StringSumHelperPKc+0x12>
   b545a:	4620      	mov	r0, r4
   b545c:	f7ff ff2d 	bl	b52ba <_ZN6String10invalidateEv>
	return a;
}
   b5460:	4620      	mov	r0, r4
   b5462:	b002      	add	sp, #8
   b5464:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b5466:	4608      	mov	r0, r1
   b5468:	9101      	str	r1, [sp, #4]
   b546a:	f001 fca2 	bl	b6db2 <strlen>
   b546e:	9901      	ldr	r1, [sp, #4]
   b5470:	4602      	mov	r2, r0
   b5472:	4620      	mov	r0, r4
   b5474:	f7ff ffcb 	bl	b540e <_ZN6String6concatEPKcj>
   b5478:	2800      	cmp	r0, #0
   b547a:	d0ee      	beq.n	b545a <_ZplRK15StringSumHelperPKc+0x6>
   b547c:	e7f0      	b.n	b5460 <_ZplRK15StringSumHelperPKc+0xc>

000b547e <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b547e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b5480:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5482:	4604      	mov	r4, r0
      if (_M_manager)
   b5484:	b113      	cbz	r3, b548c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5486:	2203      	movs	r2, #3
   b5488:	4601      	mov	r1, r0
   b548a:	4798      	blx	r3
    }
   b548c:	4620      	mov	r0, r4
   b548e:	bd10      	pop	{r4, pc}

000b5490 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b5490:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b5492:	6843      	ldr	r3, [r0, #4]
   b5494:	3b01      	subs	r3, #1
    {
   b5496:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b5498:	6043      	str	r3, [r0, #4]
   b549a:	b963      	cbnz	r3, b54b6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b549c:	6803      	ldr	r3, [r0, #0]
   b549e:	689b      	ldr	r3, [r3, #8]
   b54a0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b54a2:	68a3      	ldr	r3, [r4, #8]
   b54a4:	3b01      	subs	r3, #1
   b54a6:	60a3      	str	r3, [r4, #8]
   b54a8:	b92b      	cbnz	r3, b54b6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b54aa:	6823      	ldr	r3, [r4, #0]
   b54ac:	4620      	mov	r0, r4
   b54ae:	68db      	ldr	r3, [r3, #12]
    }
   b54b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b54b4:	4718      	bx	r3
    }
   b54b6:	bd10      	pop	{r4, pc}

000b54b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b54b8:	b510      	push	{r4, lr}
   b54ba:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b54bc:	6800      	ldr	r0, [r0, #0]
   b54be:	b108      	cbz	r0, b54c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b54c0:	f7ff ffe6 	bl	b5490 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b54c4:	4620      	mov	r0, r4
   b54c6:	bd10      	pop	{r4, pc}

000b54c8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b54c8:	b513      	push	{r0, r1, r4, lr}
   b54ca:	460b      	mov	r3, r1
   b54cc:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b54ce:	e9d0 0100 	ldrd	r0, r1, [r0]
   b54d2:	466c      	mov	r4, sp
   b54d4:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b54d8:	e893 0003 	ldmia.w	r3, {r0, r1}
   b54dc:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b54e0:	e894 0003 	ldmia.w	r4, {r0, r1}
   b54e4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b54e8:	b002      	add	sp, #8
   b54ea:	bd10      	pop	{r4, pc}

000b54ec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b54ec:	4802      	ldr	r0, [pc, #8]	; (b54f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b54ee:	2300      	movs	r3, #0
   b54f0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b54f2:	f7ff bbf7 	b.w	b4ce4 <os_mutex_recursive_create>
   b54f6:	bf00      	nop
   b54f8:	2003e6a0 	.word	0x2003e6a0

000b54fc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b54fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b54fe:	4606      	mov	r6, r0
   b5500:	460d      	mov	r5, r1
  size_t n = 0;
   b5502:	188f      	adds	r7, r1, r2
   b5504:	2400      	movs	r4, #0
  while (size--) {
   b5506:	42bd      	cmp	r5, r7
   b5508:	d00c      	beq.n	b5524 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b550a:	6833      	ldr	r3, [r6, #0]
   b550c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5510:	689b      	ldr	r3, [r3, #8]
   b5512:	4630      	mov	r0, r6
   b5514:	4798      	blx	r3
     if (chunk>=0)
   b5516:	1e03      	subs	r3, r0, #0
   b5518:	db01      	blt.n	b551e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b551a:	441c      	add	r4, r3
  while (size--) {
   b551c:	e7f3      	b.n	b5506 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b551e:	2c00      	cmp	r4, #0
   b5520:	bf08      	it	eq
   b5522:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5524:	4620      	mov	r0, r4
   b5526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5528 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b5528:	b513      	push	{r0, r1, r4, lr}
   b552a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b552c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b552e:	b159      	cbz	r1, b5548 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5530:	9101      	str	r1, [sp, #4]
   b5532:	f001 fc3e 	bl	b6db2 <strlen>
   b5536:	6823      	ldr	r3, [r4, #0]
   b5538:	9901      	ldr	r1, [sp, #4]
   b553a:	68db      	ldr	r3, [r3, #12]
   b553c:	4602      	mov	r2, r0
   b553e:	4620      	mov	r0, r4
    }
   b5540:	b002      	add	sp, #8
   b5542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5546:	4718      	bx	r3
    }
   b5548:	b002      	add	sp, #8
   b554a:	bd10      	pop	{r4, pc}

000b554c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b554c:	6803      	ldr	r3, [r0, #0]
   b554e:	689b      	ldr	r3, [r3, #8]
   b5550:	4718      	bx	r3

000b5552 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5552:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5554:	210d      	movs	r1, #13
{
   b5556:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5558:	f7ff fff8 	bl	b554c <_ZN5Print5printEc>
  n += print('\n');
   b555c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b555e:	4604      	mov	r4, r0
  n += print('\n');
   b5560:	4628      	mov	r0, r5
   b5562:	f7ff fff3 	bl	b554c <_ZN5Print5printEc>
  return n;
}
   b5566:	4420      	add	r0, r4
   b5568:	bd38      	pop	{r3, r4, r5, pc}

000b556a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b556a:	b538      	push	{r3, r4, r5, lr}
   b556c:	4605      	mov	r5, r0
  return write(str);
   b556e:	f7ff ffdb 	bl	b5528 <_ZN5Print5writeEPKc>
   b5572:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5574:	4628      	mov	r0, r5
   b5576:	f7ff ffec 	bl	b5552 <_ZN5Print7printlnEv>
  return n;
}
   b557a:	4420      	add	r0, r4
   b557c:	bd38      	pop	{r3, r4, r5, pc}

000b557e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b557e:	b530      	push	{r4, r5, lr}
   b5580:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5582:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5584:	2a01      	cmp	r2, #1
  *str = '\0';
   b5586:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b558a:	bf98      	it	ls
   b558c:	220a      	movls	r2, #10
   b558e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5590:	460d      	mov	r5, r1
   b5592:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5596:	fb01 5312 	mls	r3, r1, r2, r5
   b559a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b559e:	2b09      	cmp	r3, #9
   b55a0:	bf94      	ite	ls
   b55a2:	3330      	addls	r3, #48	; 0x30
   b55a4:	3337      	addhi	r3, #55	; 0x37
   b55a6:	b2db      	uxtb	r3, r3
  } while(n);
   b55a8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b55aa:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b55ae:	d9ef      	bls.n	b5590 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b55b0:	4621      	mov	r1, r4
   b55b2:	f7ff ffb9 	bl	b5528 <_ZN5Print5writeEPKc>
}
   b55b6:	b00b      	add	sp, #44	; 0x2c
   b55b8:	bd30      	pop	{r4, r5, pc}
	...

000b55bc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b55bc:	4b01      	ldr	r3, [pc, #4]	; (b55c4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b55be:	4a02      	ldr	r2, [pc, #8]	; (b55c8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b55c0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b55c2:	4770      	bx	lr
   b55c4:	2003e6a4 	.word	0x2003e6a4
   b55c8:	000b6ff8 	.word	0x000b6ff8

000b55cc <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b55cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b55d0:	4a15      	ldr	r2, [pc, #84]	; (b5628 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b55d2:	f8df 8060 	ldr.w	r8, [pc, #96]	; b5634 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b55d6:	e9d2 6300 	ldrd	r6, r3, [r2]
   b55da:	1980      	adds	r0, r0, r6
   b55dc:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b55e0:	4b12      	ldr	r3, [pc, #72]	; (b562c <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b55e2:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b55e6:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b55ea:	1986      	adds	r6, r0, r6
   b55ec:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b55f0:	42bb      	cmp	r3, r7
   b55f2:	bf08      	it	eq
   b55f4:	42b2      	cmpeq	r2, r6
{
   b55f6:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b55f8:	d013      	beq.n	b5622 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b55fa:	a903      	add	r1, sp, #12
   b55fc:	4668      	mov	r0, sp
   b55fe:	e9cd 6700 	strd	r6, r7, [sp]
   b5602:	f7ff fd6b 	bl	b50dc <localtime_r>
	calendar_time.tm_year += 1900;
   b5606:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b5608:	4d09      	ldr	r5, [pc, #36]	; (b5630 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b560a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b560e:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b5610:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b5612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5618:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b561a:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b561e:	6823      	ldr	r3, [r4, #0]
   b5620:	602b      	str	r3, [r5, #0]
    }
}
   b5622:	b00c      	add	sp, #48	; 0x30
   b5624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5628:	2003e6d8 	.word	0x2003e6d8
   b562c:	2003e6d0 	.word	0x2003e6d0
   b5630:	2003e6ac 	.word	0x2003e6ac
   b5634:	2003e6e0 	.word	0x2003e6e0

000b5638 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b5638:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b563a:	2000      	movs	r0, #0
   b563c:	f7ff fd06 	bl	b504c <spark_sync_time_pending>
   b5640:	b128      	cbz	r0, b564e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5642:	f7ff fcf3 	bl	b502c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5646:	f080 0001 	eor.w	r0, r0, #1
   b564a:	b2c0      	uxtb	r0, r0
    }
   b564c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b564e:	2001      	movs	r0, #1
   b5650:	e7fc      	b.n	b564c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b5652 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b5652:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b5654:	2000      	movs	r0, #0
   b5656:	f7ff fb35 	bl	b4cc4 <hal_rtc_time_is_valid>
    if (rtcstate)
   b565a:	4604      	mov	r4, r0
   b565c:	b9a0      	cbnz	r0, b5688 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b565e:	f7ff fc39 	bl	b4ed4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b5662:	2801      	cmp	r0, #1
   b5664:	d110      	bne.n	b5688 <_ZN9TimeClass7isValidEv+0x36>
   b5666:	4620      	mov	r0, r4
   b5668:	f7ff fc5c 	bl	b4f24 <system_thread_get_state>
   b566c:	b960      	cbnz	r0, b5688 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b566e:	f7ff ffe3 	bl	b5638 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b5672:	b910      	cbnz	r0, b567a <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b5674:	f7ff fcd2 	bl	b501c <spark_process>
        while (_while() && !_condition()) {
   b5678:	e7f9      	b.n	b566e <_ZN9TimeClass7isValidEv+0x1c>
   b567a:	f7ff ffdd 	bl	b5638 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b567e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b5682:	2000      	movs	r0, #0
   b5684:	f7ff bb1e 	b.w	b4cc4 <hal_rtc_time_is_valid>
}
   b5688:	4620      	mov	r0, r4
   b568a:	bd10      	pop	{r4, pc}

000b568c <_ZN9TimeClass3nowEv>:
{
   b568c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b568e:	f7ff ffe0 	bl	b5652 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b5692:	2210      	movs	r2, #16
   b5694:	2100      	movs	r1, #0
   b5696:	4668      	mov	r0, sp
   b5698:	f001 fb30 	bl	b6cfc <memset>
    hal_rtc_get_time(&tv, nullptr);
   b569c:	2100      	movs	r1, #0
   b569e:	4668      	mov	r0, sp
   b56a0:	f7ff fb18 	bl	b4cd4 <hal_rtc_get_time>
}
   b56a4:	9800      	ldr	r0, [sp, #0]
   b56a6:	b005      	add	sp, #20
   b56a8:	f85d fb04 	ldr.w	pc, [sp], #4

000b56ac <_ZN9TimeClass4hourEv>:
{
   b56ac:	b508      	push	{r3, lr}
	return hour(now());
   b56ae:	f7ff ffed 	bl	b568c <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b56b2:	17c1      	asrs	r1, r0, #31
   b56b4:	f7ff ff8a 	bl	b55cc <_ZL22Refresh_UnixTime_Cachex>
}
   b56b8:	4b01      	ldr	r3, [pc, #4]	; (b56c0 <_ZN9TimeClass4hourEv+0x14>)
   b56ba:	6898      	ldr	r0, [r3, #8]
   b56bc:	bd08      	pop	{r3, pc}
   b56be:	bf00      	nop
   b56c0:	2003e6ac 	.word	0x2003e6ac

000b56c4 <_ZN9TimeClass6minuteEv>:
{
   b56c4:	b508      	push	{r3, lr}
	return minute(now());
   b56c6:	f7ff ffe1 	bl	b568c <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b56ca:	17c1      	asrs	r1, r0, #31
   b56cc:	f7ff ff7e 	bl	b55cc <_ZL22Refresh_UnixTime_Cachex>
}
   b56d0:	4b01      	ldr	r3, [pc, #4]	; (b56d8 <_ZN9TimeClass6minuteEv+0x14>)
   b56d2:	6858      	ldr	r0, [r3, #4]
   b56d4:	bd08      	pop	{r3, pc}
   b56d6:	bf00      	nop
   b56d8:	2003e6ac 	.word	0x2003e6ac

000b56dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b56dc:	4b02      	ldr	r3, [pc, #8]	; (b56e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b56de:	681a      	ldr	r2, [r3, #0]
   b56e0:	4b02      	ldr	r3, [pc, #8]	; (b56ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b56e2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b56e4:	4770      	bx	lr
   b56e6:	bf00      	nop
   b56e8:	2003e0fc 	.word	0x2003e0fc
   b56ec:	2003e6a8 	.word	0x2003e6a8

000b56f0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b56f0:	2100      	movs	r1, #0
   b56f2:	f7ff bbff 	b.w	b4ef4 <system_delay_ms>

000b56f6 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   b56f6:	b510      	push	{r4, lr}
   b56f8:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
   b56fa:	f7ff fbdb 	bl	b4eb4 <LED_RGB_IsOverRidden>
    if (override == controlled()) {
   b56fe:	4284      	cmp	r4, r0
   b5700:	d008      	beq.n	b5714 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   b5702:	b11c      	cbz	r4, b570c <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   b5704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
   b5708:	f7ff bbc4 	b.w	b4e94 <LED_Signaling_Start>
}
   b570c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
   b5710:	f7ff bbc8 	b.w	b4ea4 <LED_Signaling_Stop>
}
   b5714:	bd10      	pop	{r4, pc}

000b5716 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   b5716:	b570      	push	{r4, r5, r6, lr}
   b5718:	4605      	mov	r5, r0
   b571a:	460e      	mov	r6, r1
   b571c:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
   b571e:	f7ff fbc9 	bl	b4eb4 <LED_RGB_IsOverRidden>
    if (!controlled()) {
   b5722:	b150      	cbz	r0, b573a <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   b5724:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
   b5728:	ea44 4005 	orr.w	r0, r4, r5, lsl #16
   b572c:	f7ff fbaa 	bl	b4e84 <LED_SetSignalingColor>
    LED_On(PARTICLE_LED_RGB);
}
   b5730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(PARTICLE_LED_RGB);
   b5734:	20e7      	movs	r0, #231	; 0xe7
   b5736:	f7ff bbc5 	b.w	b4ec4 <LED_On>
}
   b573a:	bd70      	pop	{r4, r5, r6, pc}

000b573c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b573c:	4b01      	ldr	r3, [pc, #4]	; (b5744 <_GLOBAL__sub_I_RGB+0x8>)
   b573e:	2200      	movs	r2, #0
   b5740:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5742:	4770      	bx	lr
   b5744:	2003e6e8 	.word	0x2003e6e8

000b5748 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5748:	4b01      	ldr	r3, [pc, #4]	; (b5750 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b574a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b574c:	4770      	bx	lr
   b574e:	bf00      	nop
   b5750:	2003e100 	.word	0x2003e100

000b5754 <serialEventRun>:
{
   b5754:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5756:	4b0b      	ldr	r3, [pc, #44]	; (b5784 <serialEventRun+0x30>)
   b5758:	b143      	cbz	r3, b576c <serialEventRun+0x18>
   b575a:	f000 fbff 	bl	b5f5c <_Z16_fetch_usbserialv>
   b575e:	6803      	ldr	r3, [r0, #0]
   b5760:	691b      	ldr	r3, [r3, #16]
   b5762:	4798      	blx	r3
   b5764:	2800      	cmp	r0, #0
   b5766:	dd01      	ble.n	b576c <serialEventRun+0x18>
        serialEvent();
   b5768:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b576c:	4b06      	ldr	r3, [pc, #24]	; (b5788 <serialEventRun+0x34>)
   b576e:	b143      	cbz	r3, b5782 <serialEventRun+0x2e>
   b5770:	f000 fe14 	bl	b639c <_Z22__fetch_global_Serial1v>
   b5774:	6803      	ldr	r3, [r0, #0]
   b5776:	691b      	ldr	r3, [r3, #16]
   b5778:	4798      	blx	r3
   b577a:	2800      	cmp	r0, #0
   b577c:	dd01      	ble.n	b5782 <serialEventRun+0x2e>
        serialEvent1();
   b577e:	f3af 8000 	nop.w
}
   b5782:	bd08      	pop	{r3, pc}
	...

000b578c <_post_loop>:
{
   b578c:	b508      	push	{r3, lr}
	serialEventRun();
   b578e:	f7ff ffe1 	bl	b5754 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5792:	f7ff fa8f 	bl	b4cb4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5796:	4b01      	ldr	r3, [pc, #4]	; (b579c <_post_loop+0x10>)
   b5798:	6018      	str	r0, [r3, #0]
}
   b579a:	bd08      	pop	{r3, pc}
   b579c:	2003e740 	.word	0x2003e740

000b57a0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b57a0:	4805      	ldr	r0, [pc, #20]	; (b57b8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b57a2:	4a06      	ldr	r2, [pc, #24]	; (b57bc <_Z33system_initialize_user_backup_ramv+0x1c>)
   b57a4:	4906      	ldr	r1, [pc, #24]	; (b57c0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b57a6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b57a8:	1a12      	subs	r2, r2, r0
   b57aa:	f001 fa99 	bl	b6ce0 <memcpy>
    __backup_sram_signature = signature;
   b57ae:	4b05      	ldr	r3, [pc, #20]	; (b57c4 <_Z33system_initialize_user_backup_ramv+0x24>)
   b57b0:	4a05      	ldr	r2, [pc, #20]	; (b57c8 <_Z33system_initialize_user_backup_ramv+0x28>)
   b57b2:	601a      	str	r2, [r3, #0]
}
   b57b4:	bd08      	pop	{r3, pc}
   b57b6:	bf00      	nop
   b57b8:	2003f400 	.word	0x2003f400
   b57bc:	2003f404 	.word	0x2003f404
   b57c0:	000b7234 	.word	0x000b7234
   b57c4:	2003f400 	.word	0x2003f400
   b57c8:	9a271c1e 	.word	0x9a271c1e

000b57cc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b57cc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b57ce:	2300      	movs	r3, #0
   b57d0:	9300      	str	r3, [sp, #0]
   b57d2:	461a      	mov	r2, r3
   b57d4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b57d8:	f7ff fbb6 	bl	b4f48 <system_ctrl_set_result>
}
   b57dc:	b003      	add	sp, #12
   b57de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b57e4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b57e4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b57e6:	8843      	ldrh	r3, [r0, #2]
   b57e8:	2b0a      	cmp	r3, #10
   b57ea:	d008      	beq.n	b57fe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b57ec:	2b50      	cmp	r3, #80	; 0x50
   b57ee:	d10b      	bne.n	b5808 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b57f0:	4b09      	ldr	r3, [pc, #36]	; (b5818 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b57f2:	681b      	ldr	r3, [r3, #0]
   b57f4:	b14b      	cbz	r3, b580a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b57f6:	b003      	add	sp, #12
   b57f8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b57fc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b57fe:	f7ff ffe5 	bl	b57cc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5802:	b003      	add	sp, #12
   b5804:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5808:	2300      	movs	r3, #0
   b580a:	9300      	str	r3, [sp, #0]
   b580c:	461a      	mov	r2, r3
   b580e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5812:	f7ff fb99 	bl	b4f48 <system_ctrl_set_result>
}
   b5816:	e7f4      	b.n	b5802 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5818:	2003e6fc 	.word	0x2003e6fc

000b581c <module_user_init_hook>:
{
   b581c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b581e:	4812      	ldr	r0, [pc, #72]	; (b5868 <module_user_init_hook+0x4c>)
   b5820:	2100      	movs	r1, #0
   b5822:	f7ff fc53 	bl	b50cc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5826:	4b11      	ldr	r3, [pc, #68]	; (b586c <module_user_init_hook+0x50>)
   b5828:	681a      	ldr	r2, [r3, #0]
   b582a:	4b11      	ldr	r3, [pc, #68]	; (b5870 <module_user_init_hook+0x54>)
   b582c:	429a      	cmp	r2, r3
   b582e:	4b11      	ldr	r3, [pc, #68]	; (b5874 <module_user_init_hook+0x58>)
   b5830:	bf0c      	ite	eq
   b5832:	2201      	moveq	r2, #1
   b5834:	2200      	movne	r2, #0
   b5836:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5838:	d001      	beq.n	b583e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b583a:	f7ff ffb1 	bl	b57a0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b583e:	f7ff fa31 	bl	b4ca4 <HAL_RNG_GetRandomNumber>
   b5842:	4604      	mov	r4, r0
    srand(seed);
   b5844:	f001 fa62 	bl	b6d0c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5848:	4b0b      	ldr	r3, [pc, #44]	; (b5878 <module_user_init_hook+0x5c>)
   b584a:	b113      	cbz	r3, b5852 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b584c:	4620      	mov	r0, r4
   b584e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5852:	2100      	movs	r1, #0
   b5854:	4808      	ldr	r0, [pc, #32]	; (b5878 <module_user_init_hook+0x5c>)
   b5856:	f7ff fc01 	bl	b505c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b585a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b585e:	4807      	ldr	r0, [pc, #28]	; (b587c <module_user_init_hook+0x60>)
   b5860:	2100      	movs	r1, #0
   b5862:	f7ff bb67 	b.w	b4f34 <system_ctrl_set_app_request_handler>
   b5866:	bf00      	nop
   b5868:	000b5749 	.word	0x000b5749
   b586c:	2003f400 	.word	0x2003f400
   b5870:	9a271c1e 	.word	0x9a271c1e
   b5874:	2003e6f8 	.word	0x2003e6f8
   b5878:	00000000 	.word	0x00000000
   b587c:	000b57e5 	.word	0x000b57e5

000b5880 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5880:	4770      	bx	lr

000b5882 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b5882:	2000      	movs	r0, #0
   b5884:	4770      	bx	lr

000b5886 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5886:	b510      	push	{r4, lr}
   b5888:	2110      	movs	r1, #16
   b588a:	4604      	mov	r4, r0
   b588c:	f7fe fc05 	bl	b409a <_ZdlPvj>
   b5890:	4620      	mov	r0, r4
   b5892:	bd10      	pop	{r4, pc}

000b5894 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b5894:	b508      	push	{r3, lr}
      { delete this; }
   b5896:	f7ff fff6 	bl	b5886 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b589a:	bd08      	pop	{r3, pc}

000b589c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b589c:	b530      	push	{r4, r5, lr}
        type_(type) {
   b589e:	2200      	movs	r2, #0
   b58a0:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b58a4:	6002      	str	r2, [r0, #0]
   b58a6:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b58a8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b58aa:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b58ac:	680c      	ldr	r4, [r1, #0]
   b58ae:	8085      	strh	r5, [r0, #4]
   b58b0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b58b2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b58b4:	bd30      	pop	{r4, r5, pc}

000b58b6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b58b6:	b510      	push	{r4, lr}
   b58b8:	4604      	mov	r4, r0
    free((void*)msg_);
   b58ba:	6800      	ldr	r0, [r0, #0]
   b58bc:	f7ff fbde 	bl	b507c <free>
}
   b58c0:	4620      	mov	r0, r4
   b58c2:	bd10      	pop	{r4, pc}

000b58c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b58c4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b58c6:	68c4      	ldr	r4, [r0, #12]
   b58c8:	b1f4      	cbz	r4, b5908 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b58ca:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b58cc:	2b02      	cmp	r3, #2
   b58ce:	d103      	bne.n	b58d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b58d0:	f104 000c 	add.w	r0, r4, #12
   b58d4:	f7ff ffef 	bl	b58b6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b58d8:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b58da:	b135      	cbz	r5, b58ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b58dc:	4628      	mov	r0, r5
   b58de:	f7ff fdce 	bl	b547e <_ZNSt14_Function_baseD1Ev>
   b58e2:	2110      	movs	r1, #16
   b58e4:	4628      	mov	r0, r5
   b58e6:	f7fe fbd8 	bl	b409a <_ZdlPvj>
   b58ea:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b58ec:	b135      	cbz	r5, b58fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b58ee:	4628      	mov	r0, r5
   b58f0:	f7ff fdc5 	bl	b547e <_ZNSt14_Function_baseD1Ev>
   b58f4:	2110      	movs	r1, #16
   b58f6:	4628      	mov	r0, r5
   b58f8:	f7fe fbcf 	bl	b409a <_ZdlPvj>
   b58fc:	4620      	mov	r0, r4
   b58fe:	2114      	movs	r1, #20
   b5900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5904:	f7fe bbc9 	b.w	b409a <_ZdlPvj>
   b5908:	bd38      	pop	{r3, r4, r5, pc}

000b590a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b590a:	680b      	ldr	r3, [r1, #0]
   b590c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b590e:	684b      	ldr	r3, [r1, #4]
   b5910:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b5912:	b113      	cbz	r3, b591a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b5914:	685a      	ldr	r2, [r3, #4]
   b5916:	3201      	adds	r2, #1
   b5918:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b591a:	4770      	bx	lr

000b591c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b591c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b591e:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5920:	4668      	mov	r0, sp
   b5922:	460d      	mov	r5, r1
   b5924:	f7ff fff1 	bl	b590a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5928:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b592a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b592c:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b592e:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b5930:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5932:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b5934:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b5936:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b5938:	f7ff fdbe 	bl	b54b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b593c:	b135      	cbz	r5, b594c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b593e:	1d28      	adds	r0, r5, #4
   b5940:	f7ff fdba 	bl	b54b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5944:	2108      	movs	r1, #8
   b5946:	4628      	mov	r0, r5
   b5948:	f7fe fba7 	bl	b409a <_ZdlPvj>
        return p;
    }
   b594c:	4620      	mov	r0, r4
   b594e:	b003      	add	sp, #12
   b5950:	bd30      	pop	{r4, r5, pc}

000b5952 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b5952:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5954:	b510      	push	{r4, lr}
      if (_M_empty())
   b5956:	b90a      	cbnz	r2, b595c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b5958:	f000 fd86 	bl	b6468 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b595c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5960:	68c3      	ldr	r3, [r0, #12]
   b5962:	4718      	bx	r3

000b5964 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5964:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5966:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5968:	f100 0110 	add.w	r1, r0, #16
   b596c:	f7ff fff1 	bl	b5952 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b5970:	bd08      	pop	{r3, pc}

000b5972 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b5972:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5974:	b510      	push	{r4, lr}
      if (_M_empty())
   b5976:	b90a      	cbnz	r2, b597c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b5978:	f000 fd76 	bl	b6468 <_ZSt25__throw_bad_function_callv>
    }
   b597c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5980:	68c3      	ldr	r3, [r0, #12]
   b5982:	4718      	bx	r3

000b5984 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5984:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5986:	6800      	ldr	r0, [r0, #0]
   b5988:	f100 0110 	add.w	r1, r0, #16
   b598c:	f7ff fff1 	bl	b5972 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b5990:	bd08      	pop	{r3, pc}
	...

000b5994 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b5994:	b538      	push	{r3, r4, r5, lr}
   b5996:	2300      	movs	r3, #0
   b5998:	4604      	mov	r4, r0
   b599a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b599c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b599e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b59a0:	f7fe fb77 	bl	b4092 <_Znwj>
   b59a4:	b128      	cbz	r0, b59b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b59a6:	2301      	movs	r3, #1
   b59a8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b59ac:	4b02      	ldr	r3, [pc, #8]	; (b59b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b59ae:	6003      	str	r3, [r0, #0]
   b59b0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b59b2:	6020      	str	r0, [r4, #0]
	}
   b59b4:	4620      	mov	r0, r4
   b59b6:	bd38      	pop	{r3, r4, r5, pc}
   b59b8:	000b7020 	.word	0x000b7020

000b59bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b59bc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b59be:	2300      	movs	r3, #0
   b59c0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b59c2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b59c4:	4604      	mov	r4, r0
   b59c6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b59c8:	b12b      	cbz	r3, b59d6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b59ca:	2202      	movs	r2, #2
   b59cc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b59ce:	68eb      	ldr	r3, [r5, #12]
   b59d0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b59d2:	68ab      	ldr	r3, [r5, #8]
   b59d4:	60a3      	str	r3, [r4, #8]
    }
   b59d6:	4620      	mov	r0, r4
   b59d8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b59dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b59dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b59de:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b59e0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b59e2:	4668      	mov	r0, sp
   b59e4:	f7ff ff5a 	bl	b589c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b59e8:	f04f 0302 	mov.w	r3, #2
   b59ec:	e8d4 2f4f 	ldrexb	r2, [r4]
   b59f0:	2a00      	cmp	r2, #0
   b59f2:	d103      	bne.n	b59fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b59f4:	e8c4 3f41 	strexb	r1, r3, [r4]
   b59f8:	2900      	cmp	r1, #0
   b59fa:	d1f7      	bne.n	b59ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b59fc:	d125      	bne.n	b5a4a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b59fe:	f104 050c 	add.w	r5, r4, #12
   b5a02:	4669      	mov	r1, sp
   b5a04:	4628      	mov	r0, r5
   b5a06:	f7ff ff49 	bl	b589c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b5a0a:	f3bf 8f5b 	dmb	ish
   b5a0e:	2301      	movs	r3, #1
   b5a10:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5a12:	2000      	movs	r0, #0
   b5a14:	f104 0308 	add.w	r3, r4, #8
   b5a18:	f3bf 8f5b 	dmb	ish
   b5a1c:	e853 6f00 	ldrex	r6, [r3]
   b5a20:	e843 0200 	strex	r2, r0, [r3]
   b5a24:	2a00      	cmp	r2, #0
   b5a26:	d1f9      	bne.n	b5a1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b5a28:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5a2c:	b16e      	cbz	r6, b5a4a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b5a2e:	f7ff fa69 	bl	b4f04 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5a32:	b178      	cbz	r0, b5a54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5a34:	4629      	mov	r1, r5
   b5a36:	4630      	mov	r0, r6
   b5a38:	f7ff ff8b 	bl	b5952 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b5a3c:	4630      	mov	r0, r6
   b5a3e:	f7ff fd1e 	bl	b547e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5a42:	2110      	movs	r1, #16
   b5a44:	4630      	mov	r0, r6
   b5a46:	f7fe fb28 	bl	b409a <_ZdlPvj>
        p_->setError(std::move(error));
   b5a4a:	4668      	mov	r0, sp
   b5a4c:	f7ff ff33 	bl	b58b6 <_ZN8particle5ErrorD1Ev>
    }
   b5a50:	b009      	add	sp, #36	; 0x24
   b5a52:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5a54:	4631      	mov	r1, r6
   b5a56:	a802      	add	r0, sp, #8
   b5a58:	f7ff ffb0 	bl	b59bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5a5c:	68e0      	ldr	r0, [r4, #12]
   b5a5e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5a62:	b108      	cbz	r0, b5a68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b5a64:	f001 f988 	bl	b6d78 <strdup>
        type_(type) {
   b5a68:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5a6a:	2010      	movs	r0, #16
   b5a6c:	f8ad 501c 	strh.w	r5, [sp, #28]
   b5a70:	f7fe fb0f 	bl	b4092 <_Znwj>
   b5a74:	4605      	mov	r5, r0
   b5a76:	b1e8      	cbz	r0, b5ab4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b5a78:	2700      	movs	r7, #0
   b5a7a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5a7c:	2018      	movs	r0, #24
   b5a7e:	f7fe fb08 	bl	b4092 <_Znwj>
   b5a82:	4604      	mov	r4, r0
   b5a84:	b188      	cbz	r0, b5aaa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b5a86:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b5a88:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5a8a:	a802      	add	r0, sp, #8
   b5a8c:	f7ff fd1c 	bl	b54c8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5a90:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5a92:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5a94:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5a96:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5a98:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5a9a:	a906      	add	r1, sp, #24
   b5a9c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5a9e:	60e3      	str	r3, [r4, #12]
   b5aa0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b5aa4:	9205      	str	r2, [sp, #20]
   b5aa6:	f7ff fef9 	bl	b589c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b5aaa:	4b08      	ldr	r3, [pc, #32]	; (b5acc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b5aac:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5aae:	4b08      	ldr	r3, [pc, #32]	; (b5ad0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5ab0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5ab2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b5ab4:	a806      	add	r0, sp, #24
   b5ab6:	f7ff fefe 	bl	b58b6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b5aba:	a802      	add	r0, sp, #8
   b5abc:	f7ff fcdf 	bl	b547e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5ac0:	2200      	movs	r2, #0
   b5ac2:	4629      	mov	r1, r5
   b5ac4:	4803      	ldr	r0, [pc, #12]	; (b5ad4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b5ac6:	f7ff fa25 	bl	b4f14 <application_thread_invoke>
   b5aca:	e7b7      	b.n	b5a3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b5acc:	000b5965 	.word	0x000b5965
   b5ad0:	000b5be9 	.word	0x000b5be9
   b5ad4:	000b604d 	.word	0x000b604d

000b5ad8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b5ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5adc:	b08b      	sub	sp, #44	; 0x2c
   b5ade:	4605      	mov	r5, r0
   b5ae0:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b5ae4:	460f      	mov	r7, r1
   b5ae6:	4690      	mov	r8, r2
   b5ae8:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5aea:	f7ff fa9f 	bl	b502c <spark_cloud_flag_connected>
   b5aee:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b5af0:	4683      	mov	fp, r0
   b5af2:	bb38      	cbnz	r0, b5b44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b5af4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b5af8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5afa:	a905      	add	r1, sp, #20
   b5afc:	4630      	mov	r0, r6
   b5afe:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5b02:	f7ff fecb 	bl	b589c <_ZN8particle5ErrorC1EOS0_>
   b5b06:	2014      	movs	r0, #20
   b5b08:	f7fe fac3 	bl	b4092 <_Znwj>
   b5b0c:	4604      	mov	r4, r0
   b5b0e:	b148      	cbz	r0, b5b24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b5b10:	2302      	movs	r3, #2
   b5b12:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5b14:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5b16:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5b1a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b5b1c:	4631      	mov	r1, r6
   b5b1e:	300c      	adds	r0, #12
   b5b20:	f7ff febc 	bl	b589c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5b24:	4628      	mov	r0, r5
	: __shared_count(__p)
   b5b26:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5b28:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b5b2c:	f7ff ff32 	bl	b5994 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5b30:	4630      	mov	r0, r6
   b5b32:	f7ff fec0 	bl	b58b6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b5b36:	a805      	add	r0, sp, #20
   b5b38:	f7ff febd 	bl	b58b6 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b5b3c:	4628      	mov	r0, r5
   b5b3e:	b00b      	add	sp, #44	; 0x2c
   b5b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b5b44:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b5b46:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b5b48:	2014      	movs	r0, #20
   b5b4a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b5b4e:	9307      	str	r3, [sp, #28]
   b5b50:	f7fe fa9f 	bl	b4092 <_Znwj>
   b5b54:	4601      	mov	r1, r0
   b5b56:	b118      	cbz	r0, b5b60 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5b58:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b5b5c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5b5e:	7044      	strb	r4, [r0, #1]
   b5b60:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5b62:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b5b64:	f7ff ff16 	bl	b5994 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b5b68:	4b1e      	ldr	r3, [pc, #120]	; (b5be4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b5b6a:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b5b6c:	2008      	movs	r0, #8
   b5b6e:	f7fe fa90 	bl	b4092 <_Znwj>
   b5b72:	4604      	mov	r4, r0
   b5b74:	b110      	cbz	r0, b5b7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b5b76:	a903      	add	r1, sp, #12
   b5b78:	f7ff fec7 	bl	b590a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5b7c:	9600      	str	r6, [sp, #0]
   b5b7e:	fa5f f38a 	uxtb.w	r3, sl
   b5b82:	464a      	mov	r2, r9
   b5b84:	4641      	mov	r1, r8
   b5b86:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b5b88:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5b8a:	f7ff fa57 	bl	b503c <spark_send_event>
   b5b8e:	b9b8      	cbnz	r0, b5bc0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b5b90:	9b03      	ldr	r3, [sp, #12]
   b5b92:	785b      	ldrb	r3, [r3, #1]
   b5b94:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b5b98:	b993      	cbnz	r3, b5bc0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b5b9a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b5b9e:	a905      	add	r1, sp, #20
   b5ba0:	a803      	add	r0, sp, #12
   b5ba2:	9205      	str	r2, [sp, #20]
   b5ba4:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5ba8:	f7ff ff18 	bl	b59dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5bac:	a805      	add	r0, sp, #20
   b5bae:	f7ff fe82 	bl	b58b6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b5bb2:	a805      	add	r0, sp, #20
   b5bb4:	9909      	ldr	r1, [sp, #36]	; 0x24
   b5bb6:	f7ff feb1 	bl	b591c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b5bba:	a806      	add	r0, sp, #24
   b5bbc:	f7ff fc7c 	bl	b54b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5bc0:	a903      	add	r1, sp, #12
   b5bc2:	a805      	add	r0, sp, #20
   b5bc4:	f7ff fea1 	bl	b590a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5bc8:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5bca:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5bcc:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b5bce:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b5bd0:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5bd2:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b5bd4:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b5bd6:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b5bd8:	f7ff fc6e 	bl	b54b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5bdc:	a804      	add	r0, sp, #16
   b5bde:	f7ff fc6b 	bl	b54b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b5be2:	e7ab      	b.n	b5b3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b5be4:	000b5c65 	.word	0x000b5c65

000b5be8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b5be8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5bea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5bec:	4605      	mov	r5, r0
	switch (__op)
   b5bee:	d103      	bne.n	b5bf8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5bf0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5bf2:	6003      	str	r3, [r0, #0]
      }
   b5bf4:	2000      	movs	r0, #0
   b5bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b5bf8:	2a02      	cmp	r2, #2
   b5bfa:	d010      	beq.n	b5c1e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b5bfc:	2a03      	cmp	r2, #3
   b5bfe:	d1f9      	bne.n	b5bf4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5c00:	6804      	ldr	r4, [r0, #0]
   b5c02:	2c00      	cmp	r4, #0
   b5c04:	d0f6      	beq.n	b5bf4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b5c06:	f104 0010 	add.w	r0, r4, #16
   b5c0a:	f7ff fe54 	bl	b58b6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b5c0e:	4620      	mov	r0, r4
   b5c10:	f7ff fc35 	bl	b547e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5c14:	2118      	movs	r1, #24
   b5c16:	4620      	mov	r0, r4
   b5c18:	f7fe fa3f 	bl	b409a <_ZdlPvj>
   b5c1c:	e7ea      	b.n	b5bf4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5c1e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b5c20:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5c22:	f7fe fa36 	bl	b4092 <_Znwj>
   b5c26:	4604      	mov	r4, r0
   b5c28:	b150      	cbz	r0, b5c40 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b5c2a:	4631      	mov	r1, r6
   b5c2c:	f7ff fec6 	bl	b59bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5c30:	6930      	ldr	r0, [r6, #16]
   b5c32:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5c36:	b108      	cbz	r0, b5c3c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b5c38:	f001 f89e 	bl	b6d78 <strdup>
        type_(type) {
   b5c3c:	6120      	str	r0, [r4, #16]
   b5c3e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b5c40:	602c      	str	r4, [r5, #0]
	}
   b5c42:	e7d7      	b.n	b5bf4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b5c44 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b5c44:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5c46:	2300      	movs	r3, #0
   b5c48:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5c4a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5c4c:	4604      	mov	r4, r0
   b5c4e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5c50:	b12b      	cbz	r3, b5c5e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5c52:	2202      	movs	r2, #2
   b5c54:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5c56:	68eb      	ldr	r3, [r5, #12]
   b5c58:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5c5a:	68ab      	ldr	r3, [r5, #8]
   b5c5c:	60a3      	str	r3, [r4, #8]
    }
   b5c5e:	4620      	mov	r0, r4
   b5c60:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5c64 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b5c64:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5c66:	b089      	sub	sp, #36	; 0x24
   b5c68:	4604      	mov	r4, r0
   b5c6a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b5c6c:	a801      	add	r0, sp, #4
   b5c6e:	4611      	mov	r1, r2
   b5c70:	f7ff fe54 	bl	b591c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b5c74:	b1a4      	cbz	r4, b5ca0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b5c76:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5c78:	b11d      	cbz	r5, b5c82 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b5c7a:	4628      	mov	r0, r5
   b5c7c:	f001 f87c 	bl	b6d78 <strdup>
   b5c80:	4605      	mov	r5, r0
   b5c82:	a801      	add	r0, sp, #4
   b5c84:	a903      	add	r1, sp, #12
        type_(type) {
   b5c86:	9503      	str	r5, [sp, #12]
   b5c88:	f8ad 4010 	strh.w	r4, [sp, #16]
   b5c8c:	f7ff fea6 	bl	b59dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5c90:	a803      	add	r0, sp, #12
   b5c92:	f7ff fe10 	bl	b58b6 <_ZN8particle5ErrorD1Ev>
   b5c96:	a802      	add	r0, sp, #8
   b5c98:	f7ff fc0e 	bl	b54b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5c9c:	b009      	add	sp, #36	; 0x24
   b5c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b5ca0:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5ca2:	2301      	movs	r3, #1
   b5ca4:	e8d5 2f4f 	ldrexb	r2, [r5]
   b5ca8:	2a00      	cmp	r2, #0
   b5caa:	d103      	bne.n	b5cb4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b5cac:	e8c5 3f41 	strexb	r1, r3, [r5]
   b5cb0:	2900      	cmp	r1, #0
   b5cb2:	d1f7      	bne.n	b5ca4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b5cb4:	d1ef      	bne.n	b5c96 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b5cb6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b5cb8:	f3bf 8f5b 	dmb	ish
   b5cbc:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5cbe:	1d2b      	adds	r3, r5, #4
   b5cc0:	f3bf 8f5b 	dmb	ish
   b5cc4:	e853 6f00 	ldrex	r6, [r3]
   b5cc8:	e843 4200 	strex	r2, r4, [r3]
   b5ccc:	2a00      	cmp	r2, #0
   b5cce:	d1f9      	bne.n	b5cc4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b5cd0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5cd4:	2e00      	cmp	r6, #0
   b5cd6:	d0de      	beq.n	b5c96 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b5cd8:	4620      	mov	r0, r4
   b5cda:	f7ff f913 	bl	b4f04 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5cde:	4607      	mov	r7, r0
   b5ce0:	b160      	cbz	r0, b5cfc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5ce2:	f105 010c 	add.w	r1, r5, #12
   b5ce6:	4630      	mov	r0, r6
   b5ce8:	f7ff fe43 	bl	b5972 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b5cec:	4630      	mov	r0, r6
   b5cee:	f7ff fbc6 	bl	b547e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5cf2:	2110      	movs	r1, #16
   b5cf4:	4630      	mov	r0, r6
   b5cf6:	f7fe f9d0 	bl	b409a <_ZdlPvj>
   b5cfa:	e7cc      	b.n	b5c96 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5cfc:	4631      	mov	r1, r6
   b5cfe:	a803      	add	r0, sp, #12
   b5d00:	f7ff ffa0 	bl	b5c44 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5d04:	7b2b      	ldrb	r3, [r5, #12]
   b5d06:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5d0a:	2010      	movs	r0, #16
   b5d0c:	f7fe f9c1 	bl	b4092 <_Znwj>
   b5d10:	4605      	mov	r5, r0
   b5d12:	b1d0      	cbz	r0, b5d4a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b5d14:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5d16:	2014      	movs	r0, #20
   b5d18:	f7fe f9bb 	bl	b4092 <_Znwj>
   b5d1c:	4604      	mov	r4, r0
   b5d1e:	b178      	cbz	r0, b5d40 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b5d20:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5d22:	4601      	mov	r1, r0
   b5d24:	a803      	add	r0, sp, #12
   b5d26:	f7ff fbcf 	bl	b54c8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5d2a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5d2c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5d2e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5d30:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b5d32:	9205      	str	r2, [sp, #20]
   b5d34:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5d36:	60e3      	str	r3, [r4, #12]
   b5d38:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b5d3c:	9206      	str	r2, [sp, #24]
   b5d3e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b5d40:	4b06      	ldr	r3, [pc, #24]	; (b5d5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b5d42:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5d44:	4b06      	ldr	r3, [pc, #24]	; (b5d60 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5d46:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5d48:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b5d4a:	a803      	add	r0, sp, #12
   b5d4c:	f7ff fb97 	bl	b547e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5d50:	2200      	movs	r2, #0
   b5d52:	4629      	mov	r1, r5
   b5d54:	4803      	ldr	r0, [pc, #12]	; (b5d64 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b5d56:	f7ff f8dd 	bl	b4f14 <application_thread_invoke>
   b5d5a:	e7c7      	b.n	b5cec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b5d5c:	000b5985 	.word	0x000b5985
   b5d60:	000b5d69 	.word	0x000b5d69
   b5d64:	000b604d 	.word	0x000b604d

000b5d68 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b5d68:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5d6a:	b570      	push	{r4, r5, r6, lr}
   b5d6c:	4604      	mov	r4, r0
	switch (__op)
   b5d6e:	d103      	bne.n	b5d78 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5d70:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5d72:	6003      	str	r3, [r0, #0]
      }
   b5d74:	2000      	movs	r0, #0
   b5d76:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b5d78:	2a02      	cmp	r2, #2
   b5d7a:	d00c      	beq.n	b5d96 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b5d7c:	2a03      	cmp	r2, #3
   b5d7e:	d1f9      	bne.n	b5d74 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5d80:	6804      	ldr	r4, [r0, #0]
   b5d82:	2c00      	cmp	r4, #0
   b5d84:	d0f6      	beq.n	b5d74 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b5d86:	4620      	mov	r0, r4
   b5d88:	f7ff fb79 	bl	b547e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5d8c:	2114      	movs	r1, #20
   b5d8e:	4620      	mov	r0, r4
   b5d90:	f7fe f983 	bl	b409a <_ZdlPvj>
   b5d94:	e7ee      	b.n	b5d74 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5d96:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b5d98:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5d9a:	f7fe f97a 	bl	b4092 <_Znwj>
   b5d9e:	4605      	mov	r5, r0
   b5da0:	b120      	cbz	r0, b5dac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b5da2:	4631      	mov	r1, r6
   b5da4:	f7ff ff4e 	bl	b5c44 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b5da8:	7c33      	ldrb	r3, [r6, #16]
   b5daa:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b5dac:	6025      	str	r5, [r4, #0]
	}
   b5dae:	e7e1      	b.n	b5d74 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b5db0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5db0:	4770      	bx	lr

000b5db2 <_ZN9IPAddressD0Ev>:
   b5db2:	b510      	push	{r4, lr}
   b5db4:	2118      	movs	r1, #24
   b5db6:	4604      	mov	r4, r0
   b5db8:	f7fe f96f 	bl	b409a <_ZdlPvj>
   b5dbc:	4620      	mov	r0, r4
   b5dbe:	bd10      	pop	{r4, pc}

000b5dc0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5dc2:	7d03      	ldrb	r3, [r0, #20]
   b5dc4:	2b06      	cmp	r3, #6
{
   b5dc6:	b08d      	sub	sp, #52	; 0x34
   b5dc8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5dca:	f100 0704 	add.w	r7, r0, #4
   b5dce:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5dd2:	d012      	beq.n	b5dfa <_ZNK9IPAddress7printToER5Print+0x3a>
   b5dd4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5dd8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5ddc:	220a      	movs	r2, #10
   b5dde:	4630      	mov	r0, r6
   b5de0:	f7ff fbcd 	bl	b557e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5de4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5de6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5de8:	d019      	beq.n	b5e1e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5dea:	2c00      	cmp	r4, #0
   b5dec:	d0f4      	beq.n	b5dd8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5dee:	212e      	movs	r1, #46	; 0x2e
   b5df0:	4630      	mov	r0, r6
   b5df2:	f7ff fbab 	bl	b554c <_ZN5Print5printEc>
   b5df6:	4404      	add	r4, r0
   b5df8:	e7ee      	b.n	b5dd8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5dfa:	232f      	movs	r3, #47	; 0x2f
   b5dfc:	466a      	mov	r2, sp
   b5dfe:	4639      	mov	r1, r7
   b5e00:	200a      	movs	r0, #10
		buf[0] = 0;
   b5e02:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5e06:	f7fe ff75 	bl	b4cf4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5e0a:	4668      	mov	r0, sp
   b5e0c:	f000 ffd1 	bl	b6db2 <strlen>
   b5e10:	6833      	ldr	r3, [r6, #0]
   b5e12:	4602      	mov	r2, r0
   b5e14:	68db      	ldr	r3, [r3, #12]
   b5e16:	4669      	mov	r1, sp
   b5e18:	4630      	mov	r0, r6
   b5e1a:	4798      	blx	r3
   b5e1c:	4604      	mov	r4, r0
    }
    return n;
}
   b5e1e:	4620      	mov	r0, r4
   b5e20:	b00d      	add	sp, #52	; 0x34
   b5e22:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5e24 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5e24:	b510      	push	{r4, lr}
   b5e26:	4b05      	ldr	r3, [pc, #20]	; (b5e3c <_ZN9IPAddressC1Ev+0x18>)
   b5e28:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5e2a:	2211      	movs	r2, #17
   b5e2c:	f840 3b04 	str.w	r3, [r0], #4
   b5e30:	2100      	movs	r1, #0
   b5e32:	f000 ff63 	bl	b6cfc <memset>
}
   b5e36:	4620      	mov	r0, r4
   b5e38:	bd10      	pop	{r4, pc}
   b5e3a:	bf00      	nop
   b5e3c:	000b703c 	.word	0x000b703c

000b5e40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5e40:	4603      	mov	r3, r0
   b5e42:	4a07      	ldr	r2, [pc, #28]	; (b5e60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5e44:	b510      	push	{r4, lr}
   b5e46:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5e4a:	f101 0210 	add.w	r2, r1, #16
   b5e4e:	f851 4b04 	ldr.w	r4, [r1], #4
   b5e52:	f843 4b04 	str.w	r4, [r3], #4
   b5e56:	4291      	cmp	r1, r2
   b5e58:	d1f9      	bne.n	b5e4e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5e5a:	780a      	ldrb	r2, [r1, #0]
   b5e5c:	701a      	strb	r2, [r3, #0]
}
   b5e5e:	bd10      	pop	{r4, pc}
   b5e60:	000b703c 	.word	0x000b703c

000b5e64 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5e64:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5e66:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5e6a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5e6e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5e72:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5e76:	2304      	movs	r3, #4
   b5e78:	6041      	str	r1, [r0, #4]
   b5e7a:	7503      	strb	r3, [r0, #20]
}
   b5e7c:	bd10      	pop	{r4, pc}
	...

000b5e80 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5e80:	b507      	push	{r0, r1, r2, lr}
   b5e82:	4b06      	ldr	r3, [pc, #24]	; (b5e9c <_ZN9IPAddressC1EPKh+0x1c>)
   b5e84:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5e86:	78cb      	ldrb	r3, [r1, #3]
   b5e88:	9300      	str	r3, [sp, #0]
   b5e8a:	788b      	ldrb	r3, [r1, #2]
   b5e8c:	784a      	ldrb	r2, [r1, #1]
   b5e8e:	7809      	ldrb	r1, [r1, #0]
   b5e90:	f7ff ffe8 	bl	b5e64 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5e94:	b003      	add	sp, #12
   b5e96:	f85d fb04 	ldr.w	pc, [sp], #4
   b5e9a:	bf00      	nop
   b5e9c:	000b703c 	.word	0x000b703c

000b5ea0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5ea0:	7441      	strb	r1, [r0, #17]
}
   b5ea2:	4770      	bx	lr

000b5ea4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5ea4:	4770      	bx	lr

000b5ea6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5ea6:	4770      	bx	lr

000b5ea8 <_ZN9USBSerial4readEv>:
{
   b5ea8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5eaa:	2100      	movs	r1, #0
   b5eac:	7c00      	ldrb	r0, [r0, #16]
   b5eae:	f7fe ffd1 	bl	b4e54 <HAL_USB_USART_Receive_Data>
}
   b5eb2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5eb6:	bd08      	pop	{r3, pc}

000b5eb8 <_ZN9USBSerial4peekEv>:
{
   b5eb8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5eba:	2101      	movs	r1, #1
   b5ebc:	7c00      	ldrb	r0, [r0, #16]
   b5ebe:	f7fe ffc9 	bl	b4e54 <HAL_USB_USART_Receive_Data>
}
   b5ec2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5ec6:	bd08      	pop	{r3, pc}

000b5ec8 <_ZN9USBSerial17availableForWriteEv>:
{
   b5ec8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5eca:	7c00      	ldrb	r0, [r0, #16]
   b5ecc:	f7fe ffba 	bl	b4e44 <HAL_USB_USART_Available_Data_For_Write>
}
   b5ed0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5ed4:	bd08      	pop	{r3, pc}

000b5ed6 <_ZN9USBSerial9availableEv>:
{
   b5ed6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5ed8:	7c00      	ldrb	r0, [r0, #16]
   b5eda:	f7fe ffab 	bl	b4e34 <HAL_USB_USART_Available_Data>
}
   b5ede:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5ee2:	bd08      	pop	{r3, pc}

000b5ee4 <_ZN9USBSerial5writeEh>:
{
   b5ee4:	b513      	push	{r0, r1, r4, lr}
   b5ee6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5ee8:	7c00      	ldrb	r0, [r0, #16]
{
   b5eea:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5eec:	f7fe ffaa 	bl	b4e44 <HAL_USB_USART_Available_Data_For_Write>
   b5ef0:	2800      	cmp	r0, #0
   b5ef2:	9901      	ldr	r1, [sp, #4]
   b5ef4:	dc01      	bgt.n	b5efa <_ZN9USBSerial5writeEh+0x16>
   b5ef6:	7c60      	ldrb	r0, [r4, #17]
   b5ef8:	b120      	cbz	r0, b5f04 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5efa:	7c20      	ldrb	r0, [r4, #16]
   b5efc:	f7fe ffb2 	bl	b4e64 <HAL_USB_USART_Send_Data>
   b5f00:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5f04:	b002      	add	sp, #8
   b5f06:	bd10      	pop	{r4, pc}

000b5f08 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5f08:	7c00      	ldrb	r0, [r0, #16]
   b5f0a:	f7fe bfb3 	b.w	b4e74 <HAL_USB_USART_Flush_Data>

000b5f0e <_ZN9USBSerialD0Ev>:
   b5f0e:	b510      	push	{r4, lr}
   b5f10:	2114      	movs	r1, #20
   b5f12:	4604      	mov	r4, r0
   b5f14:	f7fe f8c1 	bl	b409a <_ZdlPvj>
   b5f18:	4620      	mov	r0, r4
   b5f1a:	bd10      	pop	{r4, pc}

000b5f1c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5f1c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5f22:	4604      	mov	r4, r0
   b5f24:	4608      	mov	r0, r1
   b5f26:	2100      	movs	r1, #0
   b5f28:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5f2c:	4b04      	ldr	r3, [pc, #16]	; (b5f40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5f2e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5f30:	2301      	movs	r3, #1
  _serial = serial;
   b5f32:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5f34:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5f36:	4611      	mov	r1, r2
   b5f38:	f7fe ff6c 	bl	b4e14 <HAL_USB_USART_Init>
}
   b5f3c:	4620      	mov	r0, r4
   b5f3e:	bd10      	pop	{r4, pc}
   b5f40:	000b7050 	.word	0x000b7050

000b5f44 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5f44:	7c00      	ldrb	r0, [r0, #16]
   b5f46:	2200      	movs	r2, #0
   b5f48:	f7fe bf6c 	b.w	b4e24 <HAL_USB_USART_Begin>

000b5f4c <_Z19acquireSerialBufferv>:
{
   b5f4c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5f4e:	2214      	movs	r2, #20
{
   b5f50:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5f52:	2100      	movs	r1, #0
   b5f54:	f000 fed2 	bl	b6cfc <memset>
}
   b5f58:	4620      	mov	r0, r4
   b5f5a:	bd10      	pop	{r4, pc}

000b5f5c <_Z16_fetch_usbserialv>:
{
   b5f5c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5f5e:	4c0f      	ldr	r4, [pc, #60]	; (b5f9c <_Z16_fetch_usbserialv+0x40>)
{
   b5f60:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5f62:	a803      	add	r0, sp, #12
   b5f64:	f7ff fff2 	bl	b5f4c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5f68:	7821      	ldrb	r1, [r4, #0]
   b5f6a:	f3bf 8f5b 	dmb	ish
   b5f6e:	f011 0101 	ands.w	r1, r1, #1
   b5f72:	d10f      	bne.n	b5f94 <_Z16_fetch_usbserialv+0x38>
   b5f74:	4620      	mov	r0, r4
   b5f76:	9101      	str	r1, [sp, #4]
   b5f78:	f7fe f891 	bl	b409e <__cxa_guard_acquire>
   b5f7c:	9901      	ldr	r1, [sp, #4]
   b5f7e:	b148      	cbz	r0, b5f94 <_Z16_fetch_usbserialv+0x38>
   b5f80:	aa03      	add	r2, sp, #12
   b5f82:	4807      	ldr	r0, [pc, #28]	; (b5fa0 <_Z16_fetch_usbserialv+0x44>)
   b5f84:	f7ff ffca 	bl	b5f1c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5f88:	4620      	mov	r0, r4
   b5f8a:	f7fe f88d 	bl	b40a8 <__cxa_guard_release>
   b5f8e:	4805      	ldr	r0, [pc, #20]	; (b5fa4 <_Z16_fetch_usbserialv+0x48>)
   b5f90:	f000 fe8c 	bl	b6cac <atexit>
	return _usbserial;
}
   b5f94:	4802      	ldr	r0, [pc, #8]	; (b5fa0 <_Z16_fetch_usbserialv+0x44>)
   b5f96:	b008      	add	sp, #32
   b5f98:	bd10      	pop	{r4, pc}
   b5f9a:	bf00      	nop
   b5f9c:	2003e700 	.word	0x2003e700
   b5fa0:	2003e704 	.word	0x2003e704
   b5fa4:	000b5ea5 	.word	0x000b5ea5

000b5fa8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5fa8:	4770      	bx	lr

000b5faa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5faa:	7441      	strb	r1, [r0, #17]
}
   b5fac:	4770      	bx	lr

000b5fae <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5fae:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5fb0:	7c00      	ldrb	r0, [r0, #16]
   b5fb2:	f7fe fecf 	bl	b4d54 <hal_usart_available_data_for_write>
}
   b5fb6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5fba:	bd08      	pop	{r3, pc}

000b5fbc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5fbc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5fbe:	7c00      	ldrb	r0, [r0, #16]
   b5fc0:	f7fe fea8 	bl	b4d14 <hal_usart_available>
}
   b5fc4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5fc8:	bd08      	pop	{r3, pc}

000b5fca <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5fca:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5fcc:	7c00      	ldrb	r0, [r0, #16]
   b5fce:	f7fe feb1 	bl	b4d34 <hal_usart_peek>
}
   b5fd2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5fd6:	bd08      	pop	{r3, pc}

000b5fd8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5fd8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5fda:	7c00      	ldrb	r0, [r0, #16]
   b5fdc:	f7fe fea2 	bl	b4d24 <hal_usart_read>
}
   b5fe0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5fe4:	bd08      	pop	{r3, pc}

000b5fe6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5fe6:	7c00      	ldrb	r0, [r0, #16]
   b5fe8:	f7fe beac 	b.w	b4d44 <hal_usart_flush>

000b5fec <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5fec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5fee:	7c45      	ldrb	r5, [r0, #17]
{
   b5ff0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5ff2:	b12d      	cbz	r5, b6000 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5ff4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5ff6:	b003      	add	sp, #12
   b5ff8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5ffc:	f7fe be82 	b.w	b4d04 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6000:	7c00      	ldrb	r0, [r0, #16]
   b6002:	9101      	str	r1, [sp, #4]
   b6004:	f7fe fea6 	bl	b4d54 <hal_usart_available_data_for_write>
   b6008:	2800      	cmp	r0, #0
   b600a:	9901      	ldr	r1, [sp, #4]
   b600c:	dcf2      	bgt.n	b5ff4 <_ZN11USARTSerial5writeEh+0x8>
}
   b600e:	4628      	mov	r0, r5
   b6010:	b003      	add	sp, #12
   b6012:	bd30      	pop	{r4, r5, pc}

000b6014 <_ZN11USARTSerialD0Ev>:
   b6014:	b510      	push	{r4, lr}
   b6016:	2114      	movs	r1, #20
   b6018:	4604      	mov	r4, r0
   b601a:	f7fe f83e 	bl	b409a <_ZdlPvj>
   b601e:	4620      	mov	r0, r4
   b6020:	bd10      	pop	{r4, pc}
	...

000b6024 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6024:	b510      	push	{r4, lr}
   b6026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b602a:	4604      	mov	r4, r0
   b602c:	4608      	mov	r0, r1
   b602e:	4611      	mov	r1, r2
   b6030:	2200      	movs	r2, #0
   b6032:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6036:	4b04      	ldr	r3, [pc, #16]	; (b6048 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6038:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b603a:	2301      	movs	r3, #1
  _serial = serial;
   b603c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b603e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6040:	f7fe fe90 	bl	b4d64 <hal_usart_init_ex>
}
   b6044:	4620      	mov	r0, r4
   b6046:	bd10      	pop	{r4, pc}
   b6048:	000b7080 	.word	0x000b7080

000b604c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b604c:	b510      	push	{r4, lr}
      if (_M_empty())
   b604e:	6883      	ldr	r3, [r0, #8]
   b6050:	4604      	mov	r4, r0
   b6052:	b90b      	cbnz	r3, b6058 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b6054:	f000 fa08 	bl	b6468 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6058:	68c3      	ldr	r3, [r0, #12]
   b605a:	4798      	blx	r3
      if (_M_manager)
   b605c:	68a3      	ldr	r3, [r4, #8]
   b605e:	b11b      	cbz	r3, b6068 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6060:	2203      	movs	r2, #3
   b6062:	4621      	mov	r1, r4
   b6064:	4620      	mov	r0, r4
   b6066:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b6068:	4620      	mov	r0, r4
   b606a:	2110      	movs	r1, #16
}
   b606c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b6070:	f7fe b813 	b.w	b409a <_ZdlPvj>

000b6074 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6074:	4770      	bx	lr

000b6076 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6078:	4606      	mov	r6, r0
   b607a:	4615      	mov	r5, r2
   b607c:	460c      	mov	r4, r1
   b607e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6080:	42bc      	cmp	r4, r7
   b6082:	d006      	beq.n	b6092 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6084:	6833      	ldr	r3, [r6, #0]
   b6086:	f814 1b01 	ldrb.w	r1, [r4], #1
   b608a:	689b      	ldr	r3, [r3, #8]
   b608c:	4630      	mov	r0, r6
   b608e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6090:	e7f6      	b.n	b6080 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6092:	4628      	mov	r0, r5
   b6094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6096 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6096:	7c00      	ldrb	r0, [r0, #16]
   b6098:	2200      	movs	r2, #0
   b609a:	f7fe be83 	b.w	b4da4 <hal_i2c_write>

000b609e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b609e:	7c00      	ldrb	r0, [r0, #16]
   b60a0:	2100      	movs	r1, #0
   b60a2:	f7fe be87 	b.w	b4db4 <hal_i2c_available>

000b60a6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b60a6:	7c00      	ldrb	r0, [r0, #16]
   b60a8:	2100      	movs	r1, #0
   b60aa:	f7fe be8b 	b.w	b4dc4 <hal_i2c_read>

000b60ae <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b60ae:	7c00      	ldrb	r0, [r0, #16]
   b60b0:	2100      	movs	r1, #0
   b60b2:	f7fe be8f 	b.w	b4dd4 <hal_i2c_peek>

000b60b6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b60b6:	7c00      	ldrb	r0, [r0, #16]
   b60b8:	2100      	movs	r1, #0
   b60ba:	f7fe be93 	b.w	b4de4 <hal_i2c_flush>

000b60be <_ZN7TwoWireD0Ev>:
   b60be:	b510      	push	{r4, lr}
   b60c0:	2114      	movs	r1, #20
   b60c2:	4604      	mov	r4, r0
   b60c4:	f7fd ffe9 	bl	b409a <_ZdlPvj>
   b60c8:	4620      	mov	r0, r4
   b60ca:	bd10      	pop	{r4, pc}

000b60cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b60cc:	b538      	push	{r3, r4, r5, lr}
   b60ce:	4604      	mov	r4, r0
   b60d0:	4615      	mov	r5, r2
   b60d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b60d6:	2200      	movs	r2, #0
   b60d8:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b60dc:	4b09      	ldr	r3, [pc, #36]	; (b6104 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b60de:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b60e0:	4608      	mov	r0, r1
   b60e2:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b60e4:	4629      	mov	r1, r5
   b60e6:	f7fe fe85 	bl	b4df4 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b60ea:	30bf      	adds	r0, #191	; 0xbf
   b60ec:	d108      	bne.n	b6100 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b60ee:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b60f0:	07db      	lsls	r3, r3, #31
   b60f2:	d505      	bpl.n	b6100 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b60f4:	6868      	ldr	r0, [r5, #4]
   b60f6:	f7fe ffc1 	bl	b507c <free>
    free(conf.tx_buffer);
   b60fa:	68e8      	ldr	r0, [r5, #12]
   b60fc:	f7fe ffbe 	bl	b507c <free>
}
   b6100:	4620      	mov	r0, r4
   b6102:	bd38      	pop	{r3, r4, r5, pc}
   b6104:	000b70b0 	.word	0x000b70b0

000b6108 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6108:	2300      	movs	r3, #0
   b610a:	7c00      	ldrb	r0, [r0, #16]
   b610c:	461a      	mov	r2, r3
   b610e:	4619      	mov	r1, r3
   b6110:	f7fe be30 	b.w	b4d74 <hal_i2c_begin>

000b6114 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6114:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6116:	2200      	movs	r2, #0
   b6118:	2314      	movs	r3, #20
   b611a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b611e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b6122:	780b      	ldrb	r3, [r1, #0]
   b6124:	f88d 3008 	strb.w	r3, [sp, #8]
   b6128:	684b      	ldr	r3, [r1, #4]
   b612a:	9303      	str	r3, [sp, #12]
   b612c:	68cb      	ldr	r3, [r1, #12]
   b612e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b6130:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b6132:	7a0b      	ldrb	r3, [r1, #8]
   b6134:	9305      	str	r3, [sp, #20]
   b6136:	a901      	add	r1, sp, #4
   b6138:	f7fe fe64 	bl	b4e04 <hal_i2c_request_ex>
}
   b613c:	b007      	add	sp, #28
   b613e:	f85d fb04 	ldr.w	pc, [sp], #4

000b6142 <_ZN7TwoWire11requestFromEhjh>:
{
   b6142:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b6144:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b6146:	f88d 1000 	strb.w	r1, [sp]
   b614a:	f04f 0164 	mov.w	r1, #100	; 0x64
   b614e:	9103      	str	r1, [sp, #12]
   b6150:	bf18      	it	ne
   b6152:	2301      	movne	r3, #1
   b6154:	4669      	mov	r1, sp
    size_ = size;
   b6156:	9201      	str	r2, [sp, #4]
   b6158:	f88d 3008 	strb.w	r3, [sp, #8]
   b615c:	f7ff ffda 	bl	b6114 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b6160:	b005      	add	sp, #20
   b6162:	f85d fb04 	ldr.w	pc, [sp], #4

000b6166 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b6166:	2301      	movs	r3, #1
   b6168:	f7ff bfeb 	b.w	b6142 <_ZN7TwoWire11requestFromEhjh>

000b616c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b616c:	7c00      	ldrb	r0, [r0, #16]
   b616e:	2200      	movs	r2, #0
   b6170:	f7fe be08 	b.w	b4d84 <hal_i2c_begin_transmission>

000b6174 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6174:	7c00      	ldrb	r0, [r0, #16]
   b6176:	2200      	movs	r2, #0
   b6178:	f7fe be0c 	b.w	b4d94 <hal_i2c_end_transmission>

000b617c <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b617c:	2101      	movs	r1, #1
   b617e:	f7ff bff9 	b.w	b6174 <_ZN7TwoWire15endTransmissionEh>

000b6182 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6182:	2200      	movs	r2, #0
   b6184:	6840      	ldr	r0, [r0, #4]
   b6186:	4611      	mov	r1, r2
   b6188:	f7fe bf00 	b.w	b4f8c <network_ready>

000b618c <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b618c:	2200      	movs	r2, #0
   b618e:	6840      	ldr	r0, [r0, #4]
   b6190:	4611      	mov	r1, r2
   b6192:	f7fe bf1b 	b.w	b4fcc <network_listening>

000b6196 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6196:	2200      	movs	r2, #0
   b6198:	6840      	ldr	r0, [r0, #4]
   b619a:	4611      	mov	r1, r2
   b619c:	f7fe bf26 	b.w	b4fec <network_get_listen_timeout>

000b61a0 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b61a0:	6840      	ldr	r0, [r0, #4]
   b61a2:	2200      	movs	r2, #0
   b61a4:	f7fe bf1a 	b.w	b4fdc <network_set_listen_timeout>

000b61a8 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b61a8:	6840      	ldr	r0, [r0, #4]
   b61aa:	2200      	movs	r2, #0
   b61ac:	f081 0101 	eor.w	r1, r1, #1
   b61b0:	f7fe bf04 	b.w	b4fbc <network_listen>

000b61b4 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b61b4:	2300      	movs	r3, #0
   b61b6:	6840      	ldr	r0, [r0, #4]
   b61b8:	461a      	mov	r2, r3
   b61ba:	4619      	mov	r1, r3
   b61bc:	f7fe bef6 	b.w	b4fac <network_off>

000b61c0 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b61c0:	2300      	movs	r3, #0
   b61c2:	6840      	ldr	r0, [r0, #4]
   b61c4:	461a      	mov	r2, r3
   b61c6:	4619      	mov	r1, r3
   b61c8:	f7fe bee8 	b.w	b4f9c <network_on>

000b61cc <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b61cc:	2200      	movs	r2, #0
   b61ce:	6840      	ldr	r0, [r0, #4]
   b61d0:	4611      	mov	r1, r2
   b61d2:	f7fe becb 	b.w	b4f6c <network_connecting>

000b61d6 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b61d6:	6840      	ldr	r0, [r0, #4]
   b61d8:	2200      	movs	r2, #0
   b61da:	2102      	movs	r1, #2
   b61dc:	f7fe bece 	b.w	b4f7c <network_disconnect>

000b61e0 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b61e0:	2300      	movs	r3, #0
   b61e2:	6840      	ldr	r0, [r0, #4]
   b61e4:	461a      	mov	r2, r3
   b61e6:	f7fe beb9 	b.w	b4f5c <network_connect>
	...

000b61ec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b61ec:	4b02      	ldr	r3, [pc, #8]	; (b61f8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b61ee:	2204      	movs	r2, #4
   b61f0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b61f2:	4a02      	ldr	r2, [pc, #8]	; (b61fc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b61f4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b61f6:	4770      	bx	lr
   b61f8:	2003e718 	.word	0x2003e718
   b61fc:	000b70d8 	.word	0x000b70d8

000b6200 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6200:	2300      	movs	r3, #0
   b6202:	6840      	ldr	r0, [r0, #4]
   b6204:	461a      	mov	r2, r3
   b6206:	f7fe bea9 	b.w	b4f5c <network_connect>

000b620a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b620a:	6840      	ldr	r0, [r0, #4]
   b620c:	2200      	movs	r2, #0
   b620e:	2102      	movs	r1, #2
   b6210:	f7fe beb4 	b.w	b4f7c <network_disconnect>

000b6214 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6214:	2200      	movs	r2, #0
   b6216:	6840      	ldr	r0, [r0, #4]
   b6218:	4611      	mov	r1, r2
   b621a:	f7fe bea7 	b.w	b4f6c <network_connecting>

000b621e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b621e:	2200      	movs	r2, #0
   b6220:	6840      	ldr	r0, [r0, #4]
   b6222:	4611      	mov	r1, r2
   b6224:	f7fe beb2 	b.w	b4f8c <network_ready>

000b6228 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6228:	2300      	movs	r3, #0
   b622a:	6840      	ldr	r0, [r0, #4]
   b622c:	461a      	mov	r2, r3
   b622e:	4619      	mov	r1, r3
   b6230:	f7fe beb4 	b.w	b4f9c <network_on>

000b6234 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6234:	2300      	movs	r3, #0
   b6236:	6840      	ldr	r0, [r0, #4]
   b6238:	461a      	mov	r2, r3
   b623a:	4619      	mov	r1, r3
   b623c:	f7fe beb6 	b.w	b4fac <network_off>

000b6240 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6240:	6840      	ldr	r0, [r0, #4]
   b6242:	2100      	movs	r1, #0
   b6244:	f7fe beda 	b.w	b4ffc <network_is_on>

000b6248 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6248:	6840      	ldr	r0, [r0, #4]
   b624a:	2100      	movs	r1, #0
   b624c:	f7fe bede 	b.w	b500c <network_is_off>

000b6250 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6250:	6840      	ldr	r0, [r0, #4]
   b6252:	2200      	movs	r2, #0
   b6254:	f081 0101 	eor.w	r1, r1, #1
   b6258:	f7fe beb0 	b.w	b4fbc <network_listen>

000b625c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b625c:	6840      	ldr	r0, [r0, #4]
   b625e:	2200      	movs	r2, #0
   b6260:	f7fe bebc 	b.w	b4fdc <network_set_listen_timeout>

000b6264 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6264:	2200      	movs	r2, #0
   b6266:	6840      	ldr	r0, [r0, #4]
   b6268:	4611      	mov	r1, r2
   b626a:	f7fe bebf 	b.w	b4fec <network_get_listen_timeout>

000b626e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b626e:	2200      	movs	r2, #0
   b6270:	6840      	ldr	r0, [r0, #4]
   b6272:	4611      	mov	r1, r2
   b6274:	f7fe beaa 	b.w	b4fcc <network_listening>

000b6278 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b627c:	b095      	sub	sp, #84	; 0x54
   b627e:	4614      	mov	r4, r2
   b6280:	460d      	mov	r5, r1
   b6282:	4607      	mov	r7, r0
    IPAddress addr;
   b6284:	f7ff fdce 	bl	b5e24 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6288:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b628a:	221c      	movs	r2, #28
   b628c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b628e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6290:	f000 fd34 	bl	b6cfc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6294:	2340      	movs	r3, #64	; 0x40
   b6296:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6298:	4620      	mov	r0, r4
   b629a:	466b      	mov	r3, sp
   b629c:	aa0c      	add	r2, sp, #48	; 0x30
   b629e:	2100      	movs	r1, #0
   b62a0:	f7fe fcf8 	bl	b4c94 <netdb_getaddrinfo>
    if (!r) {
   b62a4:	4604      	mov	r4, r0
   b62a6:	2800      	cmp	r0, #0
   b62a8:	d14b      	bne.n	b6342 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b62aa:	4602      	mov	r2, r0
   b62ac:	2101      	movs	r1, #1
   b62ae:	6868      	ldr	r0, [r5, #4]
   b62b0:	f7fe fe6c 	bl	b4f8c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b62b4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b62b6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b62b8:	4622      	mov	r2, r4
   b62ba:	6868      	ldr	r0, [r5, #4]
   b62bc:	f7fe fe66 	bl	b4f8c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b62c0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b62c2:	4681      	mov	r9, r0
        bool ok = false;
   b62c4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b62c6:	2e00      	cmp	r6, #0
   b62c8:	d03b      	beq.n	b6342 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b62ca:	2900      	cmp	r1, #0
   b62cc:	d139      	bne.n	b6342 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b62ce:	6873      	ldr	r3, [r6, #4]
   b62d0:	2b02      	cmp	r3, #2
   b62d2:	d003      	beq.n	b62dc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b62d4:	2b0a      	cmp	r3, #10
   b62d6:	d011      	beq.n	b62fc <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b62d8:	69f6      	ldr	r6, [r6, #28]
   b62da:	e7f4      	b.n	b62c6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b62dc:	f1b8 0f00 	cmp.w	r8, #0
   b62e0:	d0fa      	beq.n	b62d8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b62e2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b62e4:	a806      	add	r0, sp, #24
   b62e6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b62e8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b62ea:	f7ff fdc9 	bl	b5e80 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b62ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b62f0:	1d3c      	adds	r4, r7, #4
   b62f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b62f4:	682b      	ldr	r3, [r5, #0]
   b62f6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b62f8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b62fa:	e7ed      	b.n	b62d8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b62fc:	f1b9 0f00 	cmp.w	r9, #0
   b6300:	d0ea      	beq.n	b62d8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6302:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6304:	2210      	movs	r2, #16
   b6306:	a801      	add	r0, sp, #4
   b6308:	f000 fcf8 	bl	b6cfc <memset>
                    a.v = 6;
   b630c:	2306      	movs	r3, #6
   b630e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6312:	ad01      	add	r5, sp, #4
   b6314:	f104 0308 	add.w	r3, r4, #8
   b6318:	3418      	adds	r4, #24
   b631a:	6818      	ldr	r0, [r3, #0]
   b631c:	6859      	ldr	r1, [r3, #4]
   b631e:	462a      	mov	r2, r5
   b6320:	c203      	stmia	r2!, {r0, r1}
   b6322:	3308      	adds	r3, #8
   b6324:	42a3      	cmp	r3, r4
   b6326:	4615      	mov	r5, r2
   b6328:	d1f7      	bne.n	b631a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b632a:	a901      	add	r1, sp, #4
   b632c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b632e:	ad07      	add	r5, sp, #28
   b6330:	f7ff fd86 	bl	b5e40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6336:	1d3c      	adds	r4, r7, #4
   b6338:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b633a:	682b      	ldr	r3, [r5, #0]
   b633c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b633e:	4649      	mov	r1, r9
   b6340:	e7ca      	b.n	b62d8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6342:	9800      	ldr	r0, [sp, #0]
   b6344:	f7fe fc9e 	bl	b4c84 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6348:	4638      	mov	r0, r7
   b634a:	b015      	add	sp, #84	; 0x54
   b634c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6350 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6350:	4b02      	ldr	r3, [pc, #8]	; (b635c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6352:	4a03      	ldr	r2, [pc, #12]	; (b6360 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6354:	601a      	str	r2, [r3, #0]
   b6356:	2200      	movs	r2, #0
   b6358:	605a      	str	r2, [r3, #4]

} // spark
   b635a:	4770      	bx	lr
   b635c:	2003e720 	.word	0x2003e720
   b6360:	000b7114 	.word	0x000b7114

000b6364 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6364:	4770      	bx	lr
	...

000b6368 <_Z20acquireSerial1Bufferv>:
{
   b6368:	b538      	push	{r3, r4, r5, lr}
   b636a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b636c:	2514      	movs	r5, #20
   b636e:	462a      	mov	r2, r5
   b6370:	2100      	movs	r1, #0
   b6372:	f000 fcc3 	bl	b6cfc <memset>
   b6376:	8025      	strh	r5, [r4, #0]
   b6378:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b637a:	4907      	ldr	r1, [pc, #28]	; (b6398 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b637c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b637e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6380:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6382:	f000 f86f 	bl	b6464 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6386:	4904      	ldr	r1, [pc, #16]	; (b6398 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6388:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b638a:	4628      	mov	r0, r5
   b638c:	f000 f86a 	bl	b6464 <_ZnajRKSt9nothrow_t>
    };
   b6390:	60e0      	str	r0, [r4, #12]
}
   b6392:	4620      	mov	r0, r4
   b6394:	bd38      	pop	{r3, r4, r5, pc}
   b6396:	bf00      	nop
   b6398:	000b7148 	.word	0x000b7148

000b639c <_Z22__fetch_global_Serial1v>:
{
   b639c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b639e:	4d0e      	ldr	r5, [pc, #56]	; (b63d8 <_Z22__fetch_global_Serial1v+0x3c>)
   b63a0:	7829      	ldrb	r1, [r5, #0]
   b63a2:	f3bf 8f5b 	dmb	ish
   b63a6:	f011 0401 	ands.w	r4, r1, #1
{
   b63aa:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b63ac:	d111      	bne.n	b63d2 <_Z22__fetch_global_Serial1v+0x36>
   b63ae:	4628      	mov	r0, r5
   b63b0:	f7fd fe75 	bl	b409e <__cxa_guard_acquire>
   b63b4:	b168      	cbz	r0, b63d2 <_Z22__fetch_global_Serial1v+0x36>
   b63b6:	a801      	add	r0, sp, #4
   b63b8:	f7ff ffd6 	bl	b6368 <_Z20acquireSerial1Bufferv>
   b63bc:	aa01      	add	r2, sp, #4
   b63be:	4621      	mov	r1, r4
   b63c0:	4806      	ldr	r0, [pc, #24]	; (b63dc <_Z22__fetch_global_Serial1v+0x40>)
   b63c2:	f7ff fe2f 	bl	b6024 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b63c6:	4628      	mov	r0, r5
   b63c8:	f7fd fe6e 	bl	b40a8 <__cxa_guard_release>
   b63cc:	4804      	ldr	r0, [pc, #16]	; (b63e0 <_Z22__fetch_global_Serial1v+0x44>)
   b63ce:	f000 fc6d 	bl	b6cac <atexit>
    return serial1;
}
   b63d2:	4802      	ldr	r0, [pc, #8]	; (b63dc <_Z22__fetch_global_Serial1v+0x40>)
   b63d4:	b007      	add	sp, #28
   b63d6:	bd30      	pop	{r4, r5, pc}
   b63d8:	2003e728 	.word	0x2003e728
   b63dc:	2003e72c 	.word	0x2003e72c
   b63e0:	000b6365 	.word	0x000b6365

000b63e4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b63e4:	4770      	bx	lr
	...

000b63e8 <_Z17acquireWireBufferv>:
{
   b63e8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b63ea:	4b0a      	ldr	r3, [pc, #40]	; (b6414 <_Z17acquireWireBufferv+0x2c>)
   b63ec:	6003      	str	r3, [r0, #0]
   b63ee:	2301      	movs	r3, #1
{
   b63f0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b63f2:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b63f4:	4908      	ldr	r1, [pc, #32]	; (b6418 <_Z17acquireWireBufferv+0x30>)
   b63f6:	2020      	movs	r0, #32
   b63f8:	f000 f834 	bl	b6464 <_ZnajRKSt9nothrow_t>
	};
   b63fc:	2520      	movs	r5, #32
   b63fe:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6400:	4905      	ldr	r1, [pc, #20]	; (b6418 <_Z17acquireWireBufferv+0x30>)
	};
   b6402:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6404:	4628      	mov	r0, r5
   b6406:	f000 f82d 	bl	b6464 <_ZnajRKSt9nothrow_t>
	};
   b640a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b640e:	4620      	mov	r0, r4
   b6410:	bd38      	pop	{r3, r4, r5, pc}
   b6412:	bf00      	nop
   b6414:	00010018 	.word	0x00010018
   b6418:	000b7148 	.word	0x000b7148

000b641c <_Z19__fetch_global_Wirev>:
{
   b641c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b641e:	4d0e      	ldr	r5, [pc, #56]	; (b6458 <_Z19__fetch_global_Wirev+0x3c>)
   b6420:	7829      	ldrb	r1, [r5, #0]
   b6422:	f3bf 8f5b 	dmb	ish
   b6426:	f011 0401 	ands.w	r4, r1, #1
{
   b642a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b642c:	d111      	bne.n	b6452 <_Z19__fetch_global_Wirev+0x36>
   b642e:	4628      	mov	r0, r5
   b6430:	f7fd fe35 	bl	b409e <__cxa_guard_acquire>
   b6434:	b168      	cbz	r0, b6452 <_Z19__fetch_global_Wirev+0x36>
   b6436:	4668      	mov	r0, sp
   b6438:	f7ff ffd6 	bl	b63e8 <_Z17acquireWireBufferv>
   b643c:	466a      	mov	r2, sp
   b643e:	4621      	mov	r1, r4
   b6440:	4806      	ldr	r0, [pc, #24]	; (b645c <_Z19__fetch_global_Wirev+0x40>)
   b6442:	f7ff fe43 	bl	b60cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6446:	4628      	mov	r0, r5
   b6448:	f7fd fe2e 	bl	b40a8 <__cxa_guard_release>
   b644c:	4804      	ldr	r0, [pc, #16]	; (b6460 <_Z19__fetch_global_Wirev+0x44>)
   b644e:	f000 fc2d 	bl	b6cac <atexit>
	return wire;
}
   b6452:	4802      	ldr	r0, [pc, #8]	; (b645c <_Z19__fetch_global_Wirev+0x40>)
   b6454:	b007      	add	sp, #28
   b6456:	bd30      	pop	{r4, r5, pc}
   b6458:	2003e744 	.word	0x2003e744
   b645c:	2003e748 	.word	0x2003e748
   b6460:	000b63e5 	.word	0x000b63e5

000b6464 <_ZnajRKSt9nothrow_t>:
   b6464:	f7fd be17 	b.w	b4096 <_Znaj>

000b6468 <_ZSt25__throw_bad_function_callv>:
   b6468:	b508      	push	{r3, lr}
   b646a:	f7fe fe17 	bl	b509c <abort>
	...

000b6470 <__aeabi_drsub>:
   b6470:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b6474:	e002      	b.n	b647c <__adddf3>
   b6476:	bf00      	nop

000b6478 <__aeabi_dsub>:
   b6478:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b647c <__adddf3>:
   b647c:	b530      	push	{r4, r5, lr}
   b647e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b6482:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b6486:	ea94 0f05 	teq	r4, r5
   b648a:	bf08      	it	eq
   b648c:	ea90 0f02 	teqeq	r0, r2
   b6490:	bf1f      	itttt	ne
   b6492:	ea54 0c00 	orrsne.w	ip, r4, r0
   b6496:	ea55 0c02 	orrsne.w	ip, r5, r2
   b649a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b649e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b64a2:	f000 80e2 	beq.w	b666a <__adddf3+0x1ee>
   b64a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b64aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b64ae:	bfb8      	it	lt
   b64b0:	426d      	neglt	r5, r5
   b64b2:	dd0c      	ble.n	b64ce <__adddf3+0x52>
   b64b4:	442c      	add	r4, r5
   b64b6:	ea80 0202 	eor.w	r2, r0, r2
   b64ba:	ea81 0303 	eor.w	r3, r1, r3
   b64be:	ea82 0000 	eor.w	r0, r2, r0
   b64c2:	ea83 0101 	eor.w	r1, r3, r1
   b64c6:	ea80 0202 	eor.w	r2, r0, r2
   b64ca:	ea81 0303 	eor.w	r3, r1, r3
   b64ce:	2d36      	cmp	r5, #54	; 0x36
   b64d0:	bf88      	it	hi
   b64d2:	bd30      	pophi	{r4, r5, pc}
   b64d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b64d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b64dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b64e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b64e4:	d002      	beq.n	b64ec <__adddf3+0x70>
   b64e6:	4240      	negs	r0, r0
   b64e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b64ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b64f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b64f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b64f8:	d002      	beq.n	b6500 <__adddf3+0x84>
   b64fa:	4252      	negs	r2, r2
   b64fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b6500:	ea94 0f05 	teq	r4, r5
   b6504:	f000 80a7 	beq.w	b6656 <__adddf3+0x1da>
   b6508:	f1a4 0401 	sub.w	r4, r4, #1
   b650c:	f1d5 0e20 	rsbs	lr, r5, #32
   b6510:	db0d      	blt.n	b652e <__adddf3+0xb2>
   b6512:	fa02 fc0e 	lsl.w	ip, r2, lr
   b6516:	fa22 f205 	lsr.w	r2, r2, r5
   b651a:	1880      	adds	r0, r0, r2
   b651c:	f141 0100 	adc.w	r1, r1, #0
   b6520:	fa03 f20e 	lsl.w	r2, r3, lr
   b6524:	1880      	adds	r0, r0, r2
   b6526:	fa43 f305 	asr.w	r3, r3, r5
   b652a:	4159      	adcs	r1, r3
   b652c:	e00e      	b.n	b654c <__adddf3+0xd0>
   b652e:	f1a5 0520 	sub.w	r5, r5, #32
   b6532:	f10e 0e20 	add.w	lr, lr, #32
   b6536:	2a01      	cmp	r2, #1
   b6538:	fa03 fc0e 	lsl.w	ip, r3, lr
   b653c:	bf28      	it	cs
   b653e:	f04c 0c02 	orrcs.w	ip, ip, #2
   b6542:	fa43 f305 	asr.w	r3, r3, r5
   b6546:	18c0      	adds	r0, r0, r3
   b6548:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b654c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6550:	d507      	bpl.n	b6562 <__adddf3+0xe6>
   b6552:	f04f 0e00 	mov.w	lr, #0
   b6556:	f1dc 0c00 	rsbs	ip, ip, #0
   b655a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b655e:	eb6e 0101 	sbc.w	r1, lr, r1
   b6562:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b6566:	d31b      	bcc.n	b65a0 <__adddf3+0x124>
   b6568:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b656c:	d30c      	bcc.n	b6588 <__adddf3+0x10c>
   b656e:	0849      	lsrs	r1, r1, #1
   b6570:	ea5f 0030 	movs.w	r0, r0, rrx
   b6574:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b6578:	f104 0401 	add.w	r4, r4, #1
   b657c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b6580:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b6584:	f080 809a 	bcs.w	b66bc <__adddf3+0x240>
   b6588:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b658c:	bf08      	it	eq
   b658e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6592:	f150 0000 	adcs.w	r0, r0, #0
   b6596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b659a:	ea41 0105 	orr.w	r1, r1, r5
   b659e:	bd30      	pop	{r4, r5, pc}
   b65a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b65a4:	4140      	adcs	r0, r0
   b65a6:	eb41 0101 	adc.w	r1, r1, r1
   b65aa:	3c01      	subs	r4, #1
   b65ac:	bf28      	it	cs
   b65ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b65b2:	d2e9      	bcs.n	b6588 <__adddf3+0x10c>
   b65b4:	f091 0f00 	teq	r1, #0
   b65b8:	bf04      	itt	eq
   b65ba:	4601      	moveq	r1, r0
   b65bc:	2000      	moveq	r0, #0
   b65be:	fab1 f381 	clz	r3, r1
   b65c2:	bf08      	it	eq
   b65c4:	3320      	addeq	r3, #32
   b65c6:	f1a3 030b 	sub.w	r3, r3, #11
   b65ca:	f1b3 0220 	subs.w	r2, r3, #32
   b65ce:	da0c      	bge.n	b65ea <__adddf3+0x16e>
   b65d0:	320c      	adds	r2, #12
   b65d2:	dd08      	ble.n	b65e6 <__adddf3+0x16a>
   b65d4:	f102 0c14 	add.w	ip, r2, #20
   b65d8:	f1c2 020c 	rsb	r2, r2, #12
   b65dc:	fa01 f00c 	lsl.w	r0, r1, ip
   b65e0:	fa21 f102 	lsr.w	r1, r1, r2
   b65e4:	e00c      	b.n	b6600 <__adddf3+0x184>
   b65e6:	f102 0214 	add.w	r2, r2, #20
   b65ea:	bfd8      	it	le
   b65ec:	f1c2 0c20 	rsble	ip, r2, #32
   b65f0:	fa01 f102 	lsl.w	r1, r1, r2
   b65f4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b65f8:	bfdc      	itt	le
   b65fa:	ea41 010c 	orrle.w	r1, r1, ip
   b65fe:	4090      	lslle	r0, r2
   b6600:	1ae4      	subs	r4, r4, r3
   b6602:	bfa2      	ittt	ge
   b6604:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b6608:	4329      	orrge	r1, r5
   b660a:	bd30      	popge	{r4, r5, pc}
   b660c:	ea6f 0404 	mvn.w	r4, r4
   b6610:	3c1f      	subs	r4, #31
   b6612:	da1c      	bge.n	b664e <__adddf3+0x1d2>
   b6614:	340c      	adds	r4, #12
   b6616:	dc0e      	bgt.n	b6636 <__adddf3+0x1ba>
   b6618:	f104 0414 	add.w	r4, r4, #20
   b661c:	f1c4 0220 	rsb	r2, r4, #32
   b6620:	fa20 f004 	lsr.w	r0, r0, r4
   b6624:	fa01 f302 	lsl.w	r3, r1, r2
   b6628:	ea40 0003 	orr.w	r0, r0, r3
   b662c:	fa21 f304 	lsr.w	r3, r1, r4
   b6630:	ea45 0103 	orr.w	r1, r5, r3
   b6634:	bd30      	pop	{r4, r5, pc}
   b6636:	f1c4 040c 	rsb	r4, r4, #12
   b663a:	f1c4 0220 	rsb	r2, r4, #32
   b663e:	fa20 f002 	lsr.w	r0, r0, r2
   b6642:	fa01 f304 	lsl.w	r3, r1, r4
   b6646:	ea40 0003 	orr.w	r0, r0, r3
   b664a:	4629      	mov	r1, r5
   b664c:	bd30      	pop	{r4, r5, pc}
   b664e:	fa21 f004 	lsr.w	r0, r1, r4
   b6652:	4629      	mov	r1, r5
   b6654:	bd30      	pop	{r4, r5, pc}
   b6656:	f094 0f00 	teq	r4, #0
   b665a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b665e:	bf06      	itte	eq
   b6660:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b6664:	3401      	addeq	r4, #1
   b6666:	3d01      	subne	r5, #1
   b6668:	e74e      	b.n	b6508 <__adddf3+0x8c>
   b666a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b666e:	bf18      	it	ne
   b6670:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6674:	d029      	beq.n	b66ca <__adddf3+0x24e>
   b6676:	ea94 0f05 	teq	r4, r5
   b667a:	bf08      	it	eq
   b667c:	ea90 0f02 	teqeq	r0, r2
   b6680:	d005      	beq.n	b668e <__adddf3+0x212>
   b6682:	ea54 0c00 	orrs.w	ip, r4, r0
   b6686:	bf04      	itt	eq
   b6688:	4619      	moveq	r1, r3
   b668a:	4610      	moveq	r0, r2
   b668c:	bd30      	pop	{r4, r5, pc}
   b668e:	ea91 0f03 	teq	r1, r3
   b6692:	bf1e      	ittt	ne
   b6694:	2100      	movne	r1, #0
   b6696:	2000      	movne	r0, #0
   b6698:	bd30      	popne	{r4, r5, pc}
   b669a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b669e:	d105      	bne.n	b66ac <__adddf3+0x230>
   b66a0:	0040      	lsls	r0, r0, #1
   b66a2:	4149      	adcs	r1, r1
   b66a4:	bf28      	it	cs
   b66a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b66aa:	bd30      	pop	{r4, r5, pc}
   b66ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b66b0:	bf3c      	itt	cc
   b66b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b66b6:	bd30      	popcc	{r4, r5, pc}
   b66b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b66bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b66c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b66c4:	f04f 0000 	mov.w	r0, #0
   b66c8:	bd30      	pop	{r4, r5, pc}
   b66ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b66ce:	bf1a      	itte	ne
   b66d0:	4619      	movne	r1, r3
   b66d2:	4610      	movne	r0, r2
   b66d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b66d8:	bf1c      	itt	ne
   b66da:	460b      	movne	r3, r1
   b66dc:	4602      	movne	r2, r0
   b66de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b66e2:	bf06      	itte	eq
   b66e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b66e8:	ea91 0f03 	teqeq	r1, r3
   b66ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b66f0:	bd30      	pop	{r4, r5, pc}
   b66f2:	bf00      	nop

000b66f4 <__aeabi_ui2d>:
   b66f4:	f090 0f00 	teq	r0, #0
   b66f8:	bf04      	itt	eq
   b66fa:	2100      	moveq	r1, #0
   b66fc:	4770      	bxeq	lr
   b66fe:	b530      	push	{r4, r5, lr}
   b6700:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6704:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6708:	f04f 0500 	mov.w	r5, #0
   b670c:	f04f 0100 	mov.w	r1, #0
   b6710:	e750      	b.n	b65b4 <__adddf3+0x138>
   b6712:	bf00      	nop

000b6714 <__aeabi_i2d>:
   b6714:	f090 0f00 	teq	r0, #0
   b6718:	bf04      	itt	eq
   b671a:	2100      	moveq	r1, #0
   b671c:	4770      	bxeq	lr
   b671e:	b530      	push	{r4, r5, lr}
   b6720:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6724:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6728:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b672c:	bf48      	it	mi
   b672e:	4240      	negmi	r0, r0
   b6730:	f04f 0100 	mov.w	r1, #0
   b6734:	e73e      	b.n	b65b4 <__adddf3+0x138>
   b6736:	bf00      	nop

000b6738 <__aeabi_f2d>:
   b6738:	0042      	lsls	r2, r0, #1
   b673a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b673e:	ea4f 0131 	mov.w	r1, r1, rrx
   b6742:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b6746:	bf1f      	itttt	ne
   b6748:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b674c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b6750:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b6754:	4770      	bxne	lr
   b6756:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b675a:	bf08      	it	eq
   b675c:	4770      	bxeq	lr
   b675e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b6762:	bf04      	itt	eq
   b6764:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b6768:	4770      	bxeq	lr
   b676a:	b530      	push	{r4, r5, lr}
   b676c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b6770:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6774:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6778:	e71c      	b.n	b65b4 <__adddf3+0x138>
   b677a:	bf00      	nop

000b677c <__aeabi_ul2d>:
   b677c:	ea50 0201 	orrs.w	r2, r0, r1
   b6780:	bf08      	it	eq
   b6782:	4770      	bxeq	lr
   b6784:	b530      	push	{r4, r5, lr}
   b6786:	f04f 0500 	mov.w	r5, #0
   b678a:	e00a      	b.n	b67a2 <__aeabi_l2d+0x16>

000b678c <__aeabi_l2d>:
   b678c:	ea50 0201 	orrs.w	r2, r0, r1
   b6790:	bf08      	it	eq
   b6792:	4770      	bxeq	lr
   b6794:	b530      	push	{r4, r5, lr}
   b6796:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b679a:	d502      	bpl.n	b67a2 <__aeabi_l2d+0x16>
   b679c:	4240      	negs	r0, r0
   b679e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b67a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b67a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b67aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b67ae:	f43f aed8 	beq.w	b6562 <__adddf3+0xe6>
   b67b2:	f04f 0203 	mov.w	r2, #3
   b67b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b67ba:	bf18      	it	ne
   b67bc:	3203      	addne	r2, #3
   b67be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b67c2:	bf18      	it	ne
   b67c4:	3203      	addne	r2, #3
   b67c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b67ca:	f1c2 0320 	rsb	r3, r2, #32
   b67ce:	fa00 fc03 	lsl.w	ip, r0, r3
   b67d2:	fa20 f002 	lsr.w	r0, r0, r2
   b67d6:	fa01 fe03 	lsl.w	lr, r1, r3
   b67da:	ea40 000e 	orr.w	r0, r0, lr
   b67de:	fa21 f102 	lsr.w	r1, r1, r2
   b67e2:	4414      	add	r4, r2
   b67e4:	e6bd      	b.n	b6562 <__adddf3+0xe6>
   b67e6:	bf00      	nop

000b67e8 <__aeabi_dmul>:
   b67e8:	b570      	push	{r4, r5, r6, lr}
   b67ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b67ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b67f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b67f6:	bf1d      	ittte	ne
   b67f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b67fc:	ea94 0f0c 	teqne	r4, ip
   b6800:	ea95 0f0c 	teqne	r5, ip
   b6804:	f000 f8de 	bleq	b69c4 <__aeabi_dmul+0x1dc>
   b6808:	442c      	add	r4, r5
   b680a:	ea81 0603 	eor.w	r6, r1, r3
   b680e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b6812:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b6816:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b681a:	bf18      	it	ne
   b681c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b6820:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6824:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6828:	d038      	beq.n	b689c <__aeabi_dmul+0xb4>
   b682a:	fba0 ce02 	umull	ip, lr, r0, r2
   b682e:	f04f 0500 	mov.w	r5, #0
   b6832:	fbe1 e502 	umlal	lr, r5, r1, r2
   b6836:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b683a:	fbe0 e503 	umlal	lr, r5, r0, r3
   b683e:	f04f 0600 	mov.w	r6, #0
   b6842:	fbe1 5603 	umlal	r5, r6, r1, r3
   b6846:	f09c 0f00 	teq	ip, #0
   b684a:	bf18      	it	ne
   b684c:	f04e 0e01 	orrne.w	lr, lr, #1
   b6850:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b6854:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6858:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b685c:	d204      	bcs.n	b6868 <__aeabi_dmul+0x80>
   b685e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b6862:	416d      	adcs	r5, r5
   b6864:	eb46 0606 	adc.w	r6, r6, r6
   b6868:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b686c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b6870:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b6874:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b6878:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b687c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6880:	bf88      	it	hi
   b6882:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6886:	d81e      	bhi.n	b68c6 <__aeabi_dmul+0xde>
   b6888:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b688c:	bf08      	it	eq
   b688e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b6892:	f150 0000 	adcs.w	r0, r0, #0
   b6896:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b689a:	bd70      	pop	{r4, r5, r6, pc}
   b689c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b68a0:	ea46 0101 	orr.w	r1, r6, r1
   b68a4:	ea40 0002 	orr.w	r0, r0, r2
   b68a8:	ea81 0103 	eor.w	r1, r1, r3
   b68ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b68b0:	bfc2      	ittt	gt
   b68b2:	ebd4 050c 	rsbsgt	r5, r4, ip
   b68b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b68ba:	bd70      	popgt	{r4, r5, r6, pc}
   b68bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b68c0:	f04f 0e00 	mov.w	lr, #0
   b68c4:	3c01      	subs	r4, #1
   b68c6:	f300 80ab 	bgt.w	b6a20 <__aeabi_dmul+0x238>
   b68ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b68ce:	bfde      	ittt	le
   b68d0:	2000      	movle	r0, #0
   b68d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b68d6:	bd70      	pople	{r4, r5, r6, pc}
   b68d8:	f1c4 0400 	rsb	r4, r4, #0
   b68dc:	3c20      	subs	r4, #32
   b68de:	da35      	bge.n	b694c <__aeabi_dmul+0x164>
   b68e0:	340c      	adds	r4, #12
   b68e2:	dc1b      	bgt.n	b691c <__aeabi_dmul+0x134>
   b68e4:	f104 0414 	add.w	r4, r4, #20
   b68e8:	f1c4 0520 	rsb	r5, r4, #32
   b68ec:	fa00 f305 	lsl.w	r3, r0, r5
   b68f0:	fa20 f004 	lsr.w	r0, r0, r4
   b68f4:	fa01 f205 	lsl.w	r2, r1, r5
   b68f8:	ea40 0002 	orr.w	r0, r0, r2
   b68fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b6900:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6904:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6908:	fa21 f604 	lsr.w	r6, r1, r4
   b690c:	eb42 0106 	adc.w	r1, r2, r6
   b6910:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6914:	bf08      	it	eq
   b6916:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b691a:	bd70      	pop	{r4, r5, r6, pc}
   b691c:	f1c4 040c 	rsb	r4, r4, #12
   b6920:	f1c4 0520 	rsb	r5, r4, #32
   b6924:	fa00 f304 	lsl.w	r3, r0, r4
   b6928:	fa20 f005 	lsr.w	r0, r0, r5
   b692c:	fa01 f204 	lsl.w	r2, r1, r4
   b6930:	ea40 0002 	orr.w	r0, r0, r2
   b6934:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6938:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b693c:	f141 0100 	adc.w	r1, r1, #0
   b6940:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6944:	bf08      	it	eq
   b6946:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b694a:	bd70      	pop	{r4, r5, r6, pc}
   b694c:	f1c4 0520 	rsb	r5, r4, #32
   b6950:	fa00 f205 	lsl.w	r2, r0, r5
   b6954:	ea4e 0e02 	orr.w	lr, lr, r2
   b6958:	fa20 f304 	lsr.w	r3, r0, r4
   b695c:	fa01 f205 	lsl.w	r2, r1, r5
   b6960:	ea43 0302 	orr.w	r3, r3, r2
   b6964:	fa21 f004 	lsr.w	r0, r1, r4
   b6968:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b696c:	fa21 f204 	lsr.w	r2, r1, r4
   b6970:	ea20 0002 	bic.w	r0, r0, r2
   b6974:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b6978:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b697c:	bf08      	it	eq
   b697e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6982:	bd70      	pop	{r4, r5, r6, pc}
   b6984:	f094 0f00 	teq	r4, #0
   b6988:	d10f      	bne.n	b69aa <__aeabi_dmul+0x1c2>
   b698a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b698e:	0040      	lsls	r0, r0, #1
   b6990:	eb41 0101 	adc.w	r1, r1, r1
   b6994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6998:	bf08      	it	eq
   b699a:	3c01      	subeq	r4, #1
   b699c:	d0f7      	beq.n	b698e <__aeabi_dmul+0x1a6>
   b699e:	ea41 0106 	orr.w	r1, r1, r6
   b69a2:	f095 0f00 	teq	r5, #0
   b69a6:	bf18      	it	ne
   b69a8:	4770      	bxne	lr
   b69aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b69ae:	0052      	lsls	r2, r2, #1
   b69b0:	eb43 0303 	adc.w	r3, r3, r3
   b69b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b69b8:	bf08      	it	eq
   b69ba:	3d01      	subeq	r5, #1
   b69bc:	d0f7      	beq.n	b69ae <__aeabi_dmul+0x1c6>
   b69be:	ea43 0306 	orr.w	r3, r3, r6
   b69c2:	4770      	bx	lr
   b69c4:	ea94 0f0c 	teq	r4, ip
   b69c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b69cc:	bf18      	it	ne
   b69ce:	ea95 0f0c 	teqne	r5, ip
   b69d2:	d00c      	beq.n	b69ee <__aeabi_dmul+0x206>
   b69d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b69d8:	bf18      	it	ne
   b69da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b69de:	d1d1      	bne.n	b6984 <__aeabi_dmul+0x19c>
   b69e0:	ea81 0103 	eor.w	r1, r1, r3
   b69e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b69e8:	f04f 0000 	mov.w	r0, #0
   b69ec:	bd70      	pop	{r4, r5, r6, pc}
   b69ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b69f2:	bf06      	itte	eq
   b69f4:	4610      	moveq	r0, r2
   b69f6:	4619      	moveq	r1, r3
   b69f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b69fc:	d019      	beq.n	b6a32 <__aeabi_dmul+0x24a>
   b69fe:	ea94 0f0c 	teq	r4, ip
   b6a02:	d102      	bne.n	b6a0a <__aeabi_dmul+0x222>
   b6a04:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b6a08:	d113      	bne.n	b6a32 <__aeabi_dmul+0x24a>
   b6a0a:	ea95 0f0c 	teq	r5, ip
   b6a0e:	d105      	bne.n	b6a1c <__aeabi_dmul+0x234>
   b6a10:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b6a14:	bf1c      	itt	ne
   b6a16:	4610      	movne	r0, r2
   b6a18:	4619      	movne	r1, r3
   b6a1a:	d10a      	bne.n	b6a32 <__aeabi_dmul+0x24a>
   b6a1c:	ea81 0103 	eor.w	r1, r1, r3
   b6a20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6a24:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6a28:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6a2c:	f04f 0000 	mov.w	r0, #0
   b6a30:	bd70      	pop	{r4, r5, r6, pc}
   b6a32:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6a36:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b6a3a:	bd70      	pop	{r4, r5, r6, pc}

000b6a3c <__aeabi_ddiv>:
   b6a3c:	b570      	push	{r4, r5, r6, lr}
   b6a3e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6a42:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6a46:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6a4a:	bf1d      	ittte	ne
   b6a4c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6a50:	ea94 0f0c 	teqne	r4, ip
   b6a54:	ea95 0f0c 	teqne	r5, ip
   b6a58:	f000 f8a7 	bleq	b6baa <__aeabi_ddiv+0x16e>
   b6a5c:	eba4 0405 	sub.w	r4, r4, r5
   b6a60:	ea81 0e03 	eor.w	lr, r1, r3
   b6a64:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6a68:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6a6c:	f000 8088 	beq.w	b6b80 <__aeabi_ddiv+0x144>
   b6a70:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6a74:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b6a78:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b6a7c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b6a80:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b6a84:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b6a88:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b6a8c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b6a90:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b6a94:	429d      	cmp	r5, r3
   b6a96:	bf08      	it	eq
   b6a98:	4296      	cmpeq	r6, r2
   b6a9a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b6a9e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b6aa2:	d202      	bcs.n	b6aaa <__aeabi_ddiv+0x6e>
   b6aa4:	085b      	lsrs	r3, r3, #1
   b6aa6:	ea4f 0232 	mov.w	r2, r2, rrx
   b6aaa:	1ab6      	subs	r6, r6, r2
   b6aac:	eb65 0503 	sbc.w	r5, r5, r3
   b6ab0:	085b      	lsrs	r3, r3, #1
   b6ab2:	ea4f 0232 	mov.w	r2, r2, rrx
   b6ab6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b6aba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b6abe:	ebb6 0e02 	subs.w	lr, r6, r2
   b6ac2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6ac6:	bf22      	ittt	cs
   b6ac8:	1ab6      	subcs	r6, r6, r2
   b6aca:	4675      	movcs	r5, lr
   b6acc:	ea40 000c 	orrcs.w	r0, r0, ip
   b6ad0:	085b      	lsrs	r3, r3, #1
   b6ad2:	ea4f 0232 	mov.w	r2, r2, rrx
   b6ad6:	ebb6 0e02 	subs.w	lr, r6, r2
   b6ada:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6ade:	bf22      	ittt	cs
   b6ae0:	1ab6      	subcs	r6, r6, r2
   b6ae2:	4675      	movcs	r5, lr
   b6ae4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b6ae8:	085b      	lsrs	r3, r3, #1
   b6aea:	ea4f 0232 	mov.w	r2, r2, rrx
   b6aee:	ebb6 0e02 	subs.w	lr, r6, r2
   b6af2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6af6:	bf22      	ittt	cs
   b6af8:	1ab6      	subcs	r6, r6, r2
   b6afa:	4675      	movcs	r5, lr
   b6afc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b6b00:	085b      	lsrs	r3, r3, #1
   b6b02:	ea4f 0232 	mov.w	r2, r2, rrx
   b6b06:	ebb6 0e02 	subs.w	lr, r6, r2
   b6b0a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6b0e:	bf22      	ittt	cs
   b6b10:	1ab6      	subcs	r6, r6, r2
   b6b12:	4675      	movcs	r5, lr
   b6b14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b6b18:	ea55 0e06 	orrs.w	lr, r5, r6
   b6b1c:	d018      	beq.n	b6b50 <__aeabi_ddiv+0x114>
   b6b1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b6b22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b6b26:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b6b2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b6b2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b6b32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b6b36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b6b3a:	d1c0      	bne.n	b6abe <__aeabi_ddiv+0x82>
   b6b3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6b40:	d10b      	bne.n	b6b5a <__aeabi_ddiv+0x11e>
   b6b42:	ea41 0100 	orr.w	r1, r1, r0
   b6b46:	f04f 0000 	mov.w	r0, #0
   b6b4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b6b4e:	e7b6      	b.n	b6abe <__aeabi_ddiv+0x82>
   b6b50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6b54:	bf04      	itt	eq
   b6b56:	4301      	orreq	r1, r0
   b6b58:	2000      	moveq	r0, #0
   b6b5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6b5e:	bf88      	it	hi
   b6b60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6b64:	f63f aeaf 	bhi.w	b68c6 <__aeabi_dmul+0xde>
   b6b68:	ebb5 0c03 	subs.w	ip, r5, r3
   b6b6c:	bf04      	itt	eq
   b6b6e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b6b72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6b76:	f150 0000 	adcs.w	r0, r0, #0
   b6b7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6b7e:	bd70      	pop	{r4, r5, r6, pc}
   b6b80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b6b84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b6b88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b6b8c:	bfc2      	ittt	gt
   b6b8e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6b92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6b96:	bd70      	popgt	{r4, r5, r6, pc}
   b6b98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6b9c:	f04f 0e00 	mov.w	lr, #0
   b6ba0:	3c01      	subs	r4, #1
   b6ba2:	e690      	b.n	b68c6 <__aeabi_dmul+0xde>
   b6ba4:	ea45 0e06 	orr.w	lr, r5, r6
   b6ba8:	e68d      	b.n	b68c6 <__aeabi_dmul+0xde>
   b6baa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6bae:	ea94 0f0c 	teq	r4, ip
   b6bb2:	bf08      	it	eq
   b6bb4:	ea95 0f0c 	teqeq	r5, ip
   b6bb8:	f43f af3b 	beq.w	b6a32 <__aeabi_dmul+0x24a>
   b6bbc:	ea94 0f0c 	teq	r4, ip
   b6bc0:	d10a      	bne.n	b6bd8 <__aeabi_ddiv+0x19c>
   b6bc2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6bc6:	f47f af34 	bne.w	b6a32 <__aeabi_dmul+0x24a>
   b6bca:	ea95 0f0c 	teq	r5, ip
   b6bce:	f47f af25 	bne.w	b6a1c <__aeabi_dmul+0x234>
   b6bd2:	4610      	mov	r0, r2
   b6bd4:	4619      	mov	r1, r3
   b6bd6:	e72c      	b.n	b6a32 <__aeabi_dmul+0x24a>
   b6bd8:	ea95 0f0c 	teq	r5, ip
   b6bdc:	d106      	bne.n	b6bec <__aeabi_ddiv+0x1b0>
   b6bde:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6be2:	f43f aefd 	beq.w	b69e0 <__aeabi_dmul+0x1f8>
   b6be6:	4610      	mov	r0, r2
   b6be8:	4619      	mov	r1, r3
   b6bea:	e722      	b.n	b6a32 <__aeabi_dmul+0x24a>
   b6bec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6bf0:	bf18      	it	ne
   b6bf2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6bf6:	f47f aec5 	bne.w	b6984 <__aeabi_dmul+0x19c>
   b6bfa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b6bfe:	f47f af0d 	bne.w	b6a1c <__aeabi_dmul+0x234>
   b6c02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b6c06:	f47f aeeb 	bne.w	b69e0 <__aeabi_dmul+0x1f8>
   b6c0a:	e712      	b.n	b6a32 <__aeabi_dmul+0x24a>

000b6c0c <__aeabi_d2f>:
   b6c0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b6c10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b6c14:	bf24      	itt	cs
   b6c16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b6c1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b6c1e:	d90d      	bls.n	b6c3c <__aeabi_d2f+0x30>
   b6c20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b6c24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b6c28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b6c2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b6c30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b6c34:	bf08      	it	eq
   b6c36:	f020 0001 	biceq.w	r0, r0, #1
   b6c3a:	4770      	bx	lr
   b6c3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b6c40:	d121      	bne.n	b6c86 <__aeabi_d2f+0x7a>
   b6c42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b6c46:	bfbc      	itt	lt
   b6c48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b6c4c:	4770      	bxlt	lr
   b6c4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6c52:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b6c56:	f1c2 0218 	rsb	r2, r2, #24
   b6c5a:	f1c2 0c20 	rsb	ip, r2, #32
   b6c5e:	fa10 f30c 	lsls.w	r3, r0, ip
   b6c62:	fa20 f002 	lsr.w	r0, r0, r2
   b6c66:	bf18      	it	ne
   b6c68:	f040 0001 	orrne.w	r0, r0, #1
   b6c6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b6c70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b6c74:	fa03 fc0c 	lsl.w	ip, r3, ip
   b6c78:	ea40 000c 	orr.w	r0, r0, ip
   b6c7c:	fa23 f302 	lsr.w	r3, r3, r2
   b6c80:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b6c84:	e7cc      	b.n	b6c20 <__aeabi_d2f+0x14>
   b6c86:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b6c8a:	d107      	bne.n	b6c9c <__aeabi_d2f+0x90>
   b6c8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b6c90:	bf1e      	ittt	ne
   b6c92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b6c96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b6c9a:	4770      	bxne	lr
   b6c9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b6ca0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b6ca4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b6ca8:	4770      	bx	lr
   b6caa:	bf00      	nop

000b6cac <atexit>:
   b6cac:	2300      	movs	r3, #0
   b6cae:	4601      	mov	r1, r0
   b6cb0:	461a      	mov	r2, r3
   b6cb2:	4618      	mov	r0, r3
   b6cb4:	f000 b886 	b.w	b6dc4 <__register_exitproc>

000b6cb8 <ldiv>:
   b6cb8:	2900      	cmp	r1, #0
   b6cba:	b510      	push	{r4, lr}
   b6cbc:	fb91 f4f2 	sdiv	r4, r1, r2
   b6cc0:	fb02 1314 	mls	r3, r2, r4, r1
   b6cc4:	db06      	blt.n	b6cd4 <ldiv+0x1c>
   b6cc6:	2b00      	cmp	r3, #0
   b6cc8:	da01      	bge.n	b6cce <ldiv+0x16>
   b6cca:	3401      	adds	r4, #1
   b6ccc:	1a9b      	subs	r3, r3, r2
   b6cce:	e9c0 4300 	strd	r4, r3, [r0]
   b6cd2:	bd10      	pop	{r4, pc}
   b6cd4:	2b00      	cmp	r3, #0
   b6cd6:	bfc4      	itt	gt
   b6cd8:	f104 34ff 	addgt.w	r4, r4, #4294967295
   b6cdc:	189b      	addgt	r3, r3, r2
   b6cde:	e7f6      	b.n	b6cce <ldiv+0x16>

000b6ce0 <memcpy>:
   b6ce0:	440a      	add	r2, r1
   b6ce2:	4291      	cmp	r1, r2
   b6ce4:	f100 33ff 	add.w	r3, r0, #4294967295
   b6ce8:	d100      	bne.n	b6cec <memcpy+0xc>
   b6cea:	4770      	bx	lr
   b6cec:	b510      	push	{r4, lr}
   b6cee:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6cf2:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6cf6:	4291      	cmp	r1, r2
   b6cf8:	d1f9      	bne.n	b6cee <memcpy+0xe>
   b6cfa:	bd10      	pop	{r4, pc}

000b6cfc <memset>:
   b6cfc:	4402      	add	r2, r0
   b6cfe:	4603      	mov	r3, r0
   b6d00:	4293      	cmp	r3, r2
   b6d02:	d100      	bne.n	b6d06 <memset+0xa>
   b6d04:	4770      	bx	lr
   b6d06:	f803 1b01 	strb.w	r1, [r3], #1
   b6d0a:	e7f9      	b.n	b6d00 <memset+0x4>

000b6d0c <srand>:
   b6d0c:	b538      	push	{r3, r4, r5, lr}
   b6d0e:	4b10      	ldr	r3, [pc, #64]	; (b6d50 <srand+0x44>)
   b6d10:	681d      	ldr	r5, [r3, #0]
   b6d12:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6d14:	4604      	mov	r4, r0
   b6d16:	b9b3      	cbnz	r3, b6d46 <srand+0x3a>
   b6d18:	2018      	movs	r0, #24
   b6d1a:	f7fe f9a7 	bl	b506c <malloc>
   b6d1e:	4602      	mov	r2, r0
   b6d20:	63a8      	str	r0, [r5, #56]	; 0x38
   b6d22:	b920      	cbnz	r0, b6d2e <srand+0x22>
   b6d24:	4b0b      	ldr	r3, [pc, #44]	; (b6d54 <srand+0x48>)
   b6d26:	480c      	ldr	r0, [pc, #48]	; (b6d58 <srand+0x4c>)
   b6d28:	2142      	movs	r1, #66	; 0x42
   b6d2a:	f7fe f9c7 	bl	b50bc <__assert_func>
   b6d2e:	490b      	ldr	r1, [pc, #44]	; (b6d5c <srand+0x50>)
   b6d30:	4b0b      	ldr	r3, [pc, #44]	; (b6d60 <srand+0x54>)
   b6d32:	e9c0 1300 	strd	r1, r3, [r0]
   b6d36:	4b0b      	ldr	r3, [pc, #44]	; (b6d64 <srand+0x58>)
   b6d38:	6083      	str	r3, [r0, #8]
   b6d3a:	230b      	movs	r3, #11
   b6d3c:	8183      	strh	r3, [r0, #12]
   b6d3e:	2100      	movs	r1, #0
   b6d40:	2001      	movs	r0, #1
   b6d42:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6d46:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6d48:	2200      	movs	r2, #0
   b6d4a:	611c      	str	r4, [r3, #16]
   b6d4c:	615a      	str	r2, [r3, #20]
   b6d4e:	bd38      	pop	{r3, r4, r5, pc}
   b6d50:	2003e100 	.word	0x2003e100
   b6d54:	000b7149 	.word	0x000b7149
   b6d58:	000b7160 	.word	0x000b7160
   b6d5c:	abcd330e 	.word	0xabcd330e
   b6d60:	e66d1234 	.word	0xe66d1234
   b6d64:	0005deec 	.word	0x0005deec

000b6d68 <strcpy>:
   b6d68:	4603      	mov	r3, r0
   b6d6a:	f811 2b01 	ldrb.w	r2, [r1], #1
   b6d6e:	f803 2b01 	strb.w	r2, [r3], #1
   b6d72:	2a00      	cmp	r2, #0
   b6d74:	d1f9      	bne.n	b6d6a <strcpy+0x2>
   b6d76:	4770      	bx	lr

000b6d78 <strdup>:
   b6d78:	4b02      	ldr	r3, [pc, #8]	; (b6d84 <strdup+0xc>)
   b6d7a:	4601      	mov	r1, r0
   b6d7c:	6818      	ldr	r0, [r3, #0]
   b6d7e:	f000 b803 	b.w	b6d88 <_strdup_r>
   b6d82:	bf00      	nop
   b6d84:	2003e100 	.word	0x2003e100

000b6d88 <_strdup_r>:
   b6d88:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6d8a:	4604      	mov	r4, r0
   b6d8c:	4608      	mov	r0, r1
   b6d8e:	460d      	mov	r5, r1
   b6d90:	f000 f80f 	bl	b6db2 <strlen>
   b6d94:	1c42      	adds	r2, r0, #1
   b6d96:	4611      	mov	r1, r2
   b6d98:	4620      	mov	r0, r4
   b6d9a:	9201      	str	r2, [sp, #4]
   b6d9c:	f7fe f986 	bl	b50ac <_malloc_r>
   b6da0:	4604      	mov	r4, r0
   b6da2:	b118      	cbz	r0, b6dac <_strdup_r+0x24>
   b6da4:	9a01      	ldr	r2, [sp, #4]
   b6da6:	4629      	mov	r1, r5
   b6da8:	f7ff ff9a 	bl	b6ce0 <memcpy>
   b6dac:	4620      	mov	r0, r4
   b6dae:	b003      	add	sp, #12
   b6db0:	bd30      	pop	{r4, r5, pc}

000b6db2 <strlen>:
   b6db2:	4603      	mov	r3, r0
   b6db4:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6db8:	2a00      	cmp	r2, #0
   b6dba:	d1fb      	bne.n	b6db4 <strlen+0x2>
   b6dbc:	1a18      	subs	r0, r3, r0
   b6dbe:	3801      	subs	r0, #1
   b6dc0:	4770      	bx	lr
	...

000b6dc4 <__register_exitproc>:
   b6dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6dc8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6e84 <__register_exitproc+0xc0>
   b6dcc:	4606      	mov	r6, r0
   b6dce:	f8d8 0000 	ldr.w	r0, [r8]
   b6dd2:	461f      	mov	r7, r3
   b6dd4:	460d      	mov	r5, r1
   b6dd6:	4691      	mov	r9, r2
   b6dd8:	f000 f856 	bl	b6e88 <__retarget_lock_acquire_recursive>
   b6ddc:	4b25      	ldr	r3, [pc, #148]	; (b6e74 <__register_exitproc+0xb0>)
   b6dde:	681c      	ldr	r4, [r3, #0]
   b6de0:	b934      	cbnz	r4, b6df0 <__register_exitproc+0x2c>
   b6de2:	4c25      	ldr	r4, [pc, #148]	; (b6e78 <__register_exitproc+0xb4>)
   b6de4:	601c      	str	r4, [r3, #0]
   b6de6:	4b25      	ldr	r3, [pc, #148]	; (b6e7c <__register_exitproc+0xb8>)
   b6de8:	b113      	cbz	r3, b6df0 <__register_exitproc+0x2c>
   b6dea:	681b      	ldr	r3, [r3, #0]
   b6dec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6df0:	6863      	ldr	r3, [r4, #4]
   b6df2:	2b1f      	cmp	r3, #31
   b6df4:	dd07      	ble.n	b6e06 <__register_exitproc+0x42>
   b6df6:	f8d8 0000 	ldr.w	r0, [r8]
   b6dfa:	f000 f847 	bl	b6e8c <__retarget_lock_release_recursive>
   b6dfe:	f04f 30ff 	mov.w	r0, #4294967295
   b6e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6e06:	b34e      	cbz	r6, b6e5c <__register_exitproc+0x98>
   b6e08:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6e0c:	b988      	cbnz	r0, b6e32 <__register_exitproc+0x6e>
   b6e0e:	4b1c      	ldr	r3, [pc, #112]	; (b6e80 <__register_exitproc+0xbc>)
   b6e10:	b923      	cbnz	r3, b6e1c <__register_exitproc+0x58>
   b6e12:	f8d8 0000 	ldr.w	r0, [r8]
   b6e16:	f000 f838 	bl	b6e8a <__retarget_lock_release>
   b6e1a:	e7f0      	b.n	b6dfe <__register_exitproc+0x3a>
   b6e1c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6e20:	f7fe f924 	bl	b506c <malloc>
   b6e24:	2800      	cmp	r0, #0
   b6e26:	d0f4      	beq.n	b6e12 <__register_exitproc+0x4e>
   b6e28:	2300      	movs	r3, #0
   b6e2a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6e2e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6e32:	6863      	ldr	r3, [r4, #4]
   b6e34:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6e38:	2201      	movs	r2, #1
   b6e3a:	409a      	lsls	r2, r3
   b6e3c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6e40:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6e44:	4313      	orrs	r3, r2
   b6e46:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b6e4a:	2e02      	cmp	r6, #2
   b6e4c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6e50:	bf02      	ittt	eq
   b6e52:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6e56:	4313      	orreq	r3, r2
   b6e58:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6e5c:	6863      	ldr	r3, [r4, #4]
   b6e5e:	f8d8 0000 	ldr.w	r0, [r8]
   b6e62:	1c5a      	adds	r2, r3, #1
   b6e64:	3302      	adds	r3, #2
   b6e66:	6062      	str	r2, [r4, #4]
   b6e68:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6e6c:	f000 f80e 	bl	b6e8c <__retarget_lock_release_recursive>
   b6e70:	2000      	movs	r0, #0
   b6e72:	e7c6      	b.n	b6e02 <__register_exitproc+0x3e>
   b6e74:	2003e7e8 	.word	0x2003e7e8
   b6e78:	2003e75c 	.word	0x2003e75c
   b6e7c:	00000000 	.word	0x00000000
   b6e80:	000b506d 	.word	0x000b506d
   b6e84:	2003e164 	.word	0x2003e164

000b6e88 <__retarget_lock_acquire_recursive>:
   b6e88:	4770      	bx	lr

000b6e8a <__retarget_lock_release>:
   b6e8a:	4770      	bx	lr

000b6e8c <__retarget_lock_release_recursive>:
   b6e8c:	4770      	bx	lr

000b6e8e <link_code_end>:
	...

000b6e90 <dynalib_user>:
   b6e90:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b6ea0:	0000 0000 6553 7574 2070 6966 696e 6873     ....Setup finish
   b6eb0:	6465 0021 6e45 6574 6972 676e 6d20 6165     ed!.Entering mea
   b6ec0:	7573 726d 6e65 2074 6f6c 706f 6500 746e     sumrent loop.ent
   b6ed0:	7265 6e69 2067 7270 6e69 2074 7473 7461     ering print stat
   b6ee0:	0065 207b 6222 6165 2274 203a 0022 202c     e.{ "beat": "., 
   b6ef0:	6f22 2278 203a 7d00 5200 6165 6964 676e     "ox": .}.Reading
	...

000b6f01 <_ZL14uch_spo2_table>:
   b6f01:	5f5f 605f 6060 6161 6161 6261 6262 6262     ___```aaaaabbbbb
   b6f11:	6363 6363 6363 6363 6464 6464 6464 6464     ccccccccdddddddd
   b6f21:	6464 6464 6464 6464 6464 6464 6363 6363     ddddddddddddcccc
   b6f31:	6363 6363 6262 6262 6262 6161 6161 6060     ccccbbbbbbaaaa``
   b6f41:	6060 5f5f 5e5f 5e5e 5d5d 5c5d 5c5c 5b5b     ``___^^^]]]\\\[[
   b6f51:	5a5a 5959 5859 5758 5657 5556 5455 5354     ZZYYYXXWWVVUUTTS
   b6f61:	5252 5151 5050 4e4f 4d4e 4c4c 4a4b 494a     RRQQPPONNMLLKJJI
   b6f71:	4848 4647 4545 4344 4242 4041 3e3f 3d3e     HHGFEEDCBBA@?>>=
   b6f81:	3b3c 393a 3838 3637 3435 3233 3031 2e2f     <;:98876543210/.
   b6f91:	2c2d 2a2b 2829 2627 2425 2223 1f21 1d1e     -,+*)('&%$#"!...
   b6fa1:	1b1c 191a 1617 1415 1113 0f10 0c0e 0a0b     ................
   b6fb1:	0709 0506 0203 0001 0000                     ...........

000b6fbc <_ZTVN5spark13EthernetClassE>:
	...
   b6fc4:	514b 000b 5141 000b 5137 000b 512d 000b     KQ..AQ..7Q..-Q..
   b6fd4:	5121 000b 5115 000b 6241 000b 6249 000b     !Q...Q..Ab..Ib..
   b6fe4:	5109 000b 5101 000b 50f7 000b 50ed 000b     .Q...Q...P...P..
   b6ff4:	6279 000b 7061 0070 5925 252d 2d6d 6425     yb..app.%Y-%m-%d
   b7004:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b7014:	6d69 0065                                   ime.

000b7018 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7020:	5881 000b 5887 000b 58c5 000b 5895 000b     .X...X...X...X..
   b7030:	5883 000b                                   .X..

000b7034 <_ZTV9IPAddress>:
	...
   b703c:	5dc1 000b 5db1 000b 5db3 000b               .]...]...]..

000b7048 <_ZTV9USBSerial>:
	...
   b7050:	5ea7 000b 5f0f 000b 5ee5 000b 54fd 000b     .^..._...^...T..
   b7060:	5ed7 000b 5ea9 000b 5eb9 000b 5f09 000b     .^...^...^..._..
   b7070:	5ec9 000b 5ea1 000b                         .^...^..

000b7078 <_ZTV11USARTSerial>:
	...
   b7080:	5fa9 000b 6015 000b 5fed 000b 54fd 000b     ._...`..._...T..
   b7090:	5fbd 000b 5fd9 000b 5fcb 000b 5fe7 000b     ._..._..._..._..
   b70a0:	5fab 000b 5faf 000b                         ._..._..

000b70a8 <_ZTV7TwoWire>:
	...
   b70b0:	6075 000b 60bf 000b 6097 000b 6077 000b     u`...`...`..w`..
   b70c0:	609f 000b 60a7 000b 60af 000b 60b7 000b     .`...`...`...`..

000b70d0 <_ZTVN5spark9WiFiClassE>:
	...
   b70d8:	61e1 000b 61d7 000b 61cd 000b 6183 000b     .a...a...a...a..
   b70e8:	61c1 000b 61b5 000b 6241 000b 6249 000b     .a...a..Ab..Ib..
   b70f8:	61a9 000b 61a1 000b 6197 000b 618d 000b     .a...a...a...a..
   b7108:	6279 000b                                   yb..

000b710c <_ZTVN5spark12NetworkClassE>:
	...
   b7114:	6201 000b 620b 000b 6215 000b 621f 000b     .b...b...b...b..
   b7124:	6229 000b 6235 000b 6241 000b 6249 000b     )b..5b..Ab..Ib..
   b7134:	6251 000b 625d 000b 6265 000b 626f 000b     Qb..]b..eb..ob..
   b7144:	6279 000b                                   yb..

000b7148 <_ZSt7nothrow>:
   b7148:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b7158:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b7168:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b7178:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b7188:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b7198:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b71a8:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b71b8:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b71c8:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b71d8:	646e 632e                                    nd.c.

000b71dd <link_const_variable_data_end>:
   b71dd:	00          	.byte	0x00
	...

000b71e0 <link_constructors_location>:
   b71e0:	000b4355 	.word	0x000b4355
   b71e4:	000b5155 	.word	0x000b5155
   b71e8:	000b5169 	.word	0x000b5169
   b71ec:	000b54ed 	.word	0x000b54ed
   b71f0:	000b55bd 	.word	0x000b55bd
   b71f4:	000b56dd 	.word	0x000b56dd
   b71f8:	000b573d 	.word	0x000b573d
   b71fc:	000b61ed 	.word	0x000b61ed
   b7200:	000b6351 	.word	0x000b6351

000b7204 <link_constructors_end>:
	...
