
c:/Users/nicky/OneDrive/Documents/GitHub/513_project/Particle/PW_Project/target/4.0.1/argon/PW_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002824  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b6840  000b6840  00006840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b6864  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e144  000b6868  0001e144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000640  2003e1b0  2003e1b0  0002e1b0  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b68d4  000b68d4  000268d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b68fc  000b68fc  000268fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00110dba  00000000  00000000  00026900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00011cf4  00000000  00000000  001376ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000385ef  00000000  00000000  001493ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002898  00000000  00000000  0018199d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00009dd8  00000000  00000000  00184235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038350  00000000  00000000  0018e00d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003c52c  00000000  00000000  001c635d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00136ff9  00000000  00000000  00202889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00007208  00000000  00000000  00339884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f002 f968 	bl	b6302 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f002 f98a 	bl	b6352 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e144 	.word	0x2003e144
   b4048:	000b6868 	.word	0x000b6868
   b404c:	2003e1b0 	.word	0x2003e1b0
   b4050:	2003e1b0 	.word	0x2003e1b0
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 fb0d 	bl	b567c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b6810 	.word	0x000b6810
   b407c:	000b6834 	.word	0x000b6834

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b816 	b.w	b40b0 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f83b 	bl	b4100 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 baad 	b.w	b55ec <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 bfad 	b.w	b4ff0 <malloc>

000b4096 <_Znaj>:
   b4096:	f000 bfab 	b.w	b4ff0 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 bfb1 	b.w	b5000 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr
	...

000b40b0 <setup>:
uint16_t irBuffer[100];     //infrared LED sensor data
uint16_t redBuffer[100];    //red LED sensor data
uint32_t loop_counter = 0;  //loop counter


void setup() {
   b40b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.begin(115200);
  max30105.begin();
   b40b2:	4c12      	ldr	r4, [pc, #72]	; (b40fc <setup+0x4c>)
  Serial.begin(115200);
   b40b4:	f001 fe82 	bl	b5dbc <_Z16_fetch_usbserialv>
   b40b8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b40bc:	f001 fe72 	bl	b5da4 <_ZN9USBSerial5beginEl>
  max30105.begin();
   b40c0:	4620      	mov	r0, r4
   b40c2:	f000 faab 	bl	b461c <_ZN8MAX301055beginEv>
  max30105.setup();
   b40c6:	f240 139b 	movw	r3, #411	; 0x19b
   b40ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   b40ce:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b40d2:	f44f 73c8 	mov.w	r3, #400	; 0x190
   b40d6:	9300      	str	r3, [sp, #0]
   b40d8:	2204      	movs	r2, #4
   b40da:	2303      	movs	r3, #3
   b40dc:	4620      	mov	r0, r4
   b40de:	211f      	movs	r1, #31
   b40e0:	f000 fb56 	bl	b4790 <_ZN8MAX301055setupEhhhiii>
  max30105.setPulseAmplitudeRed(0x0A);
   b40e4:	4620      	mov	r0, r4
   b40e6:	210a      	movs	r1, #10
   b40e8:	f000 fac2 	bl	b4670 <_ZN8MAX3010520setPulseAmplitudeRedEh>
  max30105.setPulseAmplitudeGreen(0);
   b40ec:	2100      	movs	r1, #0
   b40ee:	4620      	mov	r0, r4
}
   b40f0:	b004      	add	sp, #16
   b40f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  max30105.setPulseAmplitudeGreen(0);
   b40f6:	f000 bac5 	b.w	b4684 <_ZN8MAX3010522setPulseAmplitudeGreenEh>
   b40fa:	bf00      	nop
   b40fc:	2003e298 	.word	0x2003e298

000b4100 <loop>:

void loop() {
   b4100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
   b4104:	4e8b      	ldr	r6, [pc, #556]	; (b4334 <loop+0x234>)
 
  //read the first 100 samples, and determine the signal range
  for (byte i = 0 ; i < bufferLength ; i++) {
    while (max30105.available() == false) //do we have new data?
   b4106:	4d8c      	ldr	r5, [pc, #560]	; (b4338 <loop+0x238>)
      max30105.check(); //Check the sensor for new data

      redBuffer[i] = max30105.getRed();
   b4108:	f8df a240 	ldr.w	sl, [pc, #576]	; b434c <loop+0x24c>
      irBuffer[i] = max30105.getIR();
   b410c:	f8df 9244 	ldr.w	r9, [pc, #580]	; b4354 <loop+0x254>
  bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
   b4110:	2364      	movs	r3, #100	; 0x64
void loop() {
   b4112:	b099      	sub	sp, #100	; 0x64
  bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
   b4114:	6033      	str	r3, [r6, #0]
   b4116:	2700      	movs	r7, #0
  for (byte i = 0 ; i < bufferLength ; i++) {
   b4118:	6831      	ldr	r1, [r6, #0]
   b411a:	b2fc      	uxtb	r4, r7
   b411c:	428c      	cmp	r4, r1
   b411e:	da32      	bge.n	b4186 <loop+0x86>
    while (max30105.available() == false) //do we have new data?
   b4120:	4628      	mov	r0, r5
   b4122:	f000 f947 	bl	b43b4 <_ZN8MAX301059availableEv>
   b4126:	b918      	cbnz	r0, b4130 <loop+0x30>
      max30105.check(); //Check the sensor for new data
   b4128:	4628      	mov	r0, r5
   b412a:	f000 f98b 	bl	b4444 <_ZN8MAX301055checkEv>
    while (max30105.available() == false) //do we have new data?
   b412e:	e7f7      	b.n	b4120 <loop+0x20>
      redBuffer[i] = max30105.getRed();
   b4130:	4628      	mov	r0, r5
   b4132:	f000 fa4b 	bl	b45cc <_ZN8MAX301056getRedEv>
   b4136:	f82a 0014 	strh.w	r0, [sl, r4, lsl #1]
      irBuffer[i] = max30105.getIR();
   b413a:	4628      	mov	r0, r5
   b413c:	f000 fa54 	bl	b45e8 <_ZN8MAX301055getIREv>
   b4140:	f829 0014 	strh.w	r0, [r9, r4, lsl #1]
      max30105.nextSample(); //We're finished with this sample so move to next sample
   b4144:	4628      	mov	r0, r5
   b4146:	f000 f93f 	bl	b43c8 <_ZN8MAX3010510nextSampleEv>

      Serial.print(F("red="));
   b414a:	f001 fe37 	bl	b5dbc <_Z16_fetch_usbserialv>
   b414e:	497b      	ldr	r1, [pc, #492]	; (b433c <loop+0x23c>)
   b4150:	f001 f9d5 	bl	b54fe <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(redBuffer[i], DEC);
   b4154:	f001 fe32 	bl	b5dbc <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4158:	220a      	movs	r2, #10
   b415a:	f83a 1014 	ldrh.w	r1, [sl, r4, lsl #1]
   b415e:	f001 f9e8 	bl	b5532 <_ZN5Print11printNumberEmh>
      Serial.print(F(", ir="));
   b4162:	f001 fe2b 	bl	b5dbc <_Z16_fetch_usbserialv>
   b4166:	4976      	ldr	r1, [pc, #472]	; (b4340 <loop+0x240>)
   b4168:	f001 f9c9 	bl	b54fe <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.println(irBuffer[i], DEC);
   b416c:	f001 fe26 	bl	b5dbc <_Z16_fetch_usbserialv>
   b4170:	f839 1014 	ldrh.w	r1, [r9, r4, lsl #1]
   b4174:	4680      	mov	r8, r0
   b4176:	220a      	movs	r2, #10
   b4178:	f001 f9db 	bl	b5532 <_ZN5Print11printNumberEmh>
        n += println();
   b417c:	4640      	mov	r0, r8
   b417e:	f001 f9c2 	bl	b5506 <_ZN5Print7printlnEv>
  for (byte i = 0 ; i < bufferLength ; i++) {
   b4182:	3701      	adds	r7, #1
   b4184:	e7c8      	b.n	b4118 <loop+0x18>
  }

  //calculate heart rate and SpO2 after first 100 samples (first 4 seconds of samples)
  maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
   b4186:	4b6f      	ldr	r3, [pc, #444]	; (b4344 <loop+0x244>)
   b4188:	4d6f      	ldr	r5, [pc, #444]	; (b4348 <loop+0x248>)
   b418a:	f8df 81f0 	ldr.w	r8, [pc, #496]	; b437c <loop+0x27c>
   b418e:	9302      	str	r3, [sp, #8]
   b4190:	4a6e      	ldr	r2, [pc, #440]	; (b434c <loop+0x24c>)
   b4192:	4b6f      	ldr	r3, [pc, #444]	; (b4350 <loop+0x250>)
   b4194:	486f      	ldr	r0, [pc, #444]	; (b4354 <loop+0x254>)
   b4196:	9501      	str	r5, [sp, #4]
   b4198:	f8cd 8000 	str.w	r8, [sp]
   b419c:	f000 fc56 	bl	b4a4c <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_>
  while (1)
  {
    //dumping the first 25 sets of samples in the memory and shift the last 75 sets of samples to the top
    for (byte i = 25; i < 100; i++)
    {
      redBuffer[i - 25] = redBuffer[i];
   b41a0:	f8df b1dc 	ldr.w	fp, [pc, #476]	; b4380 <loop+0x280>
      irBuffer[i - 25] = irBuffer[i];
   b41a4:	f8df 91dc 	ldr.w	r9, [pc, #476]	; b4384 <loop+0x284>
      redBuffer[i - 25] = redBuffer[i];
   b41a8:	4868      	ldr	r0, [pc, #416]	; (b434c <loop+0x24c>)
    }

    //take 25 sets of samples before calculating the heart rate.
    for (byte i = 75; i < 100; i++)
    {
      while (max30105.available() == false) //do we have new data?
   b41aa:	4f63      	ldr	r7, [pc, #396]	; (b4338 <loop+0x238>)
        max30105.check(); //Check the sensor for new data

      redBuffer[i] = max30105.getRed();
      irBuffer[i] = max30105.getIR();
   b41ac:	f8df a1a4 	ldr.w	sl, [pc, #420]	; b4354 <loop+0x254>
      redBuffer[i - 25] = redBuffer[i];
   b41b0:	2296      	movs	r2, #150	; 0x96
   b41b2:	4659      	mov	r1, fp
   b41b4:	f002 f8b3 	bl	b631e <memmove>
      irBuffer[i - 25] = irBuffer[i];
   b41b8:	4866      	ldr	r0, [pc, #408]	; (b4354 <loop+0x254>)
   b41ba:	2296      	movs	r2, #150	; 0x96
   b41bc:	4649      	mov	r1, r9
   b41be:	f002 f8ae 	bl	b631e <memmove>
   b41c2:	244b      	movs	r4, #75	; 0x4b
      while (max30105.available() == false) //do we have new data?
   b41c4:	4638      	mov	r0, r7
   b41c6:	f000 f8f5 	bl	b43b4 <_ZN8MAX301059availableEv>
   b41ca:	b918      	cbnz	r0, b41d4 <loop+0xd4>
        max30105.check(); //Check the sensor for new data
   b41cc:	4638      	mov	r0, r7
   b41ce:	f000 f939 	bl	b4444 <_ZN8MAX301055checkEv>
      while (max30105.available() == false) //do we have new data?
   b41d2:	e7f7      	b.n	b41c4 <loop+0xc4>
      redBuffer[i] = max30105.getRed();
   b41d4:	4638      	mov	r0, r7
   b41d6:	f000 f9f9 	bl	b45cc <_ZN8MAX301056getRedEv>
   b41da:	4b5c      	ldr	r3, [pc, #368]	; (b434c <loop+0x24c>)
   b41dc:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
      irBuffer[i] = max30105.getIR();
   b41e0:	4638      	mov	r0, r7
   b41e2:	f000 fa01 	bl	b45e8 <_ZN8MAX301055getIREv>
   b41e6:	f82a 0014 	strh.w	r0, [sl, r4, lsl #1]
      max30105.nextSample(); //We're finished with this sample so move to next sample
   b41ea:	4638      	mov	r0, r7
    for (byte i = 75; i < 100; i++)
   b41ec:	3401      	adds	r4, #1
      max30105.nextSample(); //We're finished with this sample so move to next sample
   b41ee:	f000 f8eb 	bl	b43c8 <_ZN8MAX3010510nextSampleEv>
    for (byte i = 75; i < 100; i++)
   b41f2:	2c64      	cmp	r4, #100	; 0x64
   b41f4:	d1e6      	bne.n	b41c4 <loop+0xc4>
      // Serial.print(F(", SPO2Valid="));
      // Serial.println(validSPO2, DEC);
    }

    //After gathering 25 new samples recalculate HR and SP02
    maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
   b41f6:	4b53      	ldr	r3, [pc, #332]	; (b4344 <loop+0x244>)
   b41f8:	f8df a154 	ldr.w	sl, [pc, #340]	; b4350 <loop+0x250>
   b41fc:	4a53      	ldr	r2, [pc, #332]	; (b434c <loop+0x24c>)
   b41fe:	6831      	ldr	r1, [r6, #0]
   b4200:	4854      	ldr	r0, [pc, #336]	; (b4354 <loop+0x254>)
   b4202:	f8cd 8000 	str.w	r8, [sp]
   b4206:	e9cd 5301 	strd	r5, r3, [sp, #4]
   b420a:	4653      	mov	r3, sl
   b420c:	f000 fc1e 	bl	b4a4c <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_>

    if (loop_counter % 3000 == 0) {
   b4210:	4b51      	ldr	r3, [pc, #324]	; (b4358 <loop+0x258>)
    maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
   b4212:	681b      	ldr	r3, [r3, #0]
   b4214:	f640 32b8 	movw	r2, #3000	; 0xbb8
   b4218:	fbb3 f1f2 	udiv	r1, r3, r2
   b421c:	fb02 3311 	mls	r3, r2, r1, r3
    if (loop_counter % 3000 == 0) {
   b4220:	2b00      	cmp	r3, #0
   b4222:	d15a      	bne.n	b42da <loop+0x1da>
      String send_data = String("{ \"beat\": \"") + String(heartRate) + "\"" + ", \"ox\": " + String(spo2) + "}";
   b4224:	494d      	ldr	r1, [pc, #308]	; (b435c <loop+0x25c>)
   b4226:	a808      	add	r0, sp, #32
   b4228:	f001 f845 	bl	b52b6 <_ZN6StringC1EPK19__FlashStringHelper>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b422c:	a908      	add	r1, sp, #32
   b422e:	a810      	add	r0, sp, #64	; 0x40
   b4230:	f001 f864 	bl	b52fc <_ZN6StringC1ERKS_>
   b4234:	220a      	movs	r2, #10
   b4236:	6829      	ldr	r1, [r5, #0]
   b4238:	a80c      	add	r0, sp, #48	; 0x30
   b423a:	f001 f88f 	bl	b535c <_ZN6StringC1Elh>
   b423e:	a90c      	add	r1, sp, #48	; 0x30
   b4240:	a810      	add	r0, sp, #64	; 0x40
   b4242:	f001 f8c6 	bl	b53d2 <_ZplRK15StringSumHelperRK6String>
   b4246:	4946      	ldr	r1, [pc, #280]	; (b4360 <loop+0x260>)
   b4248:	f001 f8cf 	bl	b53ea <_ZplRK15StringSumHelperPKc>
   b424c:	4945      	ldr	r1, [pc, #276]	; (b4364 <loop+0x264>)
   b424e:	f001 f8cc 	bl	b53ea <_ZplRK15StringSumHelperPKc>
   b4252:	220a      	movs	r2, #10
   b4254:	4604      	mov	r4, r0
   b4256:	f8da 1000 	ldr.w	r1, [sl]
   b425a:	a814      	add	r0, sp, #80	; 0x50
   b425c:	f001 f87e 	bl	b535c <_ZN6StringC1Elh>
   b4260:	a914      	add	r1, sp, #80	; 0x50
   b4262:	4620      	mov	r0, r4
   b4264:	f001 f8b5 	bl	b53d2 <_ZplRK15StringSumHelperRK6String>
   b4268:	493f      	ldr	r1, [pc, #252]	; (b4368 <loop+0x268>)
   b426a:	f001 f8be 	bl	b53ea <_ZplRK15StringSumHelperPKc>
   b426e:	4601      	mov	r1, r0
   b4270:	a804      	add	r0, sp, #16
   b4272:	f001 f843 	bl	b52fc <_ZN6StringC1ERKS_>
   b4276:	a814      	add	r0, sp, #80	; 0x50
   b4278:	f000 ffd2 	bl	b5220 <_ZN6StringD1Ev>
   b427c:	a80c      	add	r0, sp, #48	; 0x30
   b427e:	f000 ffcf 	bl	b5220 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4282:	a810      	add	r0, sp, #64	; 0x40
   b4284:	f000 ffcc 	bl	b5220 <_ZN6StringD1Ev>
   b4288:	a808      	add	r0, sp, #32
   b428a:	f000 ffc9 	bl	b5220 <_ZN6StringD1Ev>
      Particle.publish("Reading", String(send_data), PRIVATE);
   b428e:	a904      	add	r1, sp, #16
   b4290:	a814      	add	r0, sp, #80	; 0x50
   b4292:	f001 f833 	bl	b52fc <_ZN6StringC1ERKS_>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4296:	4b35      	ldr	r3, [pc, #212]	; (b436c <loop+0x26c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4298:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b429a:	781b      	ldrb	r3, [r3, #0]
   b429c:	f88d 3000 	strb.w	r3, [sp]
   b42a0:	4933      	ldr	r1, [pc, #204]	; (b4370 <loop+0x270>)
   b42a2:	233c      	movs	r3, #60	; 0x3c
   b42a4:	a810      	add	r0, sp, #64	; 0x40
   b42a6:	f001 fb47 	bl	b5938 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b42aa:	9c11      	ldr	r4, [sp, #68]	; 0x44
   b42ac:	b17c      	cbz	r4, b42ce <loop+0x1ce>
      if (--_M_use_count == 0)
   b42ae:	6863      	ldr	r3, [r4, #4]
   b42b0:	3b01      	subs	r3, #1
   b42b2:	6063      	str	r3, [r4, #4]
   b42b4:	b95b      	cbnz	r3, b42ce <loop+0x1ce>
          _M_dispose();
   b42b6:	6823      	ldr	r3, [r4, #0]
   b42b8:	4620      	mov	r0, r4
   b42ba:	689b      	ldr	r3, [r3, #8]
   b42bc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b42be:	68a3      	ldr	r3, [r4, #8]
   b42c0:	3b01      	subs	r3, #1
   b42c2:	60a3      	str	r3, [r4, #8]
   b42c4:	b91b      	cbnz	r3, b42ce <loop+0x1ce>
            _M_destroy();
   b42c6:	6823      	ldr	r3, [r4, #0]
   b42c8:	4620      	mov	r0, r4
   b42ca:	68db      	ldr	r3, [r3, #12]
   b42cc:	4798      	blx	r3
   b42ce:	a814      	add	r0, sp, #80	; 0x50
   b42d0:	f000 ffa6 	bl	b5220 <_ZN6StringD1Ev>
      String send_data = String("{ \"beat\": \"") + String(heartRate) + "\"" + ", \"ox\": " + String(spo2) + "}";
   b42d4:	a804      	add	r0, sp, #16
   b42d6:	f000 ffa3 	bl	b5220 <_ZN6StringD1Ev>
    }
    Serial.println(loop_counter);
   b42da:	f001 fd6f 	bl	b5dbc <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b42de:	4b1e      	ldr	r3, [pc, #120]	; (b4358 <loop+0x258>)
   b42e0:	220a      	movs	r2, #10
   b42e2:	6819      	ldr	r1, [r3, #0]
   b42e4:	4604      	mov	r4, r0
   b42e6:	f001 f924 	bl	b5532 <_ZN5Print11printNumberEmh>
        n += println();
   b42ea:	4620      	mov	r0, r4
   b42ec:	f001 f90b 	bl	b5506 <_ZN5Print7printlnEv>
    Serial.println(String("HR:") + heartRate + ", O2: " + spo2);
   b42f0:	f001 fd64 	bl	b5dbc <_Z16_fetch_usbserialv>
   b42f4:	491f      	ldr	r1, [pc, #124]	; (b4374 <loop+0x274>)
   b42f6:	4604      	mov	r4, r0
   b42f8:	a810      	add	r0, sp, #64	; 0x40
   b42fa:	f000 ffdc 	bl	b52b6 <_ZN6StringC1EPK19__FlashStringHelper>
	StringSumHelper(const String &s) : String(s) {}
   b42fe:	a910      	add	r1, sp, #64	; 0x40
   b4300:	a814      	add	r0, sp, #80	; 0x50
   b4302:	f000 fffb 	bl	b52fc <_ZN6StringC1ERKS_>
   b4306:	6829      	ldr	r1, [r5, #0]
   b4308:	a814      	add	r0, sp, #80	; 0x50
   b430a:	f001 f883 	bl	b5414 <_ZplRK15StringSumHelperl>
   b430e:	491a      	ldr	r1, [pc, #104]	; (b4378 <loop+0x278>)
   b4310:	f001 f86b 	bl	b53ea <_ZplRK15StringSumHelperPKc>
   b4314:	f8da 1000 	ldr.w	r1, [sl]
   b4318:	f001 f87c 	bl	b5414 <_ZplRK15StringSumHelperl>
   b431c:	6801      	ldr	r1, [r0, #0]
   b431e:	4620      	mov	r0, r4
   b4320:	f001 f8fd 	bl	b551e <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4324:	a814      	add	r0, sp, #80	; 0x50
   b4326:	f000 ff7b 	bl	b5220 <_ZN6StringD1Ev>
   b432a:	a810      	add	r0, sp, #64	; 0x40
   b432c:	f000 ff78 	bl	b5220 <_ZN6StringD1Ev>
  }
   b4330:	e73a      	b.n	b41a8 <loop+0xa8>
   b4332:	bf00      	nop
   b4334:	2003e1b4 	.word	0x2003e1b4
   b4338:	2003e298 	.word	0x2003e298
   b433c:	000b64fc 	.word	0x000b64fc
   b4340:	000b6501 	.word	0x000b6501
   b4344:	2003e36c 	.word	0x2003e36c
   b4348:	2003e1c8 	.word	0x2003e1c8
   b434c:	2003e2a0 	.word	0x2003e2a0
   b4350:	2003e368 	.word	0x2003e368
   b4354:	2003e1cc 	.word	0x2003e1cc
   b4358:	2003e294 	.word	0x2003e294
   b435c:	000b6507 	.word	0x000b6507
   b4360:	000b6511 	.word	0x000b6511
   b4364:	000b6513 	.word	0x000b6513
   b4368:	000b651c 	.word	0x000b651c
   b436c:	2003e1b0 	.word	0x2003e1b0
   b4370:	000b651e 	.word	0x000b651e
   b4374:	000b6526 	.word	0x000b6526
   b4378:	000b652a 	.word	0x000b652a
   b437c:	2003e36d 	.word	0x2003e36d
   b4380:	2003e2d2 	.word	0x2003e2d2
   b4384:	2003e1fe 	.word	0x2003e1fe

000b4388 <_GLOBAL__sub_I_max30105>:
}
   b4388:	b508      	push	{r3, lr}
        val_(val) {
   b438a:	4b06      	ldr	r3, [pc, #24]	; (b43a4 <_GLOBAL__sub_I_max30105+0x1c>)
MAX30105 max30105;                    // Sensor
   b438c:	4806      	ldr	r0, [pc, #24]	; (b43a8 <_GLOBAL__sub_I_max30105+0x20>)
   b438e:	2201      	movs	r2, #1
   b4390:	701a      	strb	r2, [r3, #0]
   b4392:	f000 f80d 	bl	b43b0 <_ZN8MAX30105C1Ev>
String data = String(10);
   b4396:	220a      	movs	r2, #10
}
   b4398:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
String data = String(10);
   b439c:	4803      	ldr	r0, [pc, #12]	; (b43ac <_GLOBAL__sub_I_max30105+0x24>)
   b439e:	4611      	mov	r1, r2
   b43a0:	f000 bfc9 	b.w	b5336 <_ZN6StringC1Eih>
   b43a4:	2003e1b0 	.word	0x2003e1b0
   b43a8:	2003e298 	.word	0x2003e298
   b43ac:	2003e1b8 	.word	0x2003e1b8

000b43b0 <_ZN8MAX30105C1Ev>:
  byte tail;
} sense; //This is our circular buffer of readings from the sensor

MAX30105::MAX30105() {
  // Constructor
}
   b43b0:	4770      	bx	lr
	...

000b43b4 <_ZN8MAX301059availableEv>:
//

//Tell caller how many samples are available
uint8_t MAX30105::available(void)
{
  uint8_t numberOfSamples = sense.head - sense.tail;
   b43b4:	4b03      	ldr	r3, [pc, #12]	; (b43c4 <_ZN8MAX301059availableEv+0x10>)
   b43b6:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
   b43ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   b43be:	1ac0      	subs	r0, r0, r3
  if (numberOfSamples < 0) numberOfSamples += STORAGE_SIZE;

  return (numberOfSamples);
}
   b43c0:	b2c0      	uxtb	r0, r0
   b43c2:	4770      	bx	lr
   b43c4:	2003e370 	.word	0x2003e370

000b43c8 <_ZN8MAX3010510nextSampleEv>:
  uint8_t numberOfSamples = sense.head - sense.tail;
   b43c8:	4a06      	ldr	r2, [pc, #24]	; (b43e4 <_ZN8MAX3010510nextSampleEv+0x1c>)
   b43ca:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
}

//Advance the tail
void MAX30105::nextSample(void)
{
  if(available()) //Only advance the tail if new data is available
   b43ce:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
   b43d2:	4299      	cmp	r1, r3
  {
    sense.tail++;
   b43d4:	bf1e      	ittt	ne
   b43d6:	3301      	addne	r3, #1
    sense.tail %= STORAGE_SIZE; //Wrap condition
   b43d8:	f003 0303 	andne.w	r3, r3, #3
   b43dc:	f882 3031 	strbne.w	r3, [r2, #49]	; 0x31
  }
}
   b43e0:	4770      	bx	lr
   b43e2:	bf00      	nop
   b43e4:	2003e370 	.word	0x2003e370

000b43e8 <_ZN8MAX3010513readRegister8Ehh>:
}

//
// Low-level I2C Communication
//
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
   b43e8:	b538      	push	{r3, r4, r5, lr}
   b43ea:	460c      	mov	r4, r1
   b43ec:	4615      	mov	r5, r2

	Wire.beginTransmission(address);
   b43ee:	f001 ff45 	bl	b627c <_Z19__fetch_global_Wirev>
   b43f2:	4621      	mov	r1, r4
   b43f4:	f001 fdea 	bl	b5fcc <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(reg);
   b43f8:	f001 ff40 	bl	b627c <_Z19__fetch_global_Wirev>
   b43fc:	6803      	ldr	r3, [r0, #0]
   b43fe:	4629      	mov	r1, r5
   b4400:	689b      	ldr	r3, [r3, #8]
   b4402:	4798      	blx	r3
	Wire.endTransmission();
   b4404:	f001 ff3a 	bl	b627c <_Z19__fetch_global_Wirev>
   b4408:	f001 fde8 	bl	b5fdc <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(address, 1);
   b440c:	f001 ff36 	bl	b627c <_Z19__fetch_global_Wirev>
   b4410:	2201      	movs	r2, #1
   b4412:	4621      	mov	r1, r4
   b4414:	f001 fdd7 	bl	b5fc6 <_ZN7TwoWire11requestFromEhj>
	while ( Wire.available() ) // slave may send less than requested
   b4418:	f001 ff30 	bl	b627c <_Z19__fetch_global_Wirev>
   b441c:	6803      	ldr	r3, [r0, #0]
   b441e:	691b      	ldr	r3, [r3, #16]
   b4420:	4798      	blx	r3
   b4422:	b128      	cbz	r0, b4430 <_ZN8MAX3010513readRegister8Ehh+0x48>
	{
		return(Wire.read()); // receive a byte as a proper uint8_t
   b4424:	f001 ff2a 	bl	b627c <_Z19__fetch_global_Wirev>
   b4428:	6803      	ldr	r3, [r0, #0]
   b442a:	695b      	ldr	r3, [r3, #20]
   b442c:	4798      	blx	r3
   b442e:	b2c0      	uxtb	r0, r0
	}

}

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
   b4430:	bd38      	pop	{r3, r4, r5, pc}

000b4432 <_ZN8MAX3010515getWritePointerEv>:
  return (readRegister8(MAX30105_ADDRESS, MAX30105_FIFOWRITEPTR));
   b4432:	2204      	movs	r2, #4
   b4434:	2157      	movs	r1, #87	; 0x57
   b4436:	f7ff bfd7 	b.w	b43e8 <_ZN8MAX3010513readRegister8Ehh>

000b443a <_ZN8MAX3010514getReadPointerEv>:
  return (readRegister8(MAX30105_ADDRESS, MAX30105_FIFOREADPTR));
   b443a:	2206      	movs	r2, #6
   b443c:	2157      	movs	r1, #87	; 0x57
   b443e:	f7ff bfd3 	b.w	b43e8 <_ZN8MAX3010513readRegister8Ehh>
	...

000b4444 <_ZN8MAX301055checkEv>:
{
   b4444:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b4448:	4607      	mov	r7, r0
  byte readPointer = getReadPointer();
   b444a:	f7ff fff6 	bl	b443a <_ZN8MAX3010514getReadPointerEv>
   b444e:	4604      	mov	r4, r0
  byte writePointer = getWritePointer();
   b4450:	4638      	mov	r0, r7
   b4452:	f7ff ffee 	bl	b4432 <_ZN8MAX3010515getWritePointerEv>
  if (readPointer != writePointer)
   b4456:	4284      	cmp	r4, r0
   b4458:	f000 809b 	beq.w	b4592 <_ZN8MAX301055checkEv+0x14e>
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
   b445c:	1b04      	subs	r4, r0, r4
   b445e:	bf48      	it	mi
   b4460:	3420      	addmi	r4, #32
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
   b4462:	797e      	ldrb	r6, [r7, #5]
        sense.head %= STORAGE_SIZE; //Wrap condition
   b4464:	f8df 8134 	ldr.w	r8, [pc, #308]	; b459c <_ZN8MAX301055checkEv+0x158>
    Wire.beginTransmission(MAX30105_ADDRESS);
   b4468:	f001 ff08 	bl	b627c <_Z19__fetch_global_Wirev>
   b446c:	2157      	movs	r1, #87	; 0x57
   b446e:	f001 fdad 	bl	b5fcc <_ZN7TwoWire17beginTransmissionEh>
    Wire.write(MAX30105_FIFODATA);
   b4472:	f001 ff03 	bl	b627c <_Z19__fetch_global_Wirev>
   b4476:	6803      	ldr	r3, [r0, #0]
   b4478:	2107      	movs	r1, #7
   b447a:	689b      	ldr	r3, [r3, #8]
   b447c:	4798      	blx	r3
    Wire.endTransmission();
   b447e:	f001 fefd 	bl	b627c <_Z19__fetch_global_Wirev>
   b4482:	f001 fdab 	bl	b5fdc <_ZN7TwoWire15endTransmissionEv>
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
   b4486:	4366      	muls	r6, r4
   b4488:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    while (bytesLeftToRead > 0)
   b448c:	2e00      	cmp	r6, #0
   b448e:	f340 8081 	ble.w	b4594 <_ZN8MAX301055checkEv+0x150>
      if (toGet > I2C_BUFFER_LENGTH)
   b4492:	2e20      	cmp	r6, #32
        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   b4494:	bfc3      	ittte	gt
   b4496:	797d      	ldrbgt	r5, [r7, #5]
   b4498:	eb05 0345 	addgt.w	r3, r5, r5, lsl #1
   b449c:	2520      	movgt	r5, #32
   b449e:	4635      	movle	r5, r6
   b44a0:	bfc4      	itt	gt
   b44a2:	fbb5 f5f3 	udivgt	r5, r5, r3
   b44a6:	435d      	mulgt	r5, r3
      Wire.requestFrom(MAX30105_ADDRESS, toGet);
   b44a8:	f001 fee8 	bl	b627c <_Z19__fetch_global_Wirev>
   b44ac:	462a      	mov	r2, r5
   b44ae:	2157      	movs	r1, #87	; 0x57
   b44b0:	f001 fd89 	bl	b5fc6 <_ZN7TwoWire11requestFromEhj>
      bytesLeftToRead -= toGet;
   b44b4:	1b76      	subs	r6, r6, r5
        temp[3] = 0;
   b44b6:	f04f 0900 	mov.w	r9, #0
      while (toGet > 0)
   b44ba:	2d00      	cmp	r5, #0
   b44bc:	dde6      	ble.n	b448c <_ZN8MAX301055checkEv+0x48>
        sense.head++; //Advance the head of the storage struct
   b44be:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
        temp[3] = 0;
   b44c2:	f88d 9007 	strb.w	r9, [sp, #7]
        sense.head++; //Advance the head of the storage struct
   b44c6:	3301      	adds	r3, #1
        sense.head %= STORAGE_SIZE; //Wrap condition
   b44c8:	f003 0303 	and.w	r3, r3, #3
   b44cc:	f888 3030 	strb.w	r3, [r8, #48]	; 0x30
        temp[2] = Wire.read();
   b44d0:	f001 fed4 	bl	b627c <_Z19__fetch_global_Wirev>
   b44d4:	6803      	ldr	r3, [r0, #0]
   b44d6:	695b      	ldr	r3, [r3, #20]
   b44d8:	4798      	blx	r3
   b44da:	f88d 0006 	strb.w	r0, [sp, #6]
        temp[1] = Wire.read();
   b44de:	f001 fecd 	bl	b627c <_Z19__fetch_global_Wirev>
   b44e2:	6803      	ldr	r3, [r0, #0]
   b44e4:	695b      	ldr	r3, [r3, #20]
   b44e6:	4798      	blx	r3
   b44e8:	f88d 0005 	strb.w	r0, [sp, #5]
        temp[0] = Wire.read();
   b44ec:	f001 fec6 	bl	b627c <_Z19__fetch_global_Wirev>
   b44f0:	6803      	ldr	r3, [r0, #0]
   b44f2:	695b      	ldr	r3, [r3, #20]
   b44f4:	4798      	blx	r3
   b44f6:	f88d 0004 	strb.w	r0, [sp, #4]
		tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b44fa:	9b01      	ldr	r3, [sp, #4]
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   b44fc:	f898 2030 	ldrb.w	r2, [r8, #48]	; 0x30
		tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b4500:	f3c3 0311 	ubfx	r3, r3, #0, #18
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   b4504:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
        if (activeLEDs > 1)
   b4508:	797b      	ldrb	r3, [r7, #5]
   b450a:	2b01      	cmp	r3, #1
   b450c:	d91c      	bls.n	b4548 <_ZN8MAX301055checkEv+0x104>
          temp[2] = Wire.read();
   b450e:	f001 feb5 	bl	b627c <_Z19__fetch_global_Wirev>
   b4512:	6803      	ldr	r3, [r0, #0]
   b4514:	695b      	ldr	r3, [r3, #20]
   b4516:	4798      	blx	r3
   b4518:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = Wire.read();
   b451c:	f001 feae 	bl	b627c <_Z19__fetch_global_Wirev>
   b4520:	6803      	ldr	r3, [r0, #0]
   b4522:	695b      	ldr	r3, [r3, #20]
   b4524:	4798      	blx	r3
   b4526:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = Wire.read();
   b452a:	f001 fea7 	bl	b627c <_Z19__fetch_global_Wirev>
   b452e:	6803      	ldr	r3, [r0, #0]
   b4530:	695b      	ldr	r3, [r3, #20]
   b4532:	4798      	blx	r3
		  sense.IR[sense.head] = tempLong;
   b4534:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
          temp[0] = Wire.read();
   b4538:	f88d 0004 	strb.w	r0, [sp, #4]
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b453c:	9a01      	ldr	r2, [sp, #4]
		  sense.IR[sense.head] = tempLong;
   b453e:	3304      	adds	r3, #4
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b4540:	f3c2 0211 	ubfx	r2, r2, #0, #18
		  sense.IR[sense.head] = tempLong;
   b4544:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
        if (activeLEDs > 2)
   b4548:	797b      	ldrb	r3, [r7, #5]
   b454a:	2b02      	cmp	r3, #2
   b454c:	d91c      	bls.n	b4588 <_ZN8MAX301055checkEv+0x144>
          temp[2] = Wire.read();
   b454e:	f001 fe95 	bl	b627c <_Z19__fetch_global_Wirev>
   b4552:	6803      	ldr	r3, [r0, #0]
   b4554:	695b      	ldr	r3, [r3, #20]
   b4556:	4798      	blx	r3
   b4558:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = Wire.read();
   b455c:	f001 fe8e 	bl	b627c <_Z19__fetch_global_Wirev>
   b4560:	6803      	ldr	r3, [r0, #0]
   b4562:	695b      	ldr	r3, [r3, #20]
   b4564:	4798      	blx	r3
   b4566:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = Wire.read();
   b456a:	f001 fe87 	bl	b627c <_Z19__fetch_global_Wirev>
   b456e:	6803      	ldr	r3, [r0, #0]
   b4570:	695b      	ldr	r3, [r3, #20]
   b4572:	4798      	blx	r3
          sense.green[sense.head] = tempLong;
   b4574:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
          temp[0] = Wire.read();
   b4578:	f88d 0004 	strb.w	r0, [sp, #4]
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b457c:	9a01      	ldr	r2, [sp, #4]
          sense.green[sense.head] = tempLong;
   b457e:	3308      	adds	r3, #8
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b4580:	f3c2 0211 	ubfx	r2, r2, #0, #18
          sense.green[sense.head] = tempLong;
   b4584:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
        toGet -= activeLEDs * 3;
   b4588:	797b      	ldrb	r3, [r7, #5]
   b458a:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   b458e:	441d      	add	r5, r3
      while (toGet > 0)
   b4590:	e793      	b.n	b44ba <_ZN8MAX301055checkEv+0x76>
  int numberOfSamples = 0;
   b4592:	2400      	movs	r4, #0
}
   b4594:	b2a0      	uxth	r0, r4
   b4596:	b003      	add	sp, #12
   b4598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b459c:	2003e370 	.word	0x2003e370

000b45a0 <_ZN8MAX301059safeCheckEh>:
{
   b45a0:	b570      	push	{r4, r5, r6, lr}
   b45a2:	4605      	mov	r5, r0
   b45a4:	460e      	mov	r6, r1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b45a6:	f000 fb9f 	bl	b4ce8 <HAL_Timer_Get_Milli_Seconds>
   b45aa:	4604      	mov	r4, r0
   b45ac:	f000 fb9c 	bl	b4ce8 <HAL_Timer_Get_Milli_Seconds>
	if(millis() - markTime > maxTimeToCheck) return(false);
   b45b0:	1b00      	subs	r0, r0, r4
   b45b2:	42b0      	cmp	r0, r6
   b45b4:	d808      	bhi.n	b45c8 <_ZN8MAX301059safeCheckEh+0x28>
	if(check() == true) //We found new data!
   b45b6:	4628      	mov	r0, r5
   b45b8:	f7ff ff44 	bl	b4444 <_ZN8MAX301055checkEv>
   b45bc:	2801      	cmp	r0, #1
   b45be:	d004      	beq.n	b45ca <_ZN8MAX301059safeCheckEh+0x2a>
	delay(1);
   b45c0:	2001      	movs	r0, #1
   b45c2:	f000 ffe7 	bl	b5594 <delay>
	if(millis() - markTime > maxTimeToCheck) return(false);
   b45c6:	e7f1      	b.n	b45ac <_ZN8MAX301059safeCheckEh+0xc>
   b45c8:	2000      	movs	r0, #0
}
   b45ca:	bd70      	pop	{r4, r5, r6, pc}

000b45cc <_ZN8MAX301056getRedEv>:
{
   b45cc:	b508      	push	{r3, lr}
  if(safeCheck(250))
   b45ce:	21fa      	movs	r1, #250	; 0xfa
   b45d0:	f7ff ffe6 	bl	b45a0 <_ZN8MAX301059safeCheckEh>
   b45d4:	b120      	cbz	r0, b45e0 <_ZN8MAX301056getRedEv+0x14>
    return (sense.red[sense.head]);
   b45d6:	4b03      	ldr	r3, [pc, #12]	; (b45e4 <_ZN8MAX301056getRedEv+0x18>)
   b45d8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   b45dc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
}
   b45e0:	bd08      	pop	{r3, pc}
   b45e2:	bf00      	nop
   b45e4:	2003e370 	.word	0x2003e370

000b45e8 <_ZN8MAX301055getIREv>:
{
   b45e8:	b508      	push	{r3, lr}
  if(safeCheck(250))
   b45ea:	21fa      	movs	r1, #250	; 0xfa
   b45ec:	f7ff ffd8 	bl	b45a0 <_ZN8MAX301059safeCheckEh>
   b45f0:	b128      	cbz	r0, b45fe <_ZN8MAX301055getIREv+0x16>
    return (sense.IR[sense.head]);
   b45f2:	4a03      	ldr	r2, [pc, #12]	; (b4600 <_ZN8MAX301055getIREv+0x18>)
   b45f4:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   b45f8:	3304      	adds	r3, #4
   b45fa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
}
   b45fe:	bd08      	pop	{r3, pc}
   b4600:	2003e370 	.word	0x2003e370

000b4604 <_ZN8MAX3010510readPartIDEv>:
  return readRegister8(MAX30105_ADDRESS, MAX30105_PARTID);
   b4604:	22ff      	movs	r2, #255	; 0xff
   b4606:	2157      	movs	r1, #87	; 0x57
   b4608:	f7ff beee 	b.w	b43e8 <_ZN8MAX3010513readRegister8Ehh>

000b460c <_ZN8MAX3010514readRevisionIDEv>:
void MAX30105::readRevisionID() {
   b460c:	b510      	push	{r4, lr}
  revisionID = readRegister8(MAX30105_ADDRESS, MAX30105_REVISIONID);
   b460e:	22fe      	movs	r2, #254	; 0xfe
   b4610:	2157      	movs	r1, #87	; 0x57
void MAX30105::readRevisionID() {
   b4612:	4604      	mov	r4, r0
  revisionID = readRegister8(MAX30105_ADDRESS, MAX30105_REVISIONID);
   b4614:	f7ff fee8 	bl	b43e8 <_ZN8MAX3010513readRegister8Ehh>
   b4618:	71a0      	strb	r0, [r4, #6]
}
   b461a:	bd10      	pop	{r4, pc}

000b461c <_ZN8MAX301055beginEv>:
boolean MAX30105::begin() {
   b461c:	b510      	push	{r4, lr}
   b461e:	4604      	mov	r4, r0
 	Wire.begin();
   b4620:	f001 fe2c 	bl	b627c <_Z19__fetch_global_Wirev>
   b4624:	f001 fca0 	bl	b5f68 <_ZN7TwoWire5beginEv>
  if (!readPartID() == MAX_30105_EXPECTEDPARTID) {
   b4628:	4620      	mov	r0, r4
   b462a:	f7ff ffeb 	bl	b4604 <_ZN8MAX3010510readPartIDEv>
  readRevisionID();
   b462e:	4620      	mov	r0, r4
   b4630:	f7ff ffec 	bl	b460c <_ZN8MAX3010514readRevisionIDEv>
}
   b4634:	2001      	movs	r0, #1
   b4636:	bd10      	pop	{r4, pc}

000b4638 <_ZN8MAX3010514writeRegister8Ehhh>:
  Wire.beginTransmission(address);
  Wire.write(reg);
   b4638:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b463a:	4615      	mov	r5, r2
   b463c:	461c      	mov	r4, r3
   b463e:	9101      	str	r1, [sp, #4]
  Wire.write(value);
   b4640:	f001 fe1c 	bl	b627c <_Z19__fetch_global_Wirev>
   b4644:	9901      	ldr	r1, [sp, #4]
   b4646:	f001 fcc1 	bl	b5fcc <_ZN7TwoWire17beginTransmissionEh>
  Wire.endTransmission();
   b464a:	f001 fe17 	bl	b627c <_Z19__fetch_global_Wirev>
   b464e:	6803      	ldr	r3, [r0, #0]
   b4650:	4629      	mov	r1, r5
   b4652:	689b      	ldr	r3, [r3, #8]
   b4654:	4798      	blx	r3
}
   b4656:	f001 fe11 	bl	b627c <_Z19__fetch_global_Wirev>
   b465a:	6803      	ldr	r3, [r0, #0]
   b465c:	4621      	mov	r1, r4
   b465e:	689b      	ldr	r3, [r3, #8]
   b4660:	4798      	blx	r3
   b4662:	f001 fe0b 	bl	b627c <_Z19__fetch_global_Wirev>
   b4666:	b003      	add	sp, #12
   b4668:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   b466c:	f001 bcb6 	b.w	b5fdc <_ZN7TwoWire15endTransmissionEv>

000b4670 <_ZN8MAX3010520setPulseAmplitudeRedEh>:
void MAX30105::setPulseAmplitudeRed(uint8_t amplitude) {
   b4670:	460b      	mov	r3, r1
  writeRegister8(MAX30105_ADDRESS, MAX30105_LED1_PULSEAMP, amplitude);
   b4672:	220c      	movs	r2, #12
   b4674:	2157      	movs	r1, #87	; 0x57
   b4676:	f7ff bfdf 	b.w	b4638 <_ZN8MAX3010514writeRegister8Ehhh>

000b467a <_ZN8MAX3010519setPulseAmplitudeIREh>:
void MAX30105::setPulseAmplitudeIR(uint8_t amplitude) {
   b467a:	460b      	mov	r3, r1
  writeRegister8(MAX30105_ADDRESS, MAX30105_LED2_PULSEAMP, amplitude);
   b467c:	220d      	movs	r2, #13
   b467e:	2157      	movs	r1, #87	; 0x57
   b4680:	f7ff bfda 	b.w	b4638 <_ZN8MAX3010514writeRegister8Ehhh>

000b4684 <_ZN8MAX3010522setPulseAmplitudeGreenEh>:
void MAX30105::setPulseAmplitudeGreen(uint8_t amplitude) {
   b4684:	460b      	mov	r3, r1
  writeRegister8(MAX30105_ADDRESS, MAX30105_LED3_PULSEAMP, amplitude);
   b4686:	220e      	movs	r2, #14
   b4688:	2157      	movs	r1, #87	; 0x57
   b468a:	f7ff bfd5 	b.w	b4638 <_ZN8MAX3010514writeRegister8Ehhh>

000b468e <_ZN8MAX3010526setPulseAmplitudeProximityEh>:
void MAX30105::setPulseAmplitudeProximity(uint8_t amplitude) {
   b468e:	460b      	mov	r3, r1
  writeRegister8(MAX30105_ADDRESS, MAX30105_LED_PROX_AMP, amplitude);
   b4690:	2210      	movs	r2, #16
   b4692:	2157      	movs	r1, #87	; 0x57
   b4694:	f7ff bfd0 	b.w	b4638 <_ZN8MAX3010514writeRegister8Ehhh>

000b4698 <_ZN8MAX301059clearFIFOEv>:
void MAX30105::clearFIFO(void) {
   b4698:	b510      	push	{r4, lr}
  writeRegister8(MAX30105_ADDRESS, MAX30105_FIFOWRITEPTR, 0);
   b469a:	2300      	movs	r3, #0
void MAX30105::clearFIFO(void) {
   b469c:	4604      	mov	r4, r0
  writeRegister8(MAX30105_ADDRESS, MAX30105_FIFOWRITEPTR, 0);
   b469e:	2204      	movs	r2, #4
   b46a0:	2157      	movs	r1, #87	; 0x57
   b46a2:	f7ff ffc9 	bl	b4638 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(MAX30105_ADDRESS, MAX30105_FIFOOVERFLOW, 0);
   b46a6:	4620      	mov	r0, r4
   b46a8:	2300      	movs	r3, #0
   b46aa:	2205      	movs	r2, #5
   b46ac:	2157      	movs	r1, #87	; 0x57
   b46ae:	f7ff ffc3 	bl	b4638 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(MAX30105_ADDRESS, MAX30105_FIFOREADPTR, 0);
   b46b2:	4620      	mov	r0, r4
   b46b4:	2300      	movs	r3, #0
}
   b46b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeRegister8(MAX30105_ADDRESS, MAX30105_FIFOREADPTR, 0);
   b46ba:	2206      	movs	r2, #6
   b46bc:	2157      	movs	r1, #87	; 0x57
   b46be:	f7ff bfbb 	b.w	b4638 <_ZN8MAX3010514writeRegister8Ehhh>

000b46c2 <_ZN8MAX301057bitMaskEhhh>:
{
   b46c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b46c6:	460c      	mov	r4, r1
   b46c8:	4617      	mov	r7, r2
  uint8_t originalContents = readRegister8(MAX30105_ADDRESS, reg);
   b46ca:	460a      	mov	r2, r1
   b46cc:	2157      	movs	r1, #87	; 0x57
{
   b46ce:	4605      	mov	r5, r0
   b46d0:	461e      	mov	r6, r3
  uint8_t originalContents = readRegister8(MAX30105_ADDRESS, reg);
   b46d2:	f7ff fe89 	bl	b43e8 <_ZN8MAX3010513readRegister8Ehh>
  originalContents = originalContents & mask;
   b46d6:	4038      	ands	r0, r7
  writeRegister8(MAX30105_ADDRESS, reg, originalContents | thing);
   b46d8:	ea46 0300 	orr.w	r3, r6, r0
   b46dc:	4622      	mov	r2, r4
   b46de:	4628      	mov	r0, r5
   b46e0:	2157      	movs	r1, #87	; 0x57
}
   b46e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  writeRegister8(MAX30105_ADDRESS, reg, originalContents | thing);
   b46e6:	f7ff bfa7 	b.w	b4638 <_ZN8MAX3010514writeRegister8Ehhh>

000b46ea <_ZN8MAX301059softResetEv>:
void MAX30105::softReset(void) {
   b46ea:	b538      	push	{r3, r4, r5, lr}
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
   b46ec:	22bf      	movs	r2, #191	; 0xbf
   b46ee:	2340      	movs	r3, #64	; 0x40
   b46f0:	2109      	movs	r1, #9
void MAX30105::softReset(void) {
   b46f2:	4605      	mov	r5, r0
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
   b46f4:	f7ff ffe5 	bl	b46c2 <_ZN8MAX301057bitMaskEhhh>
   b46f8:	f000 faf6 	bl	b4ce8 <HAL_Timer_Get_Milli_Seconds>
   b46fc:	4604      	mov	r4, r0
   b46fe:	f000 faf3 	bl	b4ce8 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < 100)
   b4702:	1b00      	subs	r0, r0, r4
   b4704:	2863      	cmp	r0, #99	; 0x63
   b4706:	d80a      	bhi.n	b471e <_ZN8MAX301059softResetEv+0x34>
    uint8_t response = readRegister8(MAX30105_ADDRESS, MAX30105_MODECONFIG);
   b4708:	2209      	movs	r2, #9
   b470a:	2157      	movs	r1, #87	; 0x57
   b470c:	4628      	mov	r0, r5
   b470e:	f7ff fe6b 	bl	b43e8 <_ZN8MAX3010513readRegister8Ehh>
    if ((response & MAX30105_RESET) == 0) break; //We're done!
   b4712:	0643      	lsls	r3, r0, #25
   b4714:	d503      	bpl.n	b471e <_ZN8MAX301059softResetEv+0x34>
    delay(1); //Let's not over burden the I2C bus
   b4716:	2001      	movs	r0, #1
   b4718:	f000 ff3c 	bl	b5594 <delay>
  while (millis() - startTime < 100)
   b471c:	e7ef      	b.n	b46fe <_ZN8MAX301059softResetEv+0x14>
}
   b471e:	bd38      	pop	{r3, r4, r5, pc}

000b4720 <_ZN8MAX3010510setLEDModeEh>:
void MAX30105::setLEDMode(uint8_t mode) {
   b4720:	460b      	mov	r3, r1
  bitMask(MAX30105_MODECONFIG, MAX30105_MODE_MASK, mode);
   b4722:	22f8      	movs	r2, #248	; 0xf8
   b4724:	2109      	movs	r1, #9
   b4726:	f7ff bfcc 	b.w	b46c2 <_ZN8MAX301057bitMaskEhhh>

000b472a <_ZN8MAX3010511setADCRangeEh>:
void MAX30105::setADCRange(uint8_t adcRange) {
   b472a:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_ADCRANGE_MASK, adcRange);
   b472c:	229f      	movs	r2, #159	; 0x9f
   b472e:	210a      	movs	r1, #10
   b4730:	f7ff bfc7 	b.w	b46c2 <_ZN8MAX301057bitMaskEhhh>

000b4734 <_ZN8MAX3010513setSampleRateEh>:
void MAX30105::setSampleRate(uint8_t sampleRate) {
   b4734:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_SAMPLERATE_MASK, sampleRate);
   b4736:	22e3      	movs	r2, #227	; 0xe3
   b4738:	210a      	movs	r1, #10
   b473a:	f7ff bfc2 	b.w	b46c2 <_ZN8MAX301057bitMaskEhhh>

000b473e <_ZN8MAX3010513setPulseWidthEh>:
void MAX30105::setPulseWidth(uint8_t pulseWidth) {
   b473e:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_PULSEWIDTH_MASK, pulseWidth);
   b4740:	22fc      	movs	r2, #252	; 0xfc
   b4742:	210a      	movs	r1, #10
   b4744:	f7ff bfbd 	b.w	b46c2 <_ZN8MAX301057bitMaskEhhh>

000b4748 <_ZN8MAX3010510enableSlotEhh>:
  switch (slotNumber) {
   b4748:	3901      	subs	r1, #1
void MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {
   b474a:	4613      	mov	r3, r2
   b474c:	2903      	cmp	r1, #3
   b474e:	d814      	bhi.n	b477a <_ZN8MAX3010510enableSlotEhh+0x32>
   b4750:	e8df f001 	tbb	[pc, r1]
   b4754:	0e0b0602 	.word	0x0e0b0602
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
   b4758:	22f8      	movs	r2, #248	; 0xf8
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   b475a:	2111      	movs	r1, #17
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
   b475c:	f7ff bfb1 	b.w	b46c2 <_ZN8MAX301057bitMaskEhhh>
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   b4760:	011b      	lsls	r3, r3, #4
   b4762:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   b4766:	228f      	movs	r2, #143	; 0x8f
   b4768:	e7f7      	b.n	b475a <_ZN8MAX3010510enableSlotEhh+0x12>
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT3_MASK, device);
   b476a:	22f8      	movs	r2, #248	; 0xf8
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
   b476c:	2112      	movs	r1, #18
   b476e:	e7f5      	b.n	b475c <_ZN8MAX3010510enableSlotEhh+0x14>
   b4770:	011b      	lsls	r3, r3, #4
   b4772:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   b4776:	228f      	movs	r2, #143	; 0x8f
   b4778:	e7f8      	b.n	b476c <_ZN8MAX3010510enableSlotEhh+0x24>
}
   b477a:	4770      	bx	lr

000b477c <_ZN8MAX3010514setFIFOAverageEh>:
void MAX30105::setFIFOAverage(uint8_t numberOfSamples) {
   b477c:	460b      	mov	r3, r1
  bitMask(MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);
   b477e:	221f      	movs	r2, #31
   b4780:	2108      	movs	r1, #8
   b4782:	f7ff bf9e 	b.w	b46c2 <_ZN8MAX301057bitMaskEhhh>

000b4786 <_ZN8MAX3010518enableFIFORolloverEv>:
  bitMask(MAX30105_FIFOCONFIG, MAX30105_ROLLOVER_MASK, MAX30105_ROLLOVER_ENABLE);
   b4786:	2310      	movs	r3, #16
   b4788:	22ef      	movs	r2, #239	; 0xef
   b478a:	2108      	movs	r1, #8
   b478c:	f7ff bf99 	b.w	b46c2 <_ZN8MAX301057bitMaskEhhh>

000b4790 <_ZN8MAX301055setupEhhhiii>:
void MAX30105::setup(byte powerLevel, byte sampleAverage, byte ledMode, int sampleRate, int pulseWidth, int adcRange) {
   b4790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4794:	4615      	mov	r5, r2
   b4796:	e9dd 7908 	ldrd	r7, r9, [sp, #32]
   b479a:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   b479e:	4604      	mov	r4, r0
   b47a0:	4688      	mov	r8, r1
   b47a2:	461e      	mov	r6, r3
  softReset(); //Reset all configuration, threshold, and data registers to POR values
   b47a4:	f7ff ffa1 	bl	b46ea <_ZN8MAX301059softResetEv>
  if (sampleAverage == 1) setFIFOAverage(MAX30105_SAMPLEAVG_1); //No averaging per FIFO record
   b47a8:	2d01      	cmp	r5, #1
   b47aa:	d149      	bne.n	b4840 <_ZN8MAX301055setupEhhhiii+0xb0>
   b47ac:	2100      	movs	r1, #0
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
   b47ae:	4620      	mov	r0, r4
   b47b0:	f7ff ffe4 	bl	b477c <_ZN8MAX3010514setFIFOAverageEh>
  enableFIFORollover(); //Allow FIFO to wrap/roll over
   b47b4:	4620      	mov	r0, r4
   b47b6:	f7ff ffe6 	bl	b4786 <_ZN8MAX3010518enableFIFORolloverEv>
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
   b47ba:	2e03      	cmp	r6, #3
   b47bc:	d154      	bne.n	b4868 <_ZN8MAX301055setupEhhhiii+0xd8>
   b47be:	2107      	movs	r1, #7
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
   b47c0:	4620      	mov	r0, r4
   b47c2:	f7ff ffad 	bl	b4720 <_ZN8MAX3010510setLEDModeEh>
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
   b47c6:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
   b47ca:	7166      	strb	r6, [r4, #5]
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
   b47cc:	da51      	bge.n	b4872 <_ZN8MAX301055setupEhhhiii+0xe2>
   b47ce:	2100      	movs	r1, #0
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
   b47d0:	4620      	mov	r0, r4
   b47d2:	f7ff ffaa 	bl	b472a <_ZN8MAX3010511setADCRangeEh>
  if (sampleRate < 100) setSampleRate(MAX30105_SAMPLERATE_50); //Take 50 samples per second
   b47d6:	2f63      	cmp	r7, #99	; 0x63
   b47d8:	dc58      	bgt.n	b488c <_ZN8MAX301055setupEhhhiii+0xfc>
   b47da:	2100      	movs	r1, #0
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
   b47dc:	4620      	mov	r0, r4
   b47de:	f7ff ffa9 	bl	b4734 <_ZN8MAX3010513setSampleRateEh>
  if (pulseWidth < 118) setPulseWidth(MAX30105_PULSEWIDTH_69); //Page 26, Gets us 15 bit resolution
   b47e2:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
   b47e6:	dc71      	bgt.n	b48cc <_ZN8MAX301055setupEhhhiii+0x13c>
   b47e8:	2100      	movs	r1, #0
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
   b47ea:	4620      	mov	r0, r4
   b47ec:	f7ff ffa7 	bl	b473e <_ZN8MAX3010513setPulseWidthEh>
  setPulseAmplitudeRed(powerLevel);
   b47f0:	4641      	mov	r1, r8
   b47f2:	4620      	mov	r0, r4
   b47f4:	f7ff ff3c 	bl	b4670 <_ZN8MAX3010520setPulseAmplitudeRedEh>
  setPulseAmplitudeIR(powerLevel);
   b47f8:	4641      	mov	r1, r8
   b47fa:	4620      	mov	r0, r4
   b47fc:	f7ff ff3d 	bl	b467a <_ZN8MAX3010519setPulseAmplitudeIREh>
  setPulseAmplitudeGreen(powerLevel);
   b4800:	4641      	mov	r1, r8
   b4802:	4620      	mov	r0, r4
   b4804:	f7ff ff3e 	bl	b4684 <_ZN8MAX3010522setPulseAmplitudeGreenEh>
  setPulseAmplitudeProximity(powerLevel);
   b4808:	4641      	mov	r1, r8
   b480a:	4620      	mov	r0, r4
   b480c:	f7ff ff3f 	bl	b468e <_ZN8MAX3010526setPulseAmplitudeProximityEh>
  enableSlot(1, SLOT_RED_LED);
   b4810:	2201      	movs	r2, #1
   b4812:	4611      	mov	r1, r2
   b4814:	4620      	mov	r0, r4
   b4816:	f7ff ff97 	bl	b4748 <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
   b481a:	2e01      	cmp	r6, #1
   b481c:	d90b      	bls.n	b4836 <_ZN8MAX301055setupEhhhiii+0xa6>
   b481e:	2202      	movs	r2, #2
   b4820:	4611      	mov	r1, r2
   b4822:	4620      	mov	r0, r4
   b4824:	f7ff ff90 	bl	b4748 <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 2) enableSlot(3, SLOT_GREEN_LED);
   b4828:	2e02      	cmp	r6, #2
   b482a:	d004      	beq.n	b4836 <_ZN8MAX301055setupEhhhiii+0xa6>
   b482c:	2203      	movs	r2, #3
   b482e:	4611      	mov	r1, r2
   b4830:	4620      	mov	r0, r4
   b4832:	f7ff ff89 	bl	b4748 <_ZN8MAX3010510enableSlotEhh>
  clearFIFO(); //Reset the FIFO before we begin checking the sensor
   b4836:	4620      	mov	r0, r4
}
   b4838:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  clearFIFO(); //Reset the FIFO before we begin checking the sensor
   b483c:	f7ff bf2c 	b.w	b4698 <_ZN8MAX301059clearFIFOEv>
  else if (sampleAverage == 2) setFIFOAverage(MAX30105_SAMPLEAVG_2);
   b4840:	2d02      	cmp	r5, #2
   b4842:	d101      	bne.n	b4848 <_ZN8MAX301055setupEhhhiii+0xb8>
   b4844:	2120      	movs	r1, #32
   b4846:	e7b2      	b.n	b47ae <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 4) setFIFOAverage(MAX30105_SAMPLEAVG_4);
   b4848:	2d04      	cmp	r5, #4
   b484a:	d101      	bne.n	b4850 <_ZN8MAX301055setupEhhhiii+0xc0>
   b484c:	2140      	movs	r1, #64	; 0x40
   b484e:	e7ae      	b.n	b47ae <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 8) setFIFOAverage(MAX30105_SAMPLEAVG_8);
   b4850:	2d08      	cmp	r5, #8
   b4852:	d101      	bne.n	b4858 <_ZN8MAX301055setupEhhhiii+0xc8>
   b4854:	2160      	movs	r1, #96	; 0x60
   b4856:	e7aa      	b.n	b47ae <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 16) setFIFOAverage(MAX30105_SAMPLEAVG_16);
   b4858:	2d10      	cmp	r5, #16
   b485a:	d101      	bne.n	b4860 <_ZN8MAX301055setupEhhhiii+0xd0>
   b485c:	2180      	movs	r1, #128	; 0x80
   b485e:	e7a6      	b.n	b47ae <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
   b4860:	2d20      	cmp	r5, #32
   b4862:	d1f3      	bne.n	b484c <_ZN8MAX301055setupEhhhiii+0xbc>
   b4864:	21a0      	movs	r1, #160	; 0xa0
   b4866:	e7a2      	b.n	b47ae <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
   b4868:	2e02      	cmp	r6, #2
   b486a:	bf0c      	ite	eq
   b486c:	2103      	moveq	r1, #3
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
   b486e:	2102      	movne	r1, #2
   b4870:	e7a6      	b.n	b47c0 <_ZN8MAX301055setupEhhhiii+0x30>
  else if(adcRange < 8192) setADCRange(MAX30105_ADCRANGE_4096); //15.63pA per LSB
   b4872:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
   b4876:	da01      	bge.n	b487c <_ZN8MAX301055setupEhhhiii+0xec>
   b4878:	2120      	movs	r1, #32
   b487a:	e7a9      	b.n	b47d0 <_ZN8MAX301055setupEhhhiii+0x40>
  else if(adcRange < 16384) setADCRange(MAX30105_ADCRANGE_8192); //31.25pA per LSB
   b487c:	f5ba 4f80 	cmp.w	sl, #16384	; 0x4000
   b4880:	da01      	bge.n	b4886 <_ZN8MAX301055setupEhhhiii+0xf6>
   b4882:	2140      	movs	r1, #64	; 0x40
   b4884:	e7a4      	b.n	b47d0 <_ZN8MAX301055setupEhhhiii+0x40>
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
   b4886:	d1a2      	bne.n	b47ce <_ZN8MAX301055setupEhhhiii+0x3e>
   b4888:	2160      	movs	r1, #96	; 0x60
   b488a:	e7a1      	b.n	b47d0 <_ZN8MAX301055setupEhhhiii+0x40>
  else if (sampleRate < 200) setSampleRate(MAX30105_SAMPLERATE_100);
   b488c:	2fc7      	cmp	r7, #199	; 0xc7
   b488e:	dc01      	bgt.n	b4894 <_ZN8MAX301055setupEhhhiii+0x104>
   b4890:	2104      	movs	r1, #4
   b4892:	e7a3      	b.n	b47dc <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 400) setSampleRate(MAX30105_SAMPLERATE_200);
   b4894:	f5b7 7fc8 	cmp.w	r7, #400	; 0x190
   b4898:	da01      	bge.n	b489e <_ZN8MAX301055setupEhhhiii+0x10e>
   b489a:	2108      	movs	r1, #8
   b489c:	e79e      	b.n	b47dc <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 800) setSampleRate(MAX30105_SAMPLERATE_400);
   b489e:	f5b7 7f48 	cmp.w	r7, #800	; 0x320
   b48a2:	da01      	bge.n	b48a8 <_ZN8MAX301055setupEhhhiii+0x118>
   b48a4:	210c      	movs	r1, #12
   b48a6:	e799      	b.n	b47dc <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 1000) setSampleRate(MAX30105_SAMPLERATE_800);
   b48a8:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
   b48ac:	da01      	bge.n	b48b2 <_ZN8MAX301055setupEhhhiii+0x122>
   b48ae:	2110      	movs	r1, #16
   b48b0:	e794      	b.n	b47dc <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 1600) setSampleRate(MAX30105_SAMPLERATE_1000);
   b48b2:	f5b7 6fc8 	cmp.w	r7, #1600	; 0x640
   b48b6:	da01      	bge.n	b48bc <_ZN8MAX301055setupEhhhiii+0x12c>
   b48b8:	2114      	movs	r1, #20
   b48ba:	e78f      	b.n	b47dc <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 3200) setSampleRate(MAX30105_SAMPLERATE_1600);
   b48bc:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
   b48c0:	da01      	bge.n	b48c6 <_ZN8MAX301055setupEhhhiii+0x136>
   b48c2:	2118      	movs	r1, #24
   b48c4:	e78a      	b.n	b47dc <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
   b48c6:	d188      	bne.n	b47da <_ZN8MAX301055setupEhhhiii+0x4a>
   b48c8:	211c      	movs	r1, #28
   b48ca:	e787      	b.n	b47dc <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (pulseWidth < 215) setPulseWidth(MAX30105_PULSEWIDTH_118); //16 bit resolution
   b48cc:	f1b9 0fd6 	cmp.w	r9, #214	; 0xd6
   b48d0:	dc01      	bgt.n	b48d6 <_ZN8MAX301055setupEhhhiii+0x146>
   b48d2:	2101      	movs	r1, #1
   b48d4:	e789      	b.n	b47ea <_ZN8MAX301055setupEhhhiii+0x5a>
  else if (pulseWidth < 411) setPulseWidth(MAX30105_PULSEWIDTH_215); //17 bit resolution
   b48d6:	f5b9 7fcd 	cmp.w	r9, #410	; 0x19a
   b48da:	dc01      	bgt.n	b48e0 <_ZN8MAX301055setupEhhhiii+0x150>
   b48dc:	2102      	movs	r1, #2
   b48de:	e784      	b.n	b47ea <_ZN8MAX301055setupEhhhiii+0x5a>
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
   b48e0:	f240 139b 	movw	r3, #411	; 0x19b
   b48e4:	4599      	cmp	r9, r3
   b48e6:	f47f af7f 	bne.w	b47e8 <_ZN8MAX301055setupEhhhiii+0x58>
   b48ea:	2103      	movs	r1, #3
   b48ec:	e77d      	b.n	b47ea <_ZN8MAX301055setupEhhhiii+0x5a>

000b48ee <_Z28maxim_peaks_above_min_heightPlS_S_ll>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
   b48ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int32_t i = 1, n_width;
  *n_npks = 0;
   b48f2:	2400      	movs	r4, #0
   b48f4:	600c      	str	r4, [r1, #0]
  
  while (i < n_size-1){
   b48f6:	f103 38ff 	add.w	r8, r3, #4294967295
  int32_t i = 1, n_width;
   b48fa:	2401      	movs	r4, #1
  while (i < n_size-1){
   b48fc:	45a0      	cmp	r8, r4
   b48fe:	dd27      	ble.n	b4950 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x62>
    if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){      // find left edge of potential peaks
   b4900:	9d06      	ldr	r5, [sp, #24]
   b4902:	f852 c024 	ldr.w	ip, [r2, r4, lsl #2]
   b4906:	45ac      	cmp	ip, r5
   b4908:	ea4f 0684 	mov.w	r6, r4, lsl #2
   b490c:	f104 0501 	add.w	r5, r4, #1
   b4910:	dd1c      	ble.n	b494c <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
   b4912:	4416      	add	r6, r2
   b4914:	f856 6c04 	ldr.w	r6, [r6, #-4]
   b4918:	45b4      	cmp	ip, r6
   b491a:	dd17      	ble.n	b494c <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
   b491c:	462e      	mov	r6, r5
      n_width = 1;
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
   b491e:	429e      	cmp	r6, r3
   b4920:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
   b4924:	eba6 0e04 	sub.w	lr, r6, r4
   b4928:	4635      	mov	r5, r6
   b492a:	d003      	beq.n	b4934 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x46>
   b492c:	45bc      	cmp	ip, r7
   b492e:	f106 0601 	add.w	r6, r6, #1
   b4932:	d0f4      	beq.n	b491e <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x30>
        n_width++;
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
   b4934:	45bc      	cmp	ip, r7
   b4936:	dd09      	ble.n	b494c <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
   b4938:	680e      	ldr	r6, [r1, #0]
   b493a:	2e0e      	cmp	r6, #14
   b493c:	dc06      	bgt.n	b494c <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
        pn_locs[(*n_npks)++] = i;    
   b493e:	1c75      	adds	r5, r6, #1
   b4940:	600d      	str	r5, [r1, #0]
        // for flat peaks, peak location is left edge
        i += n_width+1;
   b4942:	f10e 0501 	add.w	r5, lr, #1
        pn_locs[(*n_npks)++] = i;    
   b4946:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
        i += n_width+1;
   b494a:	4425      	add	r5, r4
{
   b494c:	462c      	mov	r4, r5
   b494e:	e7d5      	b.n	b48fc <_Z28maxim_peaks_above_min_heightPlS_S_ll+0xe>
        i += n_width;
    }
    else
      i++;
  }
}
   b4950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4954 <_Z17maxim_sort_ascendPll>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
   b4954:	b5f0      	push	{r4, r5, r6, r7, lr}
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
   b4956:	2301      	movs	r3, #1
   b4958:	4604      	mov	r4, r0
   b495a:	428b      	cmp	r3, r1
   b495c:	da0f      	bge.n	b497e <_Z17maxim_sort_ascendPll+0x2a>
    n_temp = pn_x[i];
   b495e:	f854 6f04 	ldr.w	r6, [r4, #4]!
   b4962:	461a      	mov	r2, r3
   b4964:	4625      	mov	r5, r4
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
   b4966:	f855 7c04 	ldr.w	r7, [r5, #-4]
   b496a:	42b7      	cmp	r7, r6
   b496c:	dd03      	ble.n	b4976 <_Z17maxim_sort_ascendPll+0x22>
   b496e:	3a01      	subs	r2, #1
        pn_x[j] = pn_x[j-1];
   b4970:	f845 7904 	str.w	r7, [r5], #-4
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
   b4974:	d1f7      	bne.n	b4966 <_Z17maxim_sort_ascendPll+0x12>
    pn_x[j] = n_temp;
   b4976:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
  for (i = 1; i < n_size; i++) {
   b497a:	3301      	adds	r3, #1
   b497c:	e7ed      	b.n	b495a <_Z17maxim_sort_ascendPll+0x6>
  }
}
   b497e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4980 <_Z26maxim_sort_indices_descendPlS_l>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/ 
{
   b4980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
   b4984:	2301      	movs	r3, #1
{
   b4986:	4690      	mov	r8, r2
   b4988:	460d      	mov	r5, r1
  for (i = 1; i < n_size; i++) {
   b498a:	4543      	cmp	r3, r8
   b498c:	da16      	bge.n	b49bc <_Z26maxim_sort_indices_descendPlS_l+0x3c>
    n_temp = pn_indx[i];
   b498e:	f855 6f04 	ldr.w	r6, [r5, #4]!
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
   b4992:	461c      	mov	r4, r3
   b4994:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   b4998:	46ac      	mov	ip, r5
   b499a:	f8d9 2000 	ldr.w	r2, [r9]
   b499e:	f85c 7c04 	ldr.w	r7, [ip, #-4]
   b49a2:	4696      	mov	lr, r2
   b49a4:	f850 2027 	ldr.w	r2, [r0, r7, lsl #2]
   b49a8:	4596      	cmp	lr, r2
   b49aa:	dd03      	ble.n	b49b4 <_Z26maxim_sort_indices_descendPlS_l+0x34>
   b49ac:	3c01      	subs	r4, #1
      pn_indx[j] = pn_indx[j-1];
   b49ae:	f84c 7904 	str.w	r7, [ip], #-4
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
   b49b2:	d1f2      	bne.n	b499a <_Z26maxim_sort_indices_descendPlS_l+0x1a>
    pn_indx[j] = n_temp;
   b49b4:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
  for (i = 1; i < n_size; i++) {
   b49b8:	3301      	adds	r3, #1
   b49ba:	e7e6      	b.n	b498a <_Z26maxim_sort_indices_descendPlS_l+0xa>
  }
}
   b49bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b49c0 <_Z24maxim_remove_close_peaksPlS_S_l>:
{
   b49c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b49c4:	4604      	mov	r4, r0
   b49c6:	461f      	mov	r7, r3
   b49c8:	4610      	mov	r0, r2
   b49ca:	460d      	mov	r5, r1
  maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
   b49cc:	680a      	ldr	r2, [r1, #0]
   b49ce:	4621      	mov	r1, r4
   b49d0:	f7ff ffd6 	bl	b4980 <_Z26maxim_sort_indices_descendPlS_l>
   b49d4:	f04f 32ff 	mov.w	r2, #4294967295
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
   b49d8:	f1c7 0e00 	rsb	lr, r7, #0
  for ( i = -1; i < *pn_npks; i++ ){
   b49dc:	6829      	ldr	r1, [r5, #0]
   b49de:	4291      	cmp	r1, r2
   b49e0:	dd1d      	ble.n	b4a1e <_Z24maxim_remove_close_peaksPlS_S_l+0x5e>
    *pn_npks = i+1;
   b49e2:	1c53      	adds	r3, r2, #1
   b49e4:	461e      	mov	r6, r3
   b49e6:	602b      	str	r3, [r5, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
   b49e8:	42b1      	cmp	r1, r6
   b49ea:	d016      	beq.n	b4a1a <_Z24maxim_remove_close_peaksPlS_S_l+0x5a>
      n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
   b49ec:	1c50      	adds	r0, r2, #1
   b49ee:	bf18      	it	ne
   b49f0:	f854 0022 	ldrne.w	r0, [r4, r2, lsl #2]
   b49f4:	f854 c026 	ldr.w	ip, [r4, r6, lsl #2]
   b49f8:	bf08      	it	eq
   b49fa:	4610      	moveq	r0, r2
   b49fc:	ebac 0000 	sub.w	r0, ip, r0
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
   b4a00:	42b8      	cmp	r0, r7
   b4a02:	dc01      	bgt.n	b4a08 <_Z24maxim_remove_close_peaksPlS_S_l+0x48>
   b4a04:	4586      	cmp	lr, r0
   b4a06:	dd06      	ble.n	b4a16 <_Z24maxim_remove_close_peaksPlS_S_l+0x56>
        pn_locs[(*pn_npks)++] = pn_locs[j];
   b4a08:	6828      	ldr	r0, [r5, #0]
   b4a0a:	f100 0801 	add.w	r8, r0, #1
   b4a0e:	f8c5 8000 	str.w	r8, [r5]
   b4a12:	f844 c020 	str.w	ip, [r4, r0, lsl #2]
    for ( j = i+1; j < n_old_npks; j++ ){
   b4a16:	3601      	adds	r6, #1
   b4a18:	e7e6      	b.n	b49e8 <_Z24maxim_remove_close_peaksPlS_S_l+0x28>
   b4a1a:	461a      	mov	r2, r3
   b4a1c:	e7de      	b.n	b49dc <_Z24maxim_remove_close_peaksPlS_S_l+0x1c>
  maxim_sort_ascend( pn_locs, *pn_npks );
   b4a1e:	4620      	mov	r0, r4
}
   b4a20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  maxim_sort_ascend( pn_locs, *pn_npks );
   b4a24:	f7ff bf96 	b.w	b4954 <_Z17maxim_sort_ascendPll>

000b4a28 <_Z16maxim_find_peaksPlS_S_llll>:
{
   b4a28:	b537      	push	{r0, r1, r2, r4, r5, lr}
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
   b4a2a:	9d06      	ldr	r5, [sp, #24]
   b4a2c:	9500      	str	r5, [sp, #0]
   b4a2e:	f7ff ff5e 	bl	b48ee <_Z28maxim_peaks_above_min_heightPlS_S_ll>
{
   b4a32:	460c      	mov	r4, r1
  maxim_remove_close_peaks( pn_locs, n_npks, pn_x, n_min_distance );
   b4a34:	9b07      	ldr	r3, [sp, #28]
   b4a36:	f7ff ffc3 	bl	b49c0 <_Z24maxim_remove_close_peaksPlS_S_l>
  *n_npks = min( *n_npks, n_max_num );
   b4a3a:	6822      	ldr	r2, [r4, #0]
   b4a3c:	9b08      	ldr	r3, [sp, #32]
   b4a3e:	429a      	cmp	r2, r3
   b4a40:	bfd4      	ite	le
   b4a42:	6022      	strle	r2, [r4, #0]
   b4a44:	6023      	strgt	r3, [r4, #0]
}
   b4a46:	b003      	add	sp, #12
   b4a48:	bd30      	pop	{r4, r5, pc}
	...

000b4a4c <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_>:
{
   b4a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4a50:	b09d      	sub	sp, #116	; 0x74
   b4a52:	e9dd 9827 	ldrd	r9, r8, [sp, #156]	; 0x9c
   b4a56:	4616      	mov	r6, r2
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
   b4a58:	2200      	movs	r2, #0
{
   b4a5a:	469b      	mov	fp, r3
   b4a5c:	4605      	mov	r5, r0
   b4a5e:	460c      	mov	r4, r1
  un_ir_mean =0; 
   b4a60:	4613      	mov	r3, r2
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
   b4a62:	42a2      	cmp	r2, r4
   b4a64:	da04      	bge.n	b4a70 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x24>
   b4a66:	f835 1012 	ldrh.w	r1, [r5, r2, lsl #1]
   b4a6a:	3201      	adds	r2, #1
   b4a6c:	440b      	add	r3, r1
   b4a6e:	e7f8      	b.n	b4a62 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x16>
  un_ir_mean =un_ir_mean/n_ir_buffer_length ;
   b4a70:	4f8d      	ldr	r7, [pc, #564]	; (b4ca8 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x25c>)
   b4a72:	fbb3 f3f4 	udiv	r3, r3, r4
   b4a76:	4638      	mov	r0, r7
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
   b4a78:	2200      	movs	r2, #0
   b4a7a:	42a2      	cmp	r2, r4
   b4a7c:	da06      	bge.n	b4a8c <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x40>
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ; 
   b4a7e:	f835 1012 	ldrh.w	r1, [r5, r2, lsl #1]
   b4a82:	1a59      	subs	r1, r3, r1
   b4a84:	f840 1b04 	str.w	r1, [r0], #4
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
   b4a88:	3201      	adds	r2, #1
   b4a8a:	e7f6      	b.n	b4a7a <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x2e>
   b4a8c:	4a86      	ldr	r2, [pc, #536]	; (b4ca8 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x25c>)
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
   b4a8e:	2100      	movs	r1, #0
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
   b4a90:	6813      	ldr	r3, [r2, #0]
   b4a92:	f852 0f04 	ldr.w	r0, [r2, #4]!
   b4a96:	4403      	add	r3, r0
   b4a98:	6850      	ldr	r0, [r2, #4]
   b4a9a:	4403      	add	r3, r0
   b4a9c:	6890      	ldr	r0, [r2, #8]
   b4a9e:	181b      	adds	r3, r3, r0
   b4aa0:	bf48      	it	mi
   b4aa2:	3303      	addmi	r3, #3
   b4aa4:	3101      	adds	r1, #1
   b4aa6:	109b      	asrs	r3, r3, #2
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
   b4aa8:	2960      	cmp	r1, #96	; 0x60
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
   b4aaa:	f842 3c04 	str.w	r3, [r2, #-4]
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
   b4aae:	d1ef      	bne.n	b4a90 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x44>
  n_th1=0; 
   b4ab0:	2300      	movs	r3, #0
   b4ab2:	4a7d      	ldr	r2, [pc, #500]	; (b4ca8 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x25c>)
  for ( k=0 ; k<BUFFER_SIZE ;k++){
   b4ab4:	469a      	mov	sl, r3
    n_th1 +=  an_x[k];
   b4ab6:	f852 1b04 	ldr.w	r1, [r2], #4
  for ( k=0 ; k<BUFFER_SIZE ;k++){
   b4aba:	f10a 0a01 	add.w	sl, sl, #1
   b4abe:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
    n_th1 +=  an_x[k];
   b4ac2:	440b      	add	r3, r1
  for ( k=0 ; k<BUFFER_SIZE ;k++){
   b4ac4:	d1f7      	bne.n	b4ab6 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x6a>
  if( n_th1<30) n_th1=30; // min allowed
   b4ac6:	f640 32b7 	movw	r2, #2999	; 0xbb7
   b4aca:	4293      	cmp	r3, r2
   b4acc:	dd4f      	ble.n	b4b6e <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x122>
  n_th1=  n_th1/ ( BUFFER_SIZE);
   b4ace:	fb93 fafa 	sdiv	sl, r3, sl
   b4ad2:	f1ba 0f3c 	cmp.w	sl, #60	; 0x3c
   b4ad6:	bfa8      	it	ge
   b4ad8:	f04f 0a3c 	movge.w	sl, #60	; 0x3c
  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
   b4adc:	223c      	movs	r2, #60	; 0x3c
   b4ade:	2100      	movs	r1, #0
   b4ae0:	a80d      	add	r0, sp, #52	; 0x34
   b4ae2:	f001 fc36 	bl	b6352 <memset>
  maxim_find_peaks( an_ir_valley_locs, &n_npks, an_x, BUFFER_SIZE, n_th1, 4, 15 );//peak_height, peak_distance, max_num_peaks 
   b4ae6:	2304      	movs	r3, #4
   b4ae8:	220f      	movs	r2, #15
   b4aea:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b4aee:	f8cd a000 	str.w	sl, [sp]
   b4af2:	4a6d      	ldr	r2, [pc, #436]	; (b4ca8 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x25c>)
   b4af4:	2364      	movs	r3, #100	; 0x64
   b4af6:	a907      	add	r1, sp, #28
   b4af8:	a80d      	add	r0, sp, #52	; 0x34
   b4afa:	f7ff ff95 	bl	b4a28 <_Z16maxim_find_peaksPlS_S_llll>
  if (n_npks>=2){
   b4afe:	9b07      	ldr	r3, [sp, #28]
   b4b00:	2b01      	cmp	r3, #1
   b4b02:	f04f 0200 	mov.w	r2, #0
   b4b06:	dd35      	ble.n	b4b74 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x128>
   b4b08:	a90d      	add	r1, sp, #52	; 0x34
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
   b4b0a:	f04f 0c01 	mov.w	ip, #1
   b4b0e:	4608      	mov	r0, r1
   b4b10:	f8d1 e004 	ldr.w	lr, [r1, #4]
   b4b14:	6800      	ldr	r0, [r0, #0]
   b4b16:	f10c 0c01 	add.w	ip, ip, #1
   b4b1a:	ebae 0000 	sub.w	r0, lr, r0
   b4b1e:	4563      	cmp	r3, ip
   b4b20:	f101 0104 	add.w	r1, r1, #4
   b4b24:	4402      	add	r2, r0
   b4b26:	d1f2      	bne.n	b4b0e <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0xc2>
    n_peak_interval_sum =n_peak_interval_sum/(n_npks-1);
   b4b28:	1e59      	subs	r1, r3, #1
   b4b2a:	fb92 f2f1 	sdiv	r2, r2, r1
    *pn_heart_rate =(int32_t)( (FreqS*60)/ n_peak_interval_sum );
   b4b2e:	f240 51dc 	movw	r1, #1500	; 0x5dc
   b4b32:	fb91 f2f2 	sdiv	r2, r1, r2
   b4b36:	f8c9 2000 	str.w	r2, [r9]
    *pch_hr_valid  = 1;
   b4b3a:	2201      	movs	r2, #1
   b4b3c:	495b      	ldr	r1, [pc, #364]	; (b4cac <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x260>)
   b4b3e:	f888 2000 	strb.w	r2, [r8]
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
   b4b42:	2200      	movs	r2, #0
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
   b4b44:	42a2      	cmp	r2, r4
   b4b46:	db19      	blt.n	b4b7c <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x130>
  for(k=0; k< 5; k++) an_ratio[k]=0;
   b4b48:	2200      	movs	r2, #0
   b4b4a:	e9cd 2208 	strd	r2, r2, [sp, #32]
   b4b4e:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
   b4b52:	ae0d      	add	r6, sp, #52	; 0x34
   b4b54:	920c      	str	r2, [sp, #48]	; 0x30
   b4b56:	4631      	mov	r1, r6
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
   b4b58:	4293      	cmp	r3, r2
   b4b5a:	dd1b      	ble.n	b4b94 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x148>
    if (an_ir_valley_locs[k] > BUFFER_SIZE ){
   b4b5c:	f851 0b04 	ldr.w	r0, [r1], #4
   b4b60:	2864      	cmp	r0, #100	; 0x64
   b4b62:	dd15      	ble.n	b4b90 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x144>
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
   b4b64:	4b52      	ldr	r3, [pc, #328]	; (b4cb0 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x264>)
   b4b66:	f8cb 3000 	str.w	r3, [fp]
    *pch_spo2_valid  = 0; 
   b4b6a:	2300      	movs	r3, #0
   b4b6c:	e092      	b.n	b4c94 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x248>
  if( n_th1<30) n_th1=30; // min allowed
   b4b6e:	f04f 0a1e 	mov.w	sl, #30
   b4b72:	e7b3      	b.n	b4adc <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x90>
    *pn_heart_rate = -999; // unable to calculate because # of peaks are too small
   b4b74:	494e      	ldr	r1, [pc, #312]	; (b4cb0 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x264>)
   b4b76:	f8c9 1000 	str.w	r1, [r9]
    *pch_hr_valid  = 0;
   b4b7a:	e7df      	b.n	b4b3c <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0xf0>
      an_x[k] =  pun_ir_buffer[k] ; 
   b4b7c:	f835 0012 	ldrh.w	r0, [r5, r2, lsl #1]
   b4b80:	f847 0b04 	str.w	r0, [r7], #4
      an_y[k] =  pun_red_buffer[k] ; 
   b4b84:	f836 0012 	ldrh.w	r0, [r6, r2, lsl #1]
   b4b88:	f841 0b04 	str.w	r0, [r1], #4
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
   b4b8c:	3201      	adds	r2, #1
   b4b8e:	e7d9      	b.n	b4b44 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0xf8>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
   b4b90:	3201      	adds	r2, #1
   b4b92:	e7e1      	b.n	b4b58 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x10c>
  int32_t n_x_dc_max_idx = 0; 
   b4b94:	2400      	movs	r4, #0
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
   b4b96:	3b01      	subs	r3, #1
   b4b98:	4f43      	ldr	r7, [pc, #268]	; (b4ca8 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x25c>)
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   b4b9a:	f8df c110 	ldr.w	ip, [pc, #272]	; b4cac <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x260>
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
   b4b9e:	9404      	str	r4, [sp, #16]
  int32_t n_y_dc_max_idx = 0;
   b4ba0:	4625      	mov	r5, r4
  n_i_ratio_count = 0; 
   b4ba2:	4621      	mov	r1, r4
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
   b4ba4:	9305      	str	r3, [sp, #20]
   b4ba6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b4baa:	4293      	cmp	r3, r2
   b4bac:	dd56      	ble.n	b4c5c <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x210>
    if (an_ir_valley_locs[k+1]-an_ir_valley_locs[k] >3){
   b4bae:	f8d6 8004 	ldr.w	r8, [r6, #4]
   b4bb2:	f856 0b04 	ldr.w	r0, [r6], #4
   b4bb6:	4613      	mov	r3, r2
   b4bb8:	eba8 0900 	sub.w	r9, r8, r0
   b4bbc:	3301      	adds	r3, #1
   b4bbe:	f1b9 0f03 	cmp.w	r9, #3
   b4bc2:	9304      	str	r3, [sp, #16]
   b4bc4:	ddef      	ble.n	b4ba6 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x15a>
    n_x_dc_max= -16777216; 
   b4bc6:	f04f 4e7f 	mov.w	lr, #4278190080	; 0xff000000
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
   b4bca:	4603      	mov	r3, r0
    n_y_dc_max= -16777216 ; 
   b4bcc:	46f2      	mov	sl, lr
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
   b4bce:	4598      	cmp	r8, r3
   b4bd0:	dd0e      	ble.n	b4bf0 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x1a4>
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
   b4bd2:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
   b4bd6:	4572      	cmp	r2, lr
   b4bd8:	bfc8      	it	gt
   b4bda:	4696      	movgt	lr, r2
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   b4bdc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
   b4be0:	bfc8      	it	gt
   b4be2:	461c      	movgt	r4, r3
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   b4be4:	4552      	cmp	r2, sl
   b4be6:	bfc4      	itt	gt
   b4be8:	461d      	movgt	r5, r3
   b4bea:	4692      	movgt	sl, r2
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
   b4bec:	3301      	adds	r3, #1
   b4bee:	e7ee      	b.n	b4bce <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x182>
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
   b4bf0:	f857 2020 	ldr.w	r2, [r7, r0, lsl #2]
   b4bf4:	f857 3028 	ldr.w	r3, [r7, r8, lsl #2]
   b4bf8:	1a9b      	subs	r3, r3, r2
   b4bfa:	1a22      	subs	r2, r4, r0
   b4bfc:	4353      	muls	r3, r2
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]); 
   b4bfe:	f857 2020 	ldr.w	r2, [r7, r0, lsl #2]
   b4c02:	fb93 f3f9 	sdiv	r3, r3, r9
   b4c06:	4413      	add	r3, r2
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
   b4c08:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
   b4c0c:	1ad2      	subs	r2, r2, r3
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
   b4c0e:	fb0a f202 	mul.w	r2, sl, r2
   b4c12:	ea4f 1ae2 	mov.w	sl, r2, asr #7
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
   b4c16:	f1ba 0f00 	cmp.w	sl, #0
   b4c1a:	ddc4      	ble.n	b4ba6 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x15a>
   b4c1c:	2904      	cmp	r1, #4
   b4c1e:	dcc2      	bgt.n	b4ba6 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x15a>
      n_y_ac= (an_y[an_ir_valley_locs[k+1]] - an_y[an_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_ir_valley_locs[k]); //red
   b4c20:	f85c 3020 	ldr.w	r3, [ip, r0, lsl #2]
   b4c24:	f85c 2028 	ldr.w	r2, [ip, r8, lsl #2]
   b4c28:	1a28      	subs	r0, r5, r0
   b4c2a:	1ad2      	subs	r2, r2, r3
   b4c2c:	4350      	muls	r0, r2
      n_y_ac=  an_y[an_ir_valley_locs[k]] + n_y_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k])  ; 
   b4c2e:	fb90 f0f9 	sdiv	r0, r0, r9
   b4c32:	4418      	add	r0, r3
      n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw 
   b4c34:	f85c 3025 	ldr.w	r3, [ip, r5, lsl #2]
   b4c38:	1a1b      	subs	r3, r3, r0
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
   b4c3a:	fb0e fe03 	mul.w	lr, lr, r3
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
   b4c3e:	ea5f 1eee 	movs.w	lr, lr, asr #7
   b4c42:	d0b0      	beq.n	b4ba6 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x15a>
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
   b4c44:	ab1c      	add	r3, sp, #112	; 0x70
   b4c46:	eb03 0881 	add.w	r8, r3, r1, lsl #2
   b4c4a:	2364      	movs	r3, #100	; 0x64
   b4c4c:	fb03 f20e 	mul.w	r2, r3, lr
        n_i_ratio_count++;
   b4c50:	3101      	adds	r1, #1
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
   b4c52:	fb92 f2fa 	sdiv	r2, r2, sl
   b4c56:	f848 2c50 	str.w	r2, [r8, #-80]
        n_i_ratio_count++;
   b4c5a:	e7a4      	b.n	b4ba6 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x15a>
  maxim_sort_ascend(an_ratio, n_i_ratio_count);
   b4c5c:	a808      	add	r0, sp, #32
   b4c5e:	f7ff fe79 	bl	b4954 <_Z17maxim_sort_ascendPll>
  n_middle_idx= n_i_ratio_count/2;
   b4c62:	104a      	asrs	r2, r1, #1
  if (n_middle_idx >1)
   b4c64:	2903      	cmp	r1, #3
   b4c66:	ea4f 0382 	mov.w	r3, r2, lsl #2
   b4c6a:	dd18      	ble.n	b4c9e <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x252>
    n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
   b4c6c:	a91c      	add	r1, sp, #112	; 0x70
   b4c6e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   b4c72:	f851 3c54 	ldr.w	r3, [r1, #-84]
   b4c76:	f851 2c50 	ldr.w	r2, [r1, #-80]
   b4c7a:	4413      	add	r3, r2
   b4c7c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   b4c80:	105b      	asrs	r3, r3, #1
  if( n_ratio_average>2 && n_ratio_average <184){
   b4c82:	1eda      	subs	r2, r3, #3
   b4c84:	2ab4      	cmp	r2, #180	; 0xb4
   b4c86:	f63f af6d 	bhi.w	b4b64 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x118>
    n_spo2_calc= uch_spo2_table[n_ratio_average] ;
   b4c8a:	4a0a      	ldr	r2, [pc, #40]	; (b4cb4 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x268>)
   b4c8c:	5cd3      	ldrb	r3, [r2, r3]
   b4c8e:	f8cb 3000 	str.w	r3, [fp]
    *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
   b4c92:	2301      	movs	r3, #1
    *pch_spo2_valid  = 0; 
   b4c94:	9a26      	ldr	r2, [sp, #152]	; 0x98
   b4c96:	7013      	strb	r3, [r2, #0]
}
   b4c98:	b01d      	add	sp, #116	; 0x74
   b4c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    n_ratio_average = an_ratio[n_middle_idx ];
   b4c9e:	aa1c      	add	r2, sp, #112	; 0x70
   b4ca0:	4413      	add	r3, r2
   b4ca2:	f853 3c50 	ldr.w	r3, [r3, #-80]
   b4ca6:	e7ec      	b.n	b4c82 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x236>
   b4ca8:	2003e3a4 	.word	0x2003e3a4
   b4cac:	2003e534 	.word	0x2003e534
   b4cb0:	fffffc19 	.word	0xfffffc19
   b4cb4:	000b6531 	.word	0x000b6531

000b4cb8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4cb8:	b508      	push	{r3, lr}
   b4cba:	4b02      	ldr	r3, [pc, #8]	; (b4cc4 <netdb_freeaddrinfo+0xc>)
   b4cbc:	681b      	ldr	r3, [r3, #0]
   b4cbe:	689b      	ldr	r3, [r3, #8]
   b4cc0:	9301      	str	r3, [sp, #4]
   b4cc2:	bd08      	pop	{r3, pc}
   b4cc4:	00030268 	.word	0x00030268

000b4cc8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4cc8:	b508      	push	{r3, lr}
   b4cca:	4b02      	ldr	r3, [pc, #8]	; (b4cd4 <netdb_getaddrinfo+0xc>)
   b4ccc:	681b      	ldr	r3, [r3, #0]
   b4cce:	68db      	ldr	r3, [r3, #12]
   b4cd0:	9301      	str	r3, [sp, #4]
   b4cd2:	bd08      	pop	{r3, pc}
   b4cd4:	00030268 	.word	0x00030268

000b4cd8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4cd8:	b508      	push	{r3, lr}
   b4cda:	4b02      	ldr	r3, [pc, #8]	; (b4ce4 <HAL_RNG_GetRandomNumber+0xc>)
   b4cdc:	681b      	ldr	r3, [r3, #0]
   b4cde:	685b      	ldr	r3, [r3, #4]
   b4ce0:	9301      	str	r3, [sp, #4]
   b4ce2:	bd08      	pop	{r3, pc}
   b4ce4:	00030218 	.word	0x00030218

000b4ce8 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4ce8:	b508      	push	{r3, lr}
   b4cea:	4b02      	ldr	r3, [pc, #8]	; (b4cf4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4cec:	681b      	ldr	r3, [r3, #0]
   b4cee:	695b      	ldr	r3, [r3, #20]
   b4cf0:	9301      	str	r3, [sp, #4]
   b4cf2:	bd08      	pop	{r3, pc}
   b4cf4:	00030218 	.word	0x00030218

000b4cf8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4cf8:	b508      	push	{r3, lr}
   b4cfa:	4b02      	ldr	r3, [pc, #8]	; (b4d04 <os_mutex_recursive_create+0xc>)
   b4cfc:	681b      	ldr	r3, [r3, #0]
   b4cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4d00:	9301      	str	r3, [sp, #4]
   b4d02:	bd08      	pop	{r3, pc}
   b4d04:	00030248 	.word	0x00030248

000b4d08 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4d08:	b508      	push	{r3, lr}
   b4d0a:	4b02      	ldr	r3, [pc, #8]	; (b4d14 <inet_inet_ntop+0xc>)
   b4d0c:	681b      	ldr	r3, [r3, #0]
   b4d0e:	695b      	ldr	r3, [r3, #20]
   b4d10:	9301      	str	r3, [sp, #4]
   b4d12:	bd08      	pop	{r3, pc}
   b4d14:	00030264 	.word	0x00030264

000b4d18 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4d18:	b508      	push	{r3, lr}
   b4d1a:	4b02      	ldr	r3, [pc, #8]	; (b4d24 <hal_usart_write+0xc>)
   b4d1c:	681b      	ldr	r3, [r3, #0]
   b4d1e:	68db      	ldr	r3, [r3, #12]
   b4d20:	9301      	str	r3, [sp, #4]
   b4d22:	bd08      	pop	{r3, pc}
   b4d24:	0003023c 	.word	0x0003023c

000b4d28 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4d28:	b508      	push	{r3, lr}
   b4d2a:	4b02      	ldr	r3, [pc, #8]	; (b4d34 <hal_usart_available+0xc>)
   b4d2c:	681b      	ldr	r3, [r3, #0]
   b4d2e:	691b      	ldr	r3, [r3, #16]
   b4d30:	9301      	str	r3, [sp, #4]
   b4d32:	bd08      	pop	{r3, pc}
   b4d34:	0003023c 	.word	0x0003023c

000b4d38 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4d38:	b508      	push	{r3, lr}
   b4d3a:	4b02      	ldr	r3, [pc, #8]	; (b4d44 <hal_usart_read+0xc>)
   b4d3c:	681b      	ldr	r3, [r3, #0]
   b4d3e:	695b      	ldr	r3, [r3, #20]
   b4d40:	9301      	str	r3, [sp, #4]
   b4d42:	bd08      	pop	{r3, pc}
   b4d44:	0003023c 	.word	0x0003023c

000b4d48 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4d48:	b508      	push	{r3, lr}
   b4d4a:	4b02      	ldr	r3, [pc, #8]	; (b4d54 <hal_usart_peek+0xc>)
   b4d4c:	681b      	ldr	r3, [r3, #0]
   b4d4e:	699b      	ldr	r3, [r3, #24]
   b4d50:	9301      	str	r3, [sp, #4]
   b4d52:	bd08      	pop	{r3, pc}
   b4d54:	0003023c 	.word	0x0003023c

000b4d58 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4d58:	b508      	push	{r3, lr}
   b4d5a:	4b02      	ldr	r3, [pc, #8]	; (b4d64 <hal_usart_flush+0xc>)
   b4d5c:	681b      	ldr	r3, [r3, #0]
   b4d5e:	69db      	ldr	r3, [r3, #28]
   b4d60:	9301      	str	r3, [sp, #4]
   b4d62:	bd08      	pop	{r3, pc}
   b4d64:	0003023c 	.word	0x0003023c

000b4d68 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4d68:	b508      	push	{r3, lr}
   b4d6a:	4b02      	ldr	r3, [pc, #8]	; (b4d74 <hal_usart_available_data_for_write+0xc>)
   b4d6c:	681b      	ldr	r3, [r3, #0]
   b4d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4d70:	9301      	str	r3, [sp, #4]
   b4d72:	bd08      	pop	{r3, pc}
   b4d74:	0003023c 	.word	0x0003023c

000b4d78 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4d78:	b508      	push	{r3, lr}
   b4d7a:	4b02      	ldr	r3, [pc, #8]	; (b4d84 <hal_usart_init_ex+0xc>)
   b4d7c:	681b      	ldr	r3, [r3, #0]
   b4d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d80:	9301      	str	r3, [sp, #4]
   b4d82:	bd08      	pop	{r3, pc}
   b4d84:	0003023c 	.word	0x0003023c

000b4d88 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4d88:	b508      	push	{r3, lr}
   b4d8a:	4b02      	ldr	r3, [pc, #8]	; (b4d94 <hal_i2c_begin+0xc>)
   b4d8c:	681b      	ldr	r3, [r3, #0]
   b4d8e:	68db      	ldr	r3, [r3, #12]
   b4d90:	9301      	str	r3, [sp, #4]
   b4d92:	bd08      	pop	{r3, pc}
   b4d94:	00030228 	.word	0x00030228

000b4d98 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4d98:	b508      	push	{r3, lr}
   b4d9a:	4b02      	ldr	r3, [pc, #8]	; (b4da4 <hal_i2c_begin_transmission+0xc>)
   b4d9c:	681b      	ldr	r3, [r3, #0]
   b4d9e:	699b      	ldr	r3, [r3, #24]
   b4da0:	9301      	str	r3, [sp, #4]
   b4da2:	bd08      	pop	{r3, pc}
   b4da4:	00030228 	.word	0x00030228

000b4da8 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4da8:	b508      	push	{r3, lr}
   b4daa:	4b02      	ldr	r3, [pc, #8]	; (b4db4 <hal_i2c_end_transmission+0xc>)
   b4dac:	681b      	ldr	r3, [r3, #0]
   b4dae:	69db      	ldr	r3, [r3, #28]
   b4db0:	9301      	str	r3, [sp, #4]
   b4db2:	bd08      	pop	{r3, pc}
   b4db4:	00030228 	.word	0x00030228

000b4db8 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4db8:	b508      	push	{r3, lr}
   b4dba:	4b02      	ldr	r3, [pc, #8]	; (b4dc4 <hal_i2c_write+0xc>)
   b4dbc:	681b      	ldr	r3, [r3, #0]
   b4dbe:	6a1b      	ldr	r3, [r3, #32]
   b4dc0:	9301      	str	r3, [sp, #4]
   b4dc2:	bd08      	pop	{r3, pc}
   b4dc4:	00030228 	.word	0x00030228

000b4dc8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4dc8:	b508      	push	{r3, lr}
   b4dca:	4b02      	ldr	r3, [pc, #8]	; (b4dd4 <hal_i2c_available+0xc>)
   b4dcc:	681b      	ldr	r3, [r3, #0]
   b4dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4dd0:	9301      	str	r3, [sp, #4]
   b4dd2:	bd08      	pop	{r3, pc}
   b4dd4:	00030228 	.word	0x00030228

000b4dd8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4dd8:	b508      	push	{r3, lr}
   b4dda:	4b02      	ldr	r3, [pc, #8]	; (b4de4 <hal_i2c_read+0xc>)
   b4ddc:	681b      	ldr	r3, [r3, #0]
   b4dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4de0:	9301      	str	r3, [sp, #4]
   b4de2:	bd08      	pop	{r3, pc}
   b4de4:	00030228 	.word	0x00030228

000b4de8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4de8:	b508      	push	{r3, lr}
   b4dea:	4b02      	ldr	r3, [pc, #8]	; (b4df4 <hal_i2c_peek+0xc>)
   b4dec:	681b      	ldr	r3, [r3, #0]
   b4dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4df0:	9301      	str	r3, [sp, #4]
   b4df2:	bd08      	pop	{r3, pc}
   b4df4:	00030228 	.word	0x00030228

000b4df8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4df8:	b508      	push	{r3, lr}
   b4dfa:	4b02      	ldr	r3, [pc, #8]	; (b4e04 <hal_i2c_flush+0xc>)
   b4dfc:	681b      	ldr	r3, [r3, #0]
   b4dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4e00:	9301      	str	r3, [sp, #4]
   b4e02:	bd08      	pop	{r3, pc}
   b4e04:	00030228 	.word	0x00030228

000b4e08 <hal_i2c_init>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4e08:	b508      	push	{r3, lr}
   b4e0a:	4b02      	ldr	r3, [pc, #8]	; (b4e14 <hal_i2c_init+0xc>)
   b4e0c:	681b      	ldr	r3, [r3, #0]
   b4e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4e10:	9301      	str	r3, [sp, #4]
   b4e12:	bd08      	pop	{r3, pc}
   b4e14:	00030228 	.word	0x00030228

000b4e18 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b4e18:	b508      	push	{r3, lr}
   b4e1a:	4b02      	ldr	r3, [pc, #8]	; (b4e24 <hal_i2c_request_ex+0xc>)
   b4e1c:	681b      	ldr	r3, [r3, #0]
   b4e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4e20:	9301      	str	r3, [sp, #4]
   b4e22:	bd08      	pop	{r3, pc}
   b4e24:	00030228 	.word	0x00030228

000b4e28 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4e28:	b508      	push	{r3, lr}
   b4e2a:	4b02      	ldr	r3, [pc, #8]	; (b4e34 <HAL_USB_USART_Init+0xc>)
   b4e2c:	681b      	ldr	r3, [r3, #0]
   b4e2e:	681b      	ldr	r3, [r3, #0]
   b4e30:	9301      	str	r3, [sp, #4]
   b4e32:	bd08      	pop	{r3, pc}
   b4e34:	0003024c 	.word	0x0003024c

000b4e38 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4e38:	b508      	push	{r3, lr}
   b4e3a:	4b02      	ldr	r3, [pc, #8]	; (b4e44 <HAL_USB_USART_Begin+0xc>)
   b4e3c:	681b      	ldr	r3, [r3, #0]
   b4e3e:	685b      	ldr	r3, [r3, #4]
   b4e40:	9301      	str	r3, [sp, #4]
   b4e42:	bd08      	pop	{r3, pc}
   b4e44:	0003024c 	.word	0x0003024c

000b4e48 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4e48:	b508      	push	{r3, lr}
   b4e4a:	4b02      	ldr	r3, [pc, #8]	; (b4e54 <HAL_USB_USART_Available_Data+0xc>)
   b4e4c:	681b      	ldr	r3, [r3, #0]
   b4e4e:	691b      	ldr	r3, [r3, #16]
   b4e50:	9301      	str	r3, [sp, #4]
   b4e52:	bd08      	pop	{r3, pc}
   b4e54:	0003024c 	.word	0x0003024c

000b4e58 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4e58:	b508      	push	{r3, lr}
   b4e5a:	4b02      	ldr	r3, [pc, #8]	; (b4e64 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4e5c:	681b      	ldr	r3, [r3, #0]
   b4e5e:	695b      	ldr	r3, [r3, #20]
   b4e60:	9301      	str	r3, [sp, #4]
   b4e62:	bd08      	pop	{r3, pc}
   b4e64:	0003024c 	.word	0x0003024c

000b4e68 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4e68:	b508      	push	{r3, lr}
   b4e6a:	4b02      	ldr	r3, [pc, #8]	; (b4e74 <HAL_USB_USART_Receive_Data+0xc>)
   b4e6c:	681b      	ldr	r3, [r3, #0]
   b4e6e:	699b      	ldr	r3, [r3, #24]
   b4e70:	9301      	str	r3, [sp, #4]
   b4e72:	bd08      	pop	{r3, pc}
   b4e74:	0003024c 	.word	0x0003024c

000b4e78 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4e78:	b508      	push	{r3, lr}
   b4e7a:	4b02      	ldr	r3, [pc, #8]	; (b4e84 <HAL_USB_USART_Send_Data+0xc>)
   b4e7c:	681b      	ldr	r3, [r3, #0]
   b4e7e:	69db      	ldr	r3, [r3, #28]
   b4e80:	9301      	str	r3, [sp, #4]
   b4e82:	bd08      	pop	{r3, pc}
   b4e84:	0003024c 	.word	0x0003024c

000b4e88 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4e88:	b508      	push	{r3, lr}
   b4e8a:	4b02      	ldr	r3, [pc, #8]	; (b4e94 <HAL_USB_USART_Flush_Data+0xc>)
   b4e8c:	681b      	ldr	r3, [r3, #0]
   b4e8e:	6a1b      	ldr	r3, [r3, #32]
   b4e90:	9301      	str	r3, [sp, #4]
   b4e92:	bd08      	pop	{r3, pc}
   b4e94:	0003024c 	.word	0x0003024c

000b4e98 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4e98:	b508      	push	{r3, lr}
   b4e9a:	4b02      	ldr	r3, [pc, #8]	; (b4ea4 <set_system_mode+0xc>)
   b4e9c:	681b      	ldr	r3, [r3, #0]
   b4e9e:	685b      	ldr	r3, [r3, #4]
   b4ea0:	9301      	str	r3, [sp, #4]
   b4ea2:	bd08      	pop	{r3, pc}
   b4ea4:	00030220 	.word	0x00030220

000b4ea8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4ea8:	b508      	push	{r3, lr}
   b4eaa:	4b02      	ldr	r3, [pc, #8]	; (b4eb4 <system_delay_ms+0xc>)
   b4eac:	681b      	ldr	r3, [r3, #0]
   b4eae:	695b      	ldr	r3, [r3, #20]
   b4eb0:	9301      	str	r3, [sp, #4]
   b4eb2:	bd08      	pop	{r3, pc}
   b4eb4:	00030220 	.word	0x00030220

000b4eb8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b4eb8:	b508      	push	{r3, lr}
   b4eba:	4b02      	ldr	r3, [pc, #8]	; (b4ec4 <application_thread_current+0xc>)
   b4ebc:	681b      	ldr	r3, [r3, #0]
   b4ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4ec0:	9301      	str	r3, [sp, #4]
   b4ec2:	bd08      	pop	{r3, pc}
   b4ec4:	00030220 	.word	0x00030220

000b4ec8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b4ec8:	b508      	push	{r3, lr}
   b4eca:	4b02      	ldr	r3, [pc, #8]	; (b4ed4 <application_thread_invoke+0xc>)
   b4ecc:	681b      	ldr	r3, [r3, #0]
   b4ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4ed0:	9301      	str	r3, [sp, #4]
   b4ed2:	bd08      	pop	{r3, pc}
   b4ed4:	00030220 	.word	0x00030220

000b4ed8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4ed8:	b508      	push	{r3, lr}
   b4eda:	4b03      	ldr	r3, [pc, #12]	; (b4ee8 <system_ctrl_set_app_request_handler+0x10>)
   b4edc:	681b      	ldr	r3, [r3, #0]
   b4ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4ee2:	9301      	str	r3, [sp, #4]
   b4ee4:	bd08      	pop	{r3, pc}
   b4ee6:	0000      	.short	0x0000
   b4ee8:	00030220 	.word	0x00030220

000b4eec <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4eec:	b508      	push	{r3, lr}
   b4eee:	4b03      	ldr	r3, [pc, #12]	; (b4efc <system_ctrl_set_result+0x10>)
   b4ef0:	681b      	ldr	r3, [r3, #0]
   b4ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4ef6:	9301      	str	r3, [sp, #4]
   b4ef8:	bd08      	pop	{r3, pc}
   b4efa:	0000      	.short	0x0000
   b4efc:	00030220 	.word	0x00030220

000b4f00 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4f00:	b508      	push	{r3, lr}
   b4f02:	4b02      	ldr	r3, [pc, #8]	; (b4f0c <network_connect+0xc>)
   b4f04:	681b      	ldr	r3, [r3, #0]
   b4f06:	685b      	ldr	r3, [r3, #4]
   b4f08:	9301      	str	r3, [sp, #4]
   b4f0a:	bd08      	pop	{r3, pc}
   b4f0c:	00030240 	.word	0x00030240

000b4f10 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4f10:	b508      	push	{r3, lr}
   b4f12:	4b02      	ldr	r3, [pc, #8]	; (b4f1c <network_connecting+0xc>)
   b4f14:	681b      	ldr	r3, [r3, #0]
   b4f16:	689b      	ldr	r3, [r3, #8]
   b4f18:	9301      	str	r3, [sp, #4]
   b4f1a:	bd08      	pop	{r3, pc}
   b4f1c:	00030240 	.word	0x00030240

000b4f20 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4f20:	b508      	push	{r3, lr}
   b4f22:	4b02      	ldr	r3, [pc, #8]	; (b4f2c <network_disconnect+0xc>)
   b4f24:	681b      	ldr	r3, [r3, #0]
   b4f26:	68db      	ldr	r3, [r3, #12]
   b4f28:	9301      	str	r3, [sp, #4]
   b4f2a:	bd08      	pop	{r3, pc}
   b4f2c:	00030240 	.word	0x00030240

000b4f30 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4f30:	b508      	push	{r3, lr}
   b4f32:	4b02      	ldr	r3, [pc, #8]	; (b4f3c <network_ready+0xc>)
   b4f34:	681b      	ldr	r3, [r3, #0]
   b4f36:	691b      	ldr	r3, [r3, #16]
   b4f38:	9301      	str	r3, [sp, #4]
   b4f3a:	bd08      	pop	{r3, pc}
   b4f3c:	00030240 	.word	0x00030240

000b4f40 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4f40:	b508      	push	{r3, lr}
   b4f42:	4b02      	ldr	r3, [pc, #8]	; (b4f4c <network_on+0xc>)
   b4f44:	681b      	ldr	r3, [r3, #0]
   b4f46:	695b      	ldr	r3, [r3, #20]
   b4f48:	9301      	str	r3, [sp, #4]
   b4f4a:	bd08      	pop	{r3, pc}
   b4f4c:	00030240 	.word	0x00030240

000b4f50 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4f50:	b508      	push	{r3, lr}
   b4f52:	4b02      	ldr	r3, [pc, #8]	; (b4f5c <network_off+0xc>)
   b4f54:	681b      	ldr	r3, [r3, #0]
   b4f56:	699b      	ldr	r3, [r3, #24]
   b4f58:	9301      	str	r3, [sp, #4]
   b4f5a:	bd08      	pop	{r3, pc}
   b4f5c:	00030240 	.word	0x00030240

000b4f60 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4f60:	b508      	push	{r3, lr}
   b4f62:	4b02      	ldr	r3, [pc, #8]	; (b4f6c <network_listen+0xc>)
   b4f64:	681b      	ldr	r3, [r3, #0]
   b4f66:	69db      	ldr	r3, [r3, #28]
   b4f68:	9301      	str	r3, [sp, #4]
   b4f6a:	bd08      	pop	{r3, pc}
   b4f6c:	00030240 	.word	0x00030240

000b4f70 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4f70:	b508      	push	{r3, lr}
   b4f72:	4b02      	ldr	r3, [pc, #8]	; (b4f7c <network_listening+0xc>)
   b4f74:	681b      	ldr	r3, [r3, #0]
   b4f76:	6a1b      	ldr	r3, [r3, #32]
   b4f78:	9301      	str	r3, [sp, #4]
   b4f7a:	bd08      	pop	{r3, pc}
   b4f7c:	00030240 	.word	0x00030240

000b4f80 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4f80:	b508      	push	{r3, lr}
   b4f82:	4b02      	ldr	r3, [pc, #8]	; (b4f8c <network_set_listen_timeout+0xc>)
   b4f84:	681b      	ldr	r3, [r3, #0]
   b4f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4f88:	9301      	str	r3, [sp, #4]
   b4f8a:	bd08      	pop	{r3, pc}
   b4f8c:	00030240 	.word	0x00030240

000b4f90 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4f90:	b508      	push	{r3, lr}
   b4f92:	4b02      	ldr	r3, [pc, #8]	; (b4f9c <network_get_listen_timeout+0xc>)
   b4f94:	681b      	ldr	r3, [r3, #0]
   b4f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4f98:	9301      	str	r3, [sp, #4]
   b4f9a:	bd08      	pop	{r3, pc}
   b4f9c:	00030240 	.word	0x00030240

000b4fa0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4fa0:	b508      	push	{r3, lr}
   b4fa2:	4b02      	ldr	r3, [pc, #8]	; (b4fac <network_is_on+0xc>)
   b4fa4:	681b      	ldr	r3, [r3, #0]
   b4fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4fa8:	9301      	str	r3, [sp, #4]
   b4faa:	bd08      	pop	{r3, pc}
   b4fac:	00030240 	.word	0x00030240

000b4fb0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4fb0:	b508      	push	{r3, lr}
   b4fb2:	4b02      	ldr	r3, [pc, #8]	; (b4fbc <network_is_off+0xc>)
   b4fb4:	681b      	ldr	r3, [r3, #0]
   b4fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4fb8:	9301      	str	r3, [sp, #4]
   b4fba:	bd08      	pop	{r3, pc}
   b4fbc:	00030240 	.word	0x00030240

000b4fc0 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b4fc0:	b508      	push	{r3, lr}
   b4fc2:	4b02      	ldr	r3, [pc, #8]	; (b4fcc <spark_cloud_flag_connected+0xc>)
   b4fc4:	681b      	ldr	r3, [r3, #0]
   b4fc6:	695b      	ldr	r3, [r3, #20]
   b4fc8:	9301      	str	r3, [sp, #4]
   b4fca:	bd08      	pop	{r3, pc}
   b4fcc:	00030244 	.word	0x00030244

000b4fd0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b4fd0:	b508      	push	{r3, lr}
   b4fd2:	4b02      	ldr	r3, [pc, #8]	; (b4fdc <spark_send_event+0xc>)
   b4fd4:	681b      	ldr	r3, [r3, #0]
   b4fd6:	6a1b      	ldr	r3, [r3, #32]
   b4fd8:	9301      	str	r3, [sp, #4]
   b4fda:	bd08      	pop	{r3, pc}
   b4fdc:	00030244 	.word	0x00030244

000b4fe0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4fe0:	b508      	push	{r3, lr}
   b4fe2:	4b02      	ldr	r3, [pc, #8]	; (b4fec <spark_set_random_seed_from_cloud_handler+0xc>)
   b4fe4:	681b      	ldr	r3, [r3, #0]
   b4fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4fe8:	9301      	str	r3, [sp, #4]
   b4fea:	bd08      	pop	{r3, pc}
   b4fec:	00030244 	.word	0x00030244

000b4ff0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4ff0:	b508      	push	{r3, lr}
   b4ff2:	4b02      	ldr	r3, [pc, #8]	; (b4ffc <malloc+0xc>)
   b4ff4:	681b      	ldr	r3, [r3, #0]
   b4ff6:	681b      	ldr	r3, [r3, #0]
   b4ff8:	9301      	str	r3, [sp, #4]
   b4ffa:	bd08      	pop	{r3, pc}
   b4ffc:	0003021c 	.word	0x0003021c

000b5000 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5000:	b508      	push	{r3, lr}
   b5002:	4b02      	ldr	r3, [pc, #8]	; (b500c <free+0xc>)
   b5004:	681b      	ldr	r3, [r3, #0]
   b5006:	685b      	ldr	r3, [r3, #4]
   b5008:	9301      	str	r3, [sp, #4]
   b500a:	bd08      	pop	{r3, pc}
   b500c:	0003021c 	.word	0x0003021c

000b5010 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5010:	b508      	push	{r3, lr}
   b5012:	4b02      	ldr	r3, [pc, #8]	; (b501c <realloc+0xc>)
   b5014:	681b      	ldr	r3, [r3, #0]
   b5016:	689b      	ldr	r3, [r3, #8]
   b5018:	9301      	str	r3, [sp, #4]
   b501a:	bd08      	pop	{r3, pc}
   b501c:	0003021c 	.word	0x0003021c

000b5020 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b5020:	b508      	push	{r3, lr}
   b5022:	4b02      	ldr	r3, [pc, #8]	; (b502c <abort+0xc>)
   b5024:	681b      	ldr	r3, [r3, #0]
   b5026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5028:	9301      	str	r3, [sp, #4]
   b502a:	bd08      	pop	{r3, pc}
   b502c:	0003021c 	.word	0x0003021c

000b5030 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b5030:	b508      	push	{r3, lr}
   b5032:	4b02      	ldr	r3, [pc, #8]	; (b503c <_malloc_r+0xc>)
   b5034:	681b      	ldr	r3, [r3, #0]
   b5036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5038:	9301      	str	r3, [sp, #4]
   b503a:	bd08      	pop	{r3, pc}
   b503c:	0003021c 	.word	0x0003021c

000b5040 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5040:	b508      	push	{r3, lr}
   b5042:	4b02      	ldr	r3, [pc, #8]	; (b504c <__assert_func+0xc>)
   b5044:	681b      	ldr	r3, [r3, #0]
   b5046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5048:	9301      	str	r3, [sp, #4]
   b504a:	bd08      	pop	{r3, pc}
   b504c:	0003021c 	.word	0x0003021c

000b5050 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5050:	b508      	push	{r3, lr}
   b5052:	4b02      	ldr	r3, [pc, #8]	; (b505c <newlib_impure_ptr_callback+0xc>)
   b5054:	681b      	ldr	r3, [r3, #0]
   b5056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5058:	9301      	str	r3, [sp, #4]
   b505a:	bd08      	pop	{r3, pc}
   b505c:	0003021c 	.word	0x0003021c

000b5060 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5060:	2200      	movs	r2, #0
   b5062:	6840      	ldr	r0, [r0, #4]
   b5064:	4611      	mov	r1, r2
   b5066:	f7ff bf83 	b.w	b4f70 <network_listening>

000b506a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b506a:	2200      	movs	r2, #0
   b506c:	6840      	ldr	r0, [r0, #4]
   b506e:	4611      	mov	r1, r2
   b5070:	f7ff bf8e 	b.w	b4f90 <network_get_listen_timeout>

000b5074 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5074:	6840      	ldr	r0, [r0, #4]
   b5076:	2200      	movs	r2, #0
   b5078:	f7ff bf82 	b.w	b4f80 <network_set_listen_timeout>

000b507c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b507c:	6840      	ldr	r0, [r0, #4]
   b507e:	2200      	movs	r2, #0
   b5080:	f081 0101 	eor.w	r1, r1, #1
   b5084:	f7ff bf6c 	b.w	b4f60 <network_listen>

000b5088 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5088:	2300      	movs	r3, #0
   b508a:	6840      	ldr	r0, [r0, #4]
   b508c:	461a      	mov	r2, r3
   b508e:	4619      	mov	r1, r3
   b5090:	f7ff bf5e 	b.w	b4f50 <network_off>

000b5094 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5094:	2300      	movs	r3, #0
   b5096:	6840      	ldr	r0, [r0, #4]
   b5098:	461a      	mov	r2, r3
   b509a:	4619      	mov	r1, r3
   b509c:	f7ff bf50 	b.w	b4f40 <network_on>

000b50a0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b50a0:	2200      	movs	r2, #0
   b50a2:	6840      	ldr	r0, [r0, #4]
   b50a4:	4611      	mov	r1, r2
   b50a6:	f7ff bf43 	b.w	b4f30 <network_ready>

000b50aa <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b50aa:	2200      	movs	r2, #0
   b50ac:	6840      	ldr	r0, [r0, #4]
   b50ae:	4611      	mov	r1, r2
   b50b0:	f7ff bf2e 	b.w	b4f10 <network_connecting>

000b50b4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b50b4:	6840      	ldr	r0, [r0, #4]
   b50b6:	2200      	movs	r2, #0
   b50b8:	2102      	movs	r1, #2
   b50ba:	f7ff bf31 	b.w	b4f20 <network_disconnect>

000b50be <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b50be:	2300      	movs	r3, #0
   b50c0:	6840      	ldr	r0, [r0, #4]
   b50c2:	461a      	mov	r2, r3
   b50c4:	f7ff bf1c 	b.w	b4f00 <network_connect>

000b50c8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b50c8:	4b02      	ldr	r3, [pc, #8]	; (b50d4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b50ca:	2203      	movs	r2, #3
   b50cc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b50ce:	4a02      	ldr	r2, [pc, #8]	; (b50d8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b50d0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b50d2:	4770      	bx	lr
   b50d4:	2003e6c4 	.word	0x2003e6c4
   b50d8:	000b65f4 	.word	0x000b65f4

000b50dc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b50dc:	4b05      	ldr	r3, [pc, #20]	; (b50f4 <_GLOBAL__sub_I_System+0x18>)
   b50de:	2202      	movs	r2, #2
   b50e0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b50e2:	4b05      	ldr	r3, [pc, #20]	; (b50f8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b50e4:	4a05      	ldr	r2, [pc, #20]	; (b50fc <_GLOBAL__sub_I_System+0x20>)
   b50e6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b50e8:	2000      	movs	r0, #0
   b50ea:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b50ee:	f7ff bed3 	b.w	b4e98 <set_system_mode>
   b50f2:	bf00      	nop
   b50f4:	2003e6d8 	.word	0x2003e6d8
   b50f8:	2003e6cc 	.word	0x2003e6cc
   b50fc:	ffff0000 	.word	0xffff0000

000b5100 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b5100:	b510      	push	{r4, lr}
   b5102:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b5104:	f001 f981 	bl	b640a <strlen>
   b5108:	3801      	subs	r0, #1
   b510a:	1823      	adds	r3, r4, r0
   b510c:	4620      	mov	r0, r4
	while(i<j){
   b510e:	4283      	cmp	r3, r0
   b5110:	d906      	bls.n	b5120 <_Z11str_reversePc+0x20>
		c = *i;
   b5112:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b5114:	7819      	ldrb	r1, [r3, #0]
   b5116:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b511a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b511e:	e7f6      	b.n	b510e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b5120:	bd10      	pop	{r4, pc}

000b5122 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b5122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b5126:	1e93      	subs	r3, r2, #2
{
   b5128:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b512a:	2b22      	cmp	r3, #34	; 0x22
   b512c:	f04f 0300 	mov.w	r3, #0
{
   b5130:	460d      	mov	r5, r1
   b5132:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b5134:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b5138:	d927      	bls.n	b518a <ltoa+0x68>

      if (10 == base && N < 0L)
   b513a:	2800      	cmp	r0, #0
   b513c:	da2a      	bge.n	b5194 <ltoa+0x72>
      {
            *head++ = '-';
   b513e:	462e      	mov	r6, r5
   b5140:	232d      	movs	r3, #45	; 0x2d
   b5142:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b5146:	4240      	negs	r0, r0
   b5148:	240a      	movs	r4, #10
      *tail-- = '\0';
   b514a:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b514e:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b5152:	4622      	mov	r2, r4
   b5154:	4601      	mov	r1, r0
   b5156:	a801      	add	r0, sp, #4
   b5158:	f001 f8bf 	bl	b62da <ldiv>
   b515c:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b515e:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b5160:	2b09      	cmp	r3, #9
   b5162:	bfcc      	ite	gt
   b5164:	2237      	movgt	r2, #55	; 0x37
   b5166:	2230      	movle	r2, #48	; 0x30
   b5168:	fa52 f383 	uxtab	r3, r2, r3
   b516c:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b5170:	f108 0801 	add.w	r8, r8, #1
   b5174:	2800      	cmp	r0, #0
   b5176:	d1ec      	bne.n	b5152 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b5178:	4642      	mov	r2, r8
   b517a:	1c79      	adds	r1, r7, #1
   b517c:	4630      	mov	r0, r6
   b517e:	f001 f8c0 	bl	b6302 <memcpy>
      return str;
}
   b5182:	4628      	mov	r0, r5
   b5184:	b00c      	add	sp, #48	; 0x30
   b5186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b518a:	2a0a      	cmp	r2, #10
   b518c:	d0d5      	beq.n	b513a <ltoa+0x18>
      if (uarg)
   b518e:	b118      	cbz	r0, b5198 <ltoa+0x76>
   b5190:	462e      	mov	r6, r5
   b5192:	e7da      	b.n	b514a <ltoa+0x28>
   b5194:	240a      	movs	r4, #10
   b5196:	e7fa      	b.n	b518e <ltoa+0x6c>
      else  *tail-- = '0';
   b5198:	2330      	movs	r3, #48	; 0x30
   b519a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b519e:	462e      	mov	r6, r5
   b51a0:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b51a4:	f04f 0802 	mov.w	r8, #2
   b51a8:	e7e6      	b.n	b5178 <ltoa+0x56>

000b51aa <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b51aa:	b570      	push	{r4, r5, r6, lr}
   b51ac:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b51ae:	1e91      	subs	r1, r2, #2
   b51b0:	2922      	cmp	r1, #34	; 0x22
   b51b2:	d81d      	bhi.n	b51f0 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b51b4:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b51b6:	b930      	cbnz	r0, b51c6 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b51b8:	4423      	add	r3, r4
            *ptr++ = '0';
   b51ba:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b51bc:	429d      	cmp	r5, r3
   b51be:	d210      	bcs.n	b51e2 <ultoa+0x38>
            *ptr++ = '0';
   b51c0:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b51c4:	e7fa      	b.n	b51bc <ultoa+0x12>
            result.quot = a/radix;
   b51c6:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b51ca:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b51ce:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b51d0:	2809      	cmp	r0, #9
                *ptr += '0';
   b51d2:	bf94      	ite	ls
   b51d4:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b51d6:	3157      	addhi	r1, #87	; 0x57
   b51d8:	b2c9      	uxtb	r1, r1
   b51da:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b51de:	4630      	mov	r0, r6
	while(a){
   b51e0:	e7e9      	b.n	b51b6 <ultoa+0xc>

	*ptr = '\0';
   b51e2:	2300      	movs	r3, #0
	str_reverse(buffer);
   b51e4:	4620      	mov	r0, r4
	*ptr = '\0';
   b51e6:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b51e8:	f7ff ff8a 	bl	b5100 <_Z11str_reversePc>
	return buffer;
   b51ec:	4620      	mov	r0, r4
}
   b51ee:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b51f0:	2000      	movs	r0, #0
   b51f2:	e7fc      	b.n	b51ee <ultoa+0x44>

000b51f4 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b51f4:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b51f6:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b51f8:	460c      	mov	r4, r1
   b51fa:	4615      	mov	r5, r2
	if(a<0){
   b51fc:	da0e      	bge.n	b521c <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b51fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b5202:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b5206:	bf14      	ite	ne
   b5208:	4258      	negne	r0, r3
   b520a:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b520c:	2301      	movs	r3, #1
		*buffer = '-';
   b520e:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b5210:	462a      	mov	r2, r5
   b5212:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b5214:	f7ff ffc9 	bl	b51aa <ultoa>
	}
	return buffer;
}
   b5218:	4620      	mov	r0, r4
   b521a:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b521c:	2301      	movs	r3, #1
   b521e:	e7f9      	b.n	b5214 <itoa+0x20>

000b5220 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b5220:	b510      	push	{r4, lr}
   b5222:	4604      	mov	r4, r0
{
	free(buffer);
   b5224:	6800      	ldr	r0, [r0, #0]
   b5226:	f7ff feeb 	bl	b5000 <free>
}
   b522a:	4620      	mov	r0, r4
   b522c:	bd10      	pop	{r4, pc}

000b522e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b522e:	b510      	push	{r4, lr}
   b5230:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b5232:	6800      	ldr	r0, [r0, #0]
   b5234:	b108      	cbz	r0, b523a <_ZN6String10invalidateEv+0xc>
   b5236:	f7ff fee3 	bl	b5000 <free>
	buffer = NULL;
   b523a:	2300      	movs	r3, #0
	capacity = len = 0;
   b523c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5240:	6023      	str	r3, [r4, #0]
}
   b5242:	bd10      	pop	{r4, pc}

000b5244 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5244:	b538      	push	{r3, r4, r5, lr}
   b5246:	4604      	mov	r4, r0
   b5248:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b524a:	6800      	ldr	r0, [r0, #0]
   b524c:	3101      	adds	r1, #1
   b524e:	f7ff fedf 	bl	b5010 <realloc>
	if (newbuffer) {
   b5252:	b110      	cbz	r0, b525a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5254:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5258:	2001      	movs	r0, #1
	}
	return 0;
}
   b525a:	bd38      	pop	{r3, r4, r5, pc}

000b525c <_ZN6String7reserveEj>:
{
   b525c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b525e:	6803      	ldr	r3, [r0, #0]
{
   b5260:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5262:	b123      	cbz	r3, b526e <_ZN6String7reserveEj+0x12>
   b5264:	6843      	ldr	r3, [r0, #4]
   b5266:	428b      	cmp	r3, r1
   b5268:	d301      	bcc.n	b526e <_ZN6String7reserveEj+0x12>
   b526a:	2001      	movs	r0, #1
}
   b526c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b526e:	4620      	mov	r0, r4
   b5270:	f7ff ffe8 	bl	b5244 <_ZN6String12changeBufferEj>
   b5274:	2800      	cmp	r0, #0
   b5276:	d0f9      	beq.n	b526c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5278:	68a3      	ldr	r3, [r4, #8]
   b527a:	2b00      	cmp	r3, #0
   b527c:	d1f5      	bne.n	b526a <_ZN6String7reserveEj+0xe>
   b527e:	6822      	ldr	r2, [r4, #0]
   b5280:	7013      	strb	r3, [r2, #0]
   b5282:	e7f2      	b.n	b526a <_ZN6String7reserveEj+0xe>

000b5284 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5284:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5286:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5288:	4611      	mov	r1, r2
   b528a:	9201      	str	r2, [sp, #4]
{
   b528c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b528e:	f7ff ffe5 	bl	b525c <_ZN6String7reserveEj>
   b5292:	9a01      	ldr	r2, [sp, #4]
   b5294:	b928      	cbnz	r0, b52a2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5296:	4620      	mov	r0, r4
   b5298:	f7ff ffc9 	bl	b522e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b529c:	4620      	mov	r0, r4
   b529e:	b003      	add	sp, #12
   b52a0:	bd30      	pop	{r4, r5, pc}
	len = length;
   b52a2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b52a4:	4629      	mov	r1, r5
   b52a6:	6820      	ldr	r0, [r4, #0]
   b52a8:	f001 f82b 	bl	b6302 <memcpy>
	buffer[len] = 0;
   b52ac:	6822      	ldr	r2, [r4, #0]
   b52ae:	68a3      	ldr	r3, [r4, #8]
   b52b0:	2100      	movs	r1, #0
   b52b2:	54d1      	strb	r1, [r2, r3]
	return *this;
   b52b4:	e7f2      	b.n	b529c <_ZN6String4copyEPKcj+0x18>

000b52b6 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b52b6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b52b8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b52ba:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b52be:	4604      	mov	r4, r0
	len = 0;
   b52c0:	6083      	str	r3, [r0, #8]
	flags = 0;
   b52c2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b52c4:	b141      	cbz	r1, b52d8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b52c6:	4608      	mov	r0, r1
   b52c8:	9101      	str	r1, [sp, #4]
   b52ca:	f001 f89e 	bl	b640a <strlen>
   b52ce:	9901      	ldr	r1, [sp, #4]
   b52d0:	4602      	mov	r2, r0
   b52d2:	4620      	mov	r0, r4
   b52d4:	f7ff ffd6 	bl	b5284 <_ZN6String4copyEPKcj>
}
   b52d8:	4620      	mov	r0, r4
   b52da:	b002      	add	sp, #8
   b52dc:	bd10      	pop	{r4, pc}

000b52de <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b52de:	4288      	cmp	r0, r1
{
   b52e0:	b510      	push	{r4, lr}
   b52e2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b52e4:	d005      	beq.n	b52f2 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b52e6:	680b      	ldr	r3, [r1, #0]
   b52e8:	b12b      	cbz	r3, b52f6 <_ZN6StringaSERKS_+0x18>
   b52ea:	688a      	ldr	r2, [r1, #8]
   b52ec:	4619      	mov	r1, r3
   b52ee:	f7ff ffc9 	bl	b5284 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b52f2:	4620      	mov	r0, r4
   b52f4:	bd10      	pop	{r4, pc}
	else invalidate();
   b52f6:	f7ff ff9a 	bl	b522e <_ZN6String10invalidateEv>
   b52fa:	e7fa      	b.n	b52f2 <_ZN6StringaSERKS_+0x14>

000b52fc <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b52fc:	b510      	push	{r4, lr}
	buffer = NULL;
   b52fe:	2300      	movs	r3, #0
String::String(const String &value)
   b5300:	4604      	mov	r4, r0
	capacity = 0;
   b5302:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b5306:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5308:	7303      	strb	r3, [r0, #12]
	*this = value;
   b530a:	f7ff ffe8 	bl	b52de <_ZN6StringaSERKS_>
}
   b530e:	4620      	mov	r0, r4
   b5310:	bd10      	pop	{r4, pc}

000b5312 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b5312:	b513      	push	{r0, r1, r4, lr}
   b5314:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b5316:	b159      	cbz	r1, b5330 <_ZN6StringaSEPKc+0x1e>
   b5318:	4608      	mov	r0, r1
   b531a:	9101      	str	r1, [sp, #4]
   b531c:	f001 f875 	bl	b640a <strlen>
   b5320:	9901      	ldr	r1, [sp, #4]
   b5322:	4602      	mov	r2, r0
   b5324:	4620      	mov	r0, r4
   b5326:	f7ff ffad 	bl	b5284 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b532a:	4620      	mov	r0, r4
   b532c:	b002      	add	sp, #8
   b532e:	bd10      	pop	{r4, pc}
	else invalidate();
   b5330:	f7ff ff7d 	bl	b522e <_ZN6String10invalidateEv>
   b5334:	e7f9      	b.n	b532a <_ZN6StringaSEPKc+0x18>

000b5336 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b5336:	b510      	push	{r4, lr}
   b5338:	4604      	mov	r4, r0
   b533a:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b533c:	2300      	movs	r3, #0
	capacity = 0;
   b533e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b5342:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b5344:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b5346:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b5348:	a901      	add	r1, sp, #4
   b534a:	f7ff ff53 	bl	b51f4 <itoa>
	*this = buf;
   b534e:	a901      	add	r1, sp, #4
   b5350:	4620      	mov	r0, r4
   b5352:	f7ff ffde 	bl	b5312 <_ZN6StringaSEPKc>
}
   b5356:	4620      	mov	r0, r4
   b5358:	b00a      	add	sp, #40	; 0x28
   b535a:	bd10      	pop	{r4, pc}

000b535c <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   b535c:	b510      	push	{r4, lr}
   b535e:	4604      	mov	r4, r0
   b5360:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b5362:	2300      	movs	r3, #0
	capacity = 0;
   b5364:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b5368:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b536a:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   b536c:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   b536e:	a901      	add	r1, sp, #4
   b5370:	f7ff fed7 	bl	b5122 <ltoa>
	*this = buf;
   b5374:	a901      	add	r1, sp, #4
   b5376:	4620      	mov	r0, r4
   b5378:	f7ff ffcb 	bl	b5312 <_ZN6StringaSEPKc>
}
   b537c:	4620      	mov	r0, r4
   b537e:	b00a      	add	sp, #40	; 0x28
   b5380:	bd10      	pop	{r4, pc}

000b5382 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b5382:	b570      	push	{r4, r5, r6, lr}
   b5384:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b5386:	460e      	mov	r6, r1
   b5388:	b909      	cbnz	r1, b538e <_ZN6String6concatEPKcj+0xc>
   b538a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b538c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b538e:	b16a      	cbz	r2, b53ac <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b5390:	6884      	ldr	r4, [r0, #8]
   b5392:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b5394:	4621      	mov	r1, r4
   b5396:	f7ff ff61 	bl	b525c <_ZN6String7reserveEj>
   b539a:	2800      	cmp	r0, #0
   b539c:	d0f5      	beq.n	b538a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b539e:	6828      	ldr	r0, [r5, #0]
   b53a0:	68ab      	ldr	r3, [r5, #8]
   b53a2:	4631      	mov	r1, r6
   b53a4:	4418      	add	r0, r3
   b53a6:	f001 f80b 	bl	b63c0 <strcpy>
	len = newlen;
   b53aa:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b53ac:	2001      	movs	r0, #1
   b53ae:	e7ed      	b.n	b538c <_ZN6String6concatEPKcj+0xa>

000b53b0 <_ZN6String6concatEl>:
	utoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(long num)
{
   b53b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b53b2:	4604      	mov	r4, r0
	char buf[12];
	ltoa(num, buf, 10);
   b53b4:	220a      	movs	r2, #10
{
   b53b6:	4608      	mov	r0, r1
	ltoa(num, buf, 10);
   b53b8:	a901      	add	r1, sp, #4
   b53ba:	f7ff feb2 	bl	b5122 <ltoa>
	return concat(buf, strlen(buf));
   b53be:	a801      	add	r0, sp, #4
   b53c0:	f001 f823 	bl	b640a <strlen>
   b53c4:	a901      	add	r1, sp, #4
   b53c6:	4602      	mov	r2, r0
   b53c8:	4620      	mov	r0, r4
   b53ca:	f7ff ffda 	bl	b5382 <_ZN6String6concatEPKcj>
}
   b53ce:	b004      	add	sp, #16
   b53d0:	bd10      	pop	{r4, pc}

000b53d2 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b53d2:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b53d4:	688a      	ldr	r2, [r1, #8]
   b53d6:	6809      	ldr	r1, [r1, #0]
{
   b53d8:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b53da:	f7ff ffd2 	bl	b5382 <_ZN6String6concatEPKcj>
   b53de:	b910      	cbnz	r0, b53e6 <_ZplRK15StringSumHelperRK6String+0x14>
   b53e0:	4620      	mov	r0, r4
   b53e2:	f7ff ff24 	bl	b522e <_ZN6String10invalidateEv>
	return a;
}
   b53e6:	4620      	mov	r0, r4
   b53e8:	bd10      	pop	{r4, pc}

000b53ea <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b53ea:	b513      	push	{r0, r1, r4, lr}
   b53ec:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b53ee:	b929      	cbnz	r1, b53fc <_ZplRK15StringSumHelperPKc+0x12>
   b53f0:	4620      	mov	r0, r4
   b53f2:	f7ff ff1c 	bl	b522e <_ZN6String10invalidateEv>
	return a;
}
   b53f6:	4620      	mov	r0, r4
   b53f8:	b002      	add	sp, #8
   b53fa:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b53fc:	4608      	mov	r0, r1
   b53fe:	9101      	str	r1, [sp, #4]
   b5400:	f001 f803 	bl	b640a <strlen>
   b5404:	9901      	ldr	r1, [sp, #4]
   b5406:	4602      	mov	r2, r0
   b5408:	4620      	mov	r0, r4
   b540a:	f7ff ffba 	bl	b5382 <_ZN6String6concatEPKcj>
   b540e:	2800      	cmp	r0, #0
   b5410:	d0ee      	beq.n	b53f0 <_ZplRK15StringSumHelperPKc+0x6>
   b5412:	e7f0      	b.n	b53f6 <_ZplRK15StringSumHelperPKc+0xc>

000b5414 <_ZplRK15StringSumHelperl>:
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, long num)
{
   b5414:	b510      	push	{r4, lr}
   b5416:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
   b5418:	f7ff ffca 	bl	b53b0 <_ZN6String6concatEl>
   b541c:	b910      	cbnz	r0, b5424 <_ZplRK15StringSumHelperl+0x10>
   b541e:	4620      	mov	r0, r4
   b5420:	f7ff ff05 	bl	b522e <_ZN6String10invalidateEv>
	return a;
}
   b5424:	4620      	mov	r0, r4
   b5426:	bd10      	pop	{r4, pc}

000b5428 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b5428:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b542a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b542c:	4604      	mov	r4, r0
      if (_M_manager)
   b542e:	b113      	cbz	r3, b5436 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5430:	2203      	movs	r2, #3
   b5432:	4601      	mov	r1, r0
   b5434:	4798      	blx	r3
    }
   b5436:	4620      	mov	r0, r4
   b5438:	bd10      	pop	{r4, pc}

000b543a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b543a:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b543c:	6843      	ldr	r3, [r0, #4]
   b543e:	3b01      	subs	r3, #1
    {
   b5440:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b5442:	6043      	str	r3, [r0, #4]
   b5444:	b963      	cbnz	r3, b5460 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b5446:	6803      	ldr	r3, [r0, #0]
   b5448:	689b      	ldr	r3, [r3, #8]
   b544a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b544c:	68a3      	ldr	r3, [r4, #8]
   b544e:	3b01      	subs	r3, #1
   b5450:	60a3      	str	r3, [r4, #8]
   b5452:	b92b      	cbnz	r3, b5460 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b5454:	6823      	ldr	r3, [r4, #0]
   b5456:	4620      	mov	r0, r4
   b5458:	68db      	ldr	r3, [r3, #12]
    }
   b545a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b545e:	4718      	bx	r3
    }
   b5460:	bd10      	pop	{r4, pc}

000b5462 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b5462:	b510      	push	{r4, lr}
   b5464:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b5466:	6800      	ldr	r0, [r0, #0]
   b5468:	b108      	cbz	r0, b546e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b546a:	f7ff ffe6 	bl	b543a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b546e:	4620      	mov	r0, r4
   b5470:	bd10      	pop	{r4, pc}

000b5472 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b5472:	b513      	push	{r0, r1, r4, lr}
   b5474:	460b      	mov	r3, r1
   b5476:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5478:	e9d0 0100 	ldrd	r0, r1, [r0]
   b547c:	466c      	mov	r4, sp
   b547e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5482:	e893 0003 	ldmia.w	r3, {r0, r1}
   b5486:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b548a:	e894 0003 	ldmia.w	r4, {r0, r1}
   b548e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b5492:	b002      	add	sp, #8
   b5494:	bd10      	pop	{r4, pc}
	...

000b5498 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5498:	4802      	ldr	r0, [pc, #8]	; (b54a4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b549a:	2300      	movs	r3, #0
   b549c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b549e:	f7ff bc2b 	b.w	b4cf8 <os_mutex_recursive_create>
   b54a2:	bf00      	nop
   b54a4:	2003e6dc 	.word	0x2003e6dc

000b54a8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b54a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b54aa:	4606      	mov	r6, r0
   b54ac:	460d      	mov	r5, r1
  size_t n = 0;
   b54ae:	188f      	adds	r7, r1, r2
   b54b0:	2400      	movs	r4, #0
  while (size--) {
   b54b2:	42bd      	cmp	r5, r7
   b54b4:	d00c      	beq.n	b54d0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b54b6:	6833      	ldr	r3, [r6, #0]
   b54b8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b54bc:	689b      	ldr	r3, [r3, #8]
   b54be:	4630      	mov	r0, r6
   b54c0:	4798      	blx	r3
     if (chunk>=0)
   b54c2:	1e03      	subs	r3, r0, #0
   b54c4:	db01      	blt.n	b54ca <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b54c6:	441c      	add	r4, r3
  while (size--) {
   b54c8:	e7f3      	b.n	b54b2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b54ca:	2c00      	cmp	r4, #0
   b54cc:	bf08      	it	eq
   b54ce:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b54d0:	4620      	mov	r0, r4
   b54d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b54d4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b54d4:	b513      	push	{r0, r1, r4, lr}
   b54d6:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b54d8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b54da:	b159      	cbz	r1, b54f4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b54dc:	9101      	str	r1, [sp, #4]
   b54de:	f000 ff94 	bl	b640a <strlen>
   b54e2:	6823      	ldr	r3, [r4, #0]
   b54e4:	9901      	ldr	r1, [sp, #4]
   b54e6:	68db      	ldr	r3, [r3, #12]
   b54e8:	4602      	mov	r2, r0
   b54ea:	4620      	mov	r0, r4
    }
   b54ec:	b002      	add	sp, #8
   b54ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b54f2:	4718      	bx	r3
    }
   b54f4:	b002      	add	sp, #8
   b54f6:	bd10      	pop	{r4, pc}

000b54f8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b54f8:	6803      	ldr	r3, [r0, #0]
   b54fa:	689b      	ldr	r3, [r3, #8]
   b54fc:	4718      	bx	r3

000b54fe <_ZN5Print5printEPK19__FlashStringHelper>:
   b54fe:	b508      	push	{r3, lr}
   b5500:	f7ff ffe8 	bl	b54d4 <_ZN5Print5writeEPKc>
   b5504:	bd08      	pop	{r3, pc}

000b5506 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5506:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5508:	210d      	movs	r1, #13
{
   b550a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b550c:	f7ff fff4 	bl	b54f8 <_ZN5Print5printEc>
  n += print('\n');
   b5510:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5512:	4604      	mov	r4, r0
  n += print('\n');
   b5514:	4628      	mov	r0, r5
   b5516:	f7ff ffef 	bl	b54f8 <_ZN5Print5printEc>
  return n;
}
   b551a:	4420      	add	r0, r4
   b551c:	bd38      	pop	{r3, r4, r5, pc}

000b551e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b551e:	b538      	push	{r3, r4, r5, lr}
   b5520:	4605      	mov	r5, r0
  return write(str);
   b5522:	f7ff ffd7 	bl	b54d4 <_ZN5Print5writeEPKc>
   b5526:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5528:	4628      	mov	r0, r5
   b552a:	f7ff ffec 	bl	b5506 <_ZN5Print7printlnEv>
  return n;
}
   b552e:	4420      	add	r0, r4
   b5530:	bd38      	pop	{r3, r4, r5, pc}

000b5532 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5532:	b530      	push	{r4, r5, lr}
   b5534:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5536:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5538:	2a01      	cmp	r2, #1
  *str = '\0';
   b553a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b553e:	bf98      	it	ls
   b5540:	220a      	movls	r2, #10
   b5542:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5544:	460d      	mov	r5, r1
   b5546:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b554a:	fb01 5312 	mls	r3, r1, r2, r5
   b554e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5552:	2b09      	cmp	r3, #9
   b5554:	bf94      	ite	ls
   b5556:	3330      	addls	r3, #48	; 0x30
   b5558:	3337      	addhi	r3, #55	; 0x37
   b555a:	b2db      	uxtb	r3, r3
  } while(n);
   b555c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b555e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5562:	d9ef      	bls.n	b5544 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5564:	4621      	mov	r1, r4
   b5566:	f7ff ffb5 	bl	b54d4 <_ZN5Print5writeEPKc>
}
   b556a:	b00b      	add	sp, #44	; 0x2c
   b556c:	bd30      	pop	{r4, r5, pc}
	...

000b5570 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5570:	4b01      	ldr	r3, [pc, #4]	; (b5578 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5572:	4a02      	ldr	r2, [pc, #8]	; (b557c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5574:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5576:	4770      	bx	lr
   b5578:	2003e6e0 	.word	0x2003e6e0
   b557c:	000b6628 	.word	0x000b6628

000b5580 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5580:	4b02      	ldr	r3, [pc, #8]	; (b558c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5582:	681a      	ldr	r2, [r3, #0]
   b5584:	4b02      	ldr	r3, [pc, #8]	; (b5590 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5586:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5588:	4770      	bx	lr
   b558a:	bf00      	nop
   b558c:	2003e144 	.word	0x2003e144
   b5590:	2003e6e4 	.word	0x2003e6e4

000b5594 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5594:	2100      	movs	r1, #0
   b5596:	f7ff bc87 	b.w	b4ea8 <system_delay_ms>
	...

000b559c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b559c:	4b01      	ldr	r3, [pc, #4]	; (b55a4 <_GLOBAL__sub_I_RGB+0x8>)
   b559e:	2200      	movs	r2, #0
   b55a0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b55a2:	4770      	bx	lr
   b55a4:	2003e6e8 	.word	0x2003e6e8

000b55a8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b55a8:	4b01      	ldr	r3, [pc, #4]	; (b55b0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b55aa:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b55ac:	4770      	bx	lr
   b55ae:	bf00      	nop
   b55b0:	2003e148 	.word	0x2003e148

000b55b4 <serialEventRun>:
{
   b55b4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b55b6:	4b0b      	ldr	r3, [pc, #44]	; (b55e4 <serialEventRun+0x30>)
   b55b8:	b143      	cbz	r3, b55cc <serialEventRun+0x18>
   b55ba:	f000 fbff 	bl	b5dbc <_Z16_fetch_usbserialv>
   b55be:	6803      	ldr	r3, [r0, #0]
   b55c0:	691b      	ldr	r3, [r3, #16]
   b55c2:	4798      	blx	r3
   b55c4:	2800      	cmp	r0, #0
   b55c6:	dd01      	ble.n	b55cc <serialEventRun+0x18>
        serialEvent();
   b55c8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b55cc:	4b06      	ldr	r3, [pc, #24]	; (b55e8 <serialEventRun+0x34>)
   b55ce:	b143      	cbz	r3, b55e2 <serialEventRun+0x2e>
   b55d0:	f000 fe14 	bl	b61fc <_Z22__fetch_global_Serial1v>
   b55d4:	6803      	ldr	r3, [r0, #0]
   b55d6:	691b      	ldr	r3, [r3, #16]
   b55d8:	4798      	blx	r3
   b55da:	2800      	cmp	r0, #0
   b55dc:	dd01      	ble.n	b55e2 <serialEventRun+0x2e>
        serialEvent1();
   b55de:	f3af 8000 	nop.w
}
   b55e2:	bd08      	pop	{r3, pc}
	...

000b55ec <_post_loop>:
{
   b55ec:	b508      	push	{r3, lr}
	serialEventRun();
   b55ee:	f7ff ffe1 	bl	b55b4 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b55f2:	f7ff fb79 	bl	b4ce8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b55f6:	4b01      	ldr	r3, [pc, #4]	; (b55fc <_post_loop+0x10>)
   b55f8:	6018      	str	r0, [r3, #0]
}
   b55fa:	bd08      	pop	{r3, pc}
   b55fc:	2003e740 	.word	0x2003e740

000b5600 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5600:	4805      	ldr	r0, [pc, #20]	; (b5618 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5602:	4a06      	ldr	r2, [pc, #24]	; (b561c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5604:	4906      	ldr	r1, [pc, #24]	; (b5620 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5606:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5608:	1a12      	subs	r2, r2, r0
   b560a:	f000 fe7a 	bl	b6302 <memcpy>
    __backup_sram_signature = signature;
   b560e:	4b05      	ldr	r3, [pc, #20]	; (b5624 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5610:	4a05      	ldr	r2, [pc, #20]	; (b5628 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5612:	601a      	str	r2, [r3, #0]
}
   b5614:	bd08      	pop	{r3, pc}
   b5616:	bf00      	nop
   b5618:	2003f400 	.word	0x2003f400
   b561c:	2003f404 	.word	0x2003f404
   b5620:	000b6864 	.word	0x000b6864
   b5624:	2003f400 	.word	0x2003f400
   b5628:	9a271c1e 	.word	0x9a271c1e

000b562c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b562c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b562e:	2300      	movs	r3, #0
   b5630:	9300      	str	r3, [sp, #0]
   b5632:	461a      	mov	r2, r3
   b5634:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5638:	f7ff fc58 	bl	b4eec <system_ctrl_set_result>
}
   b563c:	b003      	add	sp, #12
   b563e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5644 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5644:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5646:	8843      	ldrh	r3, [r0, #2]
   b5648:	2b0a      	cmp	r3, #10
   b564a:	d008      	beq.n	b565e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b564c:	2b50      	cmp	r3, #80	; 0x50
   b564e:	d10b      	bne.n	b5668 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5650:	4b09      	ldr	r3, [pc, #36]	; (b5678 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5652:	681b      	ldr	r3, [r3, #0]
   b5654:	b14b      	cbz	r3, b566a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5656:	b003      	add	sp, #12
   b5658:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b565c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b565e:	f7ff ffe5 	bl	b562c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5662:	b003      	add	sp, #12
   b5664:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5668:	2300      	movs	r3, #0
   b566a:	9300      	str	r3, [sp, #0]
   b566c:	461a      	mov	r2, r3
   b566e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5672:	f7ff fc3b 	bl	b4eec <system_ctrl_set_result>
}
   b5676:	e7f4      	b.n	b5662 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5678:	2003e6fc 	.word	0x2003e6fc

000b567c <module_user_init_hook>:
{
   b567c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b567e:	4812      	ldr	r0, [pc, #72]	; (b56c8 <module_user_init_hook+0x4c>)
   b5680:	2100      	movs	r1, #0
   b5682:	f7ff fce5 	bl	b5050 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5686:	4b11      	ldr	r3, [pc, #68]	; (b56cc <module_user_init_hook+0x50>)
   b5688:	681a      	ldr	r2, [r3, #0]
   b568a:	4b11      	ldr	r3, [pc, #68]	; (b56d0 <module_user_init_hook+0x54>)
   b568c:	429a      	cmp	r2, r3
   b568e:	4b11      	ldr	r3, [pc, #68]	; (b56d4 <module_user_init_hook+0x58>)
   b5690:	bf0c      	ite	eq
   b5692:	2201      	moveq	r2, #1
   b5694:	2200      	movne	r2, #0
   b5696:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5698:	d001      	beq.n	b569e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b569a:	f7ff ffb1 	bl	b5600 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b569e:	f7ff fb1b 	bl	b4cd8 <HAL_RNG_GetRandomNumber>
   b56a2:	4604      	mov	r4, r0
    srand(seed);
   b56a4:	f000 fe5e 	bl	b6364 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b56a8:	4b0b      	ldr	r3, [pc, #44]	; (b56d8 <module_user_init_hook+0x5c>)
   b56aa:	b113      	cbz	r3, b56b2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b56ac:	4620      	mov	r0, r4
   b56ae:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b56b2:	2100      	movs	r1, #0
   b56b4:	4808      	ldr	r0, [pc, #32]	; (b56d8 <module_user_init_hook+0x5c>)
   b56b6:	f7ff fc93 	bl	b4fe0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b56ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b56be:	4807      	ldr	r0, [pc, #28]	; (b56dc <module_user_init_hook+0x60>)
   b56c0:	2100      	movs	r1, #0
   b56c2:	f7ff bc09 	b.w	b4ed8 <system_ctrl_set_app_request_handler>
   b56c6:	bf00      	nop
   b56c8:	000b55a9 	.word	0x000b55a9
   b56cc:	2003f400 	.word	0x2003f400
   b56d0:	9a271c1e 	.word	0x9a271c1e
   b56d4:	2003e6f8 	.word	0x2003e6f8
   b56d8:	00000000 	.word	0x00000000
   b56dc:	000b5645 	.word	0x000b5645

000b56e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b56e0:	4770      	bx	lr

000b56e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b56e2:	2000      	movs	r0, #0
   b56e4:	4770      	bx	lr

000b56e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b56e6:	b510      	push	{r4, lr}
   b56e8:	2110      	movs	r1, #16
   b56ea:	4604      	mov	r4, r0
   b56ec:	f7fe fcd5 	bl	b409a <_ZdlPvj>
   b56f0:	4620      	mov	r0, r4
   b56f2:	bd10      	pop	{r4, pc}

000b56f4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b56f4:	b508      	push	{r3, lr}
      { delete this; }
   b56f6:	f7ff fff6 	bl	b56e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b56fa:	bd08      	pop	{r3, pc}

000b56fc <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b56fc:	b530      	push	{r4, r5, lr}
        type_(type) {
   b56fe:	2200      	movs	r2, #0
   b5700:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b5704:	6002      	str	r2, [r0, #0]
   b5706:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5708:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b570a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b570c:	680c      	ldr	r4, [r1, #0]
   b570e:	8085      	strh	r5, [r0, #4]
   b5710:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5712:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b5714:	bd30      	pop	{r4, r5, pc}

000b5716 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b5716:	b510      	push	{r4, lr}
   b5718:	4604      	mov	r4, r0
    free((void*)msg_);
   b571a:	6800      	ldr	r0, [r0, #0]
   b571c:	f7ff fc70 	bl	b5000 <free>
}
   b5720:	4620      	mov	r0, r4
   b5722:	bd10      	pop	{r4, pc}

000b5724 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5724:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b5726:	68c4      	ldr	r4, [r0, #12]
   b5728:	b1f4      	cbz	r4, b5768 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b572a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b572c:	2b02      	cmp	r3, #2
   b572e:	d103      	bne.n	b5738 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b5730:	f104 000c 	add.w	r0, r4, #12
   b5734:	f7ff ffef 	bl	b5716 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b5738:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b573a:	b135      	cbz	r5, b574a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b573c:	4628      	mov	r0, r5
   b573e:	f7ff fe73 	bl	b5428 <_ZNSt14_Function_baseD1Ev>
   b5742:	2110      	movs	r1, #16
   b5744:	4628      	mov	r0, r5
   b5746:	f7fe fca8 	bl	b409a <_ZdlPvj>
   b574a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b574c:	b135      	cbz	r5, b575c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b574e:	4628      	mov	r0, r5
   b5750:	f7ff fe6a 	bl	b5428 <_ZNSt14_Function_baseD1Ev>
   b5754:	2110      	movs	r1, #16
   b5756:	4628      	mov	r0, r5
   b5758:	f7fe fc9f 	bl	b409a <_ZdlPvj>
   b575c:	4620      	mov	r0, r4
   b575e:	2114      	movs	r1, #20
   b5760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5764:	f7fe bc99 	b.w	b409a <_ZdlPvj>
   b5768:	bd38      	pop	{r3, r4, r5, pc}

000b576a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b576a:	680b      	ldr	r3, [r1, #0]
   b576c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b576e:	684b      	ldr	r3, [r1, #4]
   b5770:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b5772:	b113      	cbz	r3, b577a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b5774:	685a      	ldr	r2, [r3, #4]
   b5776:	3201      	adds	r2, #1
   b5778:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b577a:	4770      	bx	lr

000b577c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b577c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b577e:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5780:	4668      	mov	r0, sp
   b5782:	460d      	mov	r5, r1
   b5784:	f7ff fff1 	bl	b576a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5788:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b578a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b578c:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b578e:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b5790:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5792:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b5794:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b5796:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b5798:	f7ff fe63 	bl	b5462 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b579c:	b135      	cbz	r5, b57ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b579e:	1d28      	adds	r0, r5, #4
   b57a0:	f7ff fe5f 	bl	b5462 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b57a4:	2108      	movs	r1, #8
   b57a6:	4628      	mov	r0, r5
   b57a8:	f7fe fc77 	bl	b409a <_ZdlPvj>
        return p;
    }
   b57ac:	4620      	mov	r0, r4
   b57ae:	b003      	add	sp, #12
   b57b0:	bd30      	pop	{r4, r5, pc}

000b57b2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b57b2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b57b4:	b510      	push	{r4, lr}
      if (_M_empty())
   b57b6:	b90a      	cbnz	r2, b57bc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b57b8:	f000 fd86 	bl	b62c8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b57bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b57c0:	68c3      	ldr	r3, [r0, #12]
   b57c2:	4718      	bx	r3

000b57c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b57c4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b57c6:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b57c8:	f100 0110 	add.w	r1, r0, #16
   b57cc:	f7ff fff1 	bl	b57b2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b57d0:	bd08      	pop	{r3, pc}

000b57d2 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b57d2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b57d4:	b510      	push	{r4, lr}
      if (_M_empty())
   b57d6:	b90a      	cbnz	r2, b57dc <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b57d8:	f000 fd76 	bl	b62c8 <_ZSt25__throw_bad_function_callv>
    }
   b57dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b57e0:	68c3      	ldr	r3, [r0, #12]
   b57e2:	4718      	bx	r3

000b57e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b57e4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b57e6:	6800      	ldr	r0, [r0, #0]
   b57e8:	f100 0110 	add.w	r1, r0, #16
   b57ec:	f7ff fff1 	bl	b57d2 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b57f0:	bd08      	pop	{r3, pc}
	...

000b57f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b57f4:	b538      	push	{r3, r4, r5, lr}
   b57f6:	2300      	movs	r3, #0
   b57f8:	4604      	mov	r4, r0
   b57fa:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b57fc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b57fe:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5800:	f7fe fc47 	bl	b4092 <_Znwj>
   b5804:	b128      	cbz	r0, b5812 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b5806:	2301      	movs	r3, #1
   b5808:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b580c:	4b02      	ldr	r3, [pc, #8]	; (b5818 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b580e:	6003      	str	r3, [r0, #0]
   b5810:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5812:	6020      	str	r0, [r4, #0]
	}
   b5814:	4620      	mov	r0, r4
   b5816:	bd38      	pop	{r3, r4, r5, pc}
   b5818:	000b6650 	.word	0x000b6650

000b581c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b581c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b581e:	2300      	movs	r3, #0
   b5820:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5822:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5824:	4604      	mov	r4, r0
   b5826:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5828:	b12b      	cbz	r3, b5836 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b582a:	2202      	movs	r2, #2
   b582c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b582e:	68eb      	ldr	r3, [r5, #12]
   b5830:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5832:	68ab      	ldr	r3, [r5, #8]
   b5834:	60a3      	str	r3, [r4, #8]
    }
   b5836:	4620      	mov	r0, r4
   b5838:	bd38      	pop	{r3, r4, r5, pc}
	...

000b583c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b583c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b583e:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5840:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b5842:	4668      	mov	r0, sp
   b5844:	f7ff ff5a 	bl	b56fc <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5848:	f04f 0302 	mov.w	r3, #2
   b584c:	e8d4 2f4f 	ldrexb	r2, [r4]
   b5850:	2a00      	cmp	r2, #0
   b5852:	d103      	bne.n	b585c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b5854:	e8c4 3f41 	strexb	r1, r3, [r4]
   b5858:	2900      	cmp	r1, #0
   b585a:	d1f7      	bne.n	b584c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b585c:	d125      	bne.n	b58aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b585e:	f104 050c 	add.w	r5, r4, #12
   b5862:	4669      	mov	r1, sp
   b5864:	4628      	mov	r0, r5
   b5866:	f7ff ff49 	bl	b56fc <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b586a:	f3bf 8f5b 	dmb	ish
   b586e:	2301      	movs	r3, #1
   b5870:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5872:	2000      	movs	r0, #0
   b5874:	f104 0308 	add.w	r3, r4, #8
   b5878:	f3bf 8f5b 	dmb	ish
   b587c:	e853 6f00 	ldrex	r6, [r3]
   b5880:	e843 0200 	strex	r2, r0, [r3]
   b5884:	2a00      	cmp	r2, #0
   b5886:	d1f9      	bne.n	b587c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b5888:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b588c:	b16e      	cbz	r6, b58aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b588e:	f7ff fb13 	bl	b4eb8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5892:	b178      	cbz	r0, b58b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5894:	4629      	mov	r1, r5
   b5896:	4630      	mov	r0, r6
   b5898:	f7ff ff8b 	bl	b57b2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b589c:	4630      	mov	r0, r6
   b589e:	f7ff fdc3 	bl	b5428 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b58a2:	2110      	movs	r1, #16
   b58a4:	4630      	mov	r0, r6
   b58a6:	f7fe fbf8 	bl	b409a <_ZdlPvj>
        p_->setError(std::move(error));
   b58aa:	4668      	mov	r0, sp
   b58ac:	f7ff ff33 	bl	b5716 <_ZN8particle5ErrorD1Ev>
    }
   b58b0:	b009      	add	sp, #36	; 0x24
   b58b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b58b4:	4631      	mov	r1, r6
   b58b6:	a802      	add	r0, sp, #8
   b58b8:	f7ff ffb0 	bl	b581c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b58bc:	68e0      	ldr	r0, [r4, #12]
   b58be:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b58c2:	b108      	cbz	r0, b58c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b58c4:	f000 fd84 	bl	b63d0 <strdup>
        type_(type) {
   b58c8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b58ca:	2010      	movs	r0, #16
   b58cc:	f8ad 501c 	strh.w	r5, [sp, #28]
   b58d0:	f7fe fbdf 	bl	b4092 <_Znwj>
   b58d4:	4605      	mov	r5, r0
   b58d6:	b1e8      	cbz	r0, b5914 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b58d8:	2700      	movs	r7, #0
   b58da:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b58dc:	2018      	movs	r0, #24
   b58de:	f7fe fbd8 	bl	b4092 <_Znwj>
   b58e2:	4604      	mov	r4, r0
   b58e4:	b188      	cbz	r0, b590a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b58e6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b58e8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b58ea:	a802      	add	r0, sp, #8
   b58ec:	f7ff fdc1 	bl	b5472 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b58f0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b58f2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b58f4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b58f6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b58f8:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b58fa:	a906      	add	r1, sp, #24
   b58fc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b58fe:	60e3      	str	r3, [r4, #12]
   b5900:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b5904:	9205      	str	r2, [sp, #20]
   b5906:	f7ff fef9 	bl	b56fc <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b590a:	4b08      	ldr	r3, [pc, #32]	; (b592c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b590c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b590e:	4b08      	ldr	r3, [pc, #32]	; (b5930 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5910:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5912:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b5914:	a806      	add	r0, sp, #24
   b5916:	f7ff fefe 	bl	b5716 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b591a:	a802      	add	r0, sp, #8
   b591c:	f7ff fd84 	bl	b5428 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5920:	2200      	movs	r2, #0
   b5922:	4629      	mov	r1, r5
   b5924:	4803      	ldr	r0, [pc, #12]	; (b5934 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b5926:	f7ff facf 	bl	b4ec8 <application_thread_invoke>
   b592a:	e7b7      	b.n	b589c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b592c:	000b57c5 	.word	0x000b57c5
   b5930:	000b5a49 	.word	0x000b5a49
   b5934:	000b5ead 	.word	0x000b5ead

000b5938 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b5938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b593c:	b08b      	sub	sp, #44	; 0x2c
   b593e:	4605      	mov	r5, r0
   b5940:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b5944:	460f      	mov	r7, r1
   b5946:	4690      	mov	r8, r2
   b5948:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b594a:	f7ff fb39 	bl	b4fc0 <spark_cloud_flag_connected>
   b594e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b5950:	4683      	mov	fp, r0
   b5952:	bb38      	cbnz	r0, b59a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b5954:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b5958:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b595a:	a905      	add	r1, sp, #20
   b595c:	4630      	mov	r0, r6
   b595e:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5962:	f7ff fecb 	bl	b56fc <_ZN8particle5ErrorC1EOS0_>
   b5966:	2014      	movs	r0, #20
   b5968:	f7fe fb93 	bl	b4092 <_Znwj>
   b596c:	4604      	mov	r4, r0
   b596e:	b148      	cbz	r0, b5984 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b5970:	2302      	movs	r3, #2
   b5972:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5974:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5976:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b597a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b597c:	4631      	mov	r1, r6
   b597e:	300c      	adds	r0, #12
   b5980:	f7ff febc 	bl	b56fc <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5984:	4628      	mov	r0, r5
	: __shared_count(__p)
   b5986:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5988:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b598c:	f7ff ff32 	bl	b57f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5990:	4630      	mov	r0, r6
   b5992:	f7ff fec0 	bl	b5716 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b5996:	a805      	add	r0, sp, #20
   b5998:	f7ff febd 	bl	b5716 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b599c:	4628      	mov	r0, r5
   b599e:	b00b      	add	sp, #44	; 0x2c
   b59a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b59a4:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b59a6:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b59a8:	2014      	movs	r0, #20
   b59aa:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b59ae:	9307      	str	r3, [sp, #28]
   b59b0:	f7fe fb6f 	bl	b4092 <_Znwj>
   b59b4:	4601      	mov	r1, r0
   b59b6:	b118      	cbz	r0, b59c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b59b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b59bc:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b59be:	7044      	strb	r4, [r0, #1]
   b59c0:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b59c2:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b59c4:	f7ff ff16 	bl	b57f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b59c8:	4b1e      	ldr	r3, [pc, #120]	; (b5a44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b59ca:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b59cc:	2008      	movs	r0, #8
   b59ce:	f7fe fb60 	bl	b4092 <_Znwj>
   b59d2:	4604      	mov	r4, r0
   b59d4:	b110      	cbz	r0, b59dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b59d6:	a903      	add	r1, sp, #12
   b59d8:	f7ff fec7 	bl	b576a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b59dc:	9600      	str	r6, [sp, #0]
   b59de:	fa5f f38a 	uxtb.w	r3, sl
   b59e2:	464a      	mov	r2, r9
   b59e4:	4641      	mov	r1, r8
   b59e6:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b59e8:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b59ea:	f7ff faf1 	bl	b4fd0 <spark_send_event>
   b59ee:	b9b8      	cbnz	r0, b5a20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b59f0:	9b03      	ldr	r3, [sp, #12]
   b59f2:	785b      	ldrb	r3, [r3, #1]
   b59f4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b59f8:	b993      	cbnz	r3, b5a20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b59fa:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b59fe:	a905      	add	r1, sp, #20
   b5a00:	a803      	add	r0, sp, #12
   b5a02:	9205      	str	r2, [sp, #20]
   b5a04:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5a08:	f7ff ff18 	bl	b583c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5a0c:	a805      	add	r0, sp, #20
   b5a0e:	f7ff fe82 	bl	b5716 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b5a12:	a805      	add	r0, sp, #20
   b5a14:	9909      	ldr	r1, [sp, #36]	; 0x24
   b5a16:	f7ff feb1 	bl	b577c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b5a1a:	a806      	add	r0, sp, #24
   b5a1c:	f7ff fd21 	bl	b5462 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5a20:	a903      	add	r1, sp, #12
   b5a22:	a805      	add	r0, sp, #20
   b5a24:	f7ff fea1 	bl	b576a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5a28:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5a2a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5a2c:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b5a2e:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b5a30:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5a32:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b5a34:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b5a36:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b5a38:	f7ff fd13 	bl	b5462 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5a3c:	a804      	add	r0, sp, #16
   b5a3e:	f7ff fd10 	bl	b5462 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b5a42:	e7ab      	b.n	b599c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b5a44:	000b5ac5 	.word	0x000b5ac5

000b5a48 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b5a48:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5a4c:	4605      	mov	r5, r0
	switch (__op)
   b5a4e:	d103      	bne.n	b5a58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5a50:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5a52:	6003      	str	r3, [r0, #0]
      }
   b5a54:	2000      	movs	r0, #0
   b5a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b5a58:	2a02      	cmp	r2, #2
   b5a5a:	d010      	beq.n	b5a7e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b5a5c:	2a03      	cmp	r2, #3
   b5a5e:	d1f9      	bne.n	b5a54 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5a60:	6804      	ldr	r4, [r0, #0]
   b5a62:	2c00      	cmp	r4, #0
   b5a64:	d0f6      	beq.n	b5a54 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b5a66:	f104 0010 	add.w	r0, r4, #16
   b5a6a:	f7ff fe54 	bl	b5716 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b5a6e:	4620      	mov	r0, r4
   b5a70:	f7ff fcda 	bl	b5428 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5a74:	2118      	movs	r1, #24
   b5a76:	4620      	mov	r0, r4
   b5a78:	f7fe fb0f 	bl	b409a <_ZdlPvj>
   b5a7c:	e7ea      	b.n	b5a54 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5a7e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b5a80:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5a82:	f7fe fb06 	bl	b4092 <_Znwj>
   b5a86:	4604      	mov	r4, r0
   b5a88:	b150      	cbz	r0, b5aa0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b5a8a:	4631      	mov	r1, r6
   b5a8c:	f7ff fec6 	bl	b581c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5a90:	6930      	ldr	r0, [r6, #16]
   b5a92:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5a96:	b108      	cbz	r0, b5a9c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b5a98:	f000 fc9a 	bl	b63d0 <strdup>
        type_(type) {
   b5a9c:	6120      	str	r0, [r4, #16]
   b5a9e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b5aa0:	602c      	str	r4, [r5, #0]
	}
   b5aa2:	e7d7      	b.n	b5a54 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b5aa4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b5aa4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5aa6:	2300      	movs	r3, #0
   b5aa8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5aaa:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5aac:	4604      	mov	r4, r0
   b5aae:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5ab0:	b12b      	cbz	r3, b5abe <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5ab2:	2202      	movs	r2, #2
   b5ab4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5ab6:	68eb      	ldr	r3, [r5, #12]
   b5ab8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5aba:	68ab      	ldr	r3, [r5, #8]
   b5abc:	60a3      	str	r3, [r4, #8]
    }
   b5abe:	4620      	mov	r0, r4
   b5ac0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5ac4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b5ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5ac6:	b089      	sub	sp, #36	; 0x24
   b5ac8:	4604      	mov	r4, r0
   b5aca:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b5acc:	a801      	add	r0, sp, #4
   b5ace:	4611      	mov	r1, r2
   b5ad0:	f7ff fe54 	bl	b577c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b5ad4:	b1a4      	cbz	r4, b5b00 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b5ad6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5ad8:	b11d      	cbz	r5, b5ae2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b5ada:	4628      	mov	r0, r5
   b5adc:	f000 fc78 	bl	b63d0 <strdup>
   b5ae0:	4605      	mov	r5, r0
   b5ae2:	a801      	add	r0, sp, #4
   b5ae4:	a903      	add	r1, sp, #12
        type_(type) {
   b5ae6:	9503      	str	r5, [sp, #12]
   b5ae8:	f8ad 4010 	strh.w	r4, [sp, #16]
   b5aec:	f7ff fea6 	bl	b583c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5af0:	a803      	add	r0, sp, #12
   b5af2:	f7ff fe10 	bl	b5716 <_ZN8particle5ErrorD1Ev>
   b5af6:	a802      	add	r0, sp, #8
   b5af8:	f7ff fcb3 	bl	b5462 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5afc:	b009      	add	sp, #36	; 0x24
   b5afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b5b00:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5b02:	2301      	movs	r3, #1
   b5b04:	e8d5 2f4f 	ldrexb	r2, [r5]
   b5b08:	2a00      	cmp	r2, #0
   b5b0a:	d103      	bne.n	b5b14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b5b0c:	e8c5 3f41 	strexb	r1, r3, [r5]
   b5b10:	2900      	cmp	r1, #0
   b5b12:	d1f7      	bne.n	b5b04 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b5b14:	d1ef      	bne.n	b5af6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b5b16:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b5b18:	f3bf 8f5b 	dmb	ish
   b5b1c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5b1e:	1d2b      	adds	r3, r5, #4
   b5b20:	f3bf 8f5b 	dmb	ish
   b5b24:	e853 6f00 	ldrex	r6, [r3]
   b5b28:	e843 4200 	strex	r2, r4, [r3]
   b5b2c:	2a00      	cmp	r2, #0
   b5b2e:	d1f9      	bne.n	b5b24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b5b30:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5b34:	2e00      	cmp	r6, #0
   b5b36:	d0de      	beq.n	b5af6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b5b38:	4620      	mov	r0, r4
   b5b3a:	f7ff f9bd 	bl	b4eb8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5b3e:	4607      	mov	r7, r0
   b5b40:	b160      	cbz	r0, b5b5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5b42:	f105 010c 	add.w	r1, r5, #12
   b5b46:	4630      	mov	r0, r6
   b5b48:	f7ff fe43 	bl	b57d2 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b5b4c:	4630      	mov	r0, r6
   b5b4e:	f7ff fc6b 	bl	b5428 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5b52:	2110      	movs	r1, #16
   b5b54:	4630      	mov	r0, r6
   b5b56:	f7fe faa0 	bl	b409a <_ZdlPvj>
   b5b5a:	e7cc      	b.n	b5af6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5b5c:	4631      	mov	r1, r6
   b5b5e:	a803      	add	r0, sp, #12
   b5b60:	f7ff ffa0 	bl	b5aa4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5b64:	7b2b      	ldrb	r3, [r5, #12]
   b5b66:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5b6a:	2010      	movs	r0, #16
   b5b6c:	f7fe fa91 	bl	b4092 <_Znwj>
   b5b70:	4605      	mov	r5, r0
   b5b72:	b1d0      	cbz	r0, b5baa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b5b74:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5b76:	2014      	movs	r0, #20
   b5b78:	f7fe fa8b 	bl	b4092 <_Znwj>
   b5b7c:	4604      	mov	r4, r0
   b5b7e:	b178      	cbz	r0, b5ba0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b5b80:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5b82:	4601      	mov	r1, r0
   b5b84:	a803      	add	r0, sp, #12
   b5b86:	f7ff fc74 	bl	b5472 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5b8a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5b8c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5b8e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5b90:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b5b92:	9205      	str	r2, [sp, #20]
   b5b94:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5b96:	60e3      	str	r3, [r4, #12]
   b5b98:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b5b9c:	9206      	str	r2, [sp, #24]
   b5b9e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b5ba0:	4b06      	ldr	r3, [pc, #24]	; (b5bbc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b5ba2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5ba4:	4b06      	ldr	r3, [pc, #24]	; (b5bc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5ba6:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5ba8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b5baa:	a803      	add	r0, sp, #12
   b5bac:	f7ff fc3c 	bl	b5428 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5bb0:	2200      	movs	r2, #0
   b5bb2:	4629      	mov	r1, r5
   b5bb4:	4803      	ldr	r0, [pc, #12]	; (b5bc4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b5bb6:	f7ff f987 	bl	b4ec8 <application_thread_invoke>
   b5bba:	e7c7      	b.n	b5b4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b5bbc:	000b57e5 	.word	0x000b57e5
   b5bc0:	000b5bc9 	.word	0x000b5bc9
   b5bc4:	000b5ead 	.word	0x000b5ead

000b5bc8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b5bc8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5bca:	b570      	push	{r4, r5, r6, lr}
   b5bcc:	4604      	mov	r4, r0
	switch (__op)
   b5bce:	d103      	bne.n	b5bd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5bd0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5bd2:	6003      	str	r3, [r0, #0]
      }
   b5bd4:	2000      	movs	r0, #0
   b5bd6:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b5bd8:	2a02      	cmp	r2, #2
   b5bda:	d00c      	beq.n	b5bf6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b5bdc:	2a03      	cmp	r2, #3
   b5bde:	d1f9      	bne.n	b5bd4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5be0:	6804      	ldr	r4, [r0, #0]
   b5be2:	2c00      	cmp	r4, #0
   b5be4:	d0f6      	beq.n	b5bd4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b5be6:	4620      	mov	r0, r4
   b5be8:	f7ff fc1e 	bl	b5428 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5bec:	2114      	movs	r1, #20
   b5bee:	4620      	mov	r0, r4
   b5bf0:	f7fe fa53 	bl	b409a <_ZdlPvj>
   b5bf4:	e7ee      	b.n	b5bd4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5bf6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b5bf8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5bfa:	f7fe fa4a 	bl	b4092 <_Znwj>
   b5bfe:	4605      	mov	r5, r0
   b5c00:	b120      	cbz	r0, b5c0c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b5c02:	4631      	mov	r1, r6
   b5c04:	f7ff ff4e 	bl	b5aa4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b5c08:	7c33      	ldrb	r3, [r6, #16]
   b5c0a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b5c0c:	6025      	str	r5, [r4, #0]
	}
   b5c0e:	e7e1      	b.n	b5bd4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b5c10 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5c10:	4770      	bx	lr

000b5c12 <_ZN9IPAddressD0Ev>:
   b5c12:	b510      	push	{r4, lr}
   b5c14:	2118      	movs	r1, #24
   b5c16:	4604      	mov	r4, r0
   b5c18:	f7fe fa3f 	bl	b409a <_ZdlPvj>
   b5c1c:	4620      	mov	r0, r4
   b5c1e:	bd10      	pop	{r4, pc}

000b5c20 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5c20:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5c22:	7d03      	ldrb	r3, [r0, #20]
   b5c24:	2b06      	cmp	r3, #6
{
   b5c26:	b08d      	sub	sp, #52	; 0x34
   b5c28:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5c2a:	f100 0704 	add.w	r7, r0, #4
   b5c2e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5c32:	d012      	beq.n	b5c5a <_ZNK9IPAddress7printToER5Print+0x3a>
   b5c34:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5c38:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5c3c:	220a      	movs	r2, #10
   b5c3e:	4630      	mov	r0, r6
   b5c40:	f7ff fc77 	bl	b5532 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5c44:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5c46:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5c48:	d019      	beq.n	b5c7e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5c4a:	2c00      	cmp	r4, #0
   b5c4c:	d0f4      	beq.n	b5c38 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5c4e:	212e      	movs	r1, #46	; 0x2e
   b5c50:	4630      	mov	r0, r6
   b5c52:	f7ff fc51 	bl	b54f8 <_ZN5Print5printEc>
   b5c56:	4404      	add	r4, r0
   b5c58:	e7ee      	b.n	b5c38 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5c5a:	232f      	movs	r3, #47	; 0x2f
   b5c5c:	466a      	mov	r2, sp
   b5c5e:	4639      	mov	r1, r7
   b5c60:	200a      	movs	r0, #10
		buf[0] = 0;
   b5c62:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5c66:	f7ff f84f 	bl	b4d08 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5c6a:	4668      	mov	r0, sp
   b5c6c:	f000 fbcd 	bl	b640a <strlen>
   b5c70:	6833      	ldr	r3, [r6, #0]
   b5c72:	4602      	mov	r2, r0
   b5c74:	68db      	ldr	r3, [r3, #12]
   b5c76:	4669      	mov	r1, sp
   b5c78:	4630      	mov	r0, r6
   b5c7a:	4798      	blx	r3
   b5c7c:	4604      	mov	r4, r0
    }
    return n;
}
   b5c7e:	4620      	mov	r0, r4
   b5c80:	b00d      	add	sp, #52	; 0x34
   b5c82:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5c84 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5c84:	b510      	push	{r4, lr}
   b5c86:	4b05      	ldr	r3, [pc, #20]	; (b5c9c <_ZN9IPAddressC1Ev+0x18>)
   b5c88:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5c8a:	2211      	movs	r2, #17
   b5c8c:	f840 3b04 	str.w	r3, [r0], #4
   b5c90:	2100      	movs	r1, #0
   b5c92:	f000 fb5e 	bl	b6352 <memset>
}
   b5c96:	4620      	mov	r0, r4
   b5c98:	bd10      	pop	{r4, pc}
   b5c9a:	bf00      	nop
   b5c9c:	000b666c 	.word	0x000b666c

000b5ca0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5ca0:	4603      	mov	r3, r0
   b5ca2:	4a07      	ldr	r2, [pc, #28]	; (b5cc0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5ca4:	b510      	push	{r4, lr}
   b5ca6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5caa:	f101 0210 	add.w	r2, r1, #16
   b5cae:	f851 4b04 	ldr.w	r4, [r1], #4
   b5cb2:	f843 4b04 	str.w	r4, [r3], #4
   b5cb6:	4291      	cmp	r1, r2
   b5cb8:	d1f9      	bne.n	b5cae <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5cba:	780a      	ldrb	r2, [r1, #0]
   b5cbc:	701a      	strb	r2, [r3, #0]
}
   b5cbe:	bd10      	pop	{r4, pc}
   b5cc0:	000b666c 	.word	0x000b666c

000b5cc4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5cc4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5cc6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5cca:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5cce:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5cd2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5cd6:	2304      	movs	r3, #4
   b5cd8:	6041      	str	r1, [r0, #4]
   b5cda:	7503      	strb	r3, [r0, #20]
}
   b5cdc:	bd10      	pop	{r4, pc}
	...

000b5ce0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5ce0:	b507      	push	{r0, r1, r2, lr}
   b5ce2:	4b06      	ldr	r3, [pc, #24]	; (b5cfc <_ZN9IPAddressC1EPKh+0x1c>)
   b5ce4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5ce6:	78cb      	ldrb	r3, [r1, #3]
   b5ce8:	9300      	str	r3, [sp, #0]
   b5cea:	788b      	ldrb	r3, [r1, #2]
   b5cec:	784a      	ldrb	r2, [r1, #1]
   b5cee:	7809      	ldrb	r1, [r1, #0]
   b5cf0:	f7ff ffe8 	bl	b5cc4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5cf4:	b003      	add	sp, #12
   b5cf6:	f85d fb04 	ldr.w	pc, [sp], #4
   b5cfa:	bf00      	nop
   b5cfc:	000b666c 	.word	0x000b666c

000b5d00 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5d00:	7441      	strb	r1, [r0, #17]
}
   b5d02:	4770      	bx	lr

000b5d04 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5d04:	4770      	bx	lr

000b5d06 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5d06:	4770      	bx	lr

000b5d08 <_ZN9USBSerial4readEv>:
{
   b5d08:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5d0a:	2100      	movs	r1, #0
   b5d0c:	7c00      	ldrb	r0, [r0, #16]
   b5d0e:	f7ff f8ab 	bl	b4e68 <HAL_USB_USART_Receive_Data>
}
   b5d12:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5d16:	bd08      	pop	{r3, pc}

000b5d18 <_ZN9USBSerial4peekEv>:
{
   b5d18:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5d1a:	2101      	movs	r1, #1
   b5d1c:	7c00      	ldrb	r0, [r0, #16]
   b5d1e:	f7ff f8a3 	bl	b4e68 <HAL_USB_USART_Receive_Data>
}
   b5d22:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5d26:	bd08      	pop	{r3, pc}

000b5d28 <_ZN9USBSerial17availableForWriteEv>:
{
   b5d28:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5d2a:	7c00      	ldrb	r0, [r0, #16]
   b5d2c:	f7ff f894 	bl	b4e58 <HAL_USB_USART_Available_Data_For_Write>
}
   b5d30:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5d34:	bd08      	pop	{r3, pc}

000b5d36 <_ZN9USBSerial9availableEv>:
{
   b5d36:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5d38:	7c00      	ldrb	r0, [r0, #16]
   b5d3a:	f7ff f885 	bl	b4e48 <HAL_USB_USART_Available_Data>
}
   b5d3e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5d42:	bd08      	pop	{r3, pc}

000b5d44 <_ZN9USBSerial5writeEh>:
{
   b5d44:	b513      	push	{r0, r1, r4, lr}
   b5d46:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5d48:	7c00      	ldrb	r0, [r0, #16]
{
   b5d4a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5d4c:	f7ff f884 	bl	b4e58 <HAL_USB_USART_Available_Data_For_Write>
   b5d50:	2800      	cmp	r0, #0
   b5d52:	9901      	ldr	r1, [sp, #4]
   b5d54:	dc01      	bgt.n	b5d5a <_ZN9USBSerial5writeEh+0x16>
   b5d56:	7c60      	ldrb	r0, [r4, #17]
   b5d58:	b120      	cbz	r0, b5d64 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5d5a:	7c20      	ldrb	r0, [r4, #16]
   b5d5c:	f7ff f88c 	bl	b4e78 <HAL_USB_USART_Send_Data>
   b5d60:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5d64:	b002      	add	sp, #8
   b5d66:	bd10      	pop	{r4, pc}

000b5d68 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5d68:	7c00      	ldrb	r0, [r0, #16]
   b5d6a:	f7ff b88d 	b.w	b4e88 <HAL_USB_USART_Flush_Data>

000b5d6e <_ZN9USBSerialD0Ev>:
   b5d6e:	b510      	push	{r4, lr}
   b5d70:	2114      	movs	r1, #20
   b5d72:	4604      	mov	r4, r0
   b5d74:	f7fe f991 	bl	b409a <_ZdlPvj>
   b5d78:	4620      	mov	r0, r4
   b5d7a:	bd10      	pop	{r4, pc}

000b5d7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5d7c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5d82:	4604      	mov	r4, r0
   b5d84:	4608      	mov	r0, r1
   b5d86:	2100      	movs	r1, #0
   b5d88:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5d8c:	4b04      	ldr	r3, [pc, #16]	; (b5da0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5d8e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5d90:	2301      	movs	r3, #1
  _serial = serial;
   b5d92:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5d94:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5d96:	4611      	mov	r1, r2
   b5d98:	f7ff f846 	bl	b4e28 <HAL_USB_USART_Init>
}
   b5d9c:	4620      	mov	r0, r4
   b5d9e:	bd10      	pop	{r4, pc}
   b5da0:	000b6680 	.word	0x000b6680

000b5da4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5da4:	7c00      	ldrb	r0, [r0, #16]
   b5da6:	2200      	movs	r2, #0
   b5da8:	f7ff b846 	b.w	b4e38 <HAL_USB_USART_Begin>

000b5dac <_Z19acquireSerialBufferv>:
{
   b5dac:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5dae:	2214      	movs	r2, #20
{
   b5db0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5db2:	2100      	movs	r1, #0
   b5db4:	f000 facd 	bl	b6352 <memset>
}
   b5db8:	4620      	mov	r0, r4
   b5dba:	bd10      	pop	{r4, pc}

000b5dbc <_Z16_fetch_usbserialv>:
{
   b5dbc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5dbe:	4c0f      	ldr	r4, [pc, #60]	; (b5dfc <_Z16_fetch_usbserialv+0x40>)
{
   b5dc0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5dc2:	a803      	add	r0, sp, #12
   b5dc4:	f7ff fff2 	bl	b5dac <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5dc8:	7821      	ldrb	r1, [r4, #0]
   b5dca:	f3bf 8f5b 	dmb	ish
   b5dce:	f011 0101 	ands.w	r1, r1, #1
   b5dd2:	d10f      	bne.n	b5df4 <_Z16_fetch_usbserialv+0x38>
   b5dd4:	4620      	mov	r0, r4
   b5dd6:	9101      	str	r1, [sp, #4]
   b5dd8:	f7fe f961 	bl	b409e <__cxa_guard_acquire>
   b5ddc:	9901      	ldr	r1, [sp, #4]
   b5dde:	b148      	cbz	r0, b5df4 <_Z16_fetch_usbserialv+0x38>
   b5de0:	aa03      	add	r2, sp, #12
   b5de2:	4807      	ldr	r0, [pc, #28]	; (b5e00 <_Z16_fetch_usbserialv+0x44>)
   b5de4:	f7ff ffca 	bl	b5d7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5de8:	4620      	mov	r0, r4
   b5dea:	f7fe f95d 	bl	b40a8 <__cxa_guard_release>
   b5dee:	4805      	ldr	r0, [pc, #20]	; (b5e04 <_Z16_fetch_usbserialv+0x48>)
   b5df0:	f000 fa6d 	bl	b62ce <atexit>
	return _usbserial;
}
   b5df4:	4802      	ldr	r0, [pc, #8]	; (b5e00 <_Z16_fetch_usbserialv+0x44>)
   b5df6:	b008      	add	sp, #32
   b5df8:	bd10      	pop	{r4, pc}
   b5dfa:	bf00      	nop
   b5dfc:	2003e700 	.word	0x2003e700
   b5e00:	2003e704 	.word	0x2003e704
   b5e04:	000b5d05 	.word	0x000b5d05

000b5e08 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5e08:	4770      	bx	lr

000b5e0a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5e0a:	7441      	strb	r1, [r0, #17]
}
   b5e0c:	4770      	bx	lr

000b5e0e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5e0e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5e10:	7c00      	ldrb	r0, [r0, #16]
   b5e12:	f7fe ffa9 	bl	b4d68 <hal_usart_available_data_for_write>
}
   b5e16:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5e1a:	bd08      	pop	{r3, pc}

000b5e1c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5e1c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5e1e:	7c00      	ldrb	r0, [r0, #16]
   b5e20:	f7fe ff82 	bl	b4d28 <hal_usart_available>
}
   b5e24:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5e28:	bd08      	pop	{r3, pc}

000b5e2a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5e2a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5e2c:	7c00      	ldrb	r0, [r0, #16]
   b5e2e:	f7fe ff8b 	bl	b4d48 <hal_usart_peek>
}
   b5e32:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5e36:	bd08      	pop	{r3, pc}

000b5e38 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5e38:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5e3a:	7c00      	ldrb	r0, [r0, #16]
   b5e3c:	f7fe ff7c 	bl	b4d38 <hal_usart_read>
}
   b5e40:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5e44:	bd08      	pop	{r3, pc}

000b5e46 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5e46:	7c00      	ldrb	r0, [r0, #16]
   b5e48:	f7fe bf86 	b.w	b4d58 <hal_usart_flush>

000b5e4c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5e4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5e4e:	7c45      	ldrb	r5, [r0, #17]
{
   b5e50:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5e52:	b12d      	cbz	r5, b5e60 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5e54:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5e56:	b003      	add	sp, #12
   b5e58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5e5c:	f7fe bf5c 	b.w	b4d18 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5e60:	7c00      	ldrb	r0, [r0, #16]
   b5e62:	9101      	str	r1, [sp, #4]
   b5e64:	f7fe ff80 	bl	b4d68 <hal_usart_available_data_for_write>
   b5e68:	2800      	cmp	r0, #0
   b5e6a:	9901      	ldr	r1, [sp, #4]
   b5e6c:	dcf2      	bgt.n	b5e54 <_ZN11USARTSerial5writeEh+0x8>
}
   b5e6e:	4628      	mov	r0, r5
   b5e70:	b003      	add	sp, #12
   b5e72:	bd30      	pop	{r4, r5, pc}

000b5e74 <_ZN11USARTSerialD0Ev>:
   b5e74:	b510      	push	{r4, lr}
   b5e76:	2114      	movs	r1, #20
   b5e78:	4604      	mov	r4, r0
   b5e7a:	f7fe f90e 	bl	b409a <_ZdlPvj>
   b5e7e:	4620      	mov	r0, r4
   b5e80:	bd10      	pop	{r4, pc}
	...

000b5e84 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5e84:	b510      	push	{r4, lr}
   b5e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5e8a:	4604      	mov	r4, r0
   b5e8c:	4608      	mov	r0, r1
   b5e8e:	4611      	mov	r1, r2
   b5e90:	2200      	movs	r2, #0
   b5e92:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5e96:	4b04      	ldr	r3, [pc, #16]	; (b5ea8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5e98:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5e9a:	2301      	movs	r3, #1
  _serial = serial;
   b5e9c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5e9e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5ea0:	f7fe ff6a 	bl	b4d78 <hal_usart_init_ex>
}
   b5ea4:	4620      	mov	r0, r4
   b5ea6:	bd10      	pop	{r4, pc}
   b5ea8:	000b66b0 	.word	0x000b66b0

000b5eac <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b5eac:	b510      	push	{r4, lr}
      if (_M_empty())
   b5eae:	6883      	ldr	r3, [r0, #8]
   b5eb0:	4604      	mov	r4, r0
   b5eb2:	b90b      	cbnz	r3, b5eb8 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b5eb4:	f000 fa08 	bl	b62c8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5eb8:	68c3      	ldr	r3, [r0, #12]
   b5eba:	4798      	blx	r3
      if (_M_manager)
   b5ebc:	68a3      	ldr	r3, [r4, #8]
   b5ebe:	b11b      	cbz	r3, b5ec8 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5ec0:	2203      	movs	r2, #3
   b5ec2:	4621      	mov	r1, r4
   b5ec4:	4620      	mov	r0, r4
   b5ec6:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b5ec8:	4620      	mov	r0, r4
   b5eca:	2110      	movs	r1, #16
}
   b5ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b5ed0:	f7fe b8e3 	b.w	b409a <_ZdlPvj>

000b5ed4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5ed4:	4770      	bx	lr

000b5ed6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5ed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5ed8:	4606      	mov	r6, r0
   b5eda:	4615      	mov	r5, r2
   b5edc:	460c      	mov	r4, r1
   b5ede:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5ee0:	42bc      	cmp	r4, r7
   b5ee2:	d006      	beq.n	b5ef2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5ee4:	6833      	ldr	r3, [r6, #0]
   b5ee6:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5eea:	689b      	ldr	r3, [r3, #8]
   b5eec:	4630      	mov	r0, r6
   b5eee:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5ef0:	e7f6      	b.n	b5ee0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5ef2:	4628      	mov	r0, r5
   b5ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5ef6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5ef6:	7c00      	ldrb	r0, [r0, #16]
   b5ef8:	2200      	movs	r2, #0
   b5efa:	f7fe bf5d 	b.w	b4db8 <hal_i2c_write>

000b5efe <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5efe:	7c00      	ldrb	r0, [r0, #16]
   b5f00:	2100      	movs	r1, #0
   b5f02:	f7fe bf61 	b.w	b4dc8 <hal_i2c_available>

000b5f06 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5f06:	7c00      	ldrb	r0, [r0, #16]
   b5f08:	2100      	movs	r1, #0
   b5f0a:	f7fe bf65 	b.w	b4dd8 <hal_i2c_read>

000b5f0e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5f0e:	7c00      	ldrb	r0, [r0, #16]
   b5f10:	2100      	movs	r1, #0
   b5f12:	f7fe bf69 	b.w	b4de8 <hal_i2c_peek>

000b5f16 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5f16:	7c00      	ldrb	r0, [r0, #16]
   b5f18:	2100      	movs	r1, #0
   b5f1a:	f7fe bf6d 	b.w	b4df8 <hal_i2c_flush>

000b5f1e <_ZN7TwoWireD0Ev>:
   b5f1e:	b510      	push	{r4, lr}
   b5f20:	2114      	movs	r1, #20
   b5f22:	4604      	mov	r4, r0
   b5f24:	f7fe f8b9 	bl	b409a <_ZdlPvj>
   b5f28:	4620      	mov	r0, r4
   b5f2a:	bd10      	pop	{r4, pc}

000b5f2c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5f2c:	b538      	push	{r3, r4, r5, lr}
   b5f2e:	4604      	mov	r4, r0
   b5f30:	4615      	mov	r5, r2
   b5f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5f36:	2200      	movs	r2, #0
   b5f38:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5f3c:	4b09      	ldr	r3, [pc, #36]	; (b5f64 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b5f3e:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5f40:	4608      	mov	r0, r1
   b5f42:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b5f44:	4629      	mov	r1, r5
   b5f46:	f7fe ff5f 	bl	b4e08 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5f4a:	30bf      	adds	r0, #191	; 0xbf
   b5f4c:	d108      	bne.n	b5f60 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b5f4e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5f50:	07db      	lsls	r3, r3, #31
   b5f52:	d505      	bpl.n	b5f60 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b5f54:	6868      	ldr	r0, [r5, #4]
   b5f56:	f7ff f853 	bl	b5000 <free>
    free(conf.tx_buffer);
   b5f5a:	68e8      	ldr	r0, [r5, #12]
   b5f5c:	f7ff f850 	bl	b5000 <free>
}
   b5f60:	4620      	mov	r0, r4
   b5f62:	bd38      	pop	{r3, r4, r5, pc}
   b5f64:	000b66e0 	.word	0x000b66e0

000b5f68 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b5f68:	2300      	movs	r3, #0
   b5f6a:	7c00      	ldrb	r0, [r0, #16]
   b5f6c:	461a      	mov	r2, r3
   b5f6e:	4619      	mov	r1, r3
   b5f70:	f7fe bf0a 	b.w	b4d88 <hal_i2c_begin>

000b5f74 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b5f74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b5f76:	2200      	movs	r2, #0
   b5f78:	2314      	movs	r3, #20
   b5f7a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b5f7e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b5f82:	780b      	ldrb	r3, [r1, #0]
   b5f84:	f88d 3008 	strb.w	r3, [sp, #8]
   b5f88:	684b      	ldr	r3, [r1, #4]
   b5f8a:	9303      	str	r3, [sp, #12]
   b5f8c:	68cb      	ldr	r3, [r1, #12]
   b5f8e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b5f90:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b5f92:	7a0b      	ldrb	r3, [r1, #8]
   b5f94:	9305      	str	r3, [sp, #20]
   b5f96:	a901      	add	r1, sp, #4
   b5f98:	f7fe ff3e 	bl	b4e18 <hal_i2c_request_ex>
}
   b5f9c:	b007      	add	sp, #28
   b5f9e:	f85d fb04 	ldr.w	pc, [sp], #4

000b5fa2 <_ZN7TwoWire11requestFromEhjh>:
{
   b5fa2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b5fa4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b5fa6:	f88d 1000 	strb.w	r1, [sp]
   b5faa:	f04f 0164 	mov.w	r1, #100	; 0x64
   b5fae:	9103      	str	r1, [sp, #12]
   b5fb0:	bf18      	it	ne
   b5fb2:	2301      	movne	r3, #1
   b5fb4:	4669      	mov	r1, sp
    size_ = size;
   b5fb6:	9201      	str	r2, [sp, #4]
   b5fb8:	f88d 3008 	strb.w	r3, [sp, #8]
   b5fbc:	f7ff ffda 	bl	b5f74 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b5fc0:	b005      	add	sp, #20
   b5fc2:	f85d fb04 	ldr.w	pc, [sp], #4

000b5fc6 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b5fc6:	2301      	movs	r3, #1
   b5fc8:	f7ff bfeb 	b.w	b5fa2 <_ZN7TwoWire11requestFromEhjh>

000b5fcc <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b5fcc:	7c00      	ldrb	r0, [r0, #16]
   b5fce:	2200      	movs	r2, #0
   b5fd0:	f7fe bee2 	b.w	b4d98 <hal_i2c_begin_transmission>

000b5fd4 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b5fd4:	7c00      	ldrb	r0, [r0, #16]
   b5fd6:	2200      	movs	r2, #0
   b5fd8:	f7fe bee6 	b.w	b4da8 <hal_i2c_end_transmission>

000b5fdc <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b5fdc:	2101      	movs	r1, #1
   b5fde:	f7ff bff9 	b.w	b5fd4 <_ZN7TwoWire15endTransmissionEh>

000b5fe2 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5fe2:	2200      	movs	r2, #0
   b5fe4:	6840      	ldr	r0, [r0, #4]
   b5fe6:	4611      	mov	r1, r2
   b5fe8:	f7fe bfa2 	b.w	b4f30 <network_ready>

000b5fec <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5fec:	2200      	movs	r2, #0
   b5fee:	6840      	ldr	r0, [r0, #4]
   b5ff0:	4611      	mov	r1, r2
   b5ff2:	f7fe bfbd 	b.w	b4f70 <network_listening>

000b5ff6 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5ff6:	2200      	movs	r2, #0
   b5ff8:	6840      	ldr	r0, [r0, #4]
   b5ffa:	4611      	mov	r1, r2
   b5ffc:	f7fe bfc8 	b.w	b4f90 <network_get_listen_timeout>

000b6000 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6000:	6840      	ldr	r0, [r0, #4]
   b6002:	2200      	movs	r2, #0
   b6004:	f7fe bfbc 	b.w	b4f80 <network_set_listen_timeout>

000b6008 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6008:	6840      	ldr	r0, [r0, #4]
   b600a:	2200      	movs	r2, #0
   b600c:	f081 0101 	eor.w	r1, r1, #1
   b6010:	f7fe bfa6 	b.w	b4f60 <network_listen>

000b6014 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6014:	2300      	movs	r3, #0
   b6016:	6840      	ldr	r0, [r0, #4]
   b6018:	461a      	mov	r2, r3
   b601a:	4619      	mov	r1, r3
   b601c:	f7fe bf98 	b.w	b4f50 <network_off>

000b6020 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6020:	2300      	movs	r3, #0
   b6022:	6840      	ldr	r0, [r0, #4]
   b6024:	461a      	mov	r2, r3
   b6026:	4619      	mov	r1, r3
   b6028:	f7fe bf8a 	b.w	b4f40 <network_on>

000b602c <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b602c:	2200      	movs	r2, #0
   b602e:	6840      	ldr	r0, [r0, #4]
   b6030:	4611      	mov	r1, r2
   b6032:	f7fe bf6d 	b.w	b4f10 <network_connecting>

000b6036 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6036:	6840      	ldr	r0, [r0, #4]
   b6038:	2200      	movs	r2, #0
   b603a:	2102      	movs	r1, #2
   b603c:	f7fe bf70 	b.w	b4f20 <network_disconnect>

000b6040 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6040:	2300      	movs	r3, #0
   b6042:	6840      	ldr	r0, [r0, #4]
   b6044:	461a      	mov	r2, r3
   b6046:	f7fe bf5b 	b.w	b4f00 <network_connect>
	...

000b604c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b604c:	4b02      	ldr	r3, [pc, #8]	; (b6058 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b604e:	2204      	movs	r2, #4
   b6050:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6052:	4a02      	ldr	r2, [pc, #8]	; (b605c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6054:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6056:	4770      	bx	lr
   b6058:	2003e718 	.word	0x2003e718
   b605c:	000b6708 	.word	0x000b6708

000b6060 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6060:	2300      	movs	r3, #0
   b6062:	6840      	ldr	r0, [r0, #4]
   b6064:	461a      	mov	r2, r3
   b6066:	f7fe bf4b 	b.w	b4f00 <network_connect>

000b606a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b606a:	6840      	ldr	r0, [r0, #4]
   b606c:	2200      	movs	r2, #0
   b606e:	2102      	movs	r1, #2
   b6070:	f7fe bf56 	b.w	b4f20 <network_disconnect>

000b6074 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6074:	2200      	movs	r2, #0
   b6076:	6840      	ldr	r0, [r0, #4]
   b6078:	4611      	mov	r1, r2
   b607a:	f7fe bf49 	b.w	b4f10 <network_connecting>

000b607e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b607e:	2200      	movs	r2, #0
   b6080:	6840      	ldr	r0, [r0, #4]
   b6082:	4611      	mov	r1, r2
   b6084:	f7fe bf54 	b.w	b4f30 <network_ready>

000b6088 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6088:	2300      	movs	r3, #0
   b608a:	6840      	ldr	r0, [r0, #4]
   b608c:	461a      	mov	r2, r3
   b608e:	4619      	mov	r1, r3
   b6090:	f7fe bf56 	b.w	b4f40 <network_on>

000b6094 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6094:	2300      	movs	r3, #0
   b6096:	6840      	ldr	r0, [r0, #4]
   b6098:	461a      	mov	r2, r3
   b609a:	4619      	mov	r1, r3
   b609c:	f7fe bf58 	b.w	b4f50 <network_off>

000b60a0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b60a0:	6840      	ldr	r0, [r0, #4]
   b60a2:	2100      	movs	r1, #0
   b60a4:	f7fe bf7c 	b.w	b4fa0 <network_is_on>

000b60a8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b60a8:	6840      	ldr	r0, [r0, #4]
   b60aa:	2100      	movs	r1, #0
   b60ac:	f7fe bf80 	b.w	b4fb0 <network_is_off>

000b60b0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b60b0:	6840      	ldr	r0, [r0, #4]
   b60b2:	2200      	movs	r2, #0
   b60b4:	f081 0101 	eor.w	r1, r1, #1
   b60b8:	f7fe bf52 	b.w	b4f60 <network_listen>

000b60bc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b60bc:	6840      	ldr	r0, [r0, #4]
   b60be:	2200      	movs	r2, #0
   b60c0:	f7fe bf5e 	b.w	b4f80 <network_set_listen_timeout>

000b60c4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b60c4:	2200      	movs	r2, #0
   b60c6:	6840      	ldr	r0, [r0, #4]
   b60c8:	4611      	mov	r1, r2
   b60ca:	f7fe bf61 	b.w	b4f90 <network_get_listen_timeout>

000b60ce <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b60ce:	2200      	movs	r2, #0
   b60d0:	6840      	ldr	r0, [r0, #4]
   b60d2:	4611      	mov	r1, r2
   b60d4:	f7fe bf4c 	b.w	b4f70 <network_listening>

000b60d8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b60d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b60dc:	b095      	sub	sp, #84	; 0x54
   b60de:	4614      	mov	r4, r2
   b60e0:	460d      	mov	r5, r1
   b60e2:	4607      	mov	r7, r0
    IPAddress addr;
   b60e4:	f7ff fdce 	bl	b5c84 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b60e8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b60ea:	221c      	movs	r2, #28
   b60ec:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b60ee:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b60f0:	f000 f92f 	bl	b6352 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b60f4:	2340      	movs	r3, #64	; 0x40
   b60f6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b60f8:	4620      	mov	r0, r4
   b60fa:	466b      	mov	r3, sp
   b60fc:	aa0c      	add	r2, sp, #48	; 0x30
   b60fe:	2100      	movs	r1, #0
   b6100:	f7fe fde2 	bl	b4cc8 <netdb_getaddrinfo>
    if (!r) {
   b6104:	4604      	mov	r4, r0
   b6106:	2800      	cmp	r0, #0
   b6108:	d14b      	bne.n	b61a2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b610a:	4602      	mov	r2, r0
   b610c:	2101      	movs	r1, #1
   b610e:	6868      	ldr	r0, [r5, #4]
   b6110:	f7fe ff0e 	bl	b4f30 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6114:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6116:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6118:	4622      	mov	r2, r4
   b611a:	6868      	ldr	r0, [r5, #4]
   b611c:	f7fe ff08 	bl	b4f30 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6120:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6122:	4681      	mov	r9, r0
        bool ok = false;
   b6124:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6126:	2e00      	cmp	r6, #0
   b6128:	d03b      	beq.n	b61a2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b612a:	2900      	cmp	r1, #0
   b612c:	d139      	bne.n	b61a2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b612e:	6873      	ldr	r3, [r6, #4]
   b6130:	2b02      	cmp	r3, #2
   b6132:	d003      	beq.n	b613c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6134:	2b0a      	cmp	r3, #10
   b6136:	d011      	beq.n	b615c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6138:	69f6      	ldr	r6, [r6, #28]
   b613a:	e7f4      	b.n	b6126 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b613c:	f1b8 0f00 	cmp.w	r8, #0
   b6140:	d0fa      	beq.n	b6138 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6142:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6144:	a806      	add	r0, sp, #24
   b6146:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6148:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b614a:	f7ff fdc9 	bl	b5ce0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b614e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6150:	1d3c      	adds	r4, r7, #4
   b6152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6154:	682b      	ldr	r3, [r5, #0]
   b6156:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6158:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b615a:	e7ed      	b.n	b6138 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b615c:	f1b9 0f00 	cmp.w	r9, #0
   b6160:	d0ea      	beq.n	b6138 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6162:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6164:	2210      	movs	r2, #16
   b6166:	a801      	add	r0, sp, #4
   b6168:	f000 f8f3 	bl	b6352 <memset>
                    a.v = 6;
   b616c:	2306      	movs	r3, #6
   b616e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6172:	ad01      	add	r5, sp, #4
   b6174:	f104 0308 	add.w	r3, r4, #8
   b6178:	3418      	adds	r4, #24
   b617a:	6818      	ldr	r0, [r3, #0]
   b617c:	6859      	ldr	r1, [r3, #4]
   b617e:	462a      	mov	r2, r5
   b6180:	c203      	stmia	r2!, {r0, r1}
   b6182:	3308      	adds	r3, #8
   b6184:	42a3      	cmp	r3, r4
   b6186:	4615      	mov	r5, r2
   b6188:	d1f7      	bne.n	b617a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b618a:	a901      	add	r1, sp, #4
   b618c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b618e:	ad07      	add	r5, sp, #28
   b6190:	f7ff fd86 	bl	b5ca0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6196:	1d3c      	adds	r4, r7, #4
   b6198:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b619a:	682b      	ldr	r3, [r5, #0]
   b619c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b619e:	4649      	mov	r1, r9
   b61a0:	e7ca      	b.n	b6138 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b61a2:	9800      	ldr	r0, [sp, #0]
   b61a4:	f7fe fd88 	bl	b4cb8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b61a8:	4638      	mov	r0, r7
   b61aa:	b015      	add	sp, #84	; 0x54
   b61ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b61b0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b61b0:	4b02      	ldr	r3, [pc, #8]	; (b61bc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b61b2:	4a03      	ldr	r2, [pc, #12]	; (b61c0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b61b4:	601a      	str	r2, [r3, #0]
   b61b6:	2200      	movs	r2, #0
   b61b8:	605a      	str	r2, [r3, #4]

} // spark
   b61ba:	4770      	bx	lr
   b61bc:	2003e720 	.word	0x2003e720
   b61c0:	000b6744 	.word	0x000b6744

000b61c4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b61c4:	4770      	bx	lr
	...

000b61c8 <_Z20acquireSerial1Bufferv>:
{
   b61c8:	b538      	push	{r3, r4, r5, lr}
   b61ca:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b61cc:	2514      	movs	r5, #20
   b61ce:	462a      	mov	r2, r5
   b61d0:	2100      	movs	r1, #0
   b61d2:	f000 f8be 	bl	b6352 <memset>
   b61d6:	8025      	strh	r5, [r4, #0]
   b61d8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b61da:	4907      	ldr	r1, [pc, #28]	; (b61f8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b61dc:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b61de:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b61e0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b61e2:	f000 f86f 	bl	b62c4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b61e6:	4904      	ldr	r1, [pc, #16]	; (b61f8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b61e8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b61ea:	4628      	mov	r0, r5
   b61ec:	f000 f86a 	bl	b62c4 <_ZnajRKSt9nothrow_t>
    };
   b61f0:	60e0      	str	r0, [r4, #12]
}
   b61f2:	4620      	mov	r0, r4
   b61f4:	bd38      	pop	{r3, r4, r5, pc}
   b61f6:	bf00      	nop
   b61f8:	000b6778 	.word	0x000b6778

000b61fc <_Z22__fetch_global_Serial1v>:
{
   b61fc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b61fe:	4d0e      	ldr	r5, [pc, #56]	; (b6238 <_Z22__fetch_global_Serial1v+0x3c>)
   b6200:	7829      	ldrb	r1, [r5, #0]
   b6202:	f3bf 8f5b 	dmb	ish
   b6206:	f011 0401 	ands.w	r4, r1, #1
{
   b620a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b620c:	d111      	bne.n	b6232 <_Z22__fetch_global_Serial1v+0x36>
   b620e:	4628      	mov	r0, r5
   b6210:	f7fd ff45 	bl	b409e <__cxa_guard_acquire>
   b6214:	b168      	cbz	r0, b6232 <_Z22__fetch_global_Serial1v+0x36>
   b6216:	a801      	add	r0, sp, #4
   b6218:	f7ff ffd6 	bl	b61c8 <_Z20acquireSerial1Bufferv>
   b621c:	aa01      	add	r2, sp, #4
   b621e:	4621      	mov	r1, r4
   b6220:	4806      	ldr	r0, [pc, #24]	; (b623c <_Z22__fetch_global_Serial1v+0x40>)
   b6222:	f7ff fe2f 	bl	b5e84 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6226:	4628      	mov	r0, r5
   b6228:	f7fd ff3e 	bl	b40a8 <__cxa_guard_release>
   b622c:	4804      	ldr	r0, [pc, #16]	; (b6240 <_Z22__fetch_global_Serial1v+0x44>)
   b622e:	f000 f84e 	bl	b62ce <atexit>
    return serial1;
}
   b6232:	4802      	ldr	r0, [pc, #8]	; (b623c <_Z22__fetch_global_Serial1v+0x40>)
   b6234:	b007      	add	sp, #28
   b6236:	bd30      	pop	{r4, r5, pc}
   b6238:	2003e728 	.word	0x2003e728
   b623c:	2003e72c 	.word	0x2003e72c
   b6240:	000b61c5 	.word	0x000b61c5

000b6244 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6244:	4770      	bx	lr
	...

000b6248 <_Z17acquireWireBufferv>:
{
   b6248:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b624a:	4b0a      	ldr	r3, [pc, #40]	; (b6274 <_Z17acquireWireBufferv+0x2c>)
   b624c:	6003      	str	r3, [r0, #0]
   b624e:	2301      	movs	r3, #1
{
   b6250:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6252:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6254:	4908      	ldr	r1, [pc, #32]	; (b6278 <_Z17acquireWireBufferv+0x30>)
   b6256:	2020      	movs	r0, #32
   b6258:	f000 f834 	bl	b62c4 <_ZnajRKSt9nothrow_t>
	};
   b625c:	2520      	movs	r5, #32
   b625e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6260:	4905      	ldr	r1, [pc, #20]	; (b6278 <_Z17acquireWireBufferv+0x30>)
	};
   b6262:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6264:	4628      	mov	r0, r5
   b6266:	f000 f82d 	bl	b62c4 <_ZnajRKSt9nothrow_t>
	};
   b626a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b626e:	4620      	mov	r0, r4
   b6270:	bd38      	pop	{r3, r4, r5, pc}
   b6272:	bf00      	nop
   b6274:	00010018 	.word	0x00010018
   b6278:	000b6778 	.word	0x000b6778

000b627c <_Z19__fetch_global_Wirev>:
{
   b627c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b627e:	4d0e      	ldr	r5, [pc, #56]	; (b62b8 <_Z19__fetch_global_Wirev+0x3c>)
   b6280:	7829      	ldrb	r1, [r5, #0]
   b6282:	f3bf 8f5b 	dmb	ish
   b6286:	f011 0401 	ands.w	r4, r1, #1
{
   b628a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b628c:	d111      	bne.n	b62b2 <_Z19__fetch_global_Wirev+0x36>
   b628e:	4628      	mov	r0, r5
   b6290:	f7fd ff05 	bl	b409e <__cxa_guard_acquire>
   b6294:	b168      	cbz	r0, b62b2 <_Z19__fetch_global_Wirev+0x36>
   b6296:	4668      	mov	r0, sp
   b6298:	f7ff ffd6 	bl	b6248 <_Z17acquireWireBufferv>
   b629c:	466a      	mov	r2, sp
   b629e:	4621      	mov	r1, r4
   b62a0:	4806      	ldr	r0, [pc, #24]	; (b62bc <_Z19__fetch_global_Wirev+0x40>)
   b62a2:	f7ff fe43 	bl	b5f2c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b62a6:	4628      	mov	r0, r5
   b62a8:	f7fd fefe 	bl	b40a8 <__cxa_guard_release>
   b62ac:	4804      	ldr	r0, [pc, #16]	; (b62c0 <_Z19__fetch_global_Wirev+0x44>)
   b62ae:	f000 f80e 	bl	b62ce <atexit>
	return wire;
}
   b62b2:	4802      	ldr	r0, [pc, #8]	; (b62bc <_Z19__fetch_global_Wirev+0x40>)
   b62b4:	b007      	add	sp, #28
   b62b6:	bd30      	pop	{r4, r5, pc}
   b62b8:	2003e744 	.word	0x2003e744
   b62bc:	2003e748 	.word	0x2003e748
   b62c0:	000b6245 	.word	0x000b6245

000b62c4 <_ZnajRKSt9nothrow_t>:
   b62c4:	f7fd bee7 	b.w	b4096 <_Znaj>

000b62c8 <_ZSt25__throw_bad_function_callv>:
   b62c8:	b508      	push	{r3, lr}
   b62ca:	f7fe fea9 	bl	b5020 <abort>

000b62ce <atexit>:
   b62ce:	2300      	movs	r3, #0
   b62d0:	4601      	mov	r1, r0
   b62d2:	461a      	mov	r2, r3
   b62d4:	4618      	mov	r0, r3
   b62d6:	f000 b8a1 	b.w	b641c <__register_exitproc>

000b62da <ldiv>:
   b62da:	2900      	cmp	r1, #0
   b62dc:	b510      	push	{r4, lr}
   b62de:	fb91 f4f2 	sdiv	r4, r1, r2
   b62e2:	fb02 1314 	mls	r3, r2, r4, r1
   b62e6:	db06      	blt.n	b62f6 <ldiv+0x1c>
   b62e8:	2b00      	cmp	r3, #0
   b62ea:	da01      	bge.n	b62f0 <ldiv+0x16>
   b62ec:	3401      	adds	r4, #1
   b62ee:	1a9b      	subs	r3, r3, r2
   b62f0:	e9c0 4300 	strd	r4, r3, [r0]
   b62f4:	bd10      	pop	{r4, pc}
   b62f6:	2b00      	cmp	r3, #0
   b62f8:	bfc4      	itt	gt
   b62fa:	f104 34ff 	addgt.w	r4, r4, #4294967295
   b62fe:	189b      	addgt	r3, r3, r2
   b6300:	e7f6      	b.n	b62f0 <ldiv+0x16>

000b6302 <memcpy>:
   b6302:	440a      	add	r2, r1
   b6304:	4291      	cmp	r1, r2
   b6306:	f100 33ff 	add.w	r3, r0, #4294967295
   b630a:	d100      	bne.n	b630e <memcpy+0xc>
   b630c:	4770      	bx	lr
   b630e:	b510      	push	{r4, lr}
   b6310:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6314:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6318:	4291      	cmp	r1, r2
   b631a:	d1f9      	bne.n	b6310 <memcpy+0xe>
   b631c:	bd10      	pop	{r4, pc}

000b631e <memmove>:
   b631e:	4288      	cmp	r0, r1
   b6320:	b510      	push	{r4, lr}
   b6322:	eb01 0402 	add.w	r4, r1, r2
   b6326:	d902      	bls.n	b632e <memmove+0x10>
   b6328:	4284      	cmp	r4, r0
   b632a:	4623      	mov	r3, r4
   b632c:	d807      	bhi.n	b633e <memmove+0x20>
   b632e:	1e43      	subs	r3, r0, #1
   b6330:	42a1      	cmp	r1, r4
   b6332:	d008      	beq.n	b6346 <memmove+0x28>
   b6334:	f811 2b01 	ldrb.w	r2, [r1], #1
   b6338:	f803 2f01 	strb.w	r2, [r3, #1]!
   b633c:	e7f8      	b.n	b6330 <memmove+0x12>
   b633e:	4402      	add	r2, r0
   b6340:	4601      	mov	r1, r0
   b6342:	428a      	cmp	r2, r1
   b6344:	d100      	bne.n	b6348 <memmove+0x2a>
   b6346:	bd10      	pop	{r4, pc}
   b6348:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b634c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b6350:	e7f7      	b.n	b6342 <memmove+0x24>

000b6352 <memset>:
   b6352:	4402      	add	r2, r0
   b6354:	4603      	mov	r3, r0
   b6356:	4293      	cmp	r3, r2
   b6358:	d100      	bne.n	b635c <memset+0xa>
   b635a:	4770      	bx	lr
   b635c:	f803 1b01 	strb.w	r1, [r3], #1
   b6360:	e7f9      	b.n	b6356 <memset+0x4>
	...

000b6364 <srand>:
   b6364:	b538      	push	{r3, r4, r5, lr}
   b6366:	4b10      	ldr	r3, [pc, #64]	; (b63a8 <srand+0x44>)
   b6368:	681d      	ldr	r5, [r3, #0]
   b636a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b636c:	4604      	mov	r4, r0
   b636e:	b9b3      	cbnz	r3, b639e <srand+0x3a>
   b6370:	2018      	movs	r0, #24
   b6372:	f7fe fe3d 	bl	b4ff0 <malloc>
   b6376:	4602      	mov	r2, r0
   b6378:	63a8      	str	r0, [r5, #56]	; 0x38
   b637a:	b920      	cbnz	r0, b6386 <srand+0x22>
   b637c:	4b0b      	ldr	r3, [pc, #44]	; (b63ac <srand+0x48>)
   b637e:	480c      	ldr	r0, [pc, #48]	; (b63b0 <srand+0x4c>)
   b6380:	2142      	movs	r1, #66	; 0x42
   b6382:	f7fe fe5d 	bl	b5040 <__assert_func>
   b6386:	490b      	ldr	r1, [pc, #44]	; (b63b4 <srand+0x50>)
   b6388:	4b0b      	ldr	r3, [pc, #44]	; (b63b8 <srand+0x54>)
   b638a:	e9c0 1300 	strd	r1, r3, [r0]
   b638e:	4b0b      	ldr	r3, [pc, #44]	; (b63bc <srand+0x58>)
   b6390:	6083      	str	r3, [r0, #8]
   b6392:	230b      	movs	r3, #11
   b6394:	8183      	strh	r3, [r0, #12]
   b6396:	2100      	movs	r1, #0
   b6398:	2001      	movs	r0, #1
   b639a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b639e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b63a0:	2200      	movs	r2, #0
   b63a2:	611c      	str	r4, [r3, #16]
   b63a4:	615a      	str	r2, [r3, #20]
   b63a6:	bd38      	pop	{r3, r4, r5, pc}
   b63a8:	2003e148 	.word	0x2003e148
   b63ac:	000b6779 	.word	0x000b6779
   b63b0:	000b6790 	.word	0x000b6790
   b63b4:	abcd330e 	.word	0xabcd330e
   b63b8:	e66d1234 	.word	0xe66d1234
   b63bc:	0005deec 	.word	0x0005deec

000b63c0 <strcpy>:
   b63c0:	4603      	mov	r3, r0
   b63c2:	f811 2b01 	ldrb.w	r2, [r1], #1
   b63c6:	f803 2b01 	strb.w	r2, [r3], #1
   b63ca:	2a00      	cmp	r2, #0
   b63cc:	d1f9      	bne.n	b63c2 <strcpy+0x2>
   b63ce:	4770      	bx	lr

000b63d0 <strdup>:
   b63d0:	4b02      	ldr	r3, [pc, #8]	; (b63dc <strdup+0xc>)
   b63d2:	4601      	mov	r1, r0
   b63d4:	6818      	ldr	r0, [r3, #0]
   b63d6:	f000 b803 	b.w	b63e0 <_strdup_r>
   b63da:	bf00      	nop
   b63dc:	2003e148 	.word	0x2003e148

000b63e0 <_strdup_r>:
   b63e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b63e2:	4604      	mov	r4, r0
   b63e4:	4608      	mov	r0, r1
   b63e6:	460d      	mov	r5, r1
   b63e8:	f000 f80f 	bl	b640a <strlen>
   b63ec:	1c42      	adds	r2, r0, #1
   b63ee:	4611      	mov	r1, r2
   b63f0:	4620      	mov	r0, r4
   b63f2:	9201      	str	r2, [sp, #4]
   b63f4:	f7fe fe1c 	bl	b5030 <_malloc_r>
   b63f8:	4604      	mov	r4, r0
   b63fa:	b118      	cbz	r0, b6404 <_strdup_r+0x24>
   b63fc:	9a01      	ldr	r2, [sp, #4]
   b63fe:	4629      	mov	r1, r5
   b6400:	f7ff ff7f 	bl	b6302 <memcpy>
   b6404:	4620      	mov	r0, r4
   b6406:	b003      	add	sp, #12
   b6408:	bd30      	pop	{r4, r5, pc}

000b640a <strlen>:
   b640a:	4603      	mov	r3, r0
   b640c:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6410:	2a00      	cmp	r2, #0
   b6412:	d1fb      	bne.n	b640c <strlen+0x2>
   b6414:	1a18      	subs	r0, r3, r0
   b6416:	3801      	subs	r0, #1
   b6418:	4770      	bx	lr
	...

000b641c <__register_exitproc>:
   b641c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6420:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b64dc <__register_exitproc+0xc0>
   b6424:	4606      	mov	r6, r0
   b6426:	f8d8 0000 	ldr.w	r0, [r8]
   b642a:	461f      	mov	r7, r3
   b642c:	460d      	mov	r5, r1
   b642e:	4691      	mov	r9, r2
   b6430:	f000 f856 	bl	b64e0 <__retarget_lock_acquire_recursive>
   b6434:	4b25      	ldr	r3, [pc, #148]	; (b64cc <__register_exitproc+0xb0>)
   b6436:	681c      	ldr	r4, [r3, #0]
   b6438:	b934      	cbnz	r4, b6448 <__register_exitproc+0x2c>
   b643a:	4c25      	ldr	r4, [pc, #148]	; (b64d0 <__register_exitproc+0xb4>)
   b643c:	601c      	str	r4, [r3, #0]
   b643e:	4b25      	ldr	r3, [pc, #148]	; (b64d4 <__register_exitproc+0xb8>)
   b6440:	b113      	cbz	r3, b6448 <__register_exitproc+0x2c>
   b6442:	681b      	ldr	r3, [r3, #0]
   b6444:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6448:	6863      	ldr	r3, [r4, #4]
   b644a:	2b1f      	cmp	r3, #31
   b644c:	dd07      	ble.n	b645e <__register_exitproc+0x42>
   b644e:	f8d8 0000 	ldr.w	r0, [r8]
   b6452:	f000 f847 	bl	b64e4 <__retarget_lock_release_recursive>
   b6456:	f04f 30ff 	mov.w	r0, #4294967295
   b645a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b645e:	b34e      	cbz	r6, b64b4 <__register_exitproc+0x98>
   b6460:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6464:	b988      	cbnz	r0, b648a <__register_exitproc+0x6e>
   b6466:	4b1c      	ldr	r3, [pc, #112]	; (b64d8 <__register_exitproc+0xbc>)
   b6468:	b923      	cbnz	r3, b6474 <__register_exitproc+0x58>
   b646a:	f8d8 0000 	ldr.w	r0, [r8]
   b646e:	f000 f838 	bl	b64e2 <__retarget_lock_release>
   b6472:	e7f0      	b.n	b6456 <__register_exitproc+0x3a>
   b6474:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6478:	f7fe fdba 	bl	b4ff0 <malloc>
   b647c:	2800      	cmp	r0, #0
   b647e:	d0f4      	beq.n	b646a <__register_exitproc+0x4e>
   b6480:	2300      	movs	r3, #0
   b6482:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6486:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b648a:	6863      	ldr	r3, [r4, #4]
   b648c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6490:	2201      	movs	r2, #1
   b6492:	409a      	lsls	r2, r3
   b6494:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6498:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b649c:	4313      	orrs	r3, r2
   b649e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b64a2:	2e02      	cmp	r6, #2
   b64a4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b64a8:	bf02      	ittt	eq
   b64aa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b64ae:	4313      	orreq	r3, r2
   b64b0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b64b4:	6863      	ldr	r3, [r4, #4]
   b64b6:	f8d8 0000 	ldr.w	r0, [r8]
   b64ba:	1c5a      	adds	r2, r3, #1
   b64bc:	3302      	adds	r3, #2
   b64be:	6062      	str	r2, [r4, #4]
   b64c0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b64c4:	f000 f80e 	bl	b64e4 <__retarget_lock_release_recursive>
   b64c8:	2000      	movs	r0, #0
   b64ca:	e7c6      	b.n	b645a <__register_exitproc+0x3e>
   b64cc:	2003e7e8 	.word	0x2003e7e8
   b64d0:	2003e75c 	.word	0x2003e75c
   b64d4:	00000000 	.word	0x00000000
   b64d8:	000b4ff1 	.word	0x000b4ff1
   b64dc:	2003e1ac 	.word	0x2003e1ac

000b64e0 <__retarget_lock_acquire_recursive>:
   b64e0:	4770      	bx	lr

000b64e2 <__retarget_lock_release>:
   b64e2:	4770      	bx	lr

000b64e4 <__retarget_lock_release_recursive>:
   b64e4:	4770      	bx	lr

000b64e6 <link_code_end>:
	...

000b64e8 <dynalib_user>:
   b64e8:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b64f8:	0000 0000 6572 3d64 2c00 6920 3d72 7b00     ....red=., ir=.{
   b6508:	2220 6562 7461 3a22 2220 2c00 2220 786f      "beat": "., "ox
   b6518:	3a22 0020 007d 6552 6461 6e69 0067 5248     ": .}.Reading.HR
   b6528:	003a 202c 324f 203a                          :., O2: .

000b6531 <_ZL14uch_spo2_table>:
   b6531:	5f5f 605f 6060 6161 6161 6261 6262 6262     ___```aaaaabbbbb
   b6541:	6363 6363 6363 6363 6464 6464 6464 6464     ccccccccdddddddd
   b6551:	6464 6464 6464 6464 6464 6464 6363 6363     ddddddddddddcccc
   b6561:	6363 6363 6262 6262 6262 6161 6161 6060     ccccbbbbbbaaaa``
   b6571:	6060 5f5f 5e5f 5e5e 5d5d 5c5d 5c5c 5b5b     ``___^^^]]]\\\[[
   b6581:	5a5a 5959 5859 5758 5657 5556 5455 5354     ZZYYYXXWWVVUUTTS
   b6591:	5252 5151 5050 4e4f 4d4e 4c4c 4a4b 494a     RRQQPPONNMLLKJJI
   b65a1:	4848 4647 4545 4344 4242 4041 3e3f 3d3e     HHGFEEDCBBA@?>>=
   b65b1:	3b3c 393a 3838 3637 3435 3233 3031 2e2f     <;:98876543210/.
   b65c1:	2c2d 2a2b 2829 2627 2425 2223 1f21 1d1e     -,+*)('&%$#"!...
   b65d1:	1b1c 191a 1617 1415 1113 0f10 0c0e 0a0b     ................
   b65e1:	0709 0506 0203 0001 0000                     ...........

000b65ec <_ZTVN5spark13EthernetClassE>:
	...
   b65f4:	50bf 000b 50b5 000b 50ab 000b 50a1 000b     .P...P...P...P..
   b6604:	5095 000b 5089 000b 60a1 000b 60a9 000b     .P...P...`...`..
   b6614:	507d 000b 5075 000b 506b 000b 5061 000b     }P..uP..kP..aP..
   b6624:	60d9 000b 7061 0070 5925 252d 2d6d 6425     .`..app.%Y-%m-%d
   b6634:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b6644:	6d69 0065                                   ime.

000b6648 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b6650:	56e1 000b 56e7 000b 5725 000b 56f5 000b     .V...V..%W...V..
   b6660:	56e3 000b                                   .V..

000b6664 <_ZTV9IPAddress>:
	...
   b666c:	5c21 000b 5c11 000b 5c13 000b               !\...\...\..

000b6678 <_ZTV9USBSerial>:
	...
   b6680:	5d07 000b 5d6f 000b 5d45 000b 54a9 000b     .]..o]..E]...T..
   b6690:	5d37 000b 5d09 000b 5d19 000b 5d69 000b     7]...]...]..i]..
   b66a0:	5d29 000b 5d01 000b                         )]...]..

000b66a8 <_ZTV11USARTSerial>:
	...
   b66b0:	5e09 000b 5e75 000b 5e4d 000b 54a9 000b     .^..u^..M^...T..
   b66c0:	5e1d 000b 5e39 000b 5e2b 000b 5e47 000b     .^..9^..+^..G^..
   b66d0:	5e0b 000b 5e0f 000b                         .^...^..

000b66d8 <_ZTV7TwoWire>:
	...
   b66e0:	5ed5 000b 5f1f 000b 5ef7 000b 5ed7 000b     .^..._...^...^..
   b66f0:	5eff 000b 5f07 000b 5f0f 000b 5f17 000b     .^..._..._..._..

000b6700 <_ZTVN5spark9WiFiClassE>:
	...
   b6708:	6041 000b 6037 000b 602d 000b 5fe3 000b     A`..7`..-`..._..
   b6718:	6021 000b 6015 000b 60a1 000b 60a9 000b     !`...`...`...`..
   b6728:	6009 000b 6001 000b 5ff7 000b 5fed 000b     .`...`..._..._..
   b6738:	60d9 000b                                   .`..

000b673c <_ZTVN5spark12NetworkClassE>:
	...
   b6744:	6061 000b 606b 000b 6075 000b 607f 000b     a`..k`..u`...`..
   b6754:	6089 000b 6095 000b 60a1 000b 60a9 000b     .`...`...`...`..
   b6764:	60b1 000b 60bd 000b 60c5 000b 60cf 000b     .`...`...`...`..
   b6774:	60d9 000b                                   .`..

000b6778 <_ZSt7nothrow>:
   b6778:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b6788:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b6798:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b67a8:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b67b8:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b67c8:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b67d8:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b67e8:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b67f8:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b6808:	646e 632e                                    nd.c.

000b680d <link_const_variable_data_end>:
   b680d:	00          	.byte	0x00
	...

000b6810 <link_constructors_location>:
   b6810:	000b4389 	.word	0x000b4389
   b6814:	000b50c9 	.word	0x000b50c9
   b6818:	000b50dd 	.word	0x000b50dd
   b681c:	000b5499 	.word	0x000b5499
   b6820:	000b5571 	.word	0x000b5571
   b6824:	000b5581 	.word	0x000b5581
   b6828:	000b559d 	.word	0x000b559d
   b682c:	000b604d 	.word	0x000b604d
   b6830:	000b61b1 	.word	0x000b61b1

000b6834 <link_constructors_end>:
	...
