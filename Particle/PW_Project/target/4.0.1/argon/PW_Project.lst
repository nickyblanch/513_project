
c:/Users/nicky/OneDrive/Documents/GitHub/513_project/Particle/PW_Project/target/4.0.1/argon/PW_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004654  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b8670  000b8670  00008670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  000b8694  000b8694  00008694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .backup       00000004  2003f400  000b869c  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  2003dd0c  000b86a0  0001dd0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a68  2003dd88  2003dd88  0002dd88  2**3
                  ALLOC
  8 .module_info_suffix 00000028  000b871c  000b871c  0002871c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b8744  000b8744  00028744  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00115278  00000000  00000000  00028748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0001245a  00000000  00000000  0013d9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00039935  00000000  00000000  0014fe1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002aa8  00000000  00000000  0018974f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000a4a0  00000000  00000000  0018c1f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00039080  00000000  00000000  00196697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003d95c  00000000  00000000  001cf717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001381c4  00000000  00000000  0020d073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007a68  00000000  00000000  00345238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f003 fded 	bl	b7c0c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f003 fdf5 	bl	b7c28 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003dd0c 	.word	0x2003dd0c
   b4048:	000b86a0 	.word	0x000b86a0
   b404c:	2003dd88 	.word	0x2003dd88
   b4050:	2003dd88 	.word	0x2003dd88
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f002 f8cd 	bl	b61fc <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b8648 	.word	0x000b8648
   b407c:	000b866c 	.word	0x000b866c

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b91a 	b.w	b42b8 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f9b1 	bl	b43ec <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f002 b86d 	b.w	b616c <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f001 bb1d 	b.w	b56d0 <malloc>

000b4096 <_Znaj>:
   b4096:	f001 bb1b 	b.w	b56d0 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f001 bb21 	b.w	b56e0 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr

000b40ae <_ZN8particle9LEDStatus6updateEm>:
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
    // Default implementation does nothing
}
   b40ae:	4770      	bx	lr

000b40b0 <_Z14readingHandlerPKcS0_>:
    }
  }
}

// Web Hook Event Handler
void readingHandler(const char *event, const char *data) {
   b40b0:	b507      	push	{r0, r1, r2, lr}
   b40b2:	9101      	str	r1, [sp, #4]
  // Handle the integration response
  Serial.println(data);
   b40b4:	f002 fc42 	bl	b693c <_Z16_fetch_usbserialv>
   b40b8:	9901      	ldr	r1, [sp, #4]
}
   b40ba:	b003      	add	sp, #12
   b40bc:	f85d eb04 	ldr.w	lr, [sp], #4
  Serial.println(data);
   b40c0:	f001 be5b 	b.w	b5d7a <_ZN5Print7printlnEPKc>

000b40c4 <_ZN8particle9LEDStatusD1Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b40c4:	b510      	push	{r4, lr}
   b40c6:	4b05      	ldr	r3, [pc, #20]	; (b40dc <_ZN8particle9LEDStatusD1Ev+0x18>)
    led_set_status_active(&d_, active, nullptr);
   b40c8:	2200      	movs	r2, #0
inline particle::LEDStatus::~LEDStatus() {
   b40ca:	4604      	mov	r4, r0
    led_set_status_active(&d_, active, nullptr);
   b40cc:	4611      	mov	r1, r2
inline particle::LEDStatus::~LEDStatus() {
   b40ce:	f840 3b04 	str.w	r3, [r0], #4
    led_set_status_active(&d_, active, nullptr);
   b40d2:	f001 fa17 	bl	b5504 <led_set_status_active>
}
   b40d6:	4620      	mov	r0, r4
   b40d8:	bd10      	pop	{r4, pc}
   b40da:	bf00      	nop
   b40dc:	000b81f8 	.word	0x000b81f8

000b40e0 <_ZN8particle9LEDStatusD0Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b40e0:	b510      	push	{r4, lr}
   b40e2:	4604      	mov	r4, r0
}
   b40e4:	f7ff ffee 	bl	b40c4 <_ZN8particle9LEDStatusD1Ev>
   b40e8:	4620      	mov	r0, r4
   b40ea:	2120      	movs	r1, #32
   b40ec:	f7ff ffd5 	bl	b409a <_ZdlPvj>
   b40f0:	4620      	mov	r0, r4
   b40f2:	bd10      	pop	{r4, pc}

000b40f4 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>:
inline void particle::LEDStatus::setSpeed(LEDSpeed speed) {
   b40f4:	b510      	push	{r4, lr}
   b40f6:	4604      	mov	r4, r0
    setPeriod(led_pattern_period(d_.pattern, speed, nullptr));
   b40f8:	2200      	movs	r2, #0
   b40fa:	7c40      	ldrb	r0, [r0, #17]
   b40fc:	f001 fa3c 	bl	b5578 <led_pattern_period>
    if (d_.pattern != LED_PATTERN_CUSTOM) {
   b4100:	7c63      	ldrb	r3, [r4, #17]
   b4102:	2b0f      	cmp	r3, #15
        d_.period = period;
   b4104:	bf18      	it	ne
   b4106:	8320      	strhne	r0, [r4, #24]
}
   b4108:	bd10      	pop	{r4, pc}
	...

000b410c <_Z13return_stringhhPKc>:

// Find string returned in web hook event data
String return_string(uint8_t start, uint8_t end, const char* input) {
   b410c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t index = start + 1;
   b410e:	1c4c      	adds	r4, r1, #1
String return_string(uint8_t start, uint8_t end, const char* input) {
   b4110:	b085      	sub	sp, #20
  String temp = "";
   b4112:	4910      	ldr	r1, [pc, #64]	; (b4154 <_Z13return_stringhhPKc+0x48>)
String return_string(uint8_t start, uint8_t end, const char* input) {
   b4114:	461d      	mov	r5, r3
   b4116:	4606      	mov	r6, r0
   b4118:	4617      	mov	r7, r2
  String temp = "";
   b411a:	f001 fcec 	bl	b5af6 <_ZN6StringC1EPK19__FlashStringHelper>
  uint8_t index = start + 1;
   b411e:	b2e4      	uxtb	r4, r4
  String temp = "";
   b4120:	4425      	add	r5, r4
  while (index < end) {
   b4122:	42bc      	cmp	r4, r7
   b4124:	d212      	bcs.n	b414c <_Z13return_stringhhPKc+0x40>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b4126:	4631      	mov	r1, r6
   b4128:	4668      	mov	r0, sp
   b412a:	f001 fd07 	bl	b5b3c <_ZN6StringC1ERKS_>
    temp = temp + input[index];
   b412e:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4132:	4668      	mov	r0, sp
   b4134:	f001 fdb8 	bl	b5ca8 <_ZplRK15StringSumHelperc>
   b4138:	4601      	mov	r1, r0
   b413a:	4630      	mov	r0, r6
   b413c:	f001 fcef 	bl	b5b1e <_ZN6StringaSERKS_>
    index++;
   b4140:	3401      	adds	r4, #1
class StringSumHelper : public String
   b4142:	4668      	mov	r0, sp
   b4144:	f001 fc8c 	bl	b5a60 <_ZN6StringD1Ev>
   b4148:	b2e4      	uxtb	r4, r4
  while (index < end) {
   b414a:	e7ea      	b.n	b4122 <_Z13return_stringhhPKc+0x16>
  }
  return temp;
}
   b414c:	4630      	mov	r0, r6
   b414e:	b005      	add	sp, #20
   b4150:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4152:	bf00      	nop
   b4154:	000b8478 	.word	0x000b8478

000b4158 <_Z13updateHandlerPKcS0_>:
void updateHandler(const char *event, const char *data) {
   b4158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b415c:	460c      	mov	r4, r1
   b415e:	b089      	sub	sp, #36	; 0x24
  Serial.println(data);
   b4160:	f002 fbec 	bl	b693c <_Z16_fetch_usbserialv>
   b4164:	4621      	mov	r1, r4
   b4166:	f001 fe08 	bl	b5d7a <_ZN5Print7printlnEPKc>
  if (data) {
   b416a:	2c00      	cmp	r4, #0
   b416c:	f000 8095 	beq.w	b429a <_Z13updateHandlerPKcS0_+0x142>
   b4170:	2600      	movs	r6, #0
        constraint_time_upper = return_string(starting_location, i, data).toInt();
   b4172:	f8df 8138 	ldr.w	r8, [pc, #312]	; b42ac <_Z13updateHandlerPKcS0_+0x154>
	StringSumHelper(const char *p) : String(p) {}
   b4176:	f8df a138 	ldr.w	sl, [pc, #312]	; b42b0 <_Z13updateHandlerPKcS0_+0x158>
          constraint_time_lower = return_string(starting_location, ending_location, data).toInt();
   b417a:	f8df 9138 	ldr.w	r9, [pc, #312]	; b42b4 <_Z13updateHandlerPKcS0_+0x15c>
    uint8_t starting_location = 0;
   b417e:	4637      	mov	r7, r6
    uint8_t data_part = 0;
   b4180:	4635      	mov	r5, r6
   b4182:	b2f2      	uxtb	r2, r6
    while (*(data + i) != '\0') {
   b4184:	5ca3      	ldrb	r3, [r4, r2]
   b4186:	2b00      	cmp	r3, #0
   b4188:	f000 8087 	beq.w	b429a <_Z13updateHandlerPKcS0_+0x142>
      if (*(data + i) == ':') {
   b418c:	2b3a      	cmp	r3, #58	; 0x3a
   b418e:	f000 8082 	beq.w	b4296 <_Z13updateHandlerPKcS0_+0x13e>
      else if (*(data+i) == ',') {
   b4192:	2b2c      	cmp	r3, #44	; 0x2c
   b4194:	d150      	bne.n	b4238 <_Z13updateHandlerPKcS0_+0xe0>
        if (data_part == 0) {
   b4196:	bb75      	cbnz	r5, b41f6 <_Z13updateHandlerPKcS0_+0x9e>
          delay_time = return_string(starting_location, ending_location, data).toInt() * 60 * 1000;
   b4198:	4639      	mov	r1, r7
   b419a:	4623      	mov	r3, r4
   b419c:	a804      	add	r0, sp, #16
   b419e:	f7ff ffb5 	bl	b410c <_Z13return_stringhhPKc>
   b41a2:	a804      	add	r0, sp, #16
   b41a4:	f001 fd8a 	bl	b5cbc <_ZNK6String5toIntEv>
   b41a8:	4b3d      	ldr	r3, [pc, #244]	; (b42a0 <_Z13updateHandlerPKcS0_+0x148>)
   b41aa:	f64e 2260 	movw	r2, #60000	; 0xea60
   b41ae:	4350      	muls	r0, r2
   b41b0:	6018      	str	r0, [r3, #0]
   b41b2:	a804      	add	r0, sp, #16
   b41b4:	f001 fc54 	bl	b5a60 <_ZN6StringD1Ev>
          Serial.println("Updated delay time to: " + String(delay_time));
   b41b8:	f002 fbc0 	bl	b693c <_Z16_fetch_usbserialv>
   b41bc:	4939      	ldr	r1, [pc, #228]	; (b42a4 <_Z13updateHandlerPKcS0_+0x14c>)
   b41be:	4683      	mov	fp, r0
   b41c0:	4668      	mov	r0, sp
   b41c2:	f001 fc98 	bl	b5af6 <_ZN6StringC1EPK19__FlashStringHelper>
   b41c6:	4b36      	ldr	r3, [pc, #216]	; (b42a0 <_Z13updateHandlerPKcS0_+0x148>)
   b41c8:	220a      	movs	r2, #10
   b41ca:	6819      	ldr	r1, [r3, #0]
   b41cc:	a804      	add	r0, sp, #16
   b41ce:	f001 fcf8 	bl	b5bc2 <_ZN6StringC1Emh>
          Serial.println("Updated start range to: " + String(constraint_time_lower));
   b41d2:	a904      	add	r1, sp, #16
   b41d4:	4668      	mov	r0, sp
   b41d6:	f001 fd46 	bl	b5c66 <_ZplRK15StringSumHelperRK6String>
   b41da:	6801      	ldr	r1, [r0, #0]
   b41dc:	4658      	mov	r0, fp
   b41de:	f001 fdcc 	bl	b5d7a <_ZN5Print7printlnEPKc>
   b41e2:	a804      	add	r0, sp, #16
   b41e4:	f001 fc3c 	bl	b5a60 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b41e8:	4668      	mov	r0, sp
   b41ea:	f001 fc39 	bl	b5a60 <_ZN6StringD1Ev>
        data_part = data_part + 1;
   b41ee:	3501      	adds	r5, #1
   b41f0:	b2ed      	uxtb	r5, r5
      i++;
   b41f2:	3601      	adds	r6, #1
    while (*(data + i) != '\0') {
   b41f4:	e7c5      	b.n	b4182 <_Z13updateHandlerPKcS0_+0x2a>
        if (data_part == 1) {
   b41f6:	2d01      	cmp	r5, #1
   b41f8:	d1f9      	bne.n	b41ee <_Z13updateHandlerPKcS0_+0x96>
          constraint_time_lower = return_string(starting_location, ending_location, data).toInt();
   b41fa:	4623      	mov	r3, r4
   b41fc:	4639      	mov	r1, r7
   b41fe:	a804      	add	r0, sp, #16
   b4200:	f7ff ff84 	bl	b410c <_Z13return_stringhhPKc>
   b4204:	a804      	add	r0, sp, #16
   b4206:	f001 fd59 	bl	b5cbc <_ZNK6String5toIntEv>
   b420a:	ee07 0a90 	vmov	s15, r0
   b420e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4212:	a804      	add	r0, sp, #16
   b4214:	edc9 7a00 	vstr	s15, [r9]
   b4218:	f001 fc22 	bl	b5a60 <_ZN6StringD1Ev>
          Serial.println("Updated start range to: " + String(constraint_time_lower));
   b421c:	f002 fb8e 	bl	b693c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4220:	4921      	ldr	r1, [pc, #132]	; (b42a8 <_Z13updateHandlerPKcS0_+0x150>)
   b4222:	4683      	mov	fp, r0
   b4224:	4668      	mov	r0, sp
   b4226:	f001 fc66 	bl	b5af6 <_ZN6StringC1EPK19__FlashStringHelper>
   b422a:	ed99 0a00 	vldr	s0, [r9]
   b422e:	2106      	movs	r1, #6
   b4230:	a804      	add	r0, sp, #16
   b4232:	f001 fcda 	bl	b5bea <_ZN6StringC1Efi>
   b4236:	e7cc      	b.n	b41d2 <_Z13updateHandlerPKcS0_+0x7a>
      else if (*(data+i) == '}') {
   b4238:	2b7d      	cmp	r3, #125	; 0x7d
   b423a:	d1da      	bne.n	b41f2 <_Z13updateHandlerPKcS0_+0x9a>
        constraint_time_upper = return_string(starting_location, i, data).toInt();
   b423c:	4623      	mov	r3, r4
   b423e:	4639      	mov	r1, r7
   b4240:	a804      	add	r0, sp, #16
   b4242:	f7ff ff63 	bl	b410c <_Z13return_stringhhPKc>
   b4246:	a804      	add	r0, sp, #16
   b4248:	f001 fd38 	bl	b5cbc <_ZNK6String5toIntEv>
   b424c:	ee07 0a90 	vmov	s15, r0
   b4250:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4254:	a804      	add	r0, sp, #16
   b4256:	edc8 7a00 	vstr	s15, [r8]
   b425a:	f001 fc01 	bl	b5a60 <_ZN6StringD1Ev>
        Serial.println("Updated range end to: " + String(constraint_time_upper));
   b425e:	f002 fb6d 	bl	b693c <_Z16_fetch_usbserialv>
   b4262:	4651      	mov	r1, sl
   b4264:	4683      	mov	fp, r0
   b4266:	4668      	mov	r0, sp
   b4268:	f001 fc45 	bl	b5af6 <_ZN6StringC1EPK19__FlashStringHelper>
   b426c:	ed98 0a00 	vldr	s0, [r8]
   b4270:	2106      	movs	r1, #6
   b4272:	a804      	add	r0, sp, #16
   b4274:	f001 fcb9 	bl	b5bea <_ZN6StringC1Efi>
   b4278:	a904      	add	r1, sp, #16
   b427a:	4668      	mov	r0, sp
   b427c:	f001 fcf3 	bl	b5c66 <_ZplRK15StringSumHelperRK6String>
   b4280:	6801      	ldr	r1, [r0, #0]
   b4282:	4658      	mov	r0, fp
   b4284:	f001 fd79 	bl	b5d7a <_ZN5Print7printlnEPKc>
   b4288:	a804      	add	r0, sp, #16
   b428a:	f001 fbe9 	bl	b5a60 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b428e:	4668      	mov	r0, sp
   b4290:	f001 fbe6 	bl	b5a60 <_ZN6StringD1Ev>
   b4294:	e7ad      	b.n	b41f2 <_Z13updateHandlerPKcS0_+0x9a>
        starting_location = i;
   b4296:	4617      	mov	r7, r2
   b4298:	e7ab      	b.n	b41f2 <_Z13updateHandlerPKcS0_+0x9a>
}
   b429a:	b009      	add	sp, #36	; 0x24
   b429c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b42a0:	2003dd14 	.word	0x2003dd14
   b42a4:	000b7f20 	.word	0x000b7f20
   b42a8:	000b7f38 	.word	0x000b7f38
   b42ac:	2003dd10 	.word	0x2003dd10
   b42b0:	000b7f51 	.word	0x000b7f51
   b42b4:	2003dd0c 	.word	0x2003dd0c

000b42b8 <setup>:

// Setup Function
void setup() {
   b42b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  Serial.begin(9600);
   b42ba:	f002 fb3f 	bl	b693c <_Z16_fetch_usbserialv>
   b42be:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b42c2:	f002 fb2f 	bl	b6924 <_ZN9USBSerial5beginEl>
  Serial.println("Entering setup function.");
   b42c6:	f002 fb39 	bl	b693c <_Z16_fetch_usbserialv>
   b42ca:	4924      	ldr	r1, [pc, #144]	; (b435c <setup+0xa4>)
   b42cc:	f001 fd55 	bl	b5d7a <_ZN5Print7printlnEPKc>
  max30105.begin();
   b42d0:	4823      	ldr	r0, [pc, #140]	; (b4360 <setup+0xa8>)
   b42d2:	f000 fcc9 	bl	b4c68 <_ZN8MAX301055beginEv>
  max30105.setup(60, 4, 2, 100, 411, 4096);
   b42d6:	f240 139b 	movw	r3, #411	; 0x19b
   b42da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   b42de:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b42e2:	2364      	movs	r3, #100	; 0x64
   b42e4:	2204      	movs	r2, #4
   b42e6:	213c      	movs	r1, #60	; 0x3c
   b42e8:	481d      	ldr	r0, [pc, #116]	; (b4360 <setup+0xa8>)
   b42ea:	9300      	str	r3, [sp, #0]
   b42ec:	2302      	movs	r3, #2
   b42ee:	f000 fd75 	bl	b4ddc <_ZN8MAX301055setupEhhhiii>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b42f2:	2400      	movs	r4, #0
  Serial.println("Setup finished!");
   b42f4:	f002 fb22 	bl	b693c <_Z16_fetch_usbserialv>
   b42f8:	491a      	ldr	r1, [pc, #104]	; (b4364 <setup+0xac>)
   b42fa:	f001 fd3e 	bl	b5d7a <_ZN5Print7printlnEPKc>
   b42fe:	4623      	mov	r3, r4
   b4300:	4622      	mov	r2, r4
   b4302:	e9cd 4400 	strd	r4, r4, [sp]
   b4306:	4918      	ldr	r1, [pc, #96]	; (b4368 <setup+0xb0>)
   b4308:	4818      	ldr	r0, [pc, #96]	; (b436c <setup+0xb4>)
   b430a:	f001 f9c9 	bl	b56a0 <spark_subscribe>
   b430e:	4622      	mov	r2, r4
   b4310:	4623      	mov	r3, r4
   b4312:	4917      	ldr	r1, [pc, #92]	; (b4370 <setup+0xb8>)
   b4314:	4817      	ldr	r0, [pc, #92]	; (b4374 <setup+0xbc>)
   b4316:	e9cd 4400 	strd	r4, r4, [sp]
    d_.color = color;
   b431a:	4c17      	ldr	r4, [pc, #92]	; (b4378 <setup+0xc0>)
   b431c:	f001 f9c0 	bl	b56a0 <spark_subscribe>
  // Subscribe to the integration response event
  Particle.subscribe("hook-response/Update", updateHandler, MY_DEVICES);
  Particle.subscribe("hook-response/Reading", readingHandler, MY_DEVICES);

  // Timezone
  Time.zone(-7);
   b4320:	eeb9 0a0c 	vmov.f32	s0, #156	; 0xc0e00000 -7.0
   b4324:	f001 fd9e 	bl	b5e64 <_ZN9TimeClass4zoneEf>
   b4328:	f44f 437f 	mov.w	r3, #65280	; 0xff00

   // Update LED
  blinkLED.setColor(RGB_COLOR_GREEN);
  blinkLED.setSpeed(LED_SPEED_SLOW);
   b432c:	210a      	movs	r1, #10
   b432e:	4620      	mov	r0, r4
   b4330:	6163      	str	r3, [r4, #20]
   b4332:	f7ff fedf 	bl	b40f4 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4336:	7c63      	ldrb	r3, [r4, #17]
   b4338:	2b0f      	cmp	r3, #15
        d_.pattern = pattern;
   b433a:	bf1c      	itt	ne
   b433c:	2303      	movne	r3, #3
   b433e:	7463      	strbne	r3, [r4, #17]
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
   b4340:	7ca2      	ldrb	r2, [r4, #18]
  blinkLED.setPattern(LED_PATTERN_FADE);
  if (!blinkLED.isActive()) blinkLED.setActive(true);
   b4342:	f012 0201 	ands.w	r2, r2, #1
   b4346:	d103      	bne.n	b4350 <setup+0x98>
    led_set_status_active(&d_, active, nullptr);
   b4348:	480c      	ldr	r0, [pc, #48]	; (b437c <setup+0xc4>)
   b434a:	2101      	movs	r1, #1
   b434c:	f001 f8da 	bl	b5504 <led_set_status_active>
    d_.flags &= ~LED_STATUS_FLAG_OFF;
   b4350:	7ca3      	ldrb	r3, [r4, #18]
   b4352:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   b4356:	74a3      	strb	r3, [r4, #18]
  blinkLED.on();

}
   b4358:	b004      	add	sp, #16
   b435a:	bd10      	pop	{r4, pc}
   b435c:	000b7f68 	.word	0x000b7f68
   b4360:	2003de90 	.word	0x2003de90
   b4364:	000b7f81 	.word	0x000b7f81
   b4368:	000b4159 	.word	0x000b4159
   b436c:	000b7f91 	.word	0x000b7f91
   b4370:	000b40b1 	.word	0x000b40b1
   b4374:	000b7fa6 	.word	0x000b7fa6
   b4378:	2003dd8c 	.word	0x2003dd8c
   b437c:	2003dd90 	.word	0x2003dd90

000b4380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4380:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4382:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4384:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4386:	b17c      	cbz	r4, b43a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4388:	6863      	ldr	r3, [r4, #4]
   b438a:	3b01      	subs	r3, #1
   b438c:	6063      	str	r3, [r4, #4]
   b438e:	b95b      	cbnz	r3, b43a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4390:	6823      	ldr	r3, [r4, #0]
   b4392:	4620      	mov	r0, r4
   b4394:	689b      	ldr	r3, [r3, #8]
   b4396:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4398:	68a3      	ldr	r3, [r4, #8]
   b439a:	3b01      	subs	r3, #1
   b439c:	60a3      	str	r3, [r4, #8]
   b439e:	b91b      	cbnz	r3, b43a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b43a0:	6823      	ldr	r3, [r4, #0]
   b43a2:	4620      	mov	r0, r4
   b43a4:	68db      	ldr	r3, [r3, #12]
   b43a6:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b43a8:	4628      	mov	r0, r5
   b43aa:	bd38      	pop	{r3, r4, r5, pc}

000b43ac <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>:
    // Constructs succeeded future
    explicit Future(ResultT result = ResultT()) :
            FutureBase<ResultT, ContextT>(std::make_shared<detail::FutureImpl<ResultT, ContextT>>(std::move(result))) {
    }

    ResultT result() const {
   b43ac:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b43ae:	6804      	ldr	r4, [r0, #0]
        return (application_thread_current(nullptr) != 0);
   b43b0:	2000      	movs	r0, #0
   b43b2:	f001 f8c9 	bl	b5548 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b43b6:	b120      	cbz	r0, b43c2 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x16>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b43b8:	7863      	ldrb	r3, [r4, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b43ba:	b913      	cbnz	r3, b43c2 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x16>
        spark_process();
   b43bc:	f001 f958 	bl	b5670 <spark_process>
    }
   b43c0:	e7fa      	b.n	b43b8 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0xc>
   b43c2:	7863      	ldrb	r3, [r4, #1]
   b43c4:	f3bf 8f5b 	dmb	ish
   b43c8:	1c65      	adds	r5, r4, #1
        if (this->acquireDone() && this->isSucceeded()) {
   b43ca:	b90b      	cbnz	r3, b43d0 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x24>
        return std::move(defaultValue);
   b43cc:	2000      	movs	r0, #0
        return this->p_->result();
    }
   b43ce:	bd38      	pop	{r3, r4, r5, pc}
        return (application_thread_current(nullptr) != 0);
   b43d0:	2000      	movs	r0, #0
   b43d2:	f001 f8b9 	bl	b5548 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b43d6:	b120      	cbz	r0, b43e2 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x36>
   b43d8:	782b      	ldrb	r3, [r5, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b43da:	b913      	cbnz	r3, b43e2 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x36>
        spark_process();
   b43dc:	f001 f948 	bl	b5670 <spark_process>
    }
   b43e0:	e7fa      	b.n	b43d8 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x2c>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b43e2:	7823      	ldrb	r3, [r4, #0]
        if (this->acquireDone() && this->isSucceeded()) {
   b43e4:	2b01      	cmp	r3, #1
   b43e6:	d1f1      	bne.n	b43cc <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x20>
            return result_;
   b43e8:	7b20      	ldrb	r0, [r4, #12]
   b43ea:	e7f0      	b.n	b43ce <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x22>

000b43ec <loop>:

// Loop Function
void loop() {
   b43ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b43f0:	ed2d 8b02 	vpush	{d8}

  // If we are waiting to take a measurement
  if (state == 0) {
   b43f4:	4e77      	ldr	r6, [pc, #476]	; (b45d4 <loop+0x1e8>)
   b43f6:	7833      	ldrb	r3, [r6, #0]
void loop() {
   b43f8:	b09d      	sub	sp, #116	; 0x74
  if (state == 0) {
   b43fa:	2b00      	cmp	r3, #0
   b43fc:	d158      	bne.n	b44b0 <loop+0xc4>

    // Update current time
    current_time = float(Time.hour()) + float(Time.minute()) / 60.00;
   b43fe:	f001 fe67 	bl	b60d0 <_ZN9TimeClass4hourEv>
   b4402:	ee08 0a10 	vmov	s16, r0
   b4406:	f001 fe6f 	bl	b60e8 <_ZN9TimeClass6minuteEv>
   b440a:	ee07 0a90 	vmov	s15, r0
   b440e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4412:	ee17 0a90 	vmov	r0, s15
   b4416:	f002 fe7f 	bl	b7118 <__aeabi_f2d>
   b441a:	4b6f      	ldr	r3, [pc, #444]	; (b45d8 <loop+0x1ec>)
   b441c:	2200      	movs	r2, #0
   b441e:	f002 fffd 	bl	b741c <__aeabi_ddiv>
   b4422:	eef8 7ac8 	vcvt.f32.s32	s15, s16
   b4426:	4604      	mov	r4, r0
   b4428:	ee17 0a90 	vmov	r0, s15
   b442c:	460d      	mov	r5, r1
   b442e:	f002 fe73 	bl	b7118 <__aeabi_f2d>
   b4432:	460b      	mov	r3, r1
   b4434:	4602      	mov	r2, r0
   b4436:	4629      	mov	r1, r5
   b4438:	4620      	mov	r0, r4
   b443a:	f002 fd0f 	bl	b6e5c <__adddf3>
   b443e:	f003 f97d 	bl	b773c <__aeabi_d2f>
   b4442:	ee07 0a90 	vmov	s15, r0
    if(current_time < 0) {
   b4446:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b444a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      current_time += 24.0;
   b444e:	bf44      	itt	mi
   b4450:	eeb3 7a08 	vmovmi.f32	s14, #56	; 0x41c00000  24.0
   b4454:	ee77 7a87 	vaddmi.f32	s15, s15, s14
   b4458:	4c60      	ldr	r4, [pc, #384]	; (b45dc <loop+0x1f0>)
    }

    // If we are in the acceptable time frame
    if (current_time > constraint_time_lower && current_time < constraint_time_upper) {
   b445a:	4b61      	ldr	r3, [pc, #388]	; (b45e0 <loop+0x1f4>)
      current_time += 24.0;
   b445c:	edc4 7a00 	vstr	s15, [r4]
    if (current_time > constraint_time_lower && current_time < constraint_time_upper) {
   b4460:	edd4 7a00 	vldr	s15, [r4]
   b4464:	ed93 7a00 	vldr	s14, [r3]
   b4468:	eef4 7ac7 	vcmpe.f32	s15, s14
   b446c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4470:	dd7f      	ble.n	b4572 <loop+0x186>
   b4472:	4b5c      	ldr	r3, [pc, #368]	; (b45e4 <loop+0x1f8>)
   b4474:	ed93 7a00 	vldr	s14, [r3]
   b4478:	eef4 7ac7 	vcmpe.f32	s15, s14
   b447c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4480:	d577      	bpl.n	b4572 <loop+0x186>

      // If we've waited enough between measurements
      if (millis() - previous_request >= 60000) { //delay_time) {
   b4482:	4c59      	ldr	r4, [pc, #356]	; (b45e8 <loop+0x1fc>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4484:	f000 ff56 	bl	b5334 <HAL_Timer_Get_Milli_Seconds>
   b4488:	6823      	ldr	r3, [r4, #0]
   b448a:	1ac0      	subs	r0, r0, r3
   b448c:	f64e 235f 	movw	r3, #59999	; 0xea5f
   b4490:	4298      	cmp	r0, r3
   b4492:	d954      	bls.n	b453e <loop+0x152>

        // Transition to measurement state
        state = 1;
   b4494:	2301      	movs	r3, #1
   b4496:	7033      	strb	r3, [r6, #0]
   b4498:	f000 ff4c 	bl	b5334 <HAL_Timer_Get_Milli_Seconds>
        previous_request = millis();
   b449c:	6020      	str	r0, [r4, #0]
        Serial.println("Conditions met, preparing to take a measurement!");
   b449e:	f002 fa4d 	bl	b693c <_Z16_fetch_usbserialv>
   b44a2:	4952      	ldr	r1, [pc, #328]	; (b45ec <loop+0x200>)
   b44a4:	f001 fc69 	bl	b5d7a <_ZN5Print7printlnEPKc>
      Serial.println("Waiting for a measurement, but it's not in the acceptable time frame. Current time: " + String(current_time));
      // Check for updates from Particle cloud
      Particle.publish("Update", String("dummy_data"), PRIVATE);
    }

    delay(10000);
   b44a8:	f242 7010 	movw	r0, #10000	; 0x2710
   b44ac:	f001 fe32 	bl	b6114 <delay>
  }

  // If we are requesting a measurement
  if (state == 1) {
   b44b0:	7833      	ldrb	r3, [r6, #0]
   b44b2:	2b01      	cmp	r3, #1
   b44b4:	d179      	bne.n	b45aa <loop+0x1be>

    Serial.println("Requesting a measurement - place finger on sensor.");
   b44b6:	f002 fa41 	bl	b693c <_Z16_fetch_usbserialv>
    d_.color = color;
   b44ba:	4c4d      	ldr	r4, [pc, #308]	; (b45f0 <loop+0x204>)
   b44bc:	494d      	ldr	r1, [pc, #308]	; (b45f4 <loop+0x208>)
   b44be:	f001 fc5c 	bl	b5d7a <_ZN5Print7printlnEPKc>
   b44c2:	23ff      	movs	r3, #255	; 0xff
   b44c4:	6163      	str	r3, [r4, #20]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b44c6:	7c63      	ldrb	r3, [r4, #17]
    // blinkLED.setColor((uint8_t(0) << 16) | (uint8_t(0) << 8) | uint8_t(255));
    // blinkLED.setPattern(LED_PATTERN_BLINK);
    // blinkLED.setSpeed(LED_SPEED_NORMAL);
    blinkLED.setColor(RGB_COLOR_BLUE);
    blinkLED.setPattern(LED_PATTERN_BLINK);
    blinkLED.setSpeed(LED_SPEED_FAST);
   b44c8:	4849      	ldr	r0, [pc, #292]	; (b45f0 <loop+0x204>)
   b44ca:	2b0f      	cmp	r3, #15
        d_.pattern = pattern;
   b44cc:	bf18      	it	ne
   b44ce:	2302      	movne	r3, #2
   b44d0:	f04f 011e 	mov.w	r1, #30
   b44d4:	bf18      	it	ne
   b44d6:	7463      	strbne	r3, [r4, #17]
   b44d8:	f7ff fe0c 	bl	b40f4 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
   b44dc:	7ca2      	ldrb	r2, [r4, #18]
    if (!blinkLED.isActive()) blinkLED.setActive(true);
   b44de:	f012 0201 	ands.w	r2, r2, #1
   b44e2:	d103      	bne.n	b44ec <loop+0x100>
    led_set_status_active(&d_, active, nullptr);
   b44e4:	4844      	ldr	r0, [pc, #272]	; (b45f8 <loop+0x20c>)
   b44e6:	2101      	movs	r1, #1
   b44e8:	f001 f80c 	bl	b5504 <led_set_status_active>
    d_.flags &= ~LED_STATUS_FLAG_OFF;
   b44ec:	7ca3      	ldrb	r3, [r4, #18]
   b44ee:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   b44f2:	74a3      	strb	r3, [r4, #18]
    blinkLED.on();

    // If the user places their finger on the sensor
    if (1) {

      Serial.println("Finger detected on sensor."); 
   b44f4:	f002 fa22 	bl	b693c <_Z16_fetch_usbserialv>
   b44f8:	4940      	ldr	r1, [pc, #256]	; (b45fc <loop+0x210>)
   b44fa:	f001 fc3e 	bl	b5d7a <_ZN5Print7printlnEPKc>
      // Transition to measurement state
      state = 2;
   b44fe:	2302      	movs	r3, #2
   b4500:	7033      	strb	r3, [r6, #0]
  }

  // If we are taking a measurement:
  if (state == 2) {

    bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
   b4502:	f8df 8120 	ldr.w	r8, [pc, #288]	; b4624 <loop+0x238>
  
    //read the first 300 samples, and determine the signal range
    Serial.println("Entering measurement loop");
    for (byte i = 0 ; i < bufferLength ; i++) {
      while (max30105.available() == false) //do we have new data?
   b4506:	4c3e      	ldr	r4, [pc, #248]	; (b4600 <loop+0x214>)
        max30105.check(); //Check the sensor for new data

        redBuffer[i] = max30105.getRed();
   b4508:	f8df a110 	ldr.w	sl, [pc, #272]	; b461c <loop+0x230>
        irBuffer[i] = max30105.getIR();
   b450c:	f8df 9110 	ldr.w	r9, [pc, #272]	; b4620 <loop+0x234>
    bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
   b4510:	2364      	movs	r3, #100	; 0x64
   b4512:	f8c8 3000 	str.w	r3, [r8]
    Serial.println("Entering measurement loop");
   b4516:	f002 fa11 	bl	b693c <_Z16_fetch_usbserialv>
   b451a:	493a      	ldr	r1, [pc, #232]	; (b4604 <loop+0x218>)
   b451c:	f001 fc2d 	bl	b5d7a <_ZN5Print7printlnEPKc>
   b4520:	2500      	movs	r5, #0
    for (byte i = 0 ; i < bufferLength ; i++) {
   b4522:	f8d8 1000 	ldr.w	r1, [r8]
   b4526:	b2ef      	uxtb	r7, r5
   b4528:	428f      	cmp	r7, r1
   b452a:	da7d      	bge.n	b4628 <loop+0x23c>
      while (max30105.available() == false) //do we have new data?
   b452c:	4620      	mov	r0, r4
   b452e:	f000 fa67 	bl	b4a00 <_ZN8MAX301059availableEv>
   b4532:	2800      	cmp	r0, #0
   b4534:	d13f      	bne.n	b45b6 <loop+0x1ca>
        max30105.check(); //Check the sensor for new data
   b4536:	4620      	mov	r0, r4
   b4538:	f000 faaa 	bl	b4a90 <_ZN8MAX301055checkEv>
      while (max30105.available() == false) //do we have new data?
   b453c:	e7f6      	b.n	b452c <loop+0x140>
        Serial.println("Waiting for a measurement, but it hasn't been long enough yet.");
   b453e:	f002 f9fd 	bl	b693c <_Z16_fetch_usbserialv>
   b4542:	4931      	ldr	r1, [pc, #196]	; (b4608 <loop+0x21c>)
   b4544:	f001 fc19 	bl	b5d7a <_ZN5Print7printlnEPKc>
      Particle.publish("Update", String("dummy_data"), PRIVATE);
   b4548:	4930      	ldr	r1, [pc, #192]	; (b460c <loop+0x220>)
   b454a:	a818      	add	r0, sp, #96	; 0x60
   b454c:	f001 fad3 	bl	b5af6 <_ZN6StringC1EPK19__FlashStringHelper>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4550:	4b2f      	ldr	r3, [pc, #188]	; (b4610 <loop+0x224>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4552:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b4554:	781b      	ldrb	r3, [r3, #0]
   b4556:	492f      	ldr	r1, [pc, #188]	; (b4614 <loop+0x228>)
   b4558:	f88d 3000 	strb.w	r3, [sp]
   b455c:	a814      	add	r0, sp, #80	; 0x50
   b455e:	233c      	movs	r3, #60	; 0x3c
   b4560:	f001 ffaa 	bl	b64b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      ~__shared_ptr() = default;
   b4564:	a815      	add	r0, sp, #84	; 0x54
   b4566:	f7ff ff0b 	bl	b4380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b456a:	a818      	add	r0, sp, #96	; 0x60
   b456c:	f001 fa78 	bl	b5a60 <_ZN6StringD1Ev>
   b4570:	e79a      	b.n	b44a8 <loop+0xbc>
      Serial.println("Waiting for a measurement, but it's not in the acceptable time frame. Current time: " + String(current_time));
   b4572:	f002 f9e3 	bl	b693c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4576:	4928      	ldr	r1, [pc, #160]	; (b4618 <loop+0x22c>)
   b4578:	4605      	mov	r5, r0
   b457a:	a818      	add	r0, sp, #96	; 0x60
   b457c:	f001 fabb 	bl	b5af6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4580:	ed94 0a00 	vldr	s0, [r4]
   b4584:	2106      	movs	r1, #6
   b4586:	a814      	add	r0, sp, #80	; 0x50
   b4588:	f001 fb2f 	bl	b5bea <_ZN6StringC1Efi>
   b458c:	a914      	add	r1, sp, #80	; 0x50
   b458e:	a818      	add	r0, sp, #96	; 0x60
   b4590:	f001 fb69 	bl	b5c66 <_ZplRK15StringSumHelperRK6String>
   b4594:	6801      	ldr	r1, [r0, #0]
   b4596:	4628      	mov	r0, r5
   b4598:	f001 fbef 	bl	b5d7a <_ZN5Print7printlnEPKc>
   b459c:	a814      	add	r0, sp, #80	; 0x50
   b459e:	f001 fa5f 	bl	b5a60 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b45a2:	a818      	add	r0, sp, #96	; 0x60
   b45a4:	f001 fa5c 	bl	b5a60 <_ZN6StringD1Ev>
   b45a8:	e7ce      	b.n	b4548 <loop+0x15c>
  if (state == 2) {
   b45aa:	2b02      	cmp	r3, #2
   b45ac:	d0a9      	beq.n	b4502 <loop+0x116>
    }

  }

  // If we are posting data to the server
  if (state == 3) {
   b45ae:	2b03      	cmp	r3, #3
   b45b0:	f040 8135 	bne.w	b481e <loop+0x432>
   b45b4:	e056      	b.n	b4664 <loop+0x278>
        redBuffer[i] = max30105.getRed();
   b45b6:	4620      	mov	r0, r4
   b45b8:	f000 fb2e 	bl	b4c18 <_ZN8MAX301056getRedEv>
   b45bc:	f82a 0017 	strh.w	r0, [sl, r7, lsl #1]
        irBuffer[i] = max30105.getIR();
   b45c0:	4620      	mov	r0, r4
   b45c2:	f000 fb37 	bl	b4c34 <_ZN8MAX301055getIREv>
   b45c6:	f829 0017 	strh.w	r0, [r9, r7, lsl #1]
        max30105.nextSample(); //We're finished with this sample so move to next sample
   b45ca:	4620      	mov	r0, r4
   b45cc:	f000 fa22 	bl	b4a14 <_ZN8MAX3010510nextSampleEv>
    for (byte i = 0 ; i < bufferLength ; i++) {
   b45d0:	3501      	adds	r5, #1
   b45d2:	e7a6      	b.n	b4522 <loop+0x136>
   b45d4:	2003df68 	.word	0x2003df68
   b45d8:	404e0000 	.word	0x404e0000
   b45dc:	2003ddb0 	.word	0x2003ddb0
   b45e0:	2003dd0c 	.word	0x2003dd0c
   b45e4:	2003dd10 	.word	0x2003dd10
   b45e8:	2003de98 	.word	0x2003de98
   b45ec:	000b7fbc 	.word	0x000b7fbc
   b45f0:	2003dd8c 	.word	0x2003dd8c
   b45f4:	000b808c 	.word	0x000b808c
   b45f8:	2003dd90 	.word	0x2003dd90
   b45fc:	000b80bf 	.word	0x000b80bf
   b4600:	2003de90 	.word	0x2003de90
   b4604:	000b80da 	.word	0x000b80da
   b4608:	000b7fed 	.word	0x000b7fed
   b460c:	000b802c 	.word	0x000b802c
   b4610:	2003dd89 	.word	0x2003dd89
   b4614:	000b7f9f 	.word	0x000b7f9f
   b4618:	000b8037 	.word	0x000b8037
   b461c:	2003de9c 	.word	0x2003de9c
   b4620:	2003ddc8 	.word	0x2003ddc8
   b4624:	2003ddac 	.word	0x2003ddac
    maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
   b4628:	4fb8      	ldr	r7, [pc, #736]	; (b490c <loop+0x520>)
   b462a:	4bb9      	ldr	r3, [pc, #740]	; (b4910 <loop+0x524>)
   b462c:	9302      	str	r3, [sp, #8]
   b462e:	4db9      	ldr	r5, [pc, #740]	; (b4914 <loop+0x528>)
   b4630:	4bb9      	ldr	r3, [pc, #740]	; (b4918 <loop+0x52c>)
   b4632:	9300      	str	r3, [sp, #0]
   b4634:	4ab9      	ldr	r2, [pc, #740]	; (b491c <loop+0x530>)
   b4636:	48ba      	ldr	r0, [pc, #744]	; (b4920 <loop+0x534>)
   b4638:	9501      	str	r5, [sp, #4]
   b463a:	463b      	mov	r3, r7
   b463c:	f000 fd2c 	bl	b5098 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_>
    if ((50 < spo2) && (spo2 < 101) && (30 < heartRate) && (heartRate < 300)) {
   b4640:	683b      	ldr	r3, [r7, #0]
   b4642:	3b33      	subs	r3, #51	; 0x33
   b4644:	2b31      	cmp	r3, #49	; 0x31
   b4646:	f200 80d3 	bhi.w	b47f0 <loop+0x404>
   b464a:	682b      	ldr	r3, [r5, #0]
   b464c:	3b1f      	subs	r3, #31
   b464e:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
   b4652:	f200 80cd 	bhi.w	b47f0 <loop+0x404>
      Serial.println("Valid measurement, sending data.");
   b4656:	f002 f971 	bl	b693c <_Z16_fetch_usbserialv>
   b465a:	49b2      	ldr	r1, [pc, #712]	; (b4924 <loop+0x538>)
   b465c:	f001 fb8d 	bl	b5d7a <_ZN5Print7printlnEPKc>
      state = 3;
   b4660:	2303      	movs	r3, #3
   b4662:	7033      	strb	r3, [r6, #0]

      // String send_data = String("{ \"beat\": \"") + String(heartRate) + "\"" + ", \"ox\": " + String(spo2) + "}";
      String send_data = String("{ \"beat\": \"") + String(heartRate) + "\"" + ", \"ox\": " + String(spo2) + ", \"time\": " + String(Time.format(Time.now(), TIME_FORMAT_ISO8601_FULL)) + "}";
   b4664:	49b0      	ldr	r1, [pc, #704]	; (b4928 <loop+0x53c>)
   b4666:	f8df 92f0 	ldr.w	r9, [pc, #752]	; b4958 <loop+0x56c>
   b466a:	4fb0      	ldr	r7, [pc, #704]	; (b492c <loop+0x540>)
   b466c:	a808      	add	r0, sp, #32
   b466e:	f001 fa42 	bl	b5af6 <_ZN6StringC1EPK19__FlashStringHelper>
	StringSumHelper(const String &s) : String(s) {}
   b4672:	a908      	add	r1, sp, #32
   b4674:	a810      	add	r0, sp, #64	; 0x40
   b4676:	f001 fa61 	bl	b5b3c <_ZN6StringC1ERKS_>
   b467a:	4ba6      	ldr	r3, [pc, #664]	; (b4914 <loop+0x528>)
   b467c:	220a      	movs	r2, #10
   b467e:	6819      	ldr	r1, [r3, #0]
   b4680:	a80c      	add	r0, sp, #48	; 0x30
   b4682:	f001 fa8b 	bl	b5b9c <_ZN6StringC1Elh>
   b4686:	a90c      	add	r1, sp, #48	; 0x30
   b4688:	a810      	add	r0, sp, #64	; 0x40
   b468a:	f001 faec 	bl	b5c66 <_ZplRK15StringSumHelperRK6String>
   b468e:	49a8      	ldr	r1, [pc, #672]	; (b4930 <loop+0x544>)
   b4690:	f001 faf5 	bl	b5c7e <_ZplRK15StringSumHelperPKc>
   b4694:	49a7      	ldr	r1, [pc, #668]	; (b4934 <loop+0x548>)
   b4696:	f001 faf2 	bl	b5c7e <_ZplRK15StringSumHelperPKc>
   b469a:	4b9c      	ldr	r3, [pc, #624]	; (b490c <loop+0x520>)
   b469c:	220a      	movs	r2, #10
   b469e:	6819      	ldr	r1, [r3, #0]
   b46a0:	4604      	mov	r4, r0
   b46a2:	a814      	add	r0, sp, #80	; 0x50
   b46a4:	f001 fa7a 	bl	b5b9c <_ZN6StringC1Elh>
   b46a8:	a914      	add	r1, sp, #80	; 0x50
   b46aa:	4620      	mov	r0, r4
   b46ac:	f001 fadb 	bl	b5c66 <_ZplRK15StringSumHelperRK6String>
   b46b0:	49a1      	ldr	r1, [pc, #644]	; (b4938 <loop+0x54c>)
   b46b2:	f001 fae4 	bl	b5c7e <_ZplRK15StringSumHelperPKc>
   b46b6:	4604      	mov	r4, r0
   b46b8:	f001 fcf9 	bl	b60ae <_ZN9TimeClass3nowEv>
   b46bc:	4b9f      	ldr	r3, [pc, #636]	; (b493c <loop+0x550>)
   b46be:	49a0      	ldr	r1, [pc, #640]	; (b4940 <loop+0x554>)
   b46c0:	681b      	ldr	r3, [r3, #0]
   b46c2:	9300      	str	r3, [sp, #0]
   b46c4:	4602      	mov	r2, r0
   b46c6:	17c3      	asrs	r3, r0, #31
   b46c8:	a818      	add	r0, sp, #96	; 0x60
   b46ca:	f001 fc91 	bl	b5ff0 <_ZN9TimeClass6formatExPKc>
   b46ce:	a918      	add	r1, sp, #96	; 0x60
   b46d0:	4620      	mov	r0, r4
   b46d2:	f001 fac8 	bl	b5c66 <_ZplRK15StringSumHelperRK6String>
   b46d6:	499b      	ldr	r1, [pc, #620]	; (b4944 <loop+0x558>)
   b46d8:	4c9b      	ldr	r4, [pc, #620]	; (b4948 <loop+0x55c>)
   b46da:	f001 fad0 	bl	b5c7e <_ZplRK15StringSumHelperPKc>
   b46de:	4601      	mov	r1, r0
   b46e0:	a804      	add	r0, sp, #16
   b46e2:	f001 fa2b 	bl	b5b3c <_ZN6StringC1ERKS_>
   b46e6:	a818      	add	r0, sp, #96	; 0x60
   b46e8:	f001 f9ba 	bl	b5a60 <_ZN6StringD1Ev>
   b46ec:	a814      	add	r0, sp, #80	; 0x50
   b46ee:	f001 f9b7 	bl	b5a60 <_ZN6StringD1Ev>
   b46f2:	a80c      	add	r0, sp, #48	; 0x30
   b46f4:	f001 f9b4 	bl	b5a60 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b46f8:	a810      	add	r0, sp, #64	; 0x40
   b46fa:	f001 f9b1 	bl	b5a60 <_ZN6StringD1Ev>
   b46fe:	a808      	add	r0, sp, #32
   b4700:	f001 f9ae 	bl	b5a60 <_ZN6StringD1Ev>
      bool success = Particle.publish("Reading", String(send_data), PRIVATE);
   b4704:	a904      	add	r1, sp, #16
   b4706:	a818      	add	r0, sp, #96	; 0x60
   b4708:	f001 fa18 	bl	b5b3c <_ZN6StringC1ERKS_>
   b470c:	4b8f      	ldr	r3, [pc, #572]	; (b494c <loop+0x560>)
   b470e:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b4710:	781b      	ldrb	r3, [r3, #0]
   b4712:	498f      	ldr	r1, [pc, #572]	; (b4950 <loop+0x564>)
   b4714:	f88d 3000 	strb.w	r3, [sp]
   b4718:	a814      	add	r0, sp, #80	; 0x50
   b471a:	233c      	movs	r3, #60	; 0x3c
   b471c:	f001 fecc 	bl	b64b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    ResultT result(ResultT defaultValue) const {
        return this->p_->result(std::move(defaultValue));
    }

    operator ResultT() const {
        return result();
   b4720:	a814      	add	r0, sp, #80	; 0x50
   b4722:	f7ff fe43 	bl	b43ac <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>
   b4726:	4605      	mov	r5, r0
   b4728:	a815      	add	r0, sp, #84	; 0x54
   b472a:	f7ff fe29 	bl	b4380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b472e:	a818      	add	r0, sp, #96	; 0x60
   b4730:	f001 f996 	bl	b5a60 <_ZN6StringD1Ev>
      Serial.println(send_data);
   b4734:	f002 f902 	bl	b693c <_Z16_fetch_usbserialv>
   b4738:	9904      	ldr	r1, [sp, #16]
   b473a:	f001 fb1e 	bl	b5d7a <_ZN5Print7printlnEPKc>

      if (success) {
   b473e:	2d00      	cmp	r5, #0
   b4740:	f000 80b0 	beq.w	b48a4 <loop+0x4b8>
        // Transition to wait state
        state = 0;
   b4744:	2300      	movs	r3, #0
   b4746:	7033      	strb	r3, [r6, #0]

        // Update LED
        blinkLED.setColor(RGB_COLOR_GREEN);
        blinkLED.setSpeed(LED_SPEED_SLOW);
   b4748:	210a      	movs	r1, #10
    d_.color = color;
   b474a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   b474e:	4620      	mov	r0, r4
   b4750:	6163      	str	r3, [r4, #20]
   b4752:	f7ff fccf 	bl	b40f4 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4756:	7c63      	ldrb	r3, [r4, #17]
   b4758:	f8df 8220 	ldr.w	r8, [pc, #544]	; b497c <loop+0x590>
              // Yay!
              Serial.println("Send stored point: " + String(storage_buffer[i]));
            }
          }
          else {
            Serial.println("Stored data point too old - not sent.");
   b475c:	f8df a224 	ldr.w	sl, [pc, #548]	; b4984 <loop+0x598>
   b4760:	f8df b224 	ldr.w	fp, [pc, #548]	; b4988 <loop+0x59c>
   b4764:	2b0f      	cmp	r3, #15
        d_.pattern = pattern;
   b4766:	bf1c      	itt	ne
   b4768:	2303      	movne	r3, #3
   b476a:	7463      	strbne	r3, [r4, #17]
        Serial.println("Data successfully sent.");
   b476c:	f002 f8e6 	bl	b693c <_Z16_fetch_usbserialv>
   b4770:	4978      	ldr	r1, [pc, #480]	; (b4954 <loop+0x568>)
   b4772:	4c79      	ldr	r4, [pc, #484]	; (b4958 <loop+0x56c>)
   b4774:	f001 fb01 	bl	b5d7a <_ZN5Print7printlnEPKc>
        for (uint8_t i = 0; i < temp_storage; i++) {
   b4778:	783e      	ldrb	r6, [r7, #0]
   b477a:	eb09 1606 	add.w	r6, r9, r6, lsl #4
   b477e:	42a6      	cmp	r6, r4
   b4780:	f000 8084 	beq.w	b488c <loop+0x4a0>
   b4784:	f000 fdd6 	bl	b5334 <HAL_Timer_Get_Milli_Seconds>
          if ((millis() - when_stored[i]) < 24*60*60*1000) {
   b4788:	f858 3b04 	ldr.w	r3, [r8], #4
   b478c:	1ac0      	subs	r0, r0, r3
   b478e:	4b73      	ldr	r3, [pc, #460]	; (b495c <loop+0x570>)
   b4790:	4298      	cmp	r0, r3
   b4792:	d875      	bhi.n	b4880 <loop+0x494>
            success = success && Particle.publish("Reading", storage_buffer[i]);
   b4794:	b355      	cbz	r5, b47ec <loop+0x400>
   b4796:	f89b 3000 	ldrb.w	r3, [fp]
   b479a:	f88d 3000 	strb.w	r3, [sp]
   b479e:	6822      	ldr	r2, [r4, #0]
   b47a0:	496b      	ldr	r1, [pc, #428]	; (b4950 <loop+0x564>)
   b47a2:	233c      	movs	r3, #60	; 0x3c
   b47a4:	a818      	add	r0, sp, #96	; 0x60
   b47a6:	f001 fe87 	bl	b64b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b47aa:	a818      	add	r0, sp, #96	; 0x60
   b47ac:	f7ff fdfe 	bl	b43ac <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>
   b47b0:	4605      	mov	r5, r0
   b47b2:	a819      	add	r0, sp, #100	; 0x64
   b47b4:	f7ff fde4 	bl	b4380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            if (success) {
   b47b8:	b1c5      	cbz	r5, b47ec <loop+0x400>
              Serial.println("Send stored point: " + String(storage_buffer[i]));
   b47ba:	f002 f8bf 	bl	b693c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b47be:	4968      	ldr	r1, [pc, #416]	; (b4960 <loop+0x574>)
   b47c0:	4681      	mov	r9, r0
   b47c2:	a818      	add	r0, sp, #96	; 0x60
   b47c4:	f001 f997 	bl	b5af6 <_ZN6StringC1EPK19__FlashStringHelper>
   b47c8:	4621      	mov	r1, r4
   b47ca:	a814      	add	r0, sp, #80	; 0x50
   b47cc:	f001 f9b6 	bl	b5b3c <_ZN6StringC1ERKS_>
   b47d0:	a914      	add	r1, sp, #80	; 0x50
   b47d2:	a818      	add	r0, sp, #96	; 0x60
   b47d4:	f001 fa47 	bl	b5c66 <_ZplRK15StringSumHelperRK6String>
   b47d8:	6801      	ldr	r1, [r0, #0]
   b47da:	4648      	mov	r0, r9
   b47dc:	f001 facd 	bl	b5d7a <_ZN5Print7printlnEPKc>
   b47e0:	a814      	add	r0, sp, #80	; 0x50
   b47e2:	f001 f93d 	bl	b5a60 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b47e6:	a818      	add	r0, sp, #96	; 0x60
   b47e8:	f001 f93a 	bl	b5a60 <_ZN6StringD1Ev>
        for (uint8_t i = 0; i < temp_storage; i++) {
   b47ec:	3410      	adds	r4, #16
   b47ee:	e7c6      	b.n	b477e <loop+0x392>
   b47f0:	f000 fda0 	bl	b5334 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - previous_request > 600000) {
   b47f4:	4b5b      	ldr	r3, [pc, #364]	; (b4964 <loop+0x578>)
   b47f6:	681b      	ldr	r3, [r3, #0]
   b47f8:	1ac0      	subs	r0, r0, r3
   b47fa:	4b5b      	ldr	r3, [pc, #364]	; (b4968 <loop+0x57c>)
   b47fc:	4298      	cmp	r0, r3
   b47fe:	d913      	bls.n	b4828 <loop+0x43c>
    d_.color = color;
   b4800:	4c51      	ldr	r4, [pc, #324]	; (b4948 <loop+0x55c>)
   b4802:	f44f 437f 	mov.w	r3, #65280	; 0xff00
      blinkLED.setSpeed(LED_SPEED_SLOW);
   b4806:	210a      	movs	r1, #10
   b4808:	4620      	mov	r0, r4
   b480a:	6163      	str	r3, [r4, #20]
   b480c:	f7ff fc72 	bl	b40f4 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4810:	7c63      	ldrb	r3, [r4, #17]
   b4812:	2b0f      	cmp	r3, #15
        d_.pattern = pattern;
   b4814:	bf1c      	itt	ne
   b4816:	2303      	movne	r3, #3
   b4818:	7463      	strbne	r3, [r4, #17]
      state = 0;
   b481a:	2300      	movs	r3, #0
      state = 2; // Try getting a reading again
   b481c:	7033      	strb	r3, [r6, #0]
        blinkLED.setPattern(LED_PATTERN_FADE);
      }

  }

   b481e:	b01d      	add	sp, #116	; 0x74
   b4820:	ecbd 8b02 	vpop	{d8}
   b4824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      Serial.println("Not a valid measurement. HR:" + String(heartRate) + " SPO2: " + String(spo2));
   b4828:	f002 f888 	bl	b693c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b482c:	494f      	ldr	r1, [pc, #316]	; (b496c <loop+0x580>)
   b482e:	4604      	mov	r4, r0
   b4830:	a814      	add	r0, sp, #80	; 0x50
   b4832:	f001 f960 	bl	b5af6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4836:	220a      	movs	r2, #10
   b4838:	6829      	ldr	r1, [r5, #0]
   b483a:	a810      	add	r0, sp, #64	; 0x40
   b483c:	f001 f9ae 	bl	b5b9c <_ZN6StringC1Elh>
   b4840:	a910      	add	r1, sp, #64	; 0x40
   b4842:	a814      	add	r0, sp, #80	; 0x50
   b4844:	f001 fa0f 	bl	b5c66 <_ZplRK15StringSumHelperRK6String>
   b4848:	4949      	ldr	r1, [pc, #292]	; (b4970 <loop+0x584>)
   b484a:	f001 fa18 	bl	b5c7e <_ZplRK15StringSumHelperPKc>
   b484e:	220a      	movs	r2, #10
   b4850:	6839      	ldr	r1, [r7, #0]
   b4852:	4605      	mov	r5, r0
   b4854:	a818      	add	r0, sp, #96	; 0x60
   b4856:	f001 f9a1 	bl	b5b9c <_ZN6StringC1Elh>
   b485a:	a918      	add	r1, sp, #96	; 0x60
   b485c:	4628      	mov	r0, r5
   b485e:	f001 fa02 	bl	b5c66 <_ZplRK15StringSumHelperRK6String>
   b4862:	6801      	ldr	r1, [r0, #0]
   b4864:	4620      	mov	r0, r4
   b4866:	f001 fa88 	bl	b5d7a <_ZN5Print7printlnEPKc>
   b486a:	a818      	add	r0, sp, #96	; 0x60
   b486c:	f001 f8f8 	bl	b5a60 <_ZN6StringD1Ev>
   b4870:	a810      	add	r0, sp, #64	; 0x40
   b4872:	f001 f8f5 	bl	b5a60 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4876:	a814      	add	r0, sp, #80	; 0x50
   b4878:	f001 f8f2 	bl	b5a60 <_ZN6StringD1Ev>
      state = 2; // Try getting a reading again
   b487c:	2302      	movs	r3, #2
   b487e:	e7cd      	b.n	b481c <loop+0x430>
            Serial.println("Stored data point too old - not sent.");
   b4880:	f002 f85c 	bl	b693c <_Z16_fetch_usbserialv>
   b4884:	4651      	mov	r1, sl
   b4886:	f001 fa78 	bl	b5d7a <_ZN5Print7printlnEPKc>
   b488a:	e7af      	b.n	b47ec <loop+0x400>
        if (success) {
   b488c:	b135      	cbz	r5, b489c <loop+0x4b0>
          stored_data_points = 0;
   b488e:	2300      	movs	r3, #0
   b4890:	703b      	strb	r3, [r7, #0]
          Serial.println("All stored data points sent.");
   b4892:	f002 f853 	bl	b693c <_Z16_fetch_usbserialv>
   b4896:	4937      	ldr	r1, [pc, #220]	; (b4974 <loop+0x588>)
   b4898:	f001 fa6f 	bl	b5d7a <_ZN5Print7printlnEPKc>
      String send_data = String("{ \"beat\": \"") + String(heartRate) + "\"" + ", \"ox\": " + String(spo2) + ", \"time\": " + String(Time.format(Time.now(), TIME_FORMAT_ISO8601_FULL)) + "}";
   b489c:	a804      	add	r0, sp, #16
   b489e:	f001 f8df 	bl	b5a60 <_ZN6StringD1Ev>
   b48a2:	e7bc      	b.n	b481e <loop+0x432>
        Serial.println("No internet - saving data for later.");
   b48a4:	f002 f84a 	bl	b693c <_Z16_fetch_usbserialv>
   b48a8:	4933      	ldr	r1, [pc, #204]	; (b4978 <loop+0x58c>)
   b48aa:	f001 fa66 	bl	b5d7a <_ZN5Print7printlnEPKc>
        storage_buffer[stored_data_points] = send_data;
   b48ae:	7838      	ldrb	r0, [r7, #0]
   b48b0:	a904      	add	r1, sp, #16
   b48b2:	eb09 1000 	add.w	r0, r9, r0, lsl #4
   b48b6:	f001 f932 	bl	b5b1e <_ZN6StringaSERKS_>
        when_stored[stored_data_points] = millis();
   b48ba:	f897 8000 	ldrb.w	r8, [r7]
   b48be:	f000 fd39 	bl	b5334 <HAL_Timer_Get_Milli_Seconds>
   b48c2:	4b2e      	ldr	r3, [pc, #184]	; (b497c <loop+0x590>)
        state = 0;
   b48c4:	7035      	strb	r5, [r6, #0]
        when_stored[stored_data_points] = millis();
   b48c6:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
        stored_data_points++;
   b48ca:	783b      	ldrb	r3, [r7, #0]
   b48cc:	3301      	adds	r3, #1
        blinkLED.setSpeed(LED_SPEED_FAST);
   b48ce:	211e      	movs	r1, #30
        stored_data_points++;
   b48d0:	703b      	strb	r3, [r7, #0]
        blinkLED.setSpeed(LED_SPEED_FAST);
   b48d2:	4620      	mov	r0, r4
    d_.color = color;
   b48d4:	4b2a      	ldr	r3, [pc, #168]	; (b4980 <loop+0x594>)
   b48d6:	6163      	str	r3, [r4, #20]
   b48d8:	f7ff fc0c 	bl	b40f4 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b48dc:	7c63      	ldrb	r3, [r4, #17]
   b48de:	2b0f      	cmp	r3, #15
        d_.pattern = pattern;
   b48e0:	bf18      	it	ne
   b48e2:	2302      	movne	r3, #2
        delay(2000);
   b48e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b48e8:	bf18      	it	ne
   b48ea:	7463      	strbne	r3, [r4, #17]
   b48ec:	f001 fc12 	bl	b6114 <delay>
    d_.color = color;
   b48f0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
        blinkLED.setSpeed(LED_SPEED_SLOW);
   b48f4:	4814      	ldr	r0, [pc, #80]	; (b4948 <loop+0x55c>)
   b48f6:	6163      	str	r3, [r4, #20]
   b48f8:	210a      	movs	r1, #10
   b48fa:	f7ff fbfb 	bl	b40f4 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b48fe:	7c63      	ldrb	r3, [r4, #17]
   b4900:	2b0f      	cmp	r3, #15
        d_.pattern = pattern;
   b4902:	bf1c      	itt	ne
   b4904:	2303      	movne	r3, #3
   b4906:	7463      	strbne	r3, [r4, #17]
   b4908:	e7c8      	b.n	b489c <loop+0x4b0>
   b490a:	bf00      	nop
   b490c:	2003df64 	.word	0x2003df64
   b4910:	2003e26d 	.word	0x2003e26d
   b4914:	2003ddc4 	.word	0x2003ddc4
   b4918:	2003e26e 	.word	0x2003e26e
   b491c:	2003de9c 	.word	0x2003de9c
   b4920:	2003ddc8 	.word	0x2003ddc8
   b4924:	000b80f4 	.word	0x000b80f4
   b4928:	000b813a 	.word	0x000b813a
   b492c:	2003e26c 	.word	0x2003e26c
   b4930:	000b8144 	.word	0x000b8144
   b4934:	000b8146 	.word	0x000b8146
   b4938:	000b814f 	.word	0x000b814f
   b493c:	2003dd1c 	.word	0x2003dd1c
   b4940:	2003e6a4 	.word	0x2003e6a4
   b4944:	000b815a 	.word	0x000b815a
   b4948:	2003dd8c 	.word	0x2003dd8c
   b494c:	2003dd89 	.word	0x2003dd89
   b4950:	000b7fb4 	.word	0x000b7fb4
   b4954:	000b815c 	.word	0x000b815c
   b4958:	2003df6c 	.word	0x2003df6c
   b495c:	05265bff 	.word	0x05265bff
   b4960:	000b8174 	.word	0x000b8174
   b4964:	2003de98 	.word	0x2003de98
   b4968:	000927c0 	.word	0x000927c0
   b496c:	000b8115 	.word	0x000b8115
   b4970:	000b8132 	.word	0x000b8132
   b4974:	000b81ae 	.word	0x000b81ae
   b4978:	000b81cb 	.word	0x000b81cb
   b497c:	2003e270 	.word	0x2003e270
   b4980:	00ffff00 	.word	0x00ffff00
   b4984:	000b8188 	.word	0x000b8188
   b4988:	2003dd88 	.word	0x2003dd88

000b498c <_GLOBAL__sub_I_max30105>:
        val_(val) {
   b498c:	4b14      	ldr	r3, [pc, #80]	; (b49e0 <_GLOBAL__sub_I_max30105+0x54>)
   b498e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4990:	2400      	movs	r4, #0
   b4992:	701c      	strb	r4, [r3, #0]
   b4994:	4b13      	ldr	r3, [pc, #76]	; (b49e4 <_GLOBAL__sub_I_max30105+0x58>)
MAX30105 max30105;                    // Sensor
   b4996:	4814      	ldr	r0, [pc, #80]	; (b49e8 <_GLOBAL__sub_I_max30105+0x5c>)
String storage_buffer[48];            //storage for measurements
   b4998:	4d14      	ldr	r5, [pc, #80]	; (b49ec <_GLOBAL__sub_I_max30105+0x60>)
   b499a:	4e15      	ldr	r6, [pc, #84]	; (b49f0 <_GLOBAL__sub_I_max30105+0x64>)
   b499c:	2201      	movs	r2, #1
   b499e:	701a      	strb	r2, [r3, #0]
MAX30105 max30105;                    // Sensor
   b49a0:	f000 f82c 	bl	b49fc <_ZN8MAX30105C1Ev>
String data = String(10);             //data to be sent to server
   b49a4:	220a      	movs	r2, #10
   b49a6:	4813      	ldr	r0, [pc, #76]	; (b49f4 <_GLOBAL__sub_I_max30105+0x68>)
   b49a8:	4611      	mov	r1, r2
   b49aa:	f001 f8e4 	bl	b5b76 <_ZN6StringC1Eih>
String storage_buffer[48];            //storage for measurements
   b49ae:	1928      	adds	r0, r5, r4
   b49b0:	4631      	mov	r1, r6
   b49b2:	3410      	adds	r4, #16
   b49b4:	f001 f89f 	bl	b5af6 <_ZN6StringC1EPK19__FlashStringHelper>
   b49b8:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
   b49bc:	d1f7      	bne.n	b49ae <_GLOBAL__sub_I_max30105+0x22>
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b49be:	2200      	movs	r2, #0
   b49c0:	211e      	movs	r1, #30
   b49c2:	2002      	movs	r0, #2
   b49c4:	f000 fdd8 	bl	b5578 <led_pattern_period>
   b49c8:	221e      	movs	r2, #30
   b49ca:	2101      	movs	r1, #1
   b49cc:	e9cd 2100 	strd	r2, r1, [sp]
   b49d0:	4603      	mov	r3, r0
   b49d2:	2202      	movs	r2, #2
   b49d4:	21ff      	movs	r1, #255	; 0xff
   b49d6:	4808      	ldr	r0, [pc, #32]	; (b49f8 <_GLOBAL__sub_I_max30105+0x6c>)
   b49d8:	f000 ff1e 	bl	b5818 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
   b49dc:	b002      	add	sp, #8
   b49de:	bd70      	pop	{r4, r5, r6, pc}
   b49e0:	2003dd88 	.word	0x2003dd88
   b49e4:	2003dd89 	.word	0x2003dd89
   b49e8:	2003de90 	.word	0x2003de90
   b49ec:	2003df6c 	.word	0x2003df6c
   b49f0:	000b8478 	.word	0x000b8478
   b49f4:	2003ddb4 	.word	0x2003ddb4
   b49f8:	2003dd8c 	.word	0x2003dd8c

000b49fc <_ZN8MAX30105C1Ev>:
  byte tail;
} sense; //This is our circular buffer of readings from the sensor

MAX30105::MAX30105() {
  // Constructor
}
   b49fc:	4770      	bx	lr
	...

000b4a00 <_ZN8MAX301059availableEv>:
//

//Tell caller how many samples are available
uint8_t MAX30105::available(void)
{
  uint8_t numberOfSamples = sense.head - sense.tail;
   b4a00:	4b03      	ldr	r3, [pc, #12]	; (b4a10 <_ZN8MAX301059availableEv+0x10>)
   b4a02:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
   b4a06:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   b4a0a:	1ac0      	subs	r0, r0, r3
  if (numberOfSamples < 0) numberOfSamples += STORAGE_SIZE;

  return (numberOfSamples);
}
   b4a0c:	b2c0      	uxtb	r0, r0
   b4a0e:	4770      	bx	lr
   b4a10:	2003e330 	.word	0x2003e330

000b4a14 <_ZN8MAX3010510nextSampleEv>:
  uint8_t numberOfSamples = sense.head - sense.tail;
   b4a14:	4a06      	ldr	r2, [pc, #24]	; (b4a30 <_ZN8MAX3010510nextSampleEv+0x1c>)
   b4a16:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
}

//Advance the tail
void MAX30105::nextSample(void)
{
  if(available()) //Only advance the tail if new data is available
   b4a1a:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
   b4a1e:	4299      	cmp	r1, r3
  {
    sense.tail++;
   b4a20:	bf1e      	ittt	ne
   b4a22:	3301      	addne	r3, #1
    sense.tail %= STORAGE_SIZE; //Wrap condition
   b4a24:	f003 0303 	andne.w	r3, r3, #3
   b4a28:	f882 3031 	strbne.w	r3, [r2, #49]	; 0x31
  }
}
   b4a2c:	4770      	bx	lr
   b4a2e:	bf00      	nop
   b4a30:	2003e330 	.word	0x2003e330

000b4a34 <_ZN8MAX3010513readRegister8Ehh>:
}

//
// Low-level I2C Communication
//
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
   b4a34:	b538      	push	{r3, r4, r5, lr}
   b4a36:	460c      	mov	r4, r1
   b4a38:	4615      	mov	r5, r2

	Wire.beginTransmission(address);
   b4a3a:	f002 f9df 	bl	b6dfc <_Z19__fetch_global_Wirev>
   b4a3e:	4621      	mov	r1, r4
   b4a40:	f002 f884 	bl	b6b4c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(reg);
   b4a44:	f002 f9da 	bl	b6dfc <_Z19__fetch_global_Wirev>
   b4a48:	6803      	ldr	r3, [r0, #0]
   b4a4a:	4629      	mov	r1, r5
   b4a4c:	689b      	ldr	r3, [r3, #8]
   b4a4e:	4798      	blx	r3
	Wire.endTransmission();
   b4a50:	f002 f9d4 	bl	b6dfc <_Z19__fetch_global_Wirev>
   b4a54:	f002 f882 	bl	b6b5c <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(address, 1);
   b4a58:	f002 f9d0 	bl	b6dfc <_Z19__fetch_global_Wirev>
   b4a5c:	2201      	movs	r2, #1
   b4a5e:	4621      	mov	r1, r4
   b4a60:	f002 f871 	bl	b6b46 <_ZN7TwoWire11requestFromEhj>
	while ( Wire.available() ) // slave may send less than requested
   b4a64:	f002 f9ca 	bl	b6dfc <_Z19__fetch_global_Wirev>
   b4a68:	6803      	ldr	r3, [r0, #0]
   b4a6a:	691b      	ldr	r3, [r3, #16]
   b4a6c:	4798      	blx	r3
   b4a6e:	b128      	cbz	r0, b4a7c <_ZN8MAX3010513readRegister8Ehh+0x48>
	{
		return(Wire.read()); // receive a byte as a proper uint8_t
   b4a70:	f002 f9c4 	bl	b6dfc <_Z19__fetch_global_Wirev>
   b4a74:	6803      	ldr	r3, [r0, #0]
   b4a76:	695b      	ldr	r3, [r3, #20]
   b4a78:	4798      	blx	r3
   b4a7a:	b2c0      	uxtb	r0, r0
	}

}

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
   b4a7c:	bd38      	pop	{r3, r4, r5, pc}

000b4a7e <_ZN8MAX3010515getWritePointerEv>:
  return (readRegister8(MAX30105_ADDRESS, MAX30105_FIFOWRITEPTR));
   b4a7e:	2204      	movs	r2, #4
   b4a80:	2157      	movs	r1, #87	; 0x57
   b4a82:	f7ff bfd7 	b.w	b4a34 <_ZN8MAX3010513readRegister8Ehh>

000b4a86 <_ZN8MAX3010514getReadPointerEv>:
  return (readRegister8(MAX30105_ADDRESS, MAX30105_FIFOREADPTR));
   b4a86:	2206      	movs	r2, #6
   b4a88:	2157      	movs	r1, #87	; 0x57
   b4a8a:	f7ff bfd3 	b.w	b4a34 <_ZN8MAX3010513readRegister8Ehh>
	...

000b4a90 <_ZN8MAX301055checkEv>:
{
   b4a90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b4a94:	4607      	mov	r7, r0
  byte readPointer = getReadPointer();
   b4a96:	f7ff fff6 	bl	b4a86 <_ZN8MAX3010514getReadPointerEv>
   b4a9a:	4604      	mov	r4, r0
  byte writePointer = getWritePointer();
   b4a9c:	4638      	mov	r0, r7
   b4a9e:	f7ff ffee 	bl	b4a7e <_ZN8MAX3010515getWritePointerEv>
  if (readPointer != writePointer)
   b4aa2:	4284      	cmp	r4, r0
   b4aa4:	f000 809b 	beq.w	b4bde <_ZN8MAX301055checkEv+0x14e>
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
   b4aa8:	1b04      	subs	r4, r0, r4
   b4aaa:	bf48      	it	mi
   b4aac:	3420      	addmi	r4, #32
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
   b4aae:	797e      	ldrb	r6, [r7, #5]
        sense.head %= STORAGE_SIZE; //Wrap condition
   b4ab0:	f8df 8134 	ldr.w	r8, [pc, #308]	; b4be8 <_ZN8MAX301055checkEv+0x158>
    Wire.beginTransmission(MAX30105_ADDRESS);
   b4ab4:	f002 f9a2 	bl	b6dfc <_Z19__fetch_global_Wirev>
   b4ab8:	2157      	movs	r1, #87	; 0x57
   b4aba:	f002 f847 	bl	b6b4c <_ZN7TwoWire17beginTransmissionEh>
    Wire.write(MAX30105_FIFODATA);
   b4abe:	f002 f99d 	bl	b6dfc <_Z19__fetch_global_Wirev>
   b4ac2:	6803      	ldr	r3, [r0, #0]
   b4ac4:	2107      	movs	r1, #7
   b4ac6:	689b      	ldr	r3, [r3, #8]
   b4ac8:	4798      	blx	r3
    Wire.endTransmission();
   b4aca:	f002 f997 	bl	b6dfc <_Z19__fetch_global_Wirev>
   b4ace:	f002 f845 	bl	b6b5c <_ZN7TwoWire15endTransmissionEv>
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
   b4ad2:	4366      	muls	r6, r4
   b4ad4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    while (bytesLeftToRead > 0)
   b4ad8:	2e00      	cmp	r6, #0
   b4ada:	f340 8081 	ble.w	b4be0 <_ZN8MAX301055checkEv+0x150>
      if (toGet > I2C_BUFFER_LENGTH)
   b4ade:	2e20      	cmp	r6, #32
        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   b4ae0:	bfc3      	ittte	gt
   b4ae2:	797d      	ldrbgt	r5, [r7, #5]
   b4ae4:	eb05 0345 	addgt.w	r3, r5, r5, lsl #1
   b4ae8:	2520      	movgt	r5, #32
   b4aea:	4635      	movle	r5, r6
   b4aec:	bfc4      	itt	gt
   b4aee:	fbb5 f5f3 	udivgt	r5, r5, r3
   b4af2:	435d      	mulgt	r5, r3
      Wire.requestFrom(MAX30105_ADDRESS, toGet);
   b4af4:	f002 f982 	bl	b6dfc <_Z19__fetch_global_Wirev>
   b4af8:	462a      	mov	r2, r5
   b4afa:	2157      	movs	r1, #87	; 0x57
   b4afc:	f002 f823 	bl	b6b46 <_ZN7TwoWire11requestFromEhj>
      bytesLeftToRead -= toGet;
   b4b00:	1b76      	subs	r6, r6, r5
        temp[3] = 0;
   b4b02:	f04f 0900 	mov.w	r9, #0
      while (toGet > 0)
   b4b06:	2d00      	cmp	r5, #0
   b4b08:	dde6      	ble.n	b4ad8 <_ZN8MAX301055checkEv+0x48>
        sense.head++; //Advance the head of the storage struct
   b4b0a:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
        temp[3] = 0;
   b4b0e:	f88d 9007 	strb.w	r9, [sp, #7]
        sense.head++; //Advance the head of the storage struct
   b4b12:	3301      	adds	r3, #1
        sense.head %= STORAGE_SIZE; //Wrap condition
   b4b14:	f003 0303 	and.w	r3, r3, #3
   b4b18:	f888 3030 	strb.w	r3, [r8, #48]	; 0x30
        temp[2] = Wire.read();
   b4b1c:	f002 f96e 	bl	b6dfc <_Z19__fetch_global_Wirev>
   b4b20:	6803      	ldr	r3, [r0, #0]
   b4b22:	695b      	ldr	r3, [r3, #20]
   b4b24:	4798      	blx	r3
   b4b26:	f88d 0006 	strb.w	r0, [sp, #6]
        temp[1] = Wire.read();
   b4b2a:	f002 f967 	bl	b6dfc <_Z19__fetch_global_Wirev>
   b4b2e:	6803      	ldr	r3, [r0, #0]
   b4b30:	695b      	ldr	r3, [r3, #20]
   b4b32:	4798      	blx	r3
   b4b34:	f88d 0005 	strb.w	r0, [sp, #5]
        temp[0] = Wire.read();
   b4b38:	f002 f960 	bl	b6dfc <_Z19__fetch_global_Wirev>
   b4b3c:	6803      	ldr	r3, [r0, #0]
   b4b3e:	695b      	ldr	r3, [r3, #20]
   b4b40:	4798      	blx	r3
   b4b42:	f88d 0004 	strb.w	r0, [sp, #4]
		tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b4b46:	9b01      	ldr	r3, [sp, #4]
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   b4b48:	f898 2030 	ldrb.w	r2, [r8, #48]	; 0x30
		tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b4b4c:	f3c3 0311 	ubfx	r3, r3, #0, #18
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   b4b50:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
        if (activeLEDs > 1)
   b4b54:	797b      	ldrb	r3, [r7, #5]
   b4b56:	2b01      	cmp	r3, #1
   b4b58:	d91c      	bls.n	b4b94 <_ZN8MAX301055checkEv+0x104>
          temp[2] = Wire.read();
   b4b5a:	f002 f94f 	bl	b6dfc <_Z19__fetch_global_Wirev>
   b4b5e:	6803      	ldr	r3, [r0, #0]
   b4b60:	695b      	ldr	r3, [r3, #20]
   b4b62:	4798      	blx	r3
   b4b64:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = Wire.read();
   b4b68:	f002 f948 	bl	b6dfc <_Z19__fetch_global_Wirev>
   b4b6c:	6803      	ldr	r3, [r0, #0]
   b4b6e:	695b      	ldr	r3, [r3, #20]
   b4b70:	4798      	blx	r3
   b4b72:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = Wire.read();
   b4b76:	f002 f941 	bl	b6dfc <_Z19__fetch_global_Wirev>
   b4b7a:	6803      	ldr	r3, [r0, #0]
   b4b7c:	695b      	ldr	r3, [r3, #20]
   b4b7e:	4798      	blx	r3
		  sense.IR[sense.head] = tempLong;
   b4b80:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
          temp[0] = Wire.read();
   b4b84:	f88d 0004 	strb.w	r0, [sp, #4]
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b4b88:	9a01      	ldr	r2, [sp, #4]
		  sense.IR[sense.head] = tempLong;
   b4b8a:	3304      	adds	r3, #4
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b4b8c:	f3c2 0211 	ubfx	r2, r2, #0, #18
		  sense.IR[sense.head] = tempLong;
   b4b90:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
        if (activeLEDs > 2)
   b4b94:	797b      	ldrb	r3, [r7, #5]
   b4b96:	2b02      	cmp	r3, #2
   b4b98:	d91c      	bls.n	b4bd4 <_ZN8MAX301055checkEv+0x144>
          temp[2] = Wire.read();
   b4b9a:	f002 f92f 	bl	b6dfc <_Z19__fetch_global_Wirev>
   b4b9e:	6803      	ldr	r3, [r0, #0]
   b4ba0:	695b      	ldr	r3, [r3, #20]
   b4ba2:	4798      	blx	r3
   b4ba4:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = Wire.read();
   b4ba8:	f002 f928 	bl	b6dfc <_Z19__fetch_global_Wirev>
   b4bac:	6803      	ldr	r3, [r0, #0]
   b4bae:	695b      	ldr	r3, [r3, #20]
   b4bb0:	4798      	blx	r3
   b4bb2:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = Wire.read();
   b4bb6:	f002 f921 	bl	b6dfc <_Z19__fetch_global_Wirev>
   b4bba:	6803      	ldr	r3, [r0, #0]
   b4bbc:	695b      	ldr	r3, [r3, #20]
   b4bbe:	4798      	blx	r3
          sense.green[sense.head] = tempLong;
   b4bc0:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
          temp[0] = Wire.read();
   b4bc4:	f88d 0004 	strb.w	r0, [sp, #4]
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b4bc8:	9a01      	ldr	r2, [sp, #4]
          sense.green[sense.head] = tempLong;
   b4bca:	3308      	adds	r3, #8
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b4bcc:	f3c2 0211 	ubfx	r2, r2, #0, #18
          sense.green[sense.head] = tempLong;
   b4bd0:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
        toGet -= activeLEDs * 3;
   b4bd4:	797b      	ldrb	r3, [r7, #5]
   b4bd6:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   b4bda:	441d      	add	r5, r3
      while (toGet > 0)
   b4bdc:	e793      	b.n	b4b06 <_ZN8MAX301055checkEv+0x76>
  int numberOfSamples = 0;
   b4bde:	2400      	movs	r4, #0
}
   b4be0:	b2a0      	uxth	r0, r4
   b4be2:	b003      	add	sp, #12
   b4be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4be8:	2003e330 	.word	0x2003e330

000b4bec <_ZN8MAX301059safeCheckEh>:
{
   b4bec:	b570      	push	{r4, r5, r6, lr}
   b4bee:	4605      	mov	r5, r0
   b4bf0:	460e      	mov	r6, r1
   b4bf2:	f000 fb9f 	bl	b5334 <HAL_Timer_Get_Milli_Seconds>
   b4bf6:	4604      	mov	r4, r0
   b4bf8:	f000 fb9c 	bl	b5334 <HAL_Timer_Get_Milli_Seconds>
	if(millis() - markTime > maxTimeToCheck) return(false);
   b4bfc:	1b00      	subs	r0, r0, r4
   b4bfe:	42b0      	cmp	r0, r6
   b4c00:	d808      	bhi.n	b4c14 <_ZN8MAX301059safeCheckEh+0x28>
	if(check() == true) //We found new data!
   b4c02:	4628      	mov	r0, r5
   b4c04:	f7ff ff44 	bl	b4a90 <_ZN8MAX301055checkEv>
   b4c08:	2801      	cmp	r0, #1
   b4c0a:	d004      	beq.n	b4c16 <_ZN8MAX301059safeCheckEh+0x2a>
	delay(1);
   b4c0c:	2001      	movs	r0, #1
   b4c0e:	f001 fa81 	bl	b6114 <delay>
	if(millis() - markTime > maxTimeToCheck) return(false);
   b4c12:	e7f1      	b.n	b4bf8 <_ZN8MAX301059safeCheckEh+0xc>
   b4c14:	2000      	movs	r0, #0
}
   b4c16:	bd70      	pop	{r4, r5, r6, pc}

000b4c18 <_ZN8MAX301056getRedEv>:
{
   b4c18:	b508      	push	{r3, lr}
  if(safeCheck(250))
   b4c1a:	21fa      	movs	r1, #250	; 0xfa
   b4c1c:	f7ff ffe6 	bl	b4bec <_ZN8MAX301059safeCheckEh>
   b4c20:	b120      	cbz	r0, b4c2c <_ZN8MAX301056getRedEv+0x14>
    return (sense.red[sense.head]);
   b4c22:	4b03      	ldr	r3, [pc, #12]	; (b4c30 <_ZN8MAX301056getRedEv+0x18>)
   b4c24:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   b4c28:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
}
   b4c2c:	bd08      	pop	{r3, pc}
   b4c2e:	bf00      	nop
   b4c30:	2003e330 	.word	0x2003e330

000b4c34 <_ZN8MAX301055getIREv>:
{
   b4c34:	b508      	push	{r3, lr}
  if(safeCheck(250))
   b4c36:	21fa      	movs	r1, #250	; 0xfa
   b4c38:	f7ff ffd8 	bl	b4bec <_ZN8MAX301059safeCheckEh>
   b4c3c:	b128      	cbz	r0, b4c4a <_ZN8MAX301055getIREv+0x16>
    return (sense.IR[sense.head]);
   b4c3e:	4a03      	ldr	r2, [pc, #12]	; (b4c4c <_ZN8MAX301055getIREv+0x18>)
   b4c40:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   b4c44:	3304      	adds	r3, #4
   b4c46:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
}
   b4c4a:	bd08      	pop	{r3, pc}
   b4c4c:	2003e330 	.word	0x2003e330

000b4c50 <_ZN8MAX3010510readPartIDEv>:
  return readRegister8(MAX30105_ADDRESS, MAX30105_PARTID);
   b4c50:	22ff      	movs	r2, #255	; 0xff
   b4c52:	2157      	movs	r1, #87	; 0x57
   b4c54:	f7ff beee 	b.w	b4a34 <_ZN8MAX3010513readRegister8Ehh>

000b4c58 <_ZN8MAX3010514readRevisionIDEv>:
void MAX30105::readRevisionID() {
   b4c58:	b510      	push	{r4, lr}
  revisionID = readRegister8(MAX30105_ADDRESS, MAX30105_REVISIONID);
   b4c5a:	22fe      	movs	r2, #254	; 0xfe
   b4c5c:	2157      	movs	r1, #87	; 0x57
void MAX30105::readRevisionID() {
   b4c5e:	4604      	mov	r4, r0
  revisionID = readRegister8(MAX30105_ADDRESS, MAX30105_REVISIONID);
   b4c60:	f7ff fee8 	bl	b4a34 <_ZN8MAX3010513readRegister8Ehh>
   b4c64:	71a0      	strb	r0, [r4, #6]
}
   b4c66:	bd10      	pop	{r4, pc}

000b4c68 <_ZN8MAX301055beginEv>:
boolean MAX30105::begin() {
   b4c68:	b510      	push	{r4, lr}
   b4c6a:	4604      	mov	r4, r0
 	Wire.begin();
   b4c6c:	f002 f8c6 	bl	b6dfc <_Z19__fetch_global_Wirev>
   b4c70:	f001 ff3a 	bl	b6ae8 <_ZN7TwoWire5beginEv>
  if (!readPartID() == MAX_30105_EXPECTEDPARTID) {
   b4c74:	4620      	mov	r0, r4
   b4c76:	f7ff ffeb 	bl	b4c50 <_ZN8MAX3010510readPartIDEv>
  readRevisionID();
   b4c7a:	4620      	mov	r0, r4
   b4c7c:	f7ff ffec 	bl	b4c58 <_ZN8MAX3010514readRevisionIDEv>
}
   b4c80:	2001      	movs	r0, #1
   b4c82:	bd10      	pop	{r4, pc}

000b4c84 <_ZN8MAX3010514writeRegister8Ehhh>:
  Wire.beginTransmission(address);
  Wire.write(reg);
   b4c84:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4c86:	4615      	mov	r5, r2
   b4c88:	461c      	mov	r4, r3
   b4c8a:	9101      	str	r1, [sp, #4]
  Wire.write(value);
   b4c8c:	f002 f8b6 	bl	b6dfc <_Z19__fetch_global_Wirev>
   b4c90:	9901      	ldr	r1, [sp, #4]
   b4c92:	f001 ff5b 	bl	b6b4c <_ZN7TwoWire17beginTransmissionEh>
  Wire.endTransmission();
   b4c96:	f002 f8b1 	bl	b6dfc <_Z19__fetch_global_Wirev>
   b4c9a:	6803      	ldr	r3, [r0, #0]
   b4c9c:	4629      	mov	r1, r5
   b4c9e:	689b      	ldr	r3, [r3, #8]
   b4ca0:	4798      	blx	r3
}
   b4ca2:	f002 f8ab 	bl	b6dfc <_Z19__fetch_global_Wirev>
   b4ca6:	6803      	ldr	r3, [r0, #0]
   b4ca8:	4621      	mov	r1, r4
   b4caa:	689b      	ldr	r3, [r3, #8]
   b4cac:	4798      	blx	r3
   b4cae:	f002 f8a5 	bl	b6dfc <_Z19__fetch_global_Wirev>
   b4cb2:	b003      	add	sp, #12
   b4cb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   b4cb8:	f001 bf50 	b.w	b6b5c <_ZN7TwoWire15endTransmissionEv>

000b4cbc <_ZN8MAX3010520setPulseAmplitudeRedEh>:
void MAX30105::setPulseAmplitudeRed(uint8_t amplitude) {
   b4cbc:	460b      	mov	r3, r1
  writeRegister8(MAX30105_ADDRESS, MAX30105_LED1_PULSEAMP, amplitude);
   b4cbe:	220c      	movs	r2, #12
   b4cc0:	2157      	movs	r1, #87	; 0x57
   b4cc2:	f7ff bfdf 	b.w	b4c84 <_ZN8MAX3010514writeRegister8Ehhh>

000b4cc6 <_ZN8MAX3010519setPulseAmplitudeIREh>:
void MAX30105::setPulseAmplitudeIR(uint8_t amplitude) {
   b4cc6:	460b      	mov	r3, r1
  writeRegister8(MAX30105_ADDRESS, MAX30105_LED2_PULSEAMP, amplitude);
   b4cc8:	220d      	movs	r2, #13
   b4cca:	2157      	movs	r1, #87	; 0x57
   b4ccc:	f7ff bfda 	b.w	b4c84 <_ZN8MAX3010514writeRegister8Ehhh>

000b4cd0 <_ZN8MAX3010522setPulseAmplitudeGreenEh>:
void MAX30105::setPulseAmplitudeGreen(uint8_t amplitude) {
   b4cd0:	460b      	mov	r3, r1
  writeRegister8(MAX30105_ADDRESS, MAX30105_LED3_PULSEAMP, amplitude);
   b4cd2:	220e      	movs	r2, #14
   b4cd4:	2157      	movs	r1, #87	; 0x57
   b4cd6:	f7ff bfd5 	b.w	b4c84 <_ZN8MAX3010514writeRegister8Ehhh>

000b4cda <_ZN8MAX3010526setPulseAmplitudeProximityEh>:
void MAX30105::setPulseAmplitudeProximity(uint8_t amplitude) {
   b4cda:	460b      	mov	r3, r1
  writeRegister8(MAX30105_ADDRESS, MAX30105_LED_PROX_AMP, amplitude);
   b4cdc:	2210      	movs	r2, #16
   b4cde:	2157      	movs	r1, #87	; 0x57
   b4ce0:	f7ff bfd0 	b.w	b4c84 <_ZN8MAX3010514writeRegister8Ehhh>

000b4ce4 <_ZN8MAX301059clearFIFOEv>:
void MAX30105::clearFIFO(void) {
   b4ce4:	b510      	push	{r4, lr}
  writeRegister8(MAX30105_ADDRESS, MAX30105_FIFOWRITEPTR, 0);
   b4ce6:	2300      	movs	r3, #0
void MAX30105::clearFIFO(void) {
   b4ce8:	4604      	mov	r4, r0
  writeRegister8(MAX30105_ADDRESS, MAX30105_FIFOWRITEPTR, 0);
   b4cea:	2204      	movs	r2, #4
   b4cec:	2157      	movs	r1, #87	; 0x57
   b4cee:	f7ff ffc9 	bl	b4c84 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(MAX30105_ADDRESS, MAX30105_FIFOOVERFLOW, 0);
   b4cf2:	4620      	mov	r0, r4
   b4cf4:	2300      	movs	r3, #0
   b4cf6:	2205      	movs	r2, #5
   b4cf8:	2157      	movs	r1, #87	; 0x57
   b4cfa:	f7ff ffc3 	bl	b4c84 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(MAX30105_ADDRESS, MAX30105_FIFOREADPTR, 0);
   b4cfe:	4620      	mov	r0, r4
   b4d00:	2300      	movs	r3, #0
}
   b4d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeRegister8(MAX30105_ADDRESS, MAX30105_FIFOREADPTR, 0);
   b4d06:	2206      	movs	r2, #6
   b4d08:	2157      	movs	r1, #87	; 0x57
   b4d0a:	f7ff bfbb 	b.w	b4c84 <_ZN8MAX3010514writeRegister8Ehhh>

000b4d0e <_ZN8MAX301057bitMaskEhhh>:
{
   b4d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4d12:	460c      	mov	r4, r1
   b4d14:	4617      	mov	r7, r2
  uint8_t originalContents = readRegister8(MAX30105_ADDRESS, reg);
   b4d16:	460a      	mov	r2, r1
   b4d18:	2157      	movs	r1, #87	; 0x57
{
   b4d1a:	4605      	mov	r5, r0
   b4d1c:	461e      	mov	r6, r3
  uint8_t originalContents = readRegister8(MAX30105_ADDRESS, reg);
   b4d1e:	f7ff fe89 	bl	b4a34 <_ZN8MAX3010513readRegister8Ehh>
  originalContents = originalContents & mask;
   b4d22:	4038      	ands	r0, r7
  writeRegister8(MAX30105_ADDRESS, reg, originalContents | thing);
   b4d24:	ea46 0300 	orr.w	r3, r6, r0
   b4d28:	4622      	mov	r2, r4
   b4d2a:	4628      	mov	r0, r5
   b4d2c:	2157      	movs	r1, #87	; 0x57
}
   b4d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  writeRegister8(MAX30105_ADDRESS, reg, originalContents | thing);
   b4d32:	f7ff bfa7 	b.w	b4c84 <_ZN8MAX3010514writeRegister8Ehhh>

000b4d36 <_ZN8MAX301059softResetEv>:
void MAX30105::softReset(void) {
   b4d36:	b538      	push	{r3, r4, r5, lr}
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
   b4d38:	22bf      	movs	r2, #191	; 0xbf
   b4d3a:	2340      	movs	r3, #64	; 0x40
   b4d3c:	2109      	movs	r1, #9
void MAX30105::softReset(void) {
   b4d3e:	4605      	mov	r5, r0
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
   b4d40:	f7ff ffe5 	bl	b4d0e <_ZN8MAX301057bitMaskEhhh>
   b4d44:	f000 faf6 	bl	b5334 <HAL_Timer_Get_Milli_Seconds>
   b4d48:	4604      	mov	r4, r0
   b4d4a:	f000 faf3 	bl	b5334 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < 100)
   b4d4e:	1b00      	subs	r0, r0, r4
   b4d50:	2863      	cmp	r0, #99	; 0x63
   b4d52:	d80a      	bhi.n	b4d6a <_ZN8MAX301059softResetEv+0x34>
    uint8_t response = readRegister8(MAX30105_ADDRESS, MAX30105_MODECONFIG);
   b4d54:	2209      	movs	r2, #9
   b4d56:	2157      	movs	r1, #87	; 0x57
   b4d58:	4628      	mov	r0, r5
   b4d5a:	f7ff fe6b 	bl	b4a34 <_ZN8MAX3010513readRegister8Ehh>
    if ((response & MAX30105_RESET) == 0) break; //We're done!
   b4d5e:	0643      	lsls	r3, r0, #25
   b4d60:	d503      	bpl.n	b4d6a <_ZN8MAX301059softResetEv+0x34>
    delay(1); //Let's not over burden the I2C bus
   b4d62:	2001      	movs	r0, #1
   b4d64:	f001 f9d6 	bl	b6114 <delay>
  while (millis() - startTime < 100)
   b4d68:	e7ef      	b.n	b4d4a <_ZN8MAX301059softResetEv+0x14>
}
   b4d6a:	bd38      	pop	{r3, r4, r5, pc}

000b4d6c <_ZN8MAX3010510setLEDModeEh>:
void MAX30105::setLEDMode(uint8_t mode) {
   b4d6c:	460b      	mov	r3, r1
  bitMask(MAX30105_MODECONFIG, MAX30105_MODE_MASK, mode);
   b4d6e:	22f8      	movs	r2, #248	; 0xf8
   b4d70:	2109      	movs	r1, #9
   b4d72:	f7ff bfcc 	b.w	b4d0e <_ZN8MAX301057bitMaskEhhh>

000b4d76 <_ZN8MAX3010511setADCRangeEh>:
void MAX30105::setADCRange(uint8_t adcRange) {
   b4d76:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_ADCRANGE_MASK, adcRange);
   b4d78:	229f      	movs	r2, #159	; 0x9f
   b4d7a:	210a      	movs	r1, #10
   b4d7c:	f7ff bfc7 	b.w	b4d0e <_ZN8MAX301057bitMaskEhhh>

000b4d80 <_ZN8MAX3010513setSampleRateEh>:
void MAX30105::setSampleRate(uint8_t sampleRate) {
   b4d80:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_SAMPLERATE_MASK, sampleRate);
   b4d82:	22e3      	movs	r2, #227	; 0xe3
   b4d84:	210a      	movs	r1, #10
   b4d86:	f7ff bfc2 	b.w	b4d0e <_ZN8MAX301057bitMaskEhhh>

000b4d8a <_ZN8MAX3010513setPulseWidthEh>:
void MAX30105::setPulseWidth(uint8_t pulseWidth) {
   b4d8a:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_PULSEWIDTH_MASK, pulseWidth);
   b4d8c:	22fc      	movs	r2, #252	; 0xfc
   b4d8e:	210a      	movs	r1, #10
   b4d90:	f7ff bfbd 	b.w	b4d0e <_ZN8MAX301057bitMaskEhhh>

000b4d94 <_ZN8MAX3010510enableSlotEhh>:
  switch (slotNumber) {
   b4d94:	3901      	subs	r1, #1
void MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {
   b4d96:	4613      	mov	r3, r2
   b4d98:	2903      	cmp	r1, #3
   b4d9a:	d814      	bhi.n	b4dc6 <_ZN8MAX3010510enableSlotEhh+0x32>
   b4d9c:	e8df f001 	tbb	[pc, r1]
   b4da0:	0e0b0602 	.word	0x0e0b0602
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
   b4da4:	22f8      	movs	r2, #248	; 0xf8
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   b4da6:	2111      	movs	r1, #17
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
   b4da8:	f7ff bfb1 	b.w	b4d0e <_ZN8MAX301057bitMaskEhhh>
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   b4dac:	011b      	lsls	r3, r3, #4
   b4dae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   b4db2:	228f      	movs	r2, #143	; 0x8f
   b4db4:	e7f7      	b.n	b4da6 <_ZN8MAX3010510enableSlotEhh+0x12>
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT3_MASK, device);
   b4db6:	22f8      	movs	r2, #248	; 0xf8
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
   b4db8:	2112      	movs	r1, #18
   b4dba:	e7f5      	b.n	b4da8 <_ZN8MAX3010510enableSlotEhh+0x14>
   b4dbc:	011b      	lsls	r3, r3, #4
   b4dbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   b4dc2:	228f      	movs	r2, #143	; 0x8f
   b4dc4:	e7f8      	b.n	b4db8 <_ZN8MAX3010510enableSlotEhh+0x24>
}
   b4dc6:	4770      	bx	lr

000b4dc8 <_ZN8MAX3010514setFIFOAverageEh>:
void MAX30105::setFIFOAverage(uint8_t numberOfSamples) {
   b4dc8:	460b      	mov	r3, r1
  bitMask(MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);
   b4dca:	221f      	movs	r2, #31
   b4dcc:	2108      	movs	r1, #8
   b4dce:	f7ff bf9e 	b.w	b4d0e <_ZN8MAX301057bitMaskEhhh>

000b4dd2 <_ZN8MAX3010518enableFIFORolloverEv>:
  bitMask(MAX30105_FIFOCONFIG, MAX30105_ROLLOVER_MASK, MAX30105_ROLLOVER_ENABLE);
   b4dd2:	2310      	movs	r3, #16
   b4dd4:	22ef      	movs	r2, #239	; 0xef
   b4dd6:	2108      	movs	r1, #8
   b4dd8:	f7ff bf99 	b.w	b4d0e <_ZN8MAX301057bitMaskEhhh>

000b4ddc <_ZN8MAX301055setupEhhhiii>:
void MAX30105::setup(byte powerLevel, byte sampleAverage, byte ledMode, int sampleRate, int pulseWidth, int adcRange) {
   b4ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4de0:	4615      	mov	r5, r2
   b4de2:	e9dd 7908 	ldrd	r7, r9, [sp, #32]
   b4de6:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   b4dea:	4604      	mov	r4, r0
   b4dec:	4688      	mov	r8, r1
   b4dee:	461e      	mov	r6, r3
  softReset(); //Reset all configuration, threshold, and data registers to POR values
   b4df0:	f7ff ffa1 	bl	b4d36 <_ZN8MAX301059softResetEv>
  if (sampleAverage == 1) setFIFOAverage(MAX30105_SAMPLEAVG_1); //No averaging per FIFO record
   b4df4:	2d01      	cmp	r5, #1
   b4df6:	d149      	bne.n	b4e8c <_ZN8MAX301055setupEhhhiii+0xb0>
   b4df8:	2100      	movs	r1, #0
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
   b4dfa:	4620      	mov	r0, r4
   b4dfc:	f7ff ffe4 	bl	b4dc8 <_ZN8MAX3010514setFIFOAverageEh>
  enableFIFORollover(); //Allow FIFO to wrap/roll over
   b4e00:	4620      	mov	r0, r4
   b4e02:	f7ff ffe6 	bl	b4dd2 <_ZN8MAX3010518enableFIFORolloverEv>
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
   b4e06:	2e03      	cmp	r6, #3
   b4e08:	d154      	bne.n	b4eb4 <_ZN8MAX301055setupEhhhiii+0xd8>
   b4e0a:	2107      	movs	r1, #7
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
   b4e0c:	4620      	mov	r0, r4
   b4e0e:	f7ff ffad 	bl	b4d6c <_ZN8MAX3010510setLEDModeEh>
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
   b4e12:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
   b4e16:	7166      	strb	r6, [r4, #5]
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
   b4e18:	da51      	bge.n	b4ebe <_ZN8MAX301055setupEhhhiii+0xe2>
   b4e1a:	2100      	movs	r1, #0
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
   b4e1c:	4620      	mov	r0, r4
   b4e1e:	f7ff ffaa 	bl	b4d76 <_ZN8MAX3010511setADCRangeEh>
  if (sampleRate < 100) setSampleRate(MAX30105_SAMPLERATE_50); //Take 50 samples per second
   b4e22:	2f63      	cmp	r7, #99	; 0x63
   b4e24:	dc58      	bgt.n	b4ed8 <_ZN8MAX301055setupEhhhiii+0xfc>
   b4e26:	2100      	movs	r1, #0
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
   b4e28:	4620      	mov	r0, r4
   b4e2a:	f7ff ffa9 	bl	b4d80 <_ZN8MAX3010513setSampleRateEh>
  if (pulseWidth < 118) setPulseWidth(MAX30105_PULSEWIDTH_69); //Page 26, Gets us 15 bit resolution
   b4e2e:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
   b4e32:	dc71      	bgt.n	b4f18 <_ZN8MAX301055setupEhhhiii+0x13c>
   b4e34:	2100      	movs	r1, #0
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
   b4e36:	4620      	mov	r0, r4
   b4e38:	f7ff ffa7 	bl	b4d8a <_ZN8MAX3010513setPulseWidthEh>
  setPulseAmplitudeRed(powerLevel);
   b4e3c:	4641      	mov	r1, r8
   b4e3e:	4620      	mov	r0, r4
   b4e40:	f7ff ff3c 	bl	b4cbc <_ZN8MAX3010520setPulseAmplitudeRedEh>
  setPulseAmplitudeIR(powerLevel);
   b4e44:	4641      	mov	r1, r8
   b4e46:	4620      	mov	r0, r4
   b4e48:	f7ff ff3d 	bl	b4cc6 <_ZN8MAX3010519setPulseAmplitudeIREh>
  setPulseAmplitudeGreen(powerLevel);
   b4e4c:	4641      	mov	r1, r8
   b4e4e:	4620      	mov	r0, r4
   b4e50:	f7ff ff3e 	bl	b4cd0 <_ZN8MAX3010522setPulseAmplitudeGreenEh>
  setPulseAmplitudeProximity(powerLevel);
   b4e54:	4641      	mov	r1, r8
   b4e56:	4620      	mov	r0, r4
   b4e58:	f7ff ff3f 	bl	b4cda <_ZN8MAX3010526setPulseAmplitudeProximityEh>
  enableSlot(1, SLOT_RED_LED);
   b4e5c:	2201      	movs	r2, #1
   b4e5e:	4611      	mov	r1, r2
   b4e60:	4620      	mov	r0, r4
   b4e62:	f7ff ff97 	bl	b4d94 <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
   b4e66:	2e01      	cmp	r6, #1
   b4e68:	d90b      	bls.n	b4e82 <_ZN8MAX301055setupEhhhiii+0xa6>
   b4e6a:	2202      	movs	r2, #2
   b4e6c:	4611      	mov	r1, r2
   b4e6e:	4620      	mov	r0, r4
   b4e70:	f7ff ff90 	bl	b4d94 <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 2) enableSlot(3, SLOT_GREEN_LED);
   b4e74:	2e02      	cmp	r6, #2
   b4e76:	d004      	beq.n	b4e82 <_ZN8MAX301055setupEhhhiii+0xa6>
   b4e78:	2203      	movs	r2, #3
   b4e7a:	4611      	mov	r1, r2
   b4e7c:	4620      	mov	r0, r4
   b4e7e:	f7ff ff89 	bl	b4d94 <_ZN8MAX3010510enableSlotEhh>
  clearFIFO(); //Reset the FIFO before we begin checking the sensor
   b4e82:	4620      	mov	r0, r4
}
   b4e84:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  clearFIFO(); //Reset the FIFO before we begin checking the sensor
   b4e88:	f7ff bf2c 	b.w	b4ce4 <_ZN8MAX301059clearFIFOEv>
  else if (sampleAverage == 2) setFIFOAverage(MAX30105_SAMPLEAVG_2);
   b4e8c:	2d02      	cmp	r5, #2
   b4e8e:	d101      	bne.n	b4e94 <_ZN8MAX301055setupEhhhiii+0xb8>
   b4e90:	2120      	movs	r1, #32
   b4e92:	e7b2      	b.n	b4dfa <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 4) setFIFOAverage(MAX30105_SAMPLEAVG_4);
   b4e94:	2d04      	cmp	r5, #4
   b4e96:	d101      	bne.n	b4e9c <_ZN8MAX301055setupEhhhiii+0xc0>
   b4e98:	2140      	movs	r1, #64	; 0x40
   b4e9a:	e7ae      	b.n	b4dfa <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 8) setFIFOAverage(MAX30105_SAMPLEAVG_8);
   b4e9c:	2d08      	cmp	r5, #8
   b4e9e:	d101      	bne.n	b4ea4 <_ZN8MAX301055setupEhhhiii+0xc8>
   b4ea0:	2160      	movs	r1, #96	; 0x60
   b4ea2:	e7aa      	b.n	b4dfa <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 16) setFIFOAverage(MAX30105_SAMPLEAVG_16);
   b4ea4:	2d10      	cmp	r5, #16
   b4ea6:	d101      	bne.n	b4eac <_ZN8MAX301055setupEhhhiii+0xd0>
   b4ea8:	2180      	movs	r1, #128	; 0x80
   b4eaa:	e7a6      	b.n	b4dfa <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
   b4eac:	2d20      	cmp	r5, #32
   b4eae:	d1f3      	bne.n	b4e98 <_ZN8MAX301055setupEhhhiii+0xbc>
   b4eb0:	21a0      	movs	r1, #160	; 0xa0
   b4eb2:	e7a2      	b.n	b4dfa <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
   b4eb4:	2e02      	cmp	r6, #2
   b4eb6:	bf0c      	ite	eq
   b4eb8:	2103      	moveq	r1, #3
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
   b4eba:	2102      	movne	r1, #2
   b4ebc:	e7a6      	b.n	b4e0c <_ZN8MAX301055setupEhhhiii+0x30>
  else if(adcRange < 8192) setADCRange(MAX30105_ADCRANGE_4096); //15.63pA per LSB
   b4ebe:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
   b4ec2:	da01      	bge.n	b4ec8 <_ZN8MAX301055setupEhhhiii+0xec>
   b4ec4:	2120      	movs	r1, #32
   b4ec6:	e7a9      	b.n	b4e1c <_ZN8MAX301055setupEhhhiii+0x40>
  else if(adcRange < 16384) setADCRange(MAX30105_ADCRANGE_8192); //31.25pA per LSB
   b4ec8:	f5ba 4f80 	cmp.w	sl, #16384	; 0x4000
   b4ecc:	da01      	bge.n	b4ed2 <_ZN8MAX301055setupEhhhiii+0xf6>
   b4ece:	2140      	movs	r1, #64	; 0x40
   b4ed0:	e7a4      	b.n	b4e1c <_ZN8MAX301055setupEhhhiii+0x40>
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
   b4ed2:	d1a2      	bne.n	b4e1a <_ZN8MAX301055setupEhhhiii+0x3e>
   b4ed4:	2160      	movs	r1, #96	; 0x60
   b4ed6:	e7a1      	b.n	b4e1c <_ZN8MAX301055setupEhhhiii+0x40>
  else if (sampleRate < 200) setSampleRate(MAX30105_SAMPLERATE_100);
   b4ed8:	2fc7      	cmp	r7, #199	; 0xc7
   b4eda:	dc01      	bgt.n	b4ee0 <_ZN8MAX301055setupEhhhiii+0x104>
   b4edc:	2104      	movs	r1, #4
   b4ede:	e7a3      	b.n	b4e28 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 400) setSampleRate(MAX30105_SAMPLERATE_200);
   b4ee0:	f5b7 7fc8 	cmp.w	r7, #400	; 0x190
   b4ee4:	da01      	bge.n	b4eea <_ZN8MAX301055setupEhhhiii+0x10e>
   b4ee6:	2108      	movs	r1, #8
   b4ee8:	e79e      	b.n	b4e28 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 800) setSampleRate(MAX30105_SAMPLERATE_400);
   b4eea:	f5b7 7f48 	cmp.w	r7, #800	; 0x320
   b4eee:	da01      	bge.n	b4ef4 <_ZN8MAX301055setupEhhhiii+0x118>
   b4ef0:	210c      	movs	r1, #12
   b4ef2:	e799      	b.n	b4e28 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 1000) setSampleRate(MAX30105_SAMPLERATE_800);
   b4ef4:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
   b4ef8:	da01      	bge.n	b4efe <_ZN8MAX301055setupEhhhiii+0x122>
   b4efa:	2110      	movs	r1, #16
   b4efc:	e794      	b.n	b4e28 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 1600) setSampleRate(MAX30105_SAMPLERATE_1000);
   b4efe:	f5b7 6fc8 	cmp.w	r7, #1600	; 0x640
   b4f02:	da01      	bge.n	b4f08 <_ZN8MAX301055setupEhhhiii+0x12c>
   b4f04:	2114      	movs	r1, #20
   b4f06:	e78f      	b.n	b4e28 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 3200) setSampleRate(MAX30105_SAMPLERATE_1600);
   b4f08:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
   b4f0c:	da01      	bge.n	b4f12 <_ZN8MAX301055setupEhhhiii+0x136>
   b4f0e:	2118      	movs	r1, #24
   b4f10:	e78a      	b.n	b4e28 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
   b4f12:	d188      	bne.n	b4e26 <_ZN8MAX301055setupEhhhiii+0x4a>
   b4f14:	211c      	movs	r1, #28
   b4f16:	e787      	b.n	b4e28 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (pulseWidth < 215) setPulseWidth(MAX30105_PULSEWIDTH_118); //16 bit resolution
   b4f18:	f1b9 0fd6 	cmp.w	r9, #214	; 0xd6
   b4f1c:	dc01      	bgt.n	b4f22 <_ZN8MAX301055setupEhhhiii+0x146>
   b4f1e:	2101      	movs	r1, #1
   b4f20:	e789      	b.n	b4e36 <_ZN8MAX301055setupEhhhiii+0x5a>
  else if (pulseWidth < 411) setPulseWidth(MAX30105_PULSEWIDTH_215); //17 bit resolution
   b4f22:	f5b9 7fcd 	cmp.w	r9, #410	; 0x19a
   b4f26:	dc01      	bgt.n	b4f2c <_ZN8MAX301055setupEhhhiii+0x150>
   b4f28:	2102      	movs	r1, #2
   b4f2a:	e784      	b.n	b4e36 <_ZN8MAX301055setupEhhhiii+0x5a>
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
   b4f2c:	f240 139b 	movw	r3, #411	; 0x19b
   b4f30:	4599      	cmp	r9, r3
   b4f32:	f47f af7f 	bne.w	b4e34 <_ZN8MAX301055setupEhhhiii+0x58>
   b4f36:	2103      	movs	r1, #3
   b4f38:	e77d      	b.n	b4e36 <_ZN8MAX301055setupEhhhiii+0x5a>

000b4f3a <_Z28maxim_peaks_above_min_heightPlS_S_ll>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
   b4f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int32_t i = 1, n_width;
  *n_npks = 0;
   b4f3e:	2400      	movs	r4, #0
   b4f40:	600c      	str	r4, [r1, #0]
  
  while (i < n_size-1){
   b4f42:	f103 38ff 	add.w	r8, r3, #4294967295
  int32_t i = 1, n_width;
   b4f46:	2401      	movs	r4, #1
  while (i < n_size-1){
   b4f48:	45a0      	cmp	r8, r4
   b4f4a:	dd27      	ble.n	b4f9c <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x62>
    if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){      // find left edge of potential peaks
   b4f4c:	9d06      	ldr	r5, [sp, #24]
   b4f4e:	f852 c024 	ldr.w	ip, [r2, r4, lsl #2]
   b4f52:	45ac      	cmp	ip, r5
   b4f54:	ea4f 0684 	mov.w	r6, r4, lsl #2
   b4f58:	f104 0501 	add.w	r5, r4, #1
   b4f5c:	dd1c      	ble.n	b4f98 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
   b4f5e:	4416      	add	r6, r2
   b4f60:	f856 6c04 	ldr.w	r6, [r6, #-4]
   b4f64:	45b4      	cmp	ip, r6
   b4f66:	dd17      	ble.n	b4f98 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
   b4f68:	462e      	mov	r6, r5
      n_width = 1;
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
   b4f6a:	429e      	cmp	r6, r3
   b4f6c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
   b4f70:	eba6 0e04 	sub.w	lr, r6, r4
   b4f74:	4635      	mov	r5, r6
   b4f76:	d003      	beq.n	b4f80 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x46>
   b4f78:	45bc      	cmp	ip, r7
   b4f7a:	f106 0601 	add.w	r6, r6, #1
   b4f7e:	d0f4      	beq.n	b4f6a <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x30>
        n_width++;
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
   b4f80:	45bc      	cmp	ip, r7
   b4f82:	dd09      	ble.n	b4f98 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
   b4f84:	680e      	ldr	r6, [r1, #0]
   b4f86:	2e0e      	cmp	r6, #14
   b4f88:	dc06      	bgt.n	b4f98 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
        pn_locs[(*n_npks)++] = i;    
   b4f8a:	1c75      	adds	r5, r6, #1
   b4f8c:	600d      	str	r5, [r1, #0]
        // for flat peaks, peak location is left edge
        i += n_width+1;
   b4f8e:	f10e 0501 	add.w	r5, lr, #1
        pn_locs[(*n_npks)++] = i;    
   b4f92:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
        i += n_width+1;
   b4f96:	4425      	add	r5, r4
{
   b4f98:	462c      	mov	r4, r5
   b4f9a:	e7d5      	b.n	b4f48 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0xe>
        i += n_width;
    }
    else
      i++;
  }
}
   b4f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4fa0 <_Z17maxim_sort_ascendPll>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
   b4fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
   b4fa2:	2301      	movs	r3, #1
   b4fa4:	4604      	mov	r4, r0
   b4fa6:	428b      	cmp	r3, r1
   b4fa8:	da0f      	bge.n	b4fca <_Z17maxim_sort_ascendPll+0x2a>
    n_temp = pn_x[i];
   b4faa:	f854 6f04 	ldr.w	r6, [r4, #4]!
   b4fae:	461a      	mov	r2, r3
   b4fb0:	4625      	mov	r5, r4
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
   b4fb2:	f855 7c04 	ldr.w	r7, [r5, #-4]
   b4fb6:	42b7      	cmp	r7, r6
   b4fb8:	dd03      	ble.n	b4fc2 <_Z17maxim_sort_ascendPll+0x22>
   b4fba:	3a01      	subs	r2, #1
        pn_x[j] = pn_x[j-1];
   b4fbc:	f845 7904 	str.w	r7, [r5], #-4
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
   b4fc0:	d1f7      	bne.n	b4fb2 <_Z17maxim_sort_ascendPll+0x12>
    pn_x[j] = n_temp;
   b4fc2:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
  for (i = 1; i < n_size; i++) {
   b4fc6:	3301      	adds	r3, #1
   b4fc8:	e7ed      	b.n	b4fa6 <_Z17maxim_sort_ascendPll+0x6>
  }
}
   b4fca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4fcc <_Z26maxim_sort_indices_descendPlS_l>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/ 
{
   b4fcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
   b4fd0:	2301      	movs	r3, #1
{
   b4fd2:	4690      	mov	r8, r2
   b4fd4:	460d      	mov	r5, r1
  for (i = 1; i < n_size; i++) {
   b4fd6:	4543      	cmp	r3, r8
   b4fd8:	da16      	bge.n	b5008 <_Z26maxim_sort_indices_descendPlS_l+0x3c>
    n_temp = pn_indx[i];
   b4fda:	f855 6f04 	ldr.w	r6, [r5, #4]!
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
   b4fde:	461c      	mov	r4, r3
   b4fe0:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   b4fe4:	46ac      	mov	ip, r5
   b4fe6:	f8d9 2000 	ldr.w	r2, [r9]
   b4fea:	f85c 7c04 	ldr.w	r7, [ip, #-4]
   b4fee:	4696      	mov	lr, r2
   b4ff0:	f850 2027 	ldr.w	r2, [r0, r7, lsl #2]
   b4ff4:	4596      	cmp	lr, r2
   b4ff6:	dd03      	ble.n	b5000 <_Z26maxim_sort_indices_descendPlS_l+0x34>
   b4ff8:	3c01      	subs	r4, #1
      pn_indx[j] = pn_indx[j-1];
   b4ffa:	f84c 7904 	str.w	r7, [ip], #-4
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
   b4ffe:	d1f2      	bne.n	b4fe6 <_Z26maxim_sort_indices_descendPlS_l+0x1a>
    pn_indx[j] = n_temp;
   b5000:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
  for (i = 1; i < n_size; i++) {
   b5004:	3301      	adds	r3, #1
   b5006:	e7e6      	b.n	b4fd6 <_Z26maxim_sort_indices_descendPlS_l+0xa>
  }
}
   b5008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b500c <_Z24maxim_remove_close_peaksPlS_S_l>:
{
   b500c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5010:	4604      	mov	r4, r0
   b5012:	461f      	mov	r7, r3
   b5014:	4610      	mov	r0, r2
   b5016:	460d      	mov	r5, r1
  maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
   b5018:	680a      	ldr	r2, [r1, #0]
   b501a:	4621      	mov	r1, r4
   b501c:	f7ff ffd6 	bl	b4fcc <_Z26maxim_sort_indices_descendPlS_l>
   b5020:	f04f 32ff 	mov.w	r2, #4294967295
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
   b5024:	f1c7 0e00 	rsb	lr, r7, #0
  for ( i = -1; i < *pn_npks; i++ ){
   b5028:	6829      	ldr	r1, [r5, #0]
   b502a:	4291      	cmp	r1, r2
   b502c:	dd1d      	ble.n	b506a <_Z24maxim_remove_close_peaksPlS_S_l+0x5e>
    *pn_npks = i+1;
   b502e:	1c53      	adds	r3, r2, #1
   b5030:	461e      	mov	r6, r3
   b5032:	602b      	str	r3, [r5, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
   b5034:	42b1      	cmp	r1, r6
   b5036:	d016      	beq.n	b5066 <_Z24maxim_remove_close_peaksPlS_S_l+0x5a>
      n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
   b5038:	1c50      	adds	r0, r2, #1
   b503a:	bf18      	it	ne
   b503c:	f854 0022 	ldrne.w	r0, [r4, r2, lsl #2]
   b5040:	f854 c026 	ldr.w	ip, [r4, r6, lsl #2]
   b5044:	bf08      	it	eq
   b5046:	4610      	moveq	r0, r2
   b5048:	ebac 0000 	sub.w	r0, ip, r0
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
   b504c:	42b8      	cmp	r0, r7
   b504e:	dc01      	bgt.n	b5054 <_Z24maxim_remove_close_peaksPlS_S_l+0x48>
   b5050:	4586      	cmp	lr, r0
   b5052:	dd06      	ble.n	b5062 <_Z24maxim_remove_close_peaksPlS_S_l+0x56>
        pn_locs[(*pn_npks)++] = pn_locs[j];
   b5054:	6828      	ldr	r0, [r5, #0]
   b5056:	f100 0801 	add.w	r8, r0, #1
   b505a:	f8c5 8000 	str.w	r8, [r5]
   b505e:	f844 c020 	str.w	ip, [r4, r0, lsl #2]
    for ( j = i+1; j < n_old_npks; j++ ){
   b5062:	3601      	adds	r6, #1
   b5064:	e7e6      	b.n	b5034 <_Z24maxim_remove_close_peaksPlS_S_l+0x28>
   b5066:	461a      	mov	r2, r3
   b5068:	e7de      	b.n	b5028 <_Z24maxim_remove_close_peaksPlS_S_l+0x1c>
  maxim_sort_ascend( pn_locs, *pn_npks );
   b506a:	4620      	mov	r0, r4
}
   b506c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  maxim_sort_ascend( pn_locs, *pn_npks );
   b5070:	f7ff bf96 	b.w	b4fa0 <_Z17maxim_sort_ascendPll>

000b5074 <_Z16maxim_find_peaksPlS_S_llll>:
{
   b5074:	b537      	push	{r0, r1, r2, r4, r5, lr}
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
   b5076:	9d06      	ldr	r5, [sp, #24]
   b5078:	9500      	str	r5, [sp, #0]
   b507a:	f7ff ff5e 	bl	b4f3a <_Z28maxim_peaks_above_min_heightPlS_S_ll>
{
   b507e:	460c      	mov	r4, r1
  maxim_remove_close_peaks( pn_locs, n_npks, pn_x, n_min_distance );
   b5080:	9b07      	ldr	r3, [sp, #28]
   b5082:	f7ff ffc3 	bl	b500c <_Z24maxim_remove_close_peaksPlS_S_l>
  *n_npks = min( *n_npks, n_max_num );
   b5086:	6822      	ldr	r2, [r4, #0]
   b5088:	9b08      	ldr	r3, [sp, #32]
   b508a:	429a      	cmp	r2, r3
   b508c:	bfd4      	ite	le
   b508e:	6022      	strle	r2, [r4, #0]
   b5090:	6023      	strgt	r3, [r4, #0]
}
   b5092:	b003      	add	sp, #12
   b5094:	bd30      	pop	{r4, r5, pc}
	...

000b5098 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_>:
{
   b5098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b509c:	b09d      	sub	sp, #116	; 0x74
   b509e:	e9dd 9827 	ldrd	r9, r8, [sp, #156]	; 0x9c
   b50a2:	4616      	mov	r6, r2
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
   b50a4:	2200      	movs	r2, #0
{
   b50a6:	469b      	mov	fp, r3
   b50a8:	4605      	mov	r5, r0
   b50aa:	460c      	mov	r4, r1
  un_ir_mean =0; 
   b50ac:	4613      	mov	r3, r2
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
   b50ae:	42a2      	cmp	r2, r4
   b50b0:	da04      	bge.n	b50bc <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x24>
   b50b2:	f835 1012 	ldrh.w	r1, [r5, r2, lsl #1]
   b50b6:	3201      	adds	r2, #1
   b50b8:	440b      	add	r3, r1
   b50ba:	e7f8      	b.n	b50ae <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x16>
  un_ir_mean =un_ir_mean/n_ir_buffer_length ;
   b50bc:	4f8d      	ldr	r7, [pc, #564]	; (b52f4 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x25c>)
   b50be:	fbb3 f3f4 	udiv	r3, r3, r4
   b50c2:	4638      	mov	r0, r7
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
   b50c4:	2200      	movs	r2, #0
   b50c6:	42a2      	cmp	r2, r4
   b50c8:	da06      	bge.n	b50d8 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x40>
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ; 
   b50ca:	f835 1012 	ldrh.w	r1, [r5, r2, lsl #1]
   b50ce:	1a59      	subs	r1, r3, r1
   b50d0:	f840 1b04 	str.w	r1, [r0], #4
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
   b50d4:	3201      	adds	r2, #1
   b50d6:	e7f6      	b.n	b50c6 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x2e>
   b50d8:	4a86      	ldr	r2, [pc, #536]	; (b52f4 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x25c>)
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
   b50da:	2100      	movs	r1, #0
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
   b50dc:	6813      	ldr	r3, [r2, #0]
   b50de:	f852 0f04 	ldr.w	r0, [r2, #4]!
   b50e2:	4403      	add	r3, r0
   b50e4:	6850      	ldr	r0, [r2, #4]
   b50e6:	4403      	add	r3, r0
   b50e8:	6890      	ldr	r0, [r2, #8]
   b50ea:	181b      	adds	r3, r3, r0
   b50ec:	bf48      	it	mi
   b50ee:	3303      	addmi	r3, #3
   b50f0:	3101      	adds	r1, #1
   b50f2:	109b      	asrs	r3, r3, #2
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
   b50f4:	2960      	cmp	r1, #96	; 0x60
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
   b50f6:	f842 3c04 	str.w	r3, [r2, #-4]
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
   b50fa:	d1ef      	bne.n	b50dc <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x44>
  n_th1=0; 
   b50fc:	2300      	movs	r3, #0
   b50fe:	4a7d      	ldr	r2, [pc, #500]	; (b52f4 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x25c>)
  for ( k=0 ; k<BUFFER_SIZE ;k++){
   b5100:	469a      	mov	sl, r3
    n_th1 +=  an_x[k];
   b5102:	f852 1b04 	ldr.w	r1, [r2], #4
  for ( k=0 ; k<BUFFER_SIZE ;k++){
   b5106:	f10a 0a01 	add.w	sl, sl, #1
   b510a:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
    n_th1 +=  an_x[k];
   b510e:	440b      	add	r3, r1
  for ( k=0 ; k<BUFFER_SIZE ;k++){
   b5110:	d1f7      	bne.n	b5102 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x6a>
  if( n_th1<30) n_th1=30; // min allowed
   b5112:	f640 32b7 	movw	r2, #2999	; 0xbb7
   b5116:	4293      	cmp	r3, r2
   b5118:	dd4f      	ble.n	b51ba <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x122>
  n_th1=  n_th1/ ( BUFFER_SIZE);
   b511a:	fb93 fafa 	sdiv	sl, r3, sl
   b511e:	f1ba 0f3c 	cmp.w	sl, #60	; 0x3c
   b5122:	bfa8      	it	ge
   b5124:	f04f 0a3c 	movge.w	sl, #60	; 0x3c
  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
   b5128:	223c      	movs	r2, #60	; 0x3c
   b512a:	2100      	movs	r1, #0
   b512c:	a80d      	add	r0, sp, #52	; 0x34
   b512e:	f002 fd7b 	bl	b7c28 <memset>
  maxim_find_peaks( an_ir_valley_locs, &n_npks, an_x, BUFFER_SIZE, n_th1, 4, 15 );//peak_height, peak_distance, max_num_peaks 
   b5132:	2304      	movs	r3, #4
   b5134:	220f      	movs	r2, #15
   b5136:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b513a:	f8cd a000 	str.w	sl, [sp]
   b513e:	4a6d      	ldr	r2, [pc, #436]	; (b52f4 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x25c>)
   b5140:	2364      	movs	r3, #100	; 0x64
   b5142:	a907      	add	r1, sp, #28
   b5144:	a80d      	add	r0, sp, #52	; 0x34
   b5146:	f7ff ff95 	bl	b5074 <_Z16maxim_find_peaksPlS_S_llll>
  if (n_npks>=2){
   b514a:	9b07      	ldr	r3, [sp, #28]
   b514c:	2b01      	cmp	r3, #1
   b514e:	f04f 0200 	mov.w	r2, #0
   b5152:	dd35      	ble.n	b51c0 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x128>
   b5154:	a90d      	add	r1, sp, #52	; 0x34
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
   b5156:	f04f 0c01 	mov.w	ip, #1
   b515a:	4608      	mov	r0, r1
   b515c:	f8d1 e004 	ldr.w	lr, [r1, #4]
   b5160:	6800      	ldr	r0, [r0, #0]
   b5162:	f10c 0c01 	add.w	ip, ip, #1
   b5166:	ebae 0000 	sub.w	r0, lr, r0
   b516a:	4563      	cmp	r3, ip
   b516c:	f101 0104 	add.w	r1, r1, #4
   b5170:	4402      	add	r2, r0
   b5172:	d1f2      	bne.n	b515a <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0xc2>
    n_peak_interval_sum =n_peak_interval_sum/(n_npks-1);
   b5174:	1e59      	subs	r1, r3, #1
   b5176:	fb92 f2f1 	sdiv	r2, r2, r1
    *pn_heart_rate =(int32_t)( (FreqS*60)/ n_peak_interval_sum );
   b517a:	f240 51dc 	movw	r1, #1500	; 0x5dc
   b517e:	fb91 f2f2 	sdiv	r2, r1, r2
   b5182:	f8c9 2000 	str.w	r2, [r9]
    *pch_hr_valid  = 1;
   b5186:	2201      	movs	r2, #1
   b5188:	495b      	ldr	r1, [pc, #364]	; (b52f8 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x260>)
   b518a:	f888 2000 	strb.w	r2, [r8]
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
   b518e:	2200      	movs	r2, #0
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
   b5190:	42a2      	cmp	r2, r4
   b5192:	db19      	blt.n	b51c8 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x130>
  for(k=0; k< 5; k++) an_ratio[k]=0;
   b5194:	2200      	movs	r2, #0
   b5196:	e9cd 2208 	strd	r2, r2, [sp, #32]
   b519a:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
   b519e:	ae0d      	add	r6, sp, #52	; 0x34
   b51a0:	920c      	str	r2, [sp, #48]	; 0x30
   b51a2:	4631      	mov	r1, r6
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
   b51a4:	4293      	cmp	r3, r2
   b51a6:	dd1b      	ble.n	b51e0 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x148>
    if (an_ir_valley_locs[k] > BUFFER_SIZE ){
   b51a8:	f851 0b04 	ldr.w	r0, [r1], #4
   b51ac:	2864      	cmp	r0, #100	; 0x64
   b51ae:	dd15      	ble.n	b51dc <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x144>
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
   b51b0:	4b52      	ldr	r3, [pc, #328]	; (b52fc <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x264>)
   b51b2:	f8cb 3000 	str.w	r3, [fp]
    *pch_spo2_valid  = 0; 
   b51b6:	2300      	movs	r3, #0
   b51b8:	e092      	b.n	b52e0 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x248>
  if( n_th1<30) n_th1=30; // min allowed
   b51ba:	f04f 0a1e 	mov.w	sl, #30
   b51be:	e7b3      	b.n	b5128 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x90>
    *pn_heart_rate = -999; // unable to calculate because # of peaks are too small
   b51c0:	494e      	ldr	r1, [pc, #312]	; (b52fc <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x264>)
   b51c2:	f8c9 1000 	str.w	r1, [r9]
    *pch_hr_valid  = 0;
   b51c6:	e7df      	b.n	b5188 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0xf0>
      an_x[k] =  pun_ir_buffer[k] ; 
   b51c8:	f835 0012 	ldrh.w	r0, [r5, r2, lsl #1]
   b51cc:	f847 0b04 	str.w	r0, [r7], #4
      an_y[k] =  pun_red_buffer[k] ; 
   b51d0:	f836 0012 	ldrh.w	r0, [r6, r2, lsl #1]
   b51d4:	f841 0b04 	str.w	r0, [r1], #4
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
   b51d8:	3201      	adds	r2, #1
   b51da:	e7d9      	b.n	b5190 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0xf8>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
   b51dc:	3201      	adds	r2, #1
   b51de:	e7e1      	b.n	b51a4 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x10c>
  int32_t n_x_dc_max_idx = 0; 
   b51e0:	2400      	movs	r4, #0
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
   b51e2:	3b01      	subs	r3, #1
   b51e4:	4f43      	ldr	r7, [pc, #268]	; (b52f4 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x25c>)
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   b51e6:	f8df c110 	ldr.w	ip, [pc, #272]	; b52f8 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x260>
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
   b51ea:	9404      	str	r4, [sp, #16]
  int32_t n_y_dc_max_idx = 0;
   b51ec:	4625      	mov	r5, r4
  n_i_ratio_count = 0; 
   b51ee:	4621      	mov	r1, r4
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
   b51f0:	9305      	str	r3, [sp, #20]
   b51f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b51f6:	4293      	cmp	r3, r2
   b51f8:	dd56      	ble.n	b52a8 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x210>
    if (an_ir_valley_locs[k+1]-an_ir_valley_locs[k] >3){
   b51fa:	f8d6 8004 	ldr.w	r8, [r6, #4]
   b51fe:	f856 0b04 	ldr.w	r0, [r6], #4
   b5202:	4613      	mov	r3, r2
   b5204:	eba8 0900 	sub.w	r9, r8, r0
   b5208:	3301      	adds	r3, #1
   b520a:	f1b9 0f03 	cmp.w	r9, #3
   b520e:	9304      	str	r3, [sp, #16]
   b5210:	ddef      	ble.n	b51f2 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x15a>
    n_x_dc_max= -16777216; 
   b5212:	f04f 4e7f 	mov.w	lr, #4278190080	; 0xff000000
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
   b5216:	4603      	mov	r3, r0
    n_y_dc_max= -16777216 ; 
   b5218:	46f2      	mov	sl, lr
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
   b521a:	4598      	cmp	r8, r3
   b521c:	dd0e      	ble.n	b523c <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x1a4>
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
   b521e:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
   b5222:	4572      	cmp	r2, lr
   b5224:	bfc8      	it	gt
   b5226:	4696      	movgt	lr, r2
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   b5228:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
   b522c:	bfc8      	it	gt
   b522e:	461c      	movgt	r4, r3
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   b5230:	4552      	cmp	r2, sl
   b5232:	bfc4      	itt	gt
   b5234:	461d      	movgt	r5, r3
   b5236:	4692      	movgt	sl, r2
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
   b5238:	3301      	adds	r3, #1
   b523a:	e7ee      	b.n	b521a <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x182>
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
   b523c:	f857 2020 	ldr.w	r2, [r7, r0, lsl #2]
   b5240:	f857 3028 	ldr.w	r3, [r7, r8, lsl #2]
   b5244:	1a9b      	subs	r3, r3, r2
   b5246:	1a22      	subs	r2, r4, r0
   b5248:	4353      	muls	r3, r2
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]); 
   b524a:	f857 2020 	ldr.w	r2, [r7, r0, lsl #2]
   b524e:	fb93 f3f9 	sdiv	r3, r3, r9
   b5252:	4413      	add	r3, r2
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
   b5254:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
   b5258:	1ad2      	subs	r2, r2, r3
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
   b525a:	fb0a f202 	mul.w	r2, sl, r2
   b525e:	ea4f 1ae2 	mov.w	sl, r2, asr #7
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
   b5262:	f1ba 0f00 	cmp.w	sl, #0
   b5266:	ddc4      	ble.n	b51f2 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x15a>
   b5268:	2904      	cmp	r1, #4
   b526a:	dcc2      	bgt.n	b51f2 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x15a>
      n_y_ac= (an_y[an_ir_valley_locs[k+1]] - an_y[an_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_ir_valley_locs[k]); //red
   b526c:	f85c 3020 	ldr.w	r3, [ip, r0, lsl #2]
   b5270:	f85c 2028 	ldr.w	r2, [ip, r8, lsl #2]
   b5274:	1a28      	subs	r0, r5, r0
   b5276:	1ad2      	subs	r2, r2, r3
   b5278:	4350      	muls	r0, r2
      n_y_ac=  an_y[an_ir_valley_locs[k]] + n_y_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k])  ; 
   b527a:	fb90 f0f9 	sdiv	r0, r0, r9
   b527e:	4418      	add	r0, r3
      n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw 
   b5280:	f85c 3025 	ldr.w	r3, [ip, r5, lsl #2]
   b5284:	1a1b      	subs	r3, r3, r0
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
   b5286:	fb0e fe03 	mul.w	lr, lr, r3
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
   b528a:	ea5f 1eee 	movs.w	lr, lr, asr #7
   b528e:	d0b0      	beq.n	b51f2 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x15a>
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
   b5290:	ab1c      	add	r3, sp, #112	; 0x70
   b5292:	eb03 0881 	add.w	r8, r3, r1, lsl #2
   b5296:	2364      	movs	r3, #100	; 0x64
   b5298:	fb03 f20e 	mul.w	r2, r3, lr
        n_i_ratio_count++;
   b529c:	3101      	adds	r1, #1
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
   b529e:	fb92 f2fa 	sdiv	r2, r2, sl
   b52a2:	f848 2c50 	str.w	r2, [r8, #-80]
        n_i_ratio_count++;
   b52a6:	e7a4      	b.n	b51f2 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x15a>
  maxim_sort_ascend(an_ratio, n_i_ratio_count);
   b52a8:	a808      	add	r0, sp, #32
   b52aa:	f7ff fe79 	bl	b4fa0 <_Z17maxim_sort_ascendPll>
  n_middle_idx= n_i_ratio_count/2;
   b52ae:	104a      	asrs	r2, r1, #1
  if (n_middle_idx >1)
   b52b0:	2903      	cmp	r1, #3
   b52b2:	ea4f 0382 	mov.w	r3, r2, lsl #2
   b52b6:	dd18      	ble.n	b52ea <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x252>
    n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
   b52b8:	a91c      	add	r1, sp, #112	; 0x70
   b52ba:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   b52be:	f851 3c54 	ldr.w	r3, [r1, #-84]
   b52c2:	f851 2c50 	ldr.w	r2, [r1, #-80]
   b52c6:	4413      	add	r3, r2
   b52c8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   b52cc:	105b      	asrs	r3, r3, #1
  if( n_ratio_average>2 && n_ratio_average <184){
   b52ce:	1eda      	subs	r2, r3, #3
   b52d0:	2ab4      	cmp	r2, #180	; 0xb4
   b52d2:	f63f af6d 	bhi.w	b51b0 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x118>
    n_spo2_calc= uch_spo2_table[n_ratio_average] ;
   b52d6:	4a0a      	ldr	r2, [pc, #40]	; (b5300 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x268>)
   b52d8:	5cd3      	ldrb	r3, [r2, r3]
   b52da:	f8cb 3000 	str.w	r3, [fp]
    *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
   b52de:	2301      	movs	r3, #1
    *pch_spo2_valid  = 0; 
   b52e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   b52e2:	7013      	strb	r3, [r2, #0]
}
   b52e4:	b01d      	add	sp, #116	; 0x74
   b52e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    n_ratio_average = an_ratio[n_middle_idx ];
   b52ea:	aa1c      	add	r2, sp, #112	; 0x70
   b52ec:	4413      	add	r3, r2
   b52ee:	f853 3c50 	ldr.w	r3, [r3, #-80]
   b52f2:	e7ec      	b.n	b52ce <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x236>
   b52f4:	2003e364 	.word	0x2003e364
   b52f8:	2003e4f4 	.word	0x2003e4f4
   b52fc:	fffffc19 	.word	0xfffffc19
   b5300:	000b8204 	.word	0x000b8204

000b5304 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5304:	b508      	push	{r3, lr}
   b5306:	4b02      	ldr	r3, [pc, #8]	; (b5310 <netdb_freeaddrinfo+0xc>)
   b5308:	681b      	ldr	r3, [r3, #0]
   b530a:	689b      	ldr	r3, [r3, #8]
   b530c:	9301      	str	r3, [sp, #4]
   b530e:	bd08      	pop	{r3, pc}
   b5310:	00030268 	.word	0x00030268

000b5314 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5314:	b508      	push	{r3, lr}
   b5316:	4b02      	ldr	r3, [pc, #8]	; (b5320 <netdb_getaddrinfo+0xc>)
   b5318:	681b      	ldr	r3, [r3, #0]
   b531a:	68db      	ldr	r3, [r3, #12]
   b531c:	9301      	str	r3, [sp, #4]
   b531e:	bd08      	pop	{r3, pc}
   b5320:	00030268 	.word	0x00030268

000b5324 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5324:	b508      	push	{r3, lr}
   b5326:	4b02      	ldr	r3, [pc, #8]	; (b5330 <HAL_RNG_GetRandomNumber+0xc>)
   b5328:	681b      	ldr	r3, [r3, #0]
   b532a:	685b      	ldr	r3, [r3, #4]
   b532c:	9301      	str	r3, [sp, #4]
   b532e:	bd08      	pop	{r3, pc}
   b5330:	00030218 	.word	0x00030218

000b5334 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5334:	b508      	push	{r3, lr}
   b5336:	4b02      	ldr	r3, [pc, #8]	; (b5340 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5338:	681b      	ldr	r3, [r3, #0]
   b533a:	695b      	ldr	r3, [r3, #20]
   b533c:	9301      	str	r3, [sp, #4]
   b533e:	bd08      	pop	{r3, pc}
   b5340:	00030218 	.word	0x00030218

000b5344 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b5344:	b508      	push	{r3, lr}
   b5346:	4b02      	ldr	r3, [pc, #8]	; (b5350 <hal_rtc_time_is_valid+0xc>)
   b5348:	681b      	ldr	r3, [r3, #0]
   b534a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b534c:	9301      	str	r3, [sp, #4]
   b534e:	bd08      	pop	{r3, pc}
   b5350:	00030218 	.word	0x00030218

000b5354 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b5354:	b508      	push	{r3, lr}
   b5356:	4b02      	ldr	r3, [pc, #8]	; (b5360 <hal_rtc_get_time+0xc>)
   b5358:	681b      	ldr	r3, [r3, #0]
   b535a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b535c:	9301      	str	r3, [sp, #4]
   b535e:	bd08      	pop	{r3, pc}
   b5360:	00030218 	.word	0x00030218

000b5364 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5364:	b508      	push	{r3, lr}
   b5366:	4b02      	ldr	r3, [pc, #8]	; (b5370 <os_mutex_recursive_create+0xc>)
   b5368:	681b      	ldr	r3, [r3, #0]
   b536a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b536c:	9301      	str	r3, [sp, #4]
   b536e:	bd08      	pop	{r3, pc}
   b5370:	00030248 	.word	0x00030248

000b5374 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5374:	b508      	push	{r3, lr}
   b5376:	4b02      	ldr	r3, [pc, #8]	; (b5380 <inet_inet_ntop+0xc>)
   b5378:	681b      	ldr	r3, [r3, #0]
   b537a:	695b      	ldr	r3, [r3, #20]
   b537c:	9301      	str	r3, [sp, #4]
   b537e:	bd08      	pop	{r3, pc}
   b5380:	00030264 	.word	0x00030264

000b5384 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5384:	b508      	push	{r3, lr}
   b5386:	4b02      	ldr	r3, [pc, #8]	; (b5390 <hal_usart_write+0xc>)
   b5388:	681b      	ldr	r3, [r3, #0]
   b538a:	68db      	ldr	r3, [r3, #12]
   b538c:	9301      	str	r3, [sp, #4]
   b538e:	bd08      	pop	{r3, pc}
   b5390:	0003023c 	.word	0x0003023c

000b5394 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5394:	b508      	push	{r3, lr}
   b5396:	4b02      	ldr	r3, [pc, #8]	; (b53a0 <hal_usart_available+0xc>)
   b5398:	681b      	ldr	r3, [r3, #0]
   b539a:	691b      	ldr	r3, [r3, #16]
   b539c:	9301      	str	r3, [sp, #4]
   b539e:	bd08      	pop	{r3, pc}
   b53a0:	0003023c 	.word	0x0003023c

000b53a4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b53a4:	b508      	push	{r3, lr}
   b53a6:	4b02      	ldr	r3, [pc, #8]	; (b53b0 <hal_usart_read+0xc>)
   b53a8:	681b      	ldr	r3, [r3, #0]
   b53aa:	695b      	ldr	r3, [r3, #20]
   b53ac:	9301      	str	r3, [sp, #4]
   b53ae:	bd08      	pop	{r3, pc}
   b53b0:	0003023c 	.word	0x0003023c

000b53b4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b53b4:	b508      	push	{r3, lr}
   b53b6:	4b02      	ldr	r3, [pc, #8]	; (b53c0 <hal_usart_peek+0xc>)
   b53b8:	681b      	ldr	r3, [r3, #0]
   b53ba:	699b      	ldr	r3, [r3, #24]
   b53bc:	9301      	str	r3, [sp, #4]
   b53be:	bd08      	pop	{r3, pc}
   b53c0:	0003023c 	.word	0x0003023c

000b53c4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b53c4:	b508      	push	{r3, lr}
   b53c6:	4b02      	ldr	r3, [pc, #8]	; (b53d0 <hal_usart_flush+0xc>)
   b53c8:	681b      	ldr	r3, [r3, #0]
   b53ca:	69db      	ldr	r3, [r3, #28]
   b53cc:	9301      	str	r3, [sp, #4]
   b53ce:	bd08      	pop	{r3, pc}
   b53d0:	0003023c 	.word	0x0003023c

000b53d4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b53d4:	b508      	push	{r3, lr}
   b53d6:	4b02      	ldr	r3, [pc, #8]	; (b53e0 <hal_usart_available_data_for_write+0xc>)
   b53d8:	681b      	ldr	r3, [r3, #0]
   b53da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b53dc:	9301      	str	r3, [sp, #4]
   b53de:	bd08      	pop	{r3, pc}
   b53e0:	0003023c 	.word	0x0003023c

000b53e4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b53e4:	b508      	push	{r3, lr}
   b53e6:	4b02      	ldr	r3, [pc, #8]	; (b53f0 <hal_usart_init_ex+0xc>)
   b53e8:	681b      	ldr	r3, [r3, #0]
   b53ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b53ec:	9301      	str	r3, [sp, #4]
   b53ee:	bd08      	pop	{r3, pc}
   b53f0:	0003023c 	.word	0x0003023c

000b53f4 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b53f4:	b508      	push	{r3, lr}
   b53f6:	4b02      	ldr	r3, [pc, #8]	; (b5400 <hal_i2c_begin+0xc>)
   b53f8:	681b      	ldr	r3, [r3, #0]
   b53fa:	68db      	ldr	r3, [r3, #12]
   b53fc:	9301      	str	r3, [sp, #4]
   b53fe:	bd08      	pop	{r3, pc}
   b5400:	00030228 	.word	0x00030228

000b5404 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5404:	b508      	push	{r3, lr}
   b5406:	4b02      	ldr	r3, [pc, #8]	; (b5410 <hal_i2c_begin_transmission+0xc>)
   b5408:	681b      	ldr	r3, [r3, #0]
   b540a:	699b      	ldr	r3, [r3, #24]
   b540c:	9301      	str	r3, [sp, #4]
   b540e:	bd08      	pop	{r3, pc}
   b5410:	00030228 	.word	0x00030228

000b5414 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5414:	b508      	push	{r3, lr}
   b5416:	4b02      	ldr	r3, [pc, #8]	; (b5420 <hal_i2c_end_transmission+0xc>)
   b5418:	681b      	ldr	r3, [r3, #0]
   b541a:	69db      	ldr	r3, [r3, #28]
   b541c:	9301      	str	r3, [sp, #4]
   b541e:	bd08      	pop	{r3, pc}
   b5420:	00030228 	.word	0x00030228

000b5424 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5424:	b508      	push	{r3, lr}
   b5426:	4b02      	ldr	r3, [pc, #8]	; (b5430 <hal_i2c_write+0xc>)
   b5428:	681b      	ldr	r3, [r3, #0]
   b542a:	6a1b      	ldr	r3, [r3, #32]
   b542c:	9301      	str	r3, [sp, #4]
   b542e:	bd08      	pop	{r3, pc}
   b5430:	00030228 	.word	0x00030228

000b5434 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5434:	b508      	push	{r3, lr}
   b5436:	4b02      	ldr	r3, [pc, #8]	; (b5440 <hal_i2c_available+0xc>)
   b5438:	681b      	ldr	r3, [r3, #0]
   b543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b543c:	9301      	str	r3, [sp, #4]
   b543e:	bd08      	pop	{r3, pc}
   b5440:	00030228 	.word	0x00030228

000b5444 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5444:	b508      	push	{r3, lr}
   b5446:	4b02      	ldr	r3, [pc, #8]	; (b5450 <hal_i2c_read+0xc>)
   b5448:	681b      	ldr	r3, [r3, #0]
   b544a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b544c:	9301      	str	r3, [sp, #4]
   b544e:	bd08      	pop	{r3, pc}
   b5450:	00030228 	.word	0x00030228

000b5454 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5454:	b508      	push	{r3, lr}
   b5456:	4b02      	ldr	r3, [pc, #8]	; (b5460 <hal_i2c_peek+0xc>)
   b5458:	681b      	ldr	r3, [r3, #0]
   b545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b545c:	9301      	str	r3, [sp, #4]
   b545e:	bd08      	pop	{r3, pc}
   b5460:	00030228 	.word	0x00030228

000b5464 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5464:	b508      	push	{r3, lr}
   b5466:	4b02      	ldr	r3, [pc, #8]	; (b5470 <hal_i2c_flush+0xc>)
   b5468:	681b      	ldr	r3, [r3, #0]
   b546a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b546c:	9301      	str	r3, [sp, #4]
   b546e:	bd08      	pop	{r3, pc}
   b5470:	00030228 	.word	0x00030228

000b5474 <hal_i2c_init>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5474:	b508      	push	{r3, lr}
   b5476:	4b02      	ldr	r3, [pc, #8]	; (b5480 <hal_i2c_init+0xc>)
   b5478:	681b      	ldr	r3, [r3, #0]
   b547a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b547c:	9301      	str	r3, [sp, #4]
   b547e:	bd08      	pop	{r3, pc}
   b5480:	00030228 	.word	0x00030228

000b5484 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b5484:	b508      	push	{r3, lr}
   b5486:	4b02      	ldr	r3, [pc, #8]	; (b5490 <hal_i2c_request_ex+0xc>)
   b5488:	681b      	ldr	r3, [r3, #0]
   b548a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b548c:	9301      	str	r3, [sp, #4]
   b548e:	bd08      	pop	{r3, pc}
   b5490:	00030228 	.word	0x00030228

000b5494 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5494:	b508      	push	{r3, lr}
   b5496:	4b02      	ldr	r3, [pc, #8]	; (b54a0 <HAL_USB_USART_Init+0xc>)
   b5498:	681b      	ldr	r3, [r3, #0]
   b549a:	681b      	ldr	r3, [r3, #0]
   b549c:	9301      	str	r3, [sp, #4]
   b549e:	bd08      	pop	{r3, pc}
   b54a0:	0003024c 	.word	0x0003024c

000b54a4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b54a4:	b508      	push	{r3, lr}
   b54a6:	4b02      	ldr	r3, [pc, #8]	; (b54b0 <HAL_USB_USART_Begin+0xc>)
   b54a8:	681b      	ldr	r3, [r3, #0]
   b54aa:	685b      	ldr	r3, [r3, #4]
   b54ac:	9301      	str	r3, [sp, #4]
   b54ae:	bd08      	pop	{r3, pc}
   b54b0:	0003024c 	.word	0x0003024c

000b54b4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b54b4:	b508      	push	{r3, lr}
   b54b6:	4b02      	ldr	r3, [pc, #8]	; (b54c0 <HAL_USB_USART_Available_Data+0xc>)
   b54b8:	681b      	ldr	r3, [r3, #0]
   b54ba:	691b      	ldr	r3, [r3, #16]
   b54bc:	9301      	str	r3, [sp, #4]
   b54be:	bd08      	pop	{r3, pc}
   b54c0:	0003024c 	.word	0x0003024c

000b54c4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b54c4:	b508      	push	{r3, lr}
   b54c6:	4b02      	ldr	r3, [pc, #8]	; (b54d0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b54c8:	681b      	ldr	r3, [r3, #0]
   b54ca:	695b      	ldr	r3, [r3, #20]
   b54cc:	9301      	str	r3, [sp, #4]
   b54ce:	bd08      	pop	{r3, pc}
   b54d0:	0003024c 	.word	0x0003024c

000b54d4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b54d4:	b508      	push	{r3, lr}
   b54d6:	4b02      	ldr	r3, [pc, #8]	; (b54e0 <HAL_USB_USART_Receive_Data+0xc>)
   b54d8:	681b      	ldr	r3, [r3, #0]
   b54da:	699b      	ldr	r3, [r3, #24]
   b54dc:	9301      	str	r3, [sp, #4]
   b54de:	bd08      	pop	{r3, pc}
   b54e0:	0003024c 	.word	0x0003024c

000b54e4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b54e4:	b508      	push	{r3, lr}
   b54e6:	4b02      	ldr	r3, [pc, #8]	; (b54f0 <HAL_USB_USART_Send_Data+0xc>)
   b54e8:	681b      	ldr	r3, [r3, #0]
   b54ea:	69db      	ldr	r3, [r3, #28]
   b54ec:	9301      	str	r3, [sp, #4]
   b54ee:	bd08      	pop	{r3, pc}
   b54f0:	0003024c 	.word	0x0003024c

000b54f4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b54f4:	b508      	push	{r3, lr}
   b54f6:	4b02      	ldr	r3, [pc, #8]	; (b5500 <HAL_USB_USART_Flush_Data+0xc>)
   b54f8:	681b      	ldr	r3, [r3, #0]
   b54fa:	6a1b      	ldr	r3, [r3, #32]
   b54fc:	9301      	str	r3, [sp, #4]
   b54fe:	bd08      	pop	{r3, pc}
   b5500:	0003024c 	.word	0x0003024c

000b5504 <led_set_status_active>:
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, get_default_system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   b5504:	b508      	push	{r3, lr}
   b5506:	4b03      	ldr	r3, [pc, #12]	; (b5514 <led_set_status_active+0x10>)
   b5508:	681b      	ldr	r3, [r3, #0]
   b550a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b550e:	9301      	str	r3, [sp, #4]
   b5510:	bd08      	pop	{r3, pc}
   b5512:	0000      	.short	0x0000
   b5514:	00030260 	.word	0x00030260

000b5518 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b5518:	b508      	push	{r3, lr}
   b551a:	4b02      	ldr	r3, [pc, #8]	; (b5524 <system_mode+0xc>)
   b551c:	681b      	ldr	r3, [r3, #0]
   b551e:	681b      	ldr	r3, [r3, #0]
   b5520:	9301      	str	r3, [sp, #4]
   b5522:	bd08      	pop	{r3, pc}
   b5524:	00030220 	.word	0x00030220

000b5528 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5528:	b508      	push	{r3, lr}
   b552a:	4b02      	ldr	r3, [pc, #8]	; (b5534 <set_system_mode+0xc>)
   b552c:	681b      	ldr	r3, [r3, #0]
   b552e:	685b      	ldr	r3, [r3, #4]
   b5530:	9301      	str	r3, [sp, #4]
   b5532:	bd08      	pop	{r3, pc}
   b5534:	00030220 	.word	0x00030220

000b5538 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5538:	b508      	push	{r3, lr}
   b553a:	4b02      	ldr	r3, [pc, #8]	; (b5544 <system_delay_ms+0xc>)
   b553c:	681b      	ldr	r3, [r3, #0]
   b553e:	695b      	ldr	r3, [r3, #20]
   b5540:	9301      	str	r3, [sp, #4]
   b5542:	bd08      	pop	{r3, pc}
   b5544:	00030220 	.word	0x00030220

000b5548 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b5548:	b508      	push	{r3, lr}
   b554a:	4b02      	ldr	r3, [pc, #8]	; (b5554 <application_thread_current+0xc>)
   b554c:	681b      	ldr	r3, [r3, #0]
   b554e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5550:	9301      	str	r3, [sp, #4]
   b5552:	bd08      	pop	{r3, pc}
   b5554:	00030220 	.word	0x00030220

000b5558 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b5558:	b508      	push	{r3, lr}
   b555a:	4b02      	ldr	r3, [pc, #8]	; (b5564 <application_thread_invoke+0xc>)
   b555c:	681b      	ldr	r3, [r3, #0]
   b555e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5560:	9301      	str	r3, [sp, #4]
   b5562:	bd08      	pop	{r3, pc}
   b5564:	00030220 	.word	0x00030220

000b5568 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b5568:	b508      	push	{r3, lr}
   b556a:	4b02      	ldr	r3, [pc, #8]	; (b5574 <system_thread_get_state+0xc>)
   b556c:	681b      	ldr	r3, [r3, #0]
   b556e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5570:	9301      	str	r3, [sp, #4]
   b5572:	bd08      	pop	{r3, pc}
   b5574:	00030220 	.word	0x00030220

000b5578 <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   b5578:	b508      	push	{r3, lr}
   b557a:	4b02      	ldr	r3, [pc, #8]	; (b5584 <led_pattern_period+0xc>)
   b557c:	681b      	ldr	r3, [r3, #0]
   b557e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b5580:	9301      	str	r3, [sp, #4]
   b5582:	bd08      	pop	{r3, pc}
   b5584:	00030220 	.word	0x00030220

000b5588 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5588:	b508      	push	{r3, lr}
   b558a:	4b03      	ldr	r3, [pc, #12]	; (b5598 <system_ctrl_set_app_request_handler+0x10>)
   b558c:	681b      	ldr	r3, [r3, #0]
   b558e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5592:	9301      	str	r3, [sp, #4]
   b5594:	bd08      	pop	{r3, pc}
   b5596:	0000      	.short	0x0000
   b5598:	00030220 	.word	0x00030220

000b559c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b559c:	b508      	push	{r3, lr}
   b559e:	4b03      	ldr	r3, [pc, #12]	; (b55ac <system_ctrl_set_result+0x10>)
   b55a0:	681b      	ldr	r3, [r3, #0]
   b55a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b55a6:	9301      	str	r3, [sp, #4]
   b55a8:	bd08      	pop	{r3, pc}
   b55aa:	0000      	.short	0x0000
   b55ac:	00030220 	.word	0x00030220

000b55b0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b55b0:	b508      	push	{r3, lr}
   b55b2:	4b02      	ldr	r3, [pc, #8]	; (b55bc <network_connect+0xc>)
   b55b4:	681b      	ldr	r3, [r3, #0]
   b55b6:	685b      	ldr	r3, [r3, #4]
   b55b8:	9301      	str	r3, [sp, #4]
   b55ba:	bd08      	pop	{r3, pc}
   b55bc:	00030240 	.word	0x00030240

000b55c0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b55c0:	b508      	push	{r3, lr}
   b55c2:	4b02      	ldr	r3, [pc, #8]	; (b55cc <network_connecting+0xc>)
   b55c4:	681b      	ldr	r3, [r3, #0]
   b55c6:	689b      	ldr	r3, [r3, #8]
   b55c8:	9301      	str	r3, [sp, #4]
   b55ca:	bd08      	pop	{r3, pc}
   b55cc:	00030240 	.word	0x00030240

000b55d0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b55d0:	b508      	push	{r3, lr}
   b55d2:	4b02      	ldr	r3, [pc, #8]	; (b55dc <network_disconnect+0xc>)
   b55d4:	681b      	ldr	r3, [r3, #0]
   b55d6:	68db      	ldr	r3, [r3, #12]
   b55d8:	9301      	str	r3, [sp, #4]
   b55da:	bd08      	pop	{r3, pc}
   b55dc:	00030240 	.word	0x00030240

000b55e0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b55e0:	b508      	push	{r3, lr}
   b55e2:	4b02      	ldr	r3, [pc, #8]	; (b55ec <network_ready+0xc>)
   b55e4:	681b      	ldr	r3, [r3, #0]
   b55e6:	691b      	ldr	r3, [r3, #16]
   b55e8:	9301      	str	r3, [sp, #4]
   b55ea:	bd08      	pop	{r3, pc}
   b55ec:	00030240 	.word	0x00030240

000b55f0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b55f0:	b508      	push	{r3, lr}
   b55f2:	4b02      	ldr	r3, [pc, #8]	; (b55fc <network_on+0xc>)
   b55f4:	681b      	ldr	r3, [r3, #0]
   b55f6:	695b      	ldr	r3, [r3, #20]
   b55f8:	9301      	str	r3, [sp, #4]
   b55fa:	bd08      	pop	{r3, pc}
   b55fc:	00030240 	.word	0x00030240

000b5600 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5600:	b508      	push	{r3, lr}
   b5602:	4b02      	ldr	r3, [pc, #8]	; (b560c <network_off+0xc>)
   b5604:	681b      	ldr	r3, [r3, #0]
   b5606:	699b      	ldr	r3, [r3, #24]
   b5608:	9301      	str	r3, [sp, #4]
   b560a:	bd08      	pop	{r3, pc}
   b560c:	00030240 	.word	0x00030240

000b5610 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5610:	b508      	push	{r3, lr}
   b5612:	4b02      	ldr	r3, [pc, #8]	; (b561c <network_listen+0xc>)
   b5614:	681b      	ldr	r3, [r3, #0]
   b5616:	69db      	ldr	r3, [r3, #28]
   b5618:	9301      	str	r3, [sp, #4]
   b561a:	bd08      	pop	{r3, pc}
   b561c:	00030240 	.word	0x00030240

000b5620 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5620:	b508      	push	{r3, lr}
   b5622:	4b02      	ldr	r3, [pc, #8]	; (b562c <network_listening+0xc>)
   b5624:	681b      	ldr	r3, [r3, #0]
   b5626:	6a1b      	ldr	r3, [r3, #32]
   b5628:	9301      	str	r3, [sp, #4]
   b562a:	bd08      	pop	{r3, pc}
   b562c:	00030240 	.word	0x00030240

000b5630 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5630:	b508      	push	{r3, lr}
   b5632:	4b02      	ldr	r3, [pc, #8]	; (b563c <network_set_listen_timeout+0xc>)
   b5634:	681b      	ldr	r3, [r3, #0]
   b5636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5638:	9301      	str	r3, [sp, #4]
   b563a:	bd08      	pop	{r3, pc}
   b563c:	00030240 	.word	0x00030240

000b5640 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5640:	b508      	push	{r3, lr}
   b5642:	4b02      	ldr	r3, [pc, #8]	; (b564c <network_get_listen_timeout+0xc>)
   b5644:	681b      	ldr	r3, [r3, #0]
   b5646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5648:	9301      	str	r3, [sp, #4]
   b564a:	bd08      	pop	{r3, pc}
   b564c:	00030240 	.word	0x00030240

000b5650 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5650:	b508      	push	{r3, lr}
   b5652:	4b02      	ldr	r3, [pc, #8]	; (b565c <network_is_on+0xc>)
   b5654:	681b      	ldr	r3, [r3, #0]
   b5656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5658:	9301      	str	r3, [sp, #4]
   b565a:	bd08      	pop	{r3, pc}
   b565c:	00030240 	.word	0x00030240

000b5660 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5660:	b508      	push	{r3, lr}
   b5662:	4b02      	ldr	r3, [pc, #8]	; (b566c <network_is_off+0xc>)
   b5664:	681b      	ldr	r3, [r3, #0]
   b5666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5668:	9301      	str	r3, [sp, #4]
   b566a:	bd08      	pop	{r3, pc}
   b566c:	00030240 	.word	0x00030240

000b5670 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b5670:	b508      	push	{r3, lr}
   b5672:	4b02      	ldr	r3, [pc, #8]	; (b567c <spark_process+0xc>)
   b5674:	681b      	ldr	r3, [r3, #0]
   b5676:	689b      	ldr	r3, [r3, #8]
   b5678:	9301      	str	r3, [sp, #4]
   b567a:	bd08      	pop	{r3, pc}
   b567c:	00030244 	.word	0x00030244

000b5680 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b5680:	b508      	push	{r3, lr}
   b5682:	4b02      	ldr	r3, [pc, #8]	; (b568c <spark_cloud_flag_connected+0xc>)
   b5684:	681b      	ldr	r3, [r3, #0]
   b5686:	695b      	ldr	r3, [r3, #20]
   b5688:	9301      	str	r3, [sp, #4]
   b568a:	bd08      	pop	{r3, pc}
   b568c:	00030244 	.word	0x00030244

000b5690 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b5690:	b508      	push	{r3, lr}
   b5692:	4b02      	ldr	r3, [pc, #8]	; (b569c <spark_send_event+0xc>)
   b5694:	681b      	ldr	r3, [r3, #0]
   b5696:	6a1b      	ldr	r3, [r3, #32]
   b5698:	9301      	str	r3, [sp, #4]
   b569a:	bd08      	pop	{r3, pc}
   b569c:	00030244 	.word	0x00030244

000b56a0 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b56a0:	b508      	push	{r3, lr}
   b56a2:	4b02      	ldr	r3, [pc, #8]	; (b56ac <spark_subscribe+0xc>)
   b56a4:	681b      	ldr	r3, [r3, #0]
   b56a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b56a8:	9301      	str	r3, [sp, #4]
   b56aa:	bd08      	pop	{r3, pc}
   b56ac:	00030244 	.word	0x00030244

000b56b0 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b56b0:	b508      	push	{r3, lr}
   b56b2:	4b02      	ldr	r3, [pc, #8]	; (b56bc <spark_sync_time_pending+0xc>)
   b56b4:	681b      	ldr	r3, [r3, #0]
   b56b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b56b8:	9301      	str	r3, [sp, #4]
   b56ba:	bd08      	pop	{r3, pc}
   b56bc:	00030244 	.word	0x00030244

000b56c0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b56c0:	b508      	push	{r3, lr}
   b56c2:	4b02      	ldr	r3, [pc, #8]	; (b56cc <spark_set_random_seed_from_cloud_handler+0xc>)
   b56c4:	681b      	ldr	r3, [r3, #0]
   b56c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b56c8:	9301      	str	r3, [sp, #4]
   b56ca:	bd08      	pop	{r3, pc}
   b56cc:	00030244 	.word	0x00030244

000b56d0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b56d0:	b508      	push	{r3, lr}
   b56d2:	4b02      	ldr	r3, [pc, #8]	; (b56dc <malloc+0xc>)
   b56d4:	681b      	ldr	r3, [r3, #0]
   b56d6:	681b      	ldr	r3, [r3, #0]
   b56d8:	9301      	str	r3, [sp, #4]
   b56da:	bd08      	pop	{r3, pc}
   b56dc:	0003021c 	.word	0x0003021c

000b56e0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b56e0:	b508      	push	{r3, lr}
   b56e2:	4b02      	ldr	r3, [pc, #8]	; (b56ec <free+0xc>)
   b56e4:	681b      	ldr	r3, [r3, #0]
   b56e6:	685b      	ldr	r3, [r3, #4]
   b56e8:	9301      	str	r3, [sp, #4]
   b56ea:	bd08      	pop	{r3, pc}
   b56ec:	0003021c 	.word	0x0003021c

000b56f0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b56f0:	b508      	push	{r3, lr}
   b56f2:	4b02      	ldr	r3, [pc, #8]	; (b56fc <realloc+0xc>)
   b56f4:	681b      	ldr	r3, [r3, #0]
   b56f6:	689b      	ldr	r3, [r3, #8]
   b56f8:	9301      	str	r3, [sp, #4]
   b56fa:	bd08      	pop	{r3, pc}
   b56fc:	0003021c 	.word	0x0003021c

000b5700 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b5700:	b508      	push	{r3, lr}
   b5702:	4b02      	ldr	r3, [pc, #8]	; (b570c <siprintf+0xc>)
   b5704:	681b      	ldr	r3, [r3, #0]
   b5706:	691b      	ldr	r3, [r3, #16]
   b5708:	9301      	str	r3, [sp, #4]
   b570a:	bd08      	pop	{r3, pc}
   b570c:	0003021c 	.word	0x0003021c

000b5710 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b5710:	b508      	push	{r3, lr}
   b5712:	4b02      	ldr	r3, [pc, #8]	; (b571c <snprintf+0xc>)
   b5714:	681b      	ldr	r3, [r3, #0]
   b5716:	69db      	ldr	r3, [r3, #28]
   b5718:	9301      	str	r3, [sp, #4]
   b571a:	bd08      	pop	{r3, pc}
   b571c:	0003021c 	.word	0x0003021c

000b5720 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b5720:	b508      	push	{r3, lr}
   b5722:	4b02      	ldr	r3, [pc, #8]	; (b572c <abort+0xc>)
   b5724:	681b      	ldr	r3, [r3, #0]
   b5726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5728:	9301      	str	r3, [sp, #4]
   b572a:	bd08      	pop	{r3, pc}
   b572c:	0003021c 	.word	0x0003021c

000b5730 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b5730:	b508      	push	{r3, lr}
   b5732:	4b02      	ldr	r3, [pc, #8]	; (b573c <_malloc_r+0xc>)
   b5734:	681b      	ldr	r3, [r3, #0]
   b5736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5738:	9301      	str	r3, [sp, #4]
   b573a:	bd08      	pop	{r3, pc}
   b573c:	0003021c 	.word	0x0003021c

000b5740 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5740:	b508      	push	{r3, lr}
   b5742:	4b02      	ldr	r3, [pc, #8]	; (b574c <__errno+0xc>)
   b5744:	681b      	ldr	r3, [r3, #0]
   b5746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5748:	9301      	str	r3, [sp, #4]
   b574a:	bd08      	pop	{r3, pc}
   b574c:	0003021c 	.word	0x0003021c

000b5750 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5750:	b508      	push	{r3, lr}
   b5752:	4b02      	ldr	r3, [pc, #8]	; (b575c <__assert_func+0xc>)
   b5754:	681b      	ldr	r3, [r3, #0]
   b5756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5758:	9301      	str	r3, [sp, #4]
   b575a:	bd08      	pop	{r3, pc}
   b575c:	0003021c 	.word	0x0003021c

000b5760 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5760:	b508      	push	{r3, lr}
   b5762:	4b02      	ldr	r3, [pc, #8]	; (b576c <newlib_impure_ptr_callback+0xc>)
   b5764:	681b      	ldr	r3, [r3, #0]
   b5766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5768:	9301      	str	r3, [sp, #4]
   b576a:	bd08      	pop	{r3, pc}
   b576c:	0003021c 	.word	0x0003021c

000b5770 <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   b5770:	b508      	push	{r3, lr}
   b5772:	4b02      	ldr	r3, [pc, #8]	; (b577c <strftime+0xc>)
   b5774:	681b      	ldr	r3, [r3, #0]
   b5776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b5778:	9301      	str	r3, [sp, #4]
   b577a:	bd08      	pop	{r3, pc}
   b577c:	0003021c 	.word	0x0003021c

000b5780 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b5780:	b508      	push	{r3, lr}
   b5782:	4b02      	ldr	r3, [pc, #8]	; (b578c <localtime_r+0xc>)
   b5784:	681b      	ldr	r3, [r3, #0]
   b5786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5788:	9301      	str	r3, [sp, #4]
   b578a:	bd08      	pop	{r3, pc}
   b578c:	0003021c 	.word	0x0003021c

000b5790 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5790:	2200      	movs	r2, #0
   b5792:	6840      	ldr	r0, [r0, #4]
   b5794:	4611      	mov	r1, r2
   b5796:	f7ff bf43 	b.w	b5620 <network_listening>

000b579a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b579a:	2200      	movs	r2, #0
   b579c:	6840      	ldr	r0, [r0, #4]
   b579e:	4611      	mov	r1, r2
   b57a0:	f7ff bf4e 	b.w	b5640 <network_get_listen_timeout>

000b57a4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b57a4:	6840      	ldr	r0, [r0, #4]
   b57a6:	2200      	movs	r2, #0
   b57a8:	f7ff bf42 	b.w	b5630 <network_set_listen_timeout>

000b57ac <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b57ac:	6840      	ldr	r0, [r0, #4]
   b57ae:	2200      	movs	r2, #0
   b57b0:	f081 0101 	eor.w	r1, r1, #1
   b57b4:	f7ff bf2c 	b.w	b5610 <network_listen>

000b57b8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b57b8:	2300      	movs	r3, #0
   b57ba:	6840      	ldr	r0, [r0, #4]
   b57bc:	461a      	mov	r2, r3
   b57be:	4619      	mov	r1, r3
   b57c0:	f7ff bf1e 	b.w	b5600 <network_off>

000b57c4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b57c4:	2300      	movs	r3, #0
   b57c6:	6840      	ldr	r0, [r0, #4]
   b57c8:	461a      	mov	r2, r3
   b57ca:	4619      	mov	r1, r3
   b57cc:	f7ff bf10 	b.w	b55f0 <network_on>

000b57d0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b57d0:	2200      	movs	r2, #0
   b57d2:	6840      	ldr	r0, [r0, #4]
   b57d4:	4611      	mov	r1, r2
   b57d6:	f7ff bf03 	b.w	b55e0 <network_ready>

000b57da <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b57da:	2200      	movs	r2, #0
   b57dc:	6840      	ldr	r0, [r0, #4]
   b57de:	4611      	mov	r1, r2
   b57e0:	f7ff beee 	b.w	b55c0 <network_connecting>

000b57e4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b57e4:	6840      	ldr	r0, [r0, #4]
   b57e6:	2200      	movs	r2, #0
   b57e8:	2102      	movs	r1, #2
   b57ea:	f7ff bef1 	b.w	b55d0 <network_disconnect>

000b57ee <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b57ee:	2300      	movs	r3, #0
   b57f0:	6840      	ldr	r0, [r0, #4]
   b57f2:	461a      	mov	r2, r3
   b57f4:	f7ff bedc 	b.w	b55b0 <network_connect>

000b57f8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b57f8:	4b02      	ldr	r3, [pc, #8]	; (b5804 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b57fa:	2203      	movs	r2, #3
   b57fc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b57fe:	4a02      	ldr	r2, [pc, #8]	; (b5808 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5800:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5802:	4770      	bx	lr
   b5804:	2003e684 	.word	0x2003e684
   b5808:	000b82c4 	.word	0x000b82c4

000b580c <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   b580c:	680a      	ldr	r2, [r1, #0]
void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   b580e:	460b      	mov	r3, r1
    s->update(ticks);
   b5810:	6892      	ldr	r2, [r2, #8]
   b5812:	4601      	mov	r1, r0
   b5814:	4618      	mov	r0, r3
   b5816:	4710      	bx	r2

000b5818 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   b5818:	b570      	push	{r4, r5, r6, lr}
   b581a:	4c0e      	ldr	r4, [pc, #56]	; (b5854 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   b581c:	6004      	str	r4, [r0, #0]
    d_.next = nullptr;
   b581e:	2500      	movs	r5, #0
   b5820:	241c      	movs	r4, #28
   b5822:	e9c0 4501 	strd	r4, r5, [r0, #4]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   b5826:	f89d 4014 	ldrb.w	r4, [sp, #20]
   b582a:	f89d 6010 	ldrb.w	r6, [sp, #16]
    d_.prev = nullptr;
   b582e:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   b5830:	f004 0403 	and.w	r4, r4, #3
   b5834:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
   b5838:	b2e4      	uxtb	r4, r4
   b583a:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   b583c:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   b583e:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   b5840:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   b5842:	7c42      	ldrb	r2, [r0, #17]
   b5844:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   b5846:	bf0a      	itet	eq
   b5848:	4b03      	ldreq	r3, [pc, #12]	; (b5858 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)
        d_.period = period;
   b584a:	8303      	strhne	r3, [r0, #24]
        d_.data = this; // Callback data
   b584c:	e9c0 3006 	strdeq	r3, r0, [r0, #24]
}
   b5850:	bd70      	pop	{r4, r5, r6, pc}
   b5852:	bf00      	nop
   b5854:	000b81f8 	.word	0x000b81f8
   b5858:	000b580d 	.word	0x000b580d

000b585c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b585c:	4b05      	ldr	r3, [pc, #20]	; (b5874 <_GLOBAL__sub_I_System+0x18>)
   b585e:	2202      	movs	r2, #2
   b5860:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5862:	4b05      	ldr	r3, [pc, #20]	; (b5878 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5864:	4a05      	ldr	r2, [pc, #20]	; (b587c <_GLOBAL__sub_I_System+0x20>)
   b5866:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5868:	2000      	movs	r0, #0
   b586a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b586e:	f7ff be5b 	b.w	b5528 <set_system_mode>
   b5872:	bf00      	nop
   b5874:	2003e698 	.word	0x2003e698
   b5878:	2003e68c 	.word	0x2003e68c
   b587c:	ffff0000 	.word	0xffff0000

000b5880 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b5880:	b510      	push	{r4, lr}
   b5882:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b5884:	f002 fa35 	bl	b7cf2 <strlen>
   b5888:	3801      	subs	r0, #1
   b588a:	1823      	adds	r3, r4, r0
   b588c:	4620      	mov	r0, r4
	while(i<j){
   b588e:	4283      	cmp	r3, r0
   b5890:	d906      	bls.n	b58a0 <_Z11str_reversePc+0x20>
		c = *i;
   b5892:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b5894:	7819      	ldrb	r1, [r3, #0]
   b5896:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b589a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b589e:	e7f6      	b.n	b588e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b58a0:	bd10      	pop	{r4, pc}

000b58a2 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b58a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b58a6:	1e93      	subs	r3, r2, #2
{
   b58a8:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b58aa:	2b22      	cmp	r3, #34	; 0x22
   b58ac:	f04f 0300 	mov.w	r3, #0
{
   b58b0:	460d      	mov	r5, r1
   b58b2:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b58b4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b58b8:	d927      	bls.n	b590a <ltoa+0x68>

      if (10 == base && N < 0L)
   b58ba:	2800      	cmp	r0, #0
   b58bc:	da2a      	bge.n	b5914 <ltoa+0x72>
      {
            *head++ = '-';
   b58be:	462e      	mov	r6, r5
   b58c0:	232d      	movs	r3, #45	; 0x2d
   b58c2:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b58c6:	4240      	negs	r0, r0
   b58c8:	240a      	movs	r4, #10
      *tail-- = '\0';
   b58ca:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b58ce:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b58d2:	4622      	mov	r2, r4
   b58d4:	4601      	mov	r1, r0
   b58d6:	a801      	add	r0, sp, #4
   b58d8:	f002 f984 	bl	b7be4 <ldiv>
   b58dc:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b58de:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b58e0:	2b09      	cmp	r3, #9
   b58e2:	bfcc      	ite	gt
   b58e4:	2237      	movgt	r2, #55	; 0x37
   b58e6:	2230      	movle	r2, #48	; 0x30
   b58e8:	fa52 f383 	uxtab	r3, r2, r3
   b58ec:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b58f0:	f108 0801 	add.w	r8, r8, #1
   b58f4:	2800      	cmp	r0, #0
   b58f6:	d1ec      	bne.n	b58d2 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b58f8:	4642      	mov	r2, r8
   b58fa:	1c79      	adds	r1, r7, #1
   b58fc:	4630      	mov	r0, r6
   b58fe:	f002 f985 	bl	b7c0c <memcpy>
      return str;
}
   b5902:	4628      	mov	r0, r5
   b5904:	b00c      	add	sp, #48	; 0x30
   b5906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b590a:	2a0a      	cmp	r2, #10
   b590c:	d0d5      	beq.n	b58ba <ltoa+0x18>
      if (uarg)
   b590e:	b118      	cbz	r0, b5918 <ltoa+0x76>
   b5910:	462e      	mov	r6, r5
   b5912:	e7da      	b.n	b58ca <ltoa+0x28>
   b5914:	240a      	movs	r4, #10
   b5916:	e7fa      	b.n	b590e <ltoa+0x6c>
      else  *tail-- = '0';
   b5918:	2330      	movs	r3, #48	; 0x30
   b591a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b591e:	462e      	mov	r6, r5
   b5920:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b5924:	f04f 0802 	mov.w	r8, #2
   b5928:	e7e6      	b.n	b58f8 <ltoa+0x56>

000b592a <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b592a:	b570      	push	{r4, r5, r6, lr}
   b592c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b592e:	1e91      	subs	r1, r2, #2
   b5930:	2922      	cmp	r1, #34	; 0x22
   b5932:	d81d      	bhi.n	b5970 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b5934:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b5936:	b930      	cbnz	r0, b5946 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b5938:	4423      	add	r3, r4
            *ptr++ = '0';
   b593a:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b593c:	429d      	cmp	r5, r3
   b593e:	d210      	bcs.n	b5962 <ultoa+0x38>
            *ptr++ = '0';
   b5940:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b5944:	e7fa      	b.n	b593c <ultoa+0x12>
            result.quot = a/radix;
   b5946:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b594a:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b594e:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b5950:	2809      	cmp	r0, #9
                *ptr += '0';
   b5952:	bf94      	ite	ls
   b5954:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b5956:	3157      	addhi	r1, #87	; 0x57
   b5958:	b2c9      	uxtb	r1, r1
   b595a:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b595e:	4630      	mov	r0, r6
	while(a){
   b5960:	e7e9      	b.n	b5936 <ultoa+0xc>

	*ptr = '\0';
   b5962:	2300      	movs	r3, #0
	str_reverse(buffer);
   b5964:	4620      	mov	r0, r4
	*ptr = '\0';
   b5966:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b5968:	f7ff ff8a 	bl	b5880 <_Z11str_reversePc>
	return buffer;
   b596c:	4620      	mov	r0, r4
}
   b596e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b5970:	2000      	movs	r0, #0
   b5972:	e7fc      	b.n	b596e <ultoa+0x44>

000b5974 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b5974:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b5976:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b5978:	460c      	mov	r4, r1
   b597a:	4615      	mov	r5, r2
	if(a<0){
   b597c:	da0e      	bge.n	b599c <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b597e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b5982:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b5986:	bf14      	ite	ne
   b5988:	4258      	negne	r0, r3
   b598a:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b598c:	2301      	movs	r3, #1
		*buffer = '-';
   b598e:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b5990:	462a      	mov	r2, r5
   b5992:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b5994:	f7ff ffc9 	bl	b592a <ultoa>
	}
	return buffer;
}
   b5998:	4620      	mov	r0, r4
   b599a:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b599c:	2301      	movs	r3, #1
   b599e:	e7f9      	b.n	b5994 <itoa+0x20>

000b59a0 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   b59a0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b59a4:	ec57 6b10 	vmov	r6, r7, d0
   b59a8:	4680      	mov	r8, r0
   b59aa:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   b59ac:	ee10 0a10 	vmov	r0, s0
   b59b0:	2200      	movs	r2, #0
   b59b2:	2300      	movs	r3, #0
   b59b4:	4639      	mov	r1, r7
   b59b6:	f001 fe79 	bl	b76ac <__aeabi_dcmplt>
   b59ba:	b128      	cbz	r0, b59c8 <_Z4dtoadhPc+0x28>
        val = -val;
   b59bc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b59c0:	461f      	mov	r7, r3
        *sout++ = '-';
   b59c2:	232d      	movs	r3, #45	; 0x2d
   b59c4:	f804 3b01 	strb.w	r3, [r4], #1
   b59c8:	2300      	movs	r3, #0
    }
    long scale = 1;
   b59ca:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   b59ce:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   b59d0:	b2d9      	uxtb	r1, r3
   b59d2:	4588      	cmp	r8, r1
   b59d4:	d903      	bls.n	b59de <_Z4dtoadhPc+0x3e>
        scale *= 10;
   b59d6:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   b59da:	3301      	adds	r3, #1
   b59dc:	e7f8      	b.n	b59d0 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   b59de:	4648      	mov	r0, r9
   b59e0:	f001 fb88 	bl	b70f4 <__aeabi_i2d>
   b59e4:	4632      	mov	r2, r6
   b59e6:	463b      	mov	r3, r7
   b59e8:	f001 fbee 	bl	b71c8 <__aeabi_dmul>
   b59ec:	4606      	mov	r6, r0
   b59ee:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   b59f0:	f001 ff40 	bl	b7874 <__aeabi_d2ulz>
   b59f4:	468a      	mov	sl, r1
   b59f6:	4605      	mov	r5, r0
   b59f8:	468b      	mov	fp, r1
    if ((val-fixed)>=0.5)    // round last digit
   b59fa:	f001 fbaf 	bl	b715c <__aeabi_ul2d>
   b59fe:	4602      	mov	r2, r0
   b5a00:	460b      	mov	r3, r1
   b5a02:	4630      	mov	r0, r6
   b5a04:	4639      	mov	r1, r7
   b5a06:	f001 fa27 	bl	b6e58 <__aeabi_dsub>
   b5a0a:	4b14      	ldr	r3, [pc, #80]	; (b5a5c <_Z4dtoadhPc+0xbc>)
   b5a0c:	2200      	movs	r2, #0
   b5a0e:	f001 fe61 	bl	b76d4 <__aeabi_dcmpge>
   b5a12:	b110      	cbz	r0, b5a1a <_Z4dtoadhPc+0x7a>
        fixed++;
   b5a14:	3501      	adds	r5, #1
   b5a16:	f14a 0b00 	adc.w	fp, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   b5a1a:	464a      	mov	r2, r9
   b5a1c:	4628      	mov	r0, r5
   b5a1e:	17d3      	asrs	r3, r2, #31
   b5a20:	4659      	mov	r1, fp
   b5a22:	f001 fedb 	bl	b77dc <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   b5a26:	2301      	movs	r3, #1
   b5a28:	4615      	mov	r5, r2
   b5a2a:	4621      	mov	r1, r4
   b5a2c:	220a      	movs	r2, #10
   b5a2e:	f7ff ff7c 	bl	b592a <ultoa>
    if (prec) {
   b5a32:	f1b8 0f00 	cmp.w	r8, #0
   b5a36:	d00e      	beq.n	b5a56 <_Z4dtoadhPc+0xb6>
        sout += strlen(sout);
   b5a38:	4620      	mov	r0, r4
   b5a3a:	f002 f95a 	bl	b7cf2 <strlen>
        *sout++ = '.';
   b5a3e:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   b5a40:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   b5a42:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   b5a44:	220a      	movs	r2, #10
   b5a46:	4643      	mov	r3, r8
   b5a48:	3101      	adds	r1, #1
   b5a4a:	4628      	mov	r0, r5
    }
}
   b5a4c:	b001      	add	sp, #4
   b5a4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ultoa(second, sout, 10, prec);
   b5a52:	f7ff bf6a 	b.w	b592a <ultoa>
}
   b5a56:	b001      	add	sp, #4
   b5a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5a5c:	3fe00000 	.word	0x3fe00000

000b5a60 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b5a60:	b510      	push	{r4, lr}
   b5a62:	4604      	mov	r4, r0
{
	free(buffer);
   b5a64:	6800      	ldr	r0, [r0, #0]
   b5a66:	f7ff fe3b 	bl	b56e0 <free>
}
   b5a6a:	4620      	mov	r0, r4
   b5a6c:	bd10      	pop	{r4, pc}

000b5a6e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b5a6e:	b510      	push	{r4, lr}
   b5a70:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b5a72:	6800      	ldr	r0, [r0, #0]
   b5a74:	b108      	cbz	r0, b5a7a <_ZN6String10invalidateEv+0xc>
   b5a76:	f7ff fe33 	bl	b56e0 <free>
	buffer = NULL;
   b5a7a:	2300      	movs	r3, #0
	capacity = len = 0;
   b5a7c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5a80:	6023      	str	r3, [r4, #0]
}
   b5a82:	bd10      	pop	{r4, pc}

000b5a84 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5a84:	b538      	push	{r3, r4, r5, lr}
   b5a86:	4604      	mov	r4, r0
   b5a88:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5a8a:	6800      	ldr	r0, [r0, #0]
   b5a8c:	3101      	adds	r1, #1
   b5a8e:	f7ff fe2f 	bl	b56f0 <realloc>
	if (newbuffer) {
   b5a92:	b110      	cbz	r0, b5a9a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5a94:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5a98:	2001      	movs	r0, #1
	}
	return 0;
}
   b5a9a:	bd38      	pop	{r3, r4, r5, pc}

000b5a9c <_ZN6String7reserveEj>:
{
   b5a9c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b5a9e:	6803      	ldr	r3, [r0, #0]
{
   b5aa0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5aa2:	b123      	cbz	r3, b5aae <_ZN6String7reserveEj+0x12>
   b5aa4:	6843      	ldr	r3, [r0, #4]
   b5aa6:	428b      	cmp	r3, r1
   b5aa8:	d301      	bcc.n	b5aae <_ZN6String7reserveEj+0x12>
   b5aaa:	2001      	movs	r0, #1
}
   b5aac:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b5aae:	4620      	mov	r0, r4
   b5ab0:	f7ff ffe8 	bl	b5a84 <_ZN6String12changeBufferEj>
   b5ab4:	2800      	cmp	r0, #0
   b5ab6:	d0f9      	beq.n	b5aac <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5ab8:	68a3      	ldr	r3, [r4, #8]
   b5aba:	2b00      	cmp	r3, #0
   b5abc:	d1f5      	bne.n	b5aaa <_ZN6String7reserveEj+0xe>
   b5abe:	6822      	ldr	r2, [r4, #0]
   b5ac0:	7013      	strb	r3, [r2, #0]
   b5ac2:	e7f2      	b.n	b5aaa <_ZN6String7reserveEj+0xe>

000b5ac4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5ac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5ac6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5ac8:	4611      	mov	r1, r2
   b5aca:	9201      	str	r2, [sp, #4]
{
   b5acc:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b5ace:	f7ff ffe5 	bl	b5a9c <_ZN6String7reserveEj>
   b5ad2:	9a01      	ldr	r2, [sp, #4]
   b5ad4:	b928      	cbnz	r0, b5ae2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5ad6:	4620      	mov	r0, r4
   b5ad8:	f7ff ffc9 	bl	b5a6e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5adc:	4620      	mov	r0, r4
   b5ade:	b003      	add	sp, #12
   b5ae0:	bd30      	pop	{r4, r5, pc}
	len = length;
   b5ae2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5ae4:	4629      	mov	r1, r5
   b5ae6:	6820      	ldr	r0, [r4, #0]
   b5ae8:	f002 f890 	bl	b7c0c <memcpy>
	buffer[len] = 0;
   b5aec:	6822      	ldr	r2, [r4, #0]
   b5aee:	68a3      	ldr	r3, [r4, #8]
   b5af0:	2100      	movs	r1, #0
   b5af2:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5af4:	e7f2      	b.n	b5adc <_ZN6String4copyEPKcj+0x18>

000b5af6 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5af6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5af8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b5afa:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b5afe:	4604      	mov	r4, r0
	len = 0;
   b5b00:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5b02:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5b04:	b141      	cbz	r1, b5b18 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5b06:	4608      	mov	r0, r1
   b5b08:	9101      	str	r1, [sp, #4]
   b5b0a:	f002 f8f2 	bl	b7cf2 <strlen>
   b5b0e:	9901      	ldr	r1, [sp, #4]
   b5b10:	4602      	mov	r2, r0
   b5b12:	4620      	mov	r0, r4
   b5b14:	f7ff ffd6 	bl	b5ac4 <_ZN6String4copyEPKcj>
}
   b5b18:	4620      	mov	r0, r4
   b5b1a:	b002      	add	sp, #8
   b5b1c:	bd10      	pop	{r4, pc}

000b5b1e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b5b1e:	4288      	cmp	r0, r1
{
   b5b20:	b510      	push	{r4, lr}
   b5b22:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b5b24:	d005      	beq.n	b5b32 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b5b26:	680b      	ldr	r3, [r1, #0]
   b5b28:	b12b      	cbz	r3, b5b36 <_ZN6StringaSERKS_+0x18>
   b5b2a:	688a      	ldr	r2, [r1, #8]
   b5b2c:	4619      	mov	r1, r3
   b5b2e:	f7ff ffc9 	bl	b5ac4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5b32:	4620      	mov	r0, r4
   b5b34:	bd10      	pop	{r4, pc}
	else invalidate();
   b5b36:	f7ff ff9a 	bl	b5a6e <_ZN6String10invalidateEv>
   b5b3a:	e7fa      	b.n	b5b32 <_ZN6StringaSERKS_+0x14>

000b5b3c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b5b3c:	b510      	push	{r4, lr}
	buffer = NULL;
   b5b3e:	2300      	movs	r3, #0
String::String(const String &value)
   b5b40:	4604      	mov	r4, r0
	capacity = 0;
   b5b42:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b5b46:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5b48:	7303      	strb	r3, [r0, #12]
	*this = value;
   b5b4a:	f7ff ffe8 	bl	b5b1e <_ZN6StringaSERKS_>
}
   b5b4e:	4620      	mov	r0, r4
   b5b50:	bd10      	pop	{r4, pc}

000b5b52 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b5b52:	b513      	push	{r0, r1, r4, lr}
   b5b54:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b5b56:	b159      	cbz	r1, b5b70 <_ZN6StringaSEPKc+0x1e>
   b5b58:	4608      	mov	r0, r1
   b5b5a:	9101      	str	r1, [sp, #4]
   b5b5c:	f002 f8c9 	bl	b7cf2 <strlen>
   b5b60:	9901      	ldr	r1, [sp, #4]
   b5b62:	4602      	mov	r2, r0
   b5b64:	4620      	mov	r0, r4
   b5b66:	f7ff ffad 	bl	b5ac4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5b6a:	4620      	mov	r0, r4
   b5b6c:	b002      	add	sp, #8
   b5b6e:	bd10      	pop	{r4, pc}
	else invalidate();
   b5b70:	f7ff ff7d 	bl	b5a6e <_ZN6String10invalidateEv>
   b5b74:	e7f9      	b.n	b5b6a <_ZN6StringaSEPKc+0x18>

000b5b76 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b5b76:	b510      	push	{r4, lr}
   b5b78:	4604      	mov	r4, r0
   b5b7a:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b5b7c:	2300      	movs	r3, #0
	capacity = 0;
   b5b7e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b5b82:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b5b84:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b5b86:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b5b88:	a901      	add	r1, sp, #4
   b5b8a:	f7ff fef3 	bl	b5974 <itoa>
	*this = buf;
   b5b8e:	a901      	add	r1, sp, #4
   b5b90:	4620      	mov	r0, r4
   b5b92:	f7ff ffde 	bl	b5b52 <_ZN6StringaSEPKc>
}
   b5b96:	4620      	mov	r0, r4
   b5b98:	b00a      	add	sp, #40	; 0x28
   b5b9a:	bd10      	pop	{r4, pc}

000b5b9c <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   b5b9c:	b510      	push	{r4, lr}
   b5b9e:	4604      	mov	r4, r0
   b5ba0:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b5ba2:	2300      	movs	r3, #0
	capacity = 0;
   b5ba4:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b5ba8:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b5baa:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   b5bac:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   b5bae:	a901      	add	r1, sp, #4
   b5bb0:	f7ff fe77 	bl	b58a2 <ltoa>
	*this = buf;
   b5bb4:	a901      	add	r1, sp, #4
   b5bb6:	4620      	mov	r0, r4
   b5bb8:	f7ff ffcb 	bl	b5b52 <_ZN6StringaSEPKc>
}
   b5bbc:	4620      	mov	r0, r4
   b5bbe:	b00a      	add	sp, #40	; 0x28
   b5bc0:	bd10      	pop	{r4, pc}

000b5bc2 <_ZN6StringC1Emh>:
String::String(unsigned long value, unsigned char base)
   b5bc2:	b510      	push	{r4, lr}
   b5bc4:	4604      	mov	r4, r0
   b5bc6:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b5bc8:	2300      	movs	r3, #0
	capacity = 0;
   b5bca:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b5bce:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b5bd0:	7323      	strb	r3, [r4, #12]
String::String(unsigned long value, unsigned char base)
   b5bd2:	4608      	mov	r0, r1
	ultoa(value, buf, base);
   b5bd4:	2301      	movs	r3, #1
   b5bd6:	a901      	add	r1, sp, #4
   b5bd8:	f7ff fea7 	bl	b592a <ultoa>
	*this = buf;
   b5bdc:	a901      	add	r1, sp, #4
   b5bde:	4620      	mov	r0, r4
   b5be0:	f7ff ffb7 	bl	b5b52 <_ZN6StringaSEPKc>
}
   b5be4:	4620      	mov	r0, r4
   b5be6:	b00a      	add	sp, #40	; 0x28
   b5be8:	bd10      	pop	{r4, pc}

000b5bea <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   b5bea:	b530      	push	{r4, r5, lr}
   b5bec:	4604      	mov	r4, r0
	buffer = NULL;
   b5bee:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   b5bf0:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   b5bf2:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b5bf6:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b5bf8:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   b5bfa:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   b5bfe:	b2cd      	uxtb	r5, r1
   b5c00:	f001 fa8a 	bl	b7118 <__aeabi_f2d>
   b5c04:	ec41 0b10 	vmov	d0, r0, r1
   b5c08:	a901      	add	r1, sp, #4
   b5c0a:	4628      	mov	r0, r5
   b5c0c:	f7ff fec8 	bl	b59a0 <_Z4dtoadhPc>
        *this = buf;
   b5c10:	a901      	add	r1, sp, #4
   b5c12:	4620      	mov	r0, r4
   b5c14:	f7ff ff9d 	bl	b5b52 <_ZN6StringaSEPKc>
}
   b5c18:	4620      	mov	r0, r4
   b5c1a:	b00b      	add	sp, #44	; 0x2c
   b5c1c:	bd30      	pop	{r4, r5, pc}

000b5c1e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b5c1e:	b570      	push	{r4, r5, r6, lr}
   b5c20:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b5c22:	460e      	mov	r6, r1
   b5c24:	b909      	cbnz	r1, b5c2a <_ZN6String6concatEPKcj+0xc>
   b5c26:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b5c28:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b5c2a:	b16a      	cbz	r2, b5c48 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b5c2c:	6884      	ldr	r4, [r0, #8]
   b5c2e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b5c30:	4621      	mov	r1, r4
   b5c32:	f7ff ff33 	bl	b5a9c <_ZN6String7reserveEj>
   b5c36:	2800      	cmp	r0, #0
   b5c38:	d0f5      	beq.n	b5c26 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b5c3a:	6828      	ldr	r0, [r5, #0]
   b5c3c:	68ab      	ldr	r3, [r5, #8]
   b5c3e:	4631      	mov	r1, r6
   b5c40:	4418      	add	r0, r3
   b5c42:	f002 f831 	bl	b7ca8 <strcpy>
	len = newlen;
   b5c46:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b5c48:	2001      	movs	r0, #1
   b5c4a:	e7ed      	b.n	b5c28 <_ZN6String6concatEPKcj+0xa>

000b5c4c <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b5c4c:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b5c4e:	2300      	movs	r3, #0
	buf[0] = c;
   b5c50:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b5c54:	2201      	movs	r2, #1
   b5c56:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b5c58:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b5c5c:	f7ff ffdf 	bl	b5c1e <_ZN6String6concatEPKcj>
}
   b5c60:	b003      	add	sp, #12
   b5c62:	f85d fb04 	ldr.w	pc, [sp], #4

000b5c66 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b5c66:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b5c68:	688a      	ldr	r2, [r1, #8]
   b5c6a:	6809      	ldr	r1, [r1, #0]
{
   b5c6c:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b5c6e:	f7ff ffd6 	bl	b5c1e <_ZN6String6concatEPKcj>
   b5c72:	b910      	cbnz	r0, b5c7a <_ZplRK15StringSumHelperRK6String+0x14>
   b5c74:	4620      	mov	r0, r4
   b5c76:	f7ff fefa 	bl	b5a6e <_ZN6String10invalidateEv>
	return a;
}
   b5c7a:	4620      	mov	r0, r4
   b5c7c:	bd10      	pop	{r4, pc}

000b5c7e <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b5c7e:	b513      	push	{r0, r1, r4, lr}
   b5c80:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b5c82:	b929      	cbnz	r1, b5c90 <_ZplRK15StringSumHelperPKc+0x12>
   b5c84:	4620      	mov	r0, r4
   b5c86:	f7ff fef2 	bl	b5a6e <_ZN6String10invalidateEv>
	return a;
}
   b5c8a:	4620      	mov	r0, r4
   b5c8c:	b002      	add	sp, #8
   b5c8e:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b5c90:	4608      	mov	r0, r1
   b5c92:	9101      	str	r1, [sp, #4]
   b5c94:	f002 f82d 	bl	b7cf2 <strlen>
   b5c98:	9901      	ldr	r1, [sp, #4]
   b5c9a:	4602      	mov	r2, r0
   b5c9c:	4620      	mov	r0, r4
   b5c9e:	f7ff ffbe 	bl	b5c1e <_ZN6String6concatEPKcj>
   b5ca2:	2800      	cmp	r0, #0
   b5ca4:	d0ee      	beq.n	b5c84 <_ZplRK15StringSumHelperPKc+0x6>
   b5ca6:	e7f0      	b.n	b5c8a <_ZplRK15StringSumHelperPKc+0xc>

000b5ca8 <_ZplRK15StringSumHelperc>:

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
{
   b5ca8:	b510      	push	{r4, lr}
   b5caa:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(c)) a.invalidate();
   b5cac:	f7ff ffce 	bl	b5c4c <_ZN6String6concatEc>
   b5cb0:	b910      	cbnz	r0, b5cb8 <_ZplRK15StringSumHelperc+0x10>
   b5cb2:	4620      	mov	r0, r4
   b5cb4:	f7ff fedb 	bl	b5a6e <_ZN6String10invalidateEv>
	return a;
}
   b5cb8:	4620      	mov	r0, r4
   b5cba:	bd10      	pop	{r4, pc}

000b5cbc <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   b5cbc:	6800      	ldr	r0, [r0, #0]
   b5cbe:	b108      	cbz	r0, b5cc4 <_ZNK6String5toIntEv+0x8>
   b5cc0:	f001 bf8c 	b.w	b7bdc <atol>
	return 0;
}
   b5cc4:	4770      	bx	lr

000b5cc6 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b5cc6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b5cc8:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5cca:	4604      	mov	r4, r0
      if (_M_manager)
   b5ccc:	b113      	cbz	r3, b5cd4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5cce:	2203      	movs	r2, #3
   b5cd0:	4601      	mov	r1, r0
   b5cd2:	4798      	blx	r3
    }
   b5cd4:	4620      	mov	r0, r4
   b5cd6:	bd10      	pop	{r4, pc}

000b5cd8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b5cd8:	b513      	push	{r0, r1, r4, lr}
   b5cda:	460b      	mov	r3, r1
   b5cdc:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5cde:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5ce2:	466c      	mov	r4, sp
   b5ce4:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5ce8:	e893 0003 	ldmia.w	r3, {r0, r1}
   b5cec:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5cf0:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5cf4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b5cf8:	b002      	add	sp, #8
   b5cfa:	bd10      	pop	{r4, pc}

000b5cfc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5cfc:	4802      	ldr	r0, [pc, #8]	; (b5d08 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5cfe:	2300      	movs	r3, #0
   b5d00:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5d02:	f7ff bb2f 	b.w	b5364 <os_mutex_recursive_create>
   b5d06:	bf00      	nop
   b5d08:	2003e69c 	.word	0x2003e69c

000b5d0c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5d0e:	4606      	mov	r6, r0
   b5d10:	460d      	mov	r5, r1
  size_t n = 0;
   b5d12:	188f      	adds	r7, r1, r2
   b5d14:	2400      	movs	r4, #0
  while (size--) {
   b5d16:	42bd      	cmp	r5, r7
   b5d18:	d00c      	beq.n	b5d34 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5d1a:	6833      	ldr	r3, [r6, #0]
   b5d1c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5d20:	689b      	ldr	r3, [r3, #8]
   b5d22:	4630      	mov	r0, r6
   b5d24:	4798      	blx	r3
     if (chunk>=0)
   b5d26:	1e03      	subs	r3, r0, #0
   b5d28:	db01      	blt.n	b5d2e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5d2a:	441c      	add	r4, r3
  while (size--) {
   b5d2c:	e7f3      	b.n	b5d16 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5d2e:	2c00      	cmp	r4, #0
   b5d30:	bf08      	it	eq
   b5d32:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5d34:	4620      	mov	r0, r4
   b5d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5d38 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b5d38:	b513      	push	{r0, r1, r4, lr}
   b5d3a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b5d3c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5d3e:	b159      	cbz	r1, b5d58 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5d40:	9101      	str	r1, [sp, #4]
   b5d42:	f001 ffd6 	bl	b7cf2 <strlen>
   b5d46:	6823      	ldr	r3, [r4, #0]
   b5d48:	9901      	ldr	r1, [sp, #4]
   b5d4a:	68db      	ldr	r3, [r3, #12]
   b5d4c:	4602      	mov	r2, r0
   b5d4e:	4620      	mov	r0, r4
    }
   b5d50:	b002      	add	sp, #8
   b5d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5d56:	4718      	bx	r3
    }
   b5d58:	b002      	add	sp, #8
   b5d5a:	bd10      	pop	{r4, pc}

000b5d5c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5d5c:	6803      	ldr	r3, [r0, #0]
   b5d5e:	689b      	ldr	r3, [r3, #8]
   b5d60:	4718      	bx	r3

000b5d62 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5d62:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5d64:	210d      	movs	r1, #13
{
   b5d66:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5d68:	f7ff fff8 	bl	b5d5c <_ZN5Print5printEc>
  n += print('\n');
   b5d6c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5d6e:	4604      	mov	r4, r0
  n += print('\n');
   b5d70:	4628      	mov	r0, r5
   b5d72:	f7ff fff3 	bl	b5d5c <_ZN5Print5printEc>
  return n;
}
   b5d76:	4420      	add	r0, r4
   b5d78:	bd38      	pop	{r3, r4, r5, pc}

000b5d7a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b5d7a:	b538      	push	{r3, r4, r5, lr}
   b5d7c:	4605      	mov	r5, r0
  return write(str);
   b5d7e:	f7ff ffdb 	bl	b5d38 <_ZN5Print5writeEPKc>
   b5d82:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5d84:	4628      	mov	r0, r5
   b5d86:	f7ff ffec 	bl	b5d62 <_ZN5Print7printlnEv>
  return n;
}
   b5d8a:	4420      	add	r0, r4
   b5d8c:	bd38      	pop	{r3, r4, r5, pc}

000b5d8e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5d8e:	b530      	push	{r4, r5, lr}
   b5d90:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5d92:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5d94:	2a01      	cmp	r2, #1
  *str = '\0';
   b5d96:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5d9a:	bf98      	it	ls
   b5d9c:	220a      	movls	r2, #10
   b5d9e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5da0:	460d      	mov	r5, r1
   b5da2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5da6:	fb01 5312 	mls	r3, r1, r2, r5
   b5daa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5dae:	2b09      	cmp	r3, #9
   b5db0:	bf94      	ite	ls
   b5db2:	3330      	addls	r3, #48	; 0x30
   b5db4:	3337      	addhi	r3, #55	; 0x37
   b5db6:	b2db      	uxtb	r3, r3
  } while(n);
   b5db8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5dba:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5dbe:	d9ef      	bls.n	b5da0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5dc0:	4621      	mov	r1, r4
   b5dc2:	f7ff ffb9 	bl	b5d38 <_ZN5Print5writeEPKc>
}
   b5dc6:	b00b      	add	sp, #44	; 0x2c
   b5dc8:	bd30      	pop	{r4, r5, pc}
	...

000b5dcc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5dcc:	4b01      	ldr	r3, [pc, #4]	; (b5dd4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5dce:	4a02      	ldr	r2, [pc, #8]	; (b5dd8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5dd0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5dd2:	4770      	bx	lr
   b5dd4:	2003e6a0 	.word	0x2003e6a0
   b5dd8:	000b82f8 	.word	0x000b82f8

000b5ddc <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b5ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b5de0:	4a15      	ldr	r2, [pc, #84]	; (b5e38 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b5de2:	f8df 8060 	ldr.w	r8, [pc, #96]	; b5e44 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b5de6:	e9d2 6300 	ldrd	r6, r3, [r2]
   b5dea:	1980      	adds	r0, r0, r6
   b5dec:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b5df0:	4b12      	ldr	r3, [pc, #72]	; (b5e3c <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b5df2:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b5df6:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b5dfa:	1986      	adds	r6, r0, r6
   b5dfc:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b5e00:	42bb      	cmp	r3, r7
   b5e02:	bf08      	it	eq
   b5e04:	42b2      	cmpeq	r2, r6
{
   b5e06:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b5e08:	d013      	beq.n	b5e32 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b5e0a:	a903      	add	r1, sp, #12
   b5e0c:	4668      	mov	r0, sp
   b5e0e:	e9cd 6700 	strd	r6, r7, [sp]
   b5e12:	f7ff fcb5 	bl	b5780 <localtime_r>
	calendar_time.tm_year += 1900;
   b5e16:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b5e18:	4d09      	ldr	r5, [pc, #36]	; (b5e40 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b5e1a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b5e1e:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b5e20:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b5e22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5e24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5e26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5e28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b5e2a:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b5e2e:	6823      	ldr	r3, [r4, #0]
   b5e30:	602b      	str	r3, [r5, #0]
    }
}
   b5e32:	b00c      	add	sp, #48	; 0x30
   b5e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5e38:	2003e6d8 	.word	0x2003e6d8
   b5e3c:	2003e6d0 	.word	0x2003e6d0
   b5e40:	2003e6ac 	.word	0x2003e6ac
   b5e44:	2003e6e0 	.word	0x2003e6e0

000b5e48 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b5e48:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5e4a:	2000      	movs	r0, #0
   b5e4c:	f7ff fc30 	bl	b56b0 <spark_sync_time_pending>
   b5e50:	b128      	cbz	r0, b5e5e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5e52:	f7ff fc15 	bl	b5680 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5e56:	f080 0001 	eor.w	r0, r0, #1
   b5e5a:	b2c0      	uxtb	r0, r0
    }
   b5e5c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5e5e:	2001      	movs	r0, #1
   b5e60:	e7fc      	b.n	b5e5c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b5e64 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b5e64:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   b5e68:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b5e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   b5e70:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b5e72:	d411      	bmi.n	b5e98 <_ZN9TimeClass4zoneEf+0x34>
   b5e74:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   b5e78:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b5e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5e80:	dc0a      	bgt.n	b5e98 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   b5e82:	eddf 7a06 	vldr	s15, [pc, #24]	; b5e9c <_ZN9TimeClass4zoneEf+0x38>
   b5e86:	ee60 7a27 	vmul.f32	s15, s0, s15
   b5e8a:	ee17 0a90 	vmov	r0, s15
   b5e8e:	f001 fcbd 	bl	b780c <__aeabi_f2lz>
   b5e92:	4b03      	ldr	r3, [pc, #12]	; (b5ea0 <_ZN9TimeClass4zoneEf+0x3c>)
   b5e94:	e9c3 0100 	strd	r0, r1, [r3]
}
   b5e98:	bd08      	pop	{r3, pc}
   b5e9a:	bf00      	nop
   b5e9c:	45610000 	.word	0x45610000
   b5ea0:	2003e6d8 	.word	0x2003e6d8

000b5ea4 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   b5ea4:	b530      	push	{r4, r5, lr}
   b5ea6:	b093      	sub	sp, #76	; 0x4c
   b5ea8:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   b5eac:	4b19      	ldr	r3, [pc, #100]	; (b5f14 <_ZN9TimeClass7timeStrEx+0x70>)
{
   b5eae:	4604      	mov	r4, r0
    t += time_zone_cache;
   b5eb0:	e9d3 1000 	ldrd	r1, r0, [r3]
   b5eb4:	9b01      	ldr	r3, [sp, #4]
   b5eb6:	1852      	adds	r2, r2, r1
   b5eb8:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   b5ebc:	4816      	ldr	r0, [pc, #88]	; (b5f18 <_ZN9TimeClass7timeStrEx+0x74>)
   b5ebe:	e9d0 1000 	ldrd	r1, r0, [r0]
   b5ec2:	1852      	adds	r2, r2, r1
   b5ec4:	eb43 0300 	adc.w	r3, r3, r0
   b5ec8:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   b5ecc:	2224      	movs	r2, #36	; 0x24
   b5ece:	eb0d 0002 	add.w	r0, sp, r2
   b5ed2:	2100      	movs	r1, #0
   b5ed4:	f001 fea8 	bl	b7c28 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   b5ed8:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   b5eda:	a909      	add	r1, sp, #36	; 0x24
   b5edc:	4668      	mov	r0, sp
   b5ede:	f7ff fc4f 	bl	b5780 <localtime_r>
    char ascstr[26] = {};
   b5ee2:	2216      	movs	r2, #22
   b5ee4:	4629      	mov	r1, r5
   b5ee6:	a803      	add	r0, sp, #12
   b5ee8:	9502      	str	r5, [sp, #8]
   b5eea:	f001 fe9d 	bl	b7c28 <memset>
    asctime_r(&calendar_time, ascstr);
   b5eee:	a902      	add	r1, sp, #8
   b5ef0:	a809      	add	r0, sp, #36	; 0x24
   b5ef2:	f001 fe47 	bl	b7b84 <asctime_r>
    int len = strlen(ascstr);
   b5ef6:	a802      	add	r0, sp, #8
   b5ef8:	f001 fefb 	bl	b7cf2 <strlen>
    ascstr[len-1] = 0; // remove final newline
   b5efc:	ab12      	add	r3, sp, #72	; 0x48
   b5efe:	4418      	add	r0, r3
    return String(ascstr);
   b5f00:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   b5f02:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   b5f06:	4620      	mov	r0, r4
   b5f08:	f7ff fdf5 	bl	b5af6 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b5f0c:	4620      	mov	r0, r4
   b5f0e:	b013      	add	sp, #76	; 0x4c
   b5f10:	bd30      	pop	{r4, r5, pc}
   b5f12:	bf00      	nop
   b5f14:	2003e6d8 	.word	0x2003e6d8
   b5f18:	2003e6d0 	.word	0x2003e6d0

000b5f1c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   b5f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5f20:	b0a4      	sub	sp, #144	; 0x90
   b5f22:	4607      	mov	r7, r0
   b5f24:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b5f26:	a814      	add	r0, sp, #80	; 0x50
{
   b5f28:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b5f2a:	223f      	movs	r2, #63	; 0x3f
{
   b5f2c:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b5f2e:	f001 fee8 	bl	b7d02 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b5f32:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b5f34:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b5f36:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b5f3a:	f001 feda 	bl	b7cf2 <strlen>
   b5f3e:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   b5f40:	bb4c      	cbnz	r4, b5f96 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   b5f42:	4929      	ldr	r1, [pc, #164]	; (b5fe8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   b5f44:	a803      	add	r0, sp, #12
   b5f46:	f001 feaf 	bl	b7ca8 <strcpy>
   b5f4a:	ac14      	add	r4, sp, #80	; 0x50
{
   b5f4c:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   b5f4e:	f105 39ff 	add.w	r9, r5, #4294967295
   b5f52:	45b1      	cmp	r9, r6
   b5f54:	d934      	bls.n	b5fc0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   b5f56:	7823      	ldrb	r3, [r4, #0]
   b5f58:	2b25      	cmp	r3, #37	; 0x25
   b5f5a:	f106 0a01 	add.w	sl, r6, #1
   b5f5e:	d117      	bne.n	b5f90 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   b5f60:	7863      	ldrb	r3, [r4, #1]
   b5f62:	2b7a      	cmp	r3, #122	; 0x7a
   b5f64:	d114      	bne.n	b5f90 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   b5f66:	a803      	add	r0, sp, #12
   b5f68:	f001 fec3 	bl	b7cf2 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b5f6c:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   b5f6e:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b5f70:	1830      	adds	r0, r6, r0
   b5f72:	4418      	add	r0, r3
   b5f74:	eba9 0206 	sub.w	r2, r9, r6
   b5f78:	1ca1      	adds	r1, r4, #2
   b5f7a:	f001 fe47 	bl	b7c0c <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   b5f7e:	462a      	mov	r2, r5
   b5f80:	a903      	add	r1, sp, #12
   b5f82:	4620      	mov	r0, r4
   b5f84:	f001 fe42 	bl	b7c0c <memcpy>
            len = strlen(format_str);
   b5f88:	a814      	add	r0, sp, #80	; 0x50
   b5f8a:	f001 feb2 	bl	b7cf2 <strlen>
   b5f8e:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   b5f90:	3401      	adds	r4, #1
   b5f92:	4656      	mov	r6, sl
   b5f94:	e7db      	b.n	b5f4e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   b5f96:	233c      	movs	r3, #60	; 0x3c
   b5f98:	fb94 f2f3 	sdiv	r2, r4, r3
   b5f9c:	2a00      	cmp	r2, #0
   b5f9e:	bfb8      	it	lt
   b5fa0:	4252      	neglt	r2, r2
   b5fa2:	fbb2 f1f3 	udiv	r1, r2, r3
   b5fa6:	fb03 2211 	mls	r2, r3, r1, r2
   b5faa:	9200      	str	r2, [sp, #0]
   b5fac:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   b5fb0:	4a0e      	ldr	r2, [pc, #56]	; (b5fec <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   b5fb2:	fb94 f3f3 	sdiv	r3, r4, r3
   b5fb6:	2110      	movs	r1, #16
   b5fb8:	a803      	add	r0, sp, #12
   b5fba:	f7ff fba9 	bl	b5710 <snprintf>
   b5fbe:	e7c4      	b.n	b5f4a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   b5fc0:	2100      	movs	r1, #0
   b5fc2:	222e      	movs	r2, #46	; 0x2e
   b5fc4:	a808      	add	r0, sp, #32
   b5fc6:	9107      	str	r1, [sp, #28]
   b5fc8:	f001 fe2e 	bl	b7c28 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   b5fcc:	4643      	mov	r3, r8
   b5fce:	aa14      	add	r2, sp, #80	; 0x50
   b5fd0:	2132      	movs	r1, #50	; 0x32
   b5fd2:	a807      	add	r0, sp, #28
   b5fd4:	f7ff fbcc 	bl	b5770 <strftime>
    return String(buf);
   b5fd8:	a907      	add	r1, sp, #28
   b5fda:	4638      	mov	r0, r7
   b5fdc:	f7ff fd8b 	bl	b5af6 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b5fe0:	4638      	mov	r0, r7
   b5fe2:	b024      	add	sp, #144	; 0x90
   b5fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5fe8:	000b82fc 	.word	0x000b82fc
   b5fec:	000b82fe 	.word	0x000b82fe

000b5ff0 <_ZN9TimeClass6formatExPKc>:
{
   b5ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5ff2:	b08d      	sub	sp, #52	; 0x34
   b5ff4:	e9cd 2300 	strd	r2, r3, [sp]
   b5ff8:	9d12      	ldr	r5, [sp, #72]	; 0x48
   b5ffa:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   b5ffc:	b915      	cbnz	r5, b6004 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   b5ffe:	4b19      	ldr	r3, [pc, #100]	; (b6064 <_ZN9TimeClass6formatExPKc+0x74>)
   b6000:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   b6002:	b12d      	cbz	r5, b6010 <_ZN9TimeClass6formatExPKc+0x20>
   b6004:	4b18      	ldr	r3, [pc, #96]	; (b6068 <_ZN9TimeClass6formatExPKc+0x78>)
   b6006:	4628      	mov	r0, r5
   b6008:	6819      	ldr	r1, [r3, #0]
   b600a:	f001 fe43 	bl	b7c94 <strcmp>
   b600e:	b938      	cbnz	r0, b6020 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   b6010:	e9dd 2300 	ldrd	r2, r3, [sp]
   b6014:	4620      	mov	r0, r4
   b6016:	f7ff ff45 	bl	b5ea4 <_ZN9TimeClass7timeStrEx>
}
   b601a:	4620      	mov	r0, r4
   b601c:	b00d      	add	sp, #52	; 0x34
   b601e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   b6020:	4e12      	ldr	r6, [pc, #72]	; (b606c <_ZN9TimeClass6formatExPKc+0x7c>)
   b6022:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   b6024:	4f12      	ldr	r7, [pc, #72]	; (b6070 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   b6026:	e9d6 3200 	ldrd	r3, r2, [r6]
   b602a:	185b      	adds	r3, r3, r1
   b602c:	9901      	ldr	r1, [sp, #4]
   b602e:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   b6032:	e9d7 0100 	ldrd	r0, r1, [r7]
   b6036:	181b      	adds	r3, r3, r0
   b6038:	eb42 0201 	adc.w	r2, r2, r1
   b603c:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   b6040:	2100      	movs	r1, #0
   b6042:	2224      	movs	r2, #36	; 0x24
   b6044:	a803      	add	r0, sp, #12
   b6046:	f001 fdef 	bl	b7c28 <memset>
    localtime_r(&t, &calendar_time);
   b604a:	a903      	add	r1, sp, #12
   b604c:	4668      	mov	r0, sp
   b604e:	f7ff fb97 	bl	b5780 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   b6052:	6832      	ldr	r2, [r6, #0]
   b6054:	683b      	ldr	r3, [r7, #0]
   b6056:	a903      	add	r1, sp, #12
   b6058:	4413      	add	r3, r2
   b605a:	4620      	mov	r0, r4
   b605c:	462a      	mov	r2, r5
   b605e:	f7ff ff5d 	bl	b5f1c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   b6062:	e7da      	b.n	b601a <_ZN9TimeClass6formatExPKc+0x2a>
   b6064:	2003e6a8 	.word	0x2003e6a8
   b6068:	2003dd18 	.word	0x2003dd18
   b606c:	2003e6d8 	.word	0x2003e6d8
   b6070:	2003e6d0 	.word	0x2003e6d0

000b6074 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   b6074:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b6076:	2000      	movs	r0, #0
   b6078:	f7ff f964 	bl	b5344 <hal_rtc_time_is_valid>
    if (rtcstate)
   b607c:	4604      	mov	r4, r0
   b607e:	b9a0      	cbnz	r0, b60aa <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b6080:	f7ff fa4a 	bl	b5518 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b6084:	2801      	cmp	r0, #1
   b6086:	d110      	bne.n	b60aa <_ZN9TimeClass7isValidEv+0x36>
   b6088:	4620      	mov	r0, r4
   b608a:	f7ff fa6d 	bl	b5568 <system_thread_get_state>
   b608e:	b960      	cbnz	r0, b60aa <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b6090:	f7ff feda 	bl	b5e48 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b6094:	b910      	cbnz	r0, b609c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b6096:	f7ff faeb 	bl	b5670 <spark_process>
        while (_while() && !_condition()) {
   b609a:	e7f9      	b.n	b6090 <_ZN9TimeClass7isValidEv+0x1c>
   b609c:	f7ff fed4 	bl	b5e48 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b60a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b60a4:	2000      	movs	r0, #0
   b60a6:	f7ff b94d 	b.w	b5344 <hal_rtc_time_is_valid>
}
   b60aa:	4620      	mov	r0, r4
   b60ac:	bd10      	pop	{r4, pc}

000b60ae <_ZN9TimeClass3nowEv>:
{
   b60ae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b60b0:	f7ff ffe0 	bl	b6074 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b60b4:	2210      	movs	r2, #16
   b60b6:	2100      	movs	r1, #0
   b60b8:	4668      	mov	r0, sp
   b60ba:	f001 fdb5 	bl	b7c28 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b60be:	2100      	movs	r1, #0
   b60c0:	4668      	mov	r0, sp
   b60c2:	f7ff f947 	bl	b5354 <hal_rtc_get_time>
}
   b60c6:	9800      	ldr	r0, [sp, #0]
   b60c8:	b005      	add	sp, #20
   b60ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b60d0 <_ZN9TimeClass4hourEv>:
{
   b60d0:	b508      	push	{r3, lr}
	return hour(now());
   b60d2:	f7ff ffec 	bl	b60ae <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b60d6:	17c1      	asrs	r1, r0, #31
   b60d8:	f7ff fe80 	bl	b5ddc <_ZL22Refresh_UnixTime_Cachex>
}
   b60dc:	4b01      	ldr	r3, [pc, #4]	; (b60e4 <_ZN9TimeClass4hourEv+0x14>)
   b60de:	6898      	ldr	r0, [r3, #8]
   b60e0:	bd08      	pop	{r3, pc}
   b60e2:	bf00      	nop
   b60e4:	2003e6ac 	.word	0x2003e6ac

000b60e8 <_ZN9TimeClass6minuteEv>:
{
   b60e8:	b508      	push	{r3, lr}
	return minute(now());
   b60ea:	f7ff ffe0 	bl	b60ae <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b60ee:	17c1      	asrs	r1, r0, #31
   b60f0:	f7ff fe74 	bl	b5ddc <_ZL22Refresh_UnixTime_Cachex>
}
   b60f4:	4b01      	ldr	r3, [pc, #4]	; (b60fc <_ZN9TimeClass6minuteEv+0x14>)
   b60f6:	6858      	ldr	r0, [r3, #4]
   b60f8:	bd08      	pop	{r3, pc}
   b60fa:	bf00      	nop
   b60fc:	2003e6ac 	.word	0x2003e6ac

000b6100 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6100:	4b02      	ldr	r3, [pc, #8]	; (b610c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6102:	681a      	ldr	r2, [r3, #0]
   b6104:	4b02      	ldr	r3, [pc, #8]	; (b6110 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6106:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6108:	4770      	bx	lr
   b610a:	bf00      	nop
   b610c:	2003dd18 	.word	0x2003dd18
   b6110:	2003e6a8 	.word	0x2003e6a8

000b6114 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6114:	2100      	movs	r1, #0
   b6116:	f7ff ba0f 	b.w	b5538 <system_delay_ms>
	...

000b611c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b611c:	4b01      	ldr	r3, [pc, #4]	; (b6124 <_GLOBAL__sub_I_RGB+0x8>)
   b611e:	2200      	movs	r2, #0
   b6120:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6122:	4770      	bx	lr
   b6124:	2003e6e8 	.word	0x2003e6e8

000b6128 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6128:	4b01      	ldr	r3, [pc, #4]	; (b6130 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b612a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b612c:	4770      	bx	lr
   b612e:	bf00      	nop
   b6130:	2003dd20 	.word	0x2003dd20

000b6134 <serialEventRun>:
{
   b6134:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6136:	4b0b      	ldr	r3, [pc, #44]	; (b6164 <serialEventRun+0x30>)
   b6138:	b143      	cbz	r3, b614c <serialEventRun+0x18>
   b613a:	f000 fbff 	bl	b693c <_Z16_fetch_usbserialv>
   b613e:	6803      	ldr	r3, [r0, #0]
   b6140:	691b      	ldr	r3, [r3, #16]
   b6142:	4798      	blx	r3
   b6144:	2800      	cmp	r0, #0
   b6146:	dd01      	ble.n	b614c <serialEventRun+0x18>
        serialEvent();
   b6148:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b614c:	4b06      	ldr	r3, [pc, #24]	; (b6168 <serialEventRun+0x34>)
   b614e:	b143      	cbz	r3, b6162 <serialEventRun+0x2e>
   b6150:	f000 fe14 	bl	b6d7c <_Z22__fetch_global_Serial1v>
   b6154:	6803      	ldr	r3, [r0, #0]
   b6156:	691b      	ldr	r3, [r3, #16]
   b6158:	4798      	blx	r3
   b615a:	2800      	cmp	r0, #0
   b615c:	dd01      	ble.n	b6162 <serialEventRun+0x2e>
        serialEvent1();
   b615e:	f3af 8000 	nop.w
}
   b6162:	bd08      	pop	{r3, pc}
	...

000b616c <_post_loop>:
{
   b616c:	b508      	push	{r3, lr}
	serialEventRun();
   b616e:	f7ff ffe1 	bl	b6134 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6172:	f7ff f8df 	bl	b5334 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6176:	4b01      	ldr	r3, [pc, #4]	; (b617c <_post_loop+0x10>)
   b6178:	6018      	str	r0, [r3, #0]
}
   b617a:	bd08      	pop	{r3, pc}
   b617c:	2003e740 	.word	0x2003e740

000b6180 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6180:	4805      	ldr	r0, [pc, #20]	; (b6198 <_Z33system_initialize_user_backup_ramv+0x18>)
   b6182:	4a06      	ldr	r2, [pc, #24]	; (b619c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6184:	4906      	ldr	r1, [pc, #24]	; (b61a0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6186:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6188:	1a12      	subs	r2, r2, r0
   b618a:	f001 fd3f 	bl	b7c0c <memcpy>
    __backup_sram_signature = signature;
   b618e:	4b05      	ldr	r3, [pc, #20]	; (b61a4 <_Z33system_initialize_user_backup_ramv+0x24>)
   b6190:	4a05      	ldr	r2, [pc, #20]	; (b61a8 <_Z33system_initialize_user_backup_ramv+0x28>)
   b6192:	601a      	str	r2, [r3, #0]
}
   b6194:	bd08      	pop	{r3, pc}
   b6196:	bf00      	nop
   b6198:	2003f400 	.word	0x2003f400
   b619c:	2003f404 	.word	0x2003f404
   b61a0:	000b869c 	.word	0x000b869c
   b61a4:	2003f400 	.word	0x2003f400
   b61a8:	9a271c1e 	.word	0x9a271c1e

000b61ac <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b61ac:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b61ae:	2300      	movs	r3, #0
   b61b0:	9300      	str	r3, [sp, #0]
   b61b2:	461a      	mov	r2, r3
   b61b4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b61b8:	f7ff f9f0 	bl	b559c <system_ctrl_set_result>
}
   b61bc:	b003      	add	sp, #12
   b61be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b61c4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b61c4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b61c6:	8843      	ldrh	r3, [r0, #2]
   b61c8:	2b0a      	cmp	r3, #10
   b61ca:	d008      	beq.n	b61de <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b61cc:	2b50      	cmp	r3, #80	; 0x50
   b61ce:	d10b      	bne.n	b61e8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b61d0:	4b09      	ldr	r3, [pc, #36]	; (b61f8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b61d2:	681b      	ldr	r3, [r3, #0]
   b61d4:	b14b      	cbz	r3, b61ea <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b61d6:	b003      	add	sp, #12
   b61d8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b61dc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b61de:	f7ff ffe5 	bl	b61ac <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b61e2:	b003      	add	sp, #12
   b61e4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b61e8:	2300      	movs	r3, #0
   b61ea:	9300      	str	r3, [sp, #0]
   b61ec:	461a      	mov	r2, r3
   b61ee:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b61f2:	f7ff f9d3 	bl	b559c <system_ctrl_set_result>
}
   b61f6:	e7f4      	b.n	b61e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b61f8:	2003e6fc 	.word	0x2003e6fc

000b61fc <module_user_init_hook>:
{
   b61fc:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b61fe:	4812      	ldr	r0, [pc, #72]	; (b6248 <module_user_init_hook+0x4c>)
   b6200:	2100      	movs	r1, #0
   b6202:	f7ff faad 	bl	b5760 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6206:	4b11      	ldr	r3, [pc, #68]	; (b624c <module_user_init_hook+0x50>)
   b6208:	681a      	ldr	r2, [r3, #0]
   b620a:	4b11      	ldr	r3, [pc, #68]	; (b6250 <module_user_init_hook+0x54>)
   b620c:	429a      	cmp	r2, r3
   b620e:	4b11      	ldr	r3, [pc, #68]	; (b6254 <module_user_init_hook+0x58>)
   b6210:	bf0c      	ite	eq
   b6212:	2201      	moveq	r2, #1
   b6214:	2200      	movne	r2, #0
   b6216:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6218:	d001      	beq.n	b621e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b621a:	f7ff ffb1 	bl	b6180 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b621e:	f7ff f881 	bl	b5324 <HAL_RNG_GetRandomNumber>
   b6222:	4604      	mov	r4, r0
    srand(seed);
   b6224:	f001 fd08 	bl	b7c38 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6228:	4b0b      	ldr	r3, [pc, #44]	; (b6258 <module_user_init_hook+0x5c>)
   b622a:	b113      	cbz	r3, b6232 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b622c:	4620      	mov	r0, r4
   b622e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6232:	2100      	movs	r1, #0
   b6234:	4808      	ldr	r0, [pc, #32]	; (b6258 <module_user_init_hook+0x5c>)
   b6236:	f7ff fa43 	bl	b56c0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b623a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b623e:	4807      	ldr	r0, [pc, #28]	; (b625c <module_user_init_hook+0x60>)
   b6240:	2100      	movs	r1, #0
   b6242:	f7ff b9a1 	b.w	b5588 <system_ctrl_set_app_request_handler>
   b6246:	bf00      	nop
   b6248:	000b6129 	.word	0x000b6129
   b624c:	2003f400 	.word	0x2003f400
   b6250:	9a271c1e 	.word	0x9a271c1e
   b6254:	2003e6f8 	.word	0x2003e6f8
   b6258:	00000000 	.word	0x00000000
   b625c:	000b61c5 	.word	0x000b61c5

000b6260 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b6260:	4770      	bx	lr

000b6262 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b6262:	2000      	movs	r0, #0
   b6264:	4770      	bx	lr

000b6266 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b6266:	b510      	push	{r4, lr}
   b6268:	2110      	movs	r1, #16
   b626a:	4604      	mov	r4, r0
   b626c:	f7fd ff15 	bl	b409a <_ZdlPvj>
   b6270:	4620      	mov	r0, r4
   b6272:	bd10      	pop	{r4, pc}

000b6274 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b6274:	b508      	push	{r3, lr}
      { delete this; }
   b6276:	f7ff fff6 	bl	b6266 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b627a:	bd08      	pop	{r3, pc}

000b627c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b627c:	b530      	push	{r4, r5, lr}
        type_(type) {
   b627e:	2200      	movs	r2, #0
   b6280:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b6284:	6002      	str	r2, [r0, #0]
   b6286:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6288:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b628a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b628c:	680c      	ldr	r4, [r1, #0]
   b628e:	8085      	strh	r5, [r0, #4]
   b6290:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b6292:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b6294:	bd30      	pop	{r4, r5, pc}

000b6296 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b6296:	b510      	push	{r4, lr}
   b6298:	4604      	mov	r4, r0
    free((void*)msg_);
   b629a:	6800      	ldr	r0, [r0, #0]
   b629c:	f7ff fa20 	bl	b56e0 <free>
}
   b62a0:	4620      	mov	r0, r4
   b62a2:	bd10      	pop	{r4, pc}

000b62a4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b62a4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b62a6:	68c4      	ldr	r4, [r0, #12]
   b62a8:	b1f4      	cbz	r4, b62e8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   b62aa:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b62ac:	2b02      	cmp	r3, #2
   b62ae:	d103      	bne.n	b62b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b62b0:	f104 000c 	add.w	r0, r4, #12
   b62b4:	f7ff ffef 	bl	b6296 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b62b8:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b62ba:	b135      	cbz	r5, b62ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b62bc:	4628      	mov	r0, r5
   b62be:	f7ff fd02 	bl	b5cc6 <_ZNSt14_Function_baseD1Ev>
   b62c2:	2110      	movs	r1, #16
   b62c4:	4628      	mov	r0, r5
   b62c6:	f7fd fee8 	bl	b409a <_ZdlPvj>
   b62ca:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b62cc:	b135      	cbz	r5, b62dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b62ce:	4628      	mov	r0, r5
   b62d0:	f7ff fcf9 	bl	b5cc6 <_ZNSt14_Function_baseD1Ev>
   b62d4:	2110      	movs	r1, #16
   b62d6:	4628      	mov	r0, r5
   b62d8:	f7fd fedf 	bl	b409a <_ZdlPvj>
   b62dc:	4620      	mov	r0, r4
   b62de:	2114      	movs	r1, #20
   b62e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b62e4:	f7fd bed9 	b.w	b409a <_ZdlPvj>
   b62e8:	bd38      	pop	{r3, r4, r5, pc}

000b62ea <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b62ea:	680b      	ldr	r3, [r1, #0]
   b62ec:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b62ee:	684b      	ldr	r3, [r1, #4]
   b62f0:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b62f2:	b113      	cbz	r3, b62fa <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b62f4:	685a      	ldr	r2, [r3, #4]
   b62f6:	3201      	adds	r2, #1
   b62f8:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b62fa:	4770      	bx	lr

000b62fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b62fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b62fe:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6300:	4668      	mov	r0, sp
   b6302:	460d      	mov	r5, r1
   b6304:	f7ff fff1 	bl	b62ea <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6308:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b630a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b630c:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b630e:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b6310:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b6312:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b6314:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b6316:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b6318:	f7fe f832 	bl	b4380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b631c:	b135      	cbz	r5, b632c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b631e:	1d28      	adds	r0, r5, #4
   b6320:	f7fe f82e 	bl	b4380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6324:	2108      	movs	r1, #8
   b6326:	4628      	mov	r0, r5
   b6328:	f7fd feb7 	bl	b409a <_ZdlPvj>
        return p;
    }
   b632c:	4620      	mov	r0, r4
   b632e:	b003      	add	sp, #12
   b6330:	bd30      	pop	{r4, r5, pc}

000b6332 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b6332:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6334:	b510      	push	{r4, lr}
      if (_M_empty())
   b6336:	b90a      	cbnz	r2, b633c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b6338:	f000 fd86 	bl	b6e48 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b633c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6340:	68c3      	ldr	r3, [r0, #12]
   b6342:	4718      	bx	r3

000b6344 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6344:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b6346:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b6348:	f100 0110 	add.w	r1, r0, #16
   b634c:	f7ff fff1 	bl	b6332 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b6350:	bd08      	pop	{r3, pc}

000b6352 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b6352:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6354:	b510      	push	{r4, lr}
      if (_M_empty())
   b6356:	b90a      	cbnz	r2, b635c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b6358:	f000 fd76 	bl	b6e48 <_ZSt25__throw_bad_function_callv>
    }
   b635c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6360:	68c3      	ldr	r3, [r0, #12]
   b6362:	4718      	bx	r3

000b6364 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6364:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b6366:	6800      	ldr	r0, [r0, #0]
   b6368:	f100 0110 	add.w	r1, r0, #16
   b636c:	f7ff fff1 	bl	b6352 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b6370:	bd08      	pop	{r3, pc}
	...

000b6374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b6374:	b538      	push	{r3, r4, r5, lr}
   b6376:	2300      	movs	r3, #0
   b6378:	4604      	mov	r4, r0
   b637a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b637c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b637e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6380:	f7fd fe87 	bl	b4092 <_Znwj>
   b6384:	b128      	cbz	r0, b6392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b6386:	2301      	movs	r3, #1
   b6388:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b638c:	4b02      	ldr	r3, [pc, #8]	; (b6398 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b638e:	6003      	str	r3, [r0, #0]
   b6390:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6392:	6020      	str	r0, [r4, #0]
	}
   b6394:	4620      	mov	r0, r4
   b6396:	bd38      	pop	{r3, r4, r5, pc}
   b6398:	000b8330 	.word	0x000b8330

000b639c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b639c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b639e:	2300      	movs	r3, #0
   b63a0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b63a2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b63a4:	4604      	mov	r4, r0
   b63a6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b63a8:	b12b      	cbz	r3, b63b6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b63aa:	2202      	movs	r2, #2
   b63ac:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b63ae:	68eb      	ldr	r3, [r5, #12]
   b63b0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b63b2:	68ab      	ldr	r3, [r5, #8]
   b63b4:	60a3      	str	r3, [r4, #8]
    }
   b63b6:	4620      	mov	r0, r4
   b63b8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b63bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b63bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b63be:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b63c0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b63c2:	4668      	mov	r0, sp
   b63c4:	f7ff ff5a 	bl	b627c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b63c8:	f04f 0302 	mov.w	r3, #2
   b63cc:	e8d4 2f4f 	ldrexb	r2, [r4]
   b63d0:	2a00      	cmp	r2, #0
   b63d2:	d103      	bne.n	b63dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b63d4:	e8c4 3f41 	strexb	r1, r3, [r4]
   b63d8:	2900      	cmp	r1, #0
   b63da:	d1f7      	bne.n	b63cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b63dc:	d125      	bne.n	b642a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b63de:	f104 050c 	add.w	r5, r4, #12
   b63e2:	4669      	mov	r1, sp
   b63e4:	4628      	mov	r0, r5
   b63e6:	f7ff ff49 	bl	b627c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b63ea:	f3bf 8f5b 	dmb	ish
   b63ee:	2301      	movs	r3, #1
   b63f0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b63f2:	2000      	movs	r0, #0
   b63f4:	f104 0308 	add.w	r3, r4, #8
   b63f8:	f3bf 8f5b 	dmb	ish
   b63fc:	e853 6f00 	ldrex	r6, [r3]
   b6400:	e843 0200 	strex	r2, r0, [r3]
   b6404:	2a00      	cmp	r2, #0
   b6406:	d1f9      	bne.n	b63fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b6408:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b640c:	b16e      	cbz	r6, b642a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b640e:	f7ff f89b 	bl	b5548 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6412:	b178      	cbz	r0, b6434 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6414:	4629      	mov	r1, r5
   b6416:	4630      	mov	r0, r6
   b6418:	f7ff ff8b 	bl	b6332 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b641c:	4630      	mov	r0, r6
   b641e:	f7ff fc52 	bl	b5cc6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6422:	2110      	movs	r1, #16
   b6424:	4630      	mov	r0, r6
   b6426:	f7fd fe38 	bl	b409a <_ZdlPvj>
        p_->setError(std::move(error));
   b642a:	4668      	mov	r0, sp
   b642c:	f7ff ff33 	bl	b6296 <_ZN8particle5ErrorD1Ev>
    }
   b6430:	b009      	add	sp, #36	; 0x24
   b6432:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6434:	4631      	mov	r1, r6
   b6436:	a802      	add	r0, sp, #8
   b6438:	f7ff ffb0 	bl	b639c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b643c:	68e0      	ldr	r0, [r4, #12]
   b643e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6442:	b108      	cbz	r0, b6448 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b6444:	f001 fc38 	bl	b7cb8 <strdup>
        type_(type) {
   b6448:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b644a:	2010      	movs	r0, #16
   b644c:	f8ad 501c 	strh.w	r5, [sp, #28]
   b6450:	f7fd fe1f 	bl	b4092 <_Znwj>
   b6454:	4605      	mov	r5, r0
   b6456:	b1e8      	cbz	r0, b6494 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b6458:	2700      	movs	r7, #0
   b645a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b645c:	2018      	movs	r0, #24
   b645e:	f7fd fe18 	bl	b4092 <_Znwj>
   b6462:	4604      	mov	r4, r0
   b6464:	b188      	cbz	r0, b648a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b6466:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b6468:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b646a:	a802      	add	r0, sp, #8
   b646c:	f7ff fc34 	bl	b5cd8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6470:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b6472:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6474:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6476:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6478:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b647a:	a906      	add	r1, sp, #24
   b647c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b647e:	60e3      	str	r3, [r4, #12]
   b6480:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b6484:	9205      	str	r2, [sp, #20]
   b6486:	f7ff fef9 	bl	b627c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b648a:	4b08      	ldr	r3, [pc, #32]	; (b64ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b648c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b648e:	4b08      	ldr	r3, [pc, #32]	; (b64b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6490:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6492:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b6494:	a806      	add	r0, sp, #24
   b6496:	f7ff fefe 	bl	b6296 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b649a:	a802      	add	r0, sp, #8
   b649c:	f7ff fc13 	bl	b5cc6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b64a0:	2200      	movs	r2, #0
   b64a2:	4629      	mov	r1, r5
   b64a4:	4803      	ldr	r0, [pc, #12]	; (b64b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b64a6:	f7ff f857 	bl	b5558 <application_thread_invoke>
   b64aa:	e7b7      	b.n	b641c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b64ac:	000b6345 	.word	0x000b6345
   b64b0:	000b65c9 	.word	0x000b65c9
   b64b4:	000b6a2d 	.word	0x000b6a2d

000b64b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b64b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b64bc:	b08b      	sub	sp, #44	; 0x2c
   b64be:	4605      	mov	r5, r0
   b64c0:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b64c4:	460f      	mov	r7, r1
   b64c6:	4690      	mov	r8, r2
   b64c8:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b64ca:	f7ff f8d9 	bl	b5680 <spark_cloud_flag_connected>
   b64ce:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b64d0:	4683      	mov	fp, r0
   b64d2:	bb38      	cbnz	r0, b6524 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b64d4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b64d8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b64da:	a905      	add	r1, sp, #20
   b64dc:	4630      	mov	r0, r6
   b64de:	f8ad 3018 	strh.w	r3, [sp, #24]
   b64e2:	f7ff fecb 	bl	b627c <_ZN8particle5ErrorC1EOS0_>
   b64e6:	2014      	movs	r0, #20
   b64e8:	f7fd fdd3 	bl	b4092 <_Znwj>
   b64ec:	4604      	mov	r4, r0
   b64ee:	b148      	cbz	r0, b6504 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b64f0:	2302      	movs	r3, #2
   b64f2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b64f4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b64f6:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b64fa:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b64fc:	4631      	mov	r1, r6
   b64fe:	300c      	adds	r0, #12
   b6500:	f7ff febc 	bl	b627c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6504:	4628      	mov	r0, r5
	: __shared_count(__p)
   b6506:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6508:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b650c:	f7ff ff32 	bl	b6374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6510:	4630      	mov	r0, r6
   b6512:	f7ff fec0 	bl	b6296 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b6516:	a805      	add	r0, sp, #20
   b6518:	f7ff febd 	bl	b6296 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b651c:	4628      	mov	r0, r5
   b651e:	b00b      	add	sp, #44	; 0x2c
   b6520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b6524:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b6526:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b6528:	2014      	movs	r0, #20
   b652a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b652e:	9307      	str	r3, [sp, #28]
   b6530:	f7fd fdaf 	bl	b4092 <_Znwj>
   b6534:	4601      	mov	r1, r0
   b6536:	b118      	cbz	r0, b6540 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6538:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b653c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b653e:	7044      	strb	r4, [r0, #1]
   b6540:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6542:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b6544:	f7ff ff16 	bl	b6374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b6548:	4b1e      	ldr	r3, [pc, #120]	; (b65c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b654a:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b654c:	2008      	movs	r0, #8
   b654e:	f7fd fda0 	bl	b4092 <_Znwj>
   b6552:	4604      	mov	r4, r0
   b6554:	b110      	cbz	r0, b655c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b6556:	a903      	add	r1, sp, #12
   b6558:	f7ff fec7 	bl	b62ea <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b655c:	9600      	str	r6, [sp, #0]
   b655e:	fa5f f38a 	uxtb.w	r3, sl
   b6562:	464a      	mov	r2, r9
   b6564:	4641      	mov	r1, r8
   b6566:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b6568:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b656a:	f7ff f891 	bl	b5690 <spark_send_event>
   b656e:	b9b8      	cbnz	r0, b65a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b6570:	9b03      	ldr	r3, [sp, #12]
   b6572:	785b      	ldrb	r3, [r3, #1]
   b6574:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b6578:	b993      	cbnz	r3, b65a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b657a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b657e:	a905      	add	r1, sp, #20
   b6580:	a803      	add	r0, sp, #12
   b6582:	9205      	str	r2, [sp, #20]
   b6584:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6588:	f7ff ff18 	bl	b63bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b658c:	a805      	add	r0, sp, #20
   b658e:	f7ff fe82 	bl	b6296 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b6592:	a805      	add	r0, sp, #20
   b6594:	9909      	ldr	r1, [sp, #36]	; 0x24
   b6596:	f7ff feb1 	bl	b62fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b659a:	a806      	add	r0, sp, #24
   b659c:	f7fd fef0 	bl	b4380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b65a0:	a903      	add	r1, sp, #12
   b65a2:	a805      	add	r0, sp, #20
   b65a4:	f7ff fea1 	bl	b62ea <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b65a8:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b65aa:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b65ac:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b65ae:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b65b0:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b65b2:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b65b4:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b65b6:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b65b8:	f7fd fee2 	bl	b4380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b65bc:	a804      	add	r0, sp, #16
   b65be:	f7fd fedf 	bl	b4380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b65c2:	e7ab      	b.n	b651c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b65c4:	000b6645 	.word	0x000b6645

000b65c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b65c8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b65ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b65cc:	4605      	mov	r5, r0
	switch (__op)
   b65ce:	d103      	bne.n	b65d8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b65d0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b65d2:	6003      	str	r3, [r0, #0]
      }
   b65d4:	2000      	movs	r0, #0
   b65d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b65d8:	2a02      	cmp	r2, #2
   b65da:	d010      	beq.n	b65fe <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b65dc:	2a03      	cmp	r2, #3
   b65de:	d1f9      	bne.n	b65d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b65e0:	6804      	ldr	r4, [r0, #0]
   b65e2:	2c00      	cmp	r4, #0
   b65e4:	d0f6      	beq.n	b65d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b65e6:	f104 0010 	add.w	r0, r4, #16
   b65ea:	f7ff fe54 	bl	b6296 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b65ee:	4620      	mov	r0, r4
   b65f0:	f7ff fb69 	bl	b5cc6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b65f4:	2118      	movs	r1, #24
   b65f6:	4620      	mov	r0, r4
   b65f8:	f7fd fd4f 	bl	b409a <_ZdlPvj>
   b65fc:	e7ea      	b.n	b65d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b65fe:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b6600:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6602:	f7fd fd46 	bl	b4092 <_Znwj>
   b6606:	4604      	mov	r4, r0
   b6608:	b150      	cbz	r0, b6620 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b660a:	4631      	mov	r1, r6
   b660c:	f7ff fec6 	bl	b639c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6610:	6930      	ldr	r0, [r6, #16]
   b6612:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6616:	b108      	cbz	r0, b661c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b6618:	f001 fb4e 	bl	b7cb8 <strdup>
        type_(type) {
   b661c:	6120      	str	r0, [r4, #16]
   b661e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b6620:	602c      	str	r4, [r5, #0]
	}
   b6622:	e7d7      	b.n	b65d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b6624 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b6624:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6626:	2300      	movs	r3, #0
   b6628:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b662a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b662c:	4604      	mov	r4, r0
   b662e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6630:	b12b      	cbz	r3, b663e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6632:	2202      	movs	r2, #2
   b6634:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6636:	68eb      	ldr	r3, [r5, #12]
   b6638:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b663a:	68ab      	ldr	r3, [r5, #8]
   b663c:	60a3      	str	r3, [r4, #8]
    }
   b663e:	4620      	mov	r0, r4
   b6640:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6644 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b6644:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6646:	b089      	sub	sp, #36	; 0x24
   b6648:	4604      	mov	r4, r0
   b664a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b664c:	a801      	add	r0, sp, #4
   b664e:	4611      	mov	r1, r2
   b6650:	f7ff fe54 	bl	b62fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b6654:	b1a4      	cbz	r4, b6680 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b6656:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6658:	b11d      	cbz	r5, b6662 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b665a:	4628      	mov	r0, r5
   b665c:	f001 fb2c 	bl	b7cb8 <strdup>
   b6660:	4605      	mov	r5, r0
   b6662:	a801      	add	r0, sp, #4
   b6664:	a903      	add	r1, sp, #12
        type_(type) {
   b6666:	9503      	str	r5, [sp, #12]
   b6668:	f8ad 4010 	strh.w	r4, [sp, #16]
   b666c:	f7ff fea6 	bl	b63bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6670:	a803      	add	r0, sp, #12
   b6672:	f7ff fe10 	bl	b6296 <_ZN8particle5ErrorD1Ev>
   b6676:	a802      	add	r0, sp, #8
   b6678:	f7fd fe82 	bl	b4380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b667c:	b009      	add	sp, #36	; 0x24
   b667e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b6680:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6682:	2301      	movs	r3, #1
   b6684:	e8d5 2f4f 	ldrexb	r2, [r5]
   b6688:	2a00      	cmp	r2, #0
   b668a:	d103      	bne.n	b6694 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b668c:	e8c5 3f41 	strexb	r1, r3, [r5]
   b6690:	2900      	cmp	r1, #0
   b6692:	d1f7      	bne.n	b6684 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b6694:	d1ef      	bne.n	b6676 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b6696:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b6698:	f3bf 8f5b 	dmb	ish
   b669c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b669e:	1d2b      	adds	r3, r5, #4
   b66a0:	f3bf 8f5b 	dmb	ish
   b66a4:	e853 6f00 	ldrex	r6, [r3]
   b66a8:	e843 4200 	strex	r2, r4, [r3]
   b66ac:	2a00      	cmp	r2, #0
   b66ae:	d1f9      	bne.n	b66a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b66b0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b66b4:	2e00      	cmp	r6, #0
   b66b6:	d0de      	beq.n	b6676 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b66b8:	4620      	mov	r0, r4
   b66ba:	f7fe ff45 	bl	b5548 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b66be:	4607      	mov	r7, r0
   b66c0:	b160      	cbz	r0, b66dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b66c2:	f105 010c 	add.w	r1, r5, #12
   b66c6:	4630      	mov	r0, r6
   b66c8:	f7ff fe43 	bl	b6352 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b66cc:	4630      	mov	r0, r6
   b66ce:	f7ff fafa 	bl	b5cc6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b66d2:	2110      	movs	r1, #16
   b66d4:	4630      	mov	r0, r6
   b66d6:	f7fd fce0 	bl	b409a <_ZdlPvj>
   b66da:	e7cc      	b.n	b6676 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b66dc:	4631      	mov	r1, r6
   b66de:	a803      	add	r0, sp, #12
   b66e0:	f7ff ffa0 	bl	b6624 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b66e4:	7b2b      	ldrb	r3, [r5, #12]
   b66e6:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b66ea:	2010      	movs	r0, #16
   b66ec:	f7fd fcd1 	bl	b4092 <_Znwj>
   b66f0:	4605      	mov	r5, r0
   b66f2:	b1d0      	cbz	r0, b672a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b66f4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b66f6:	2014      	movs	r0, #20
   b66f8:	f7fd fccb 	bl	b4092 <_Znwj>
   b66fc:	4604      	mov	r4, r0
   b66fe:	b178      	cbz	r0, b6720 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b6700:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6702:	4601      	mov	r1, r0
   b6704:	a803      	add	r0, sp, #12
   b6706:	f7ff fae7 	bl	b5cd8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b670a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b670c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b670e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6710:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b6712:	9205      	str	r2, [sp, #20]
   b6714:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6716:	60e3      	str	r3, [r4, #12]
   b6718:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b671c:	9206      	str	r2, [sp, #24]
   b671e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b6720:	4b06      	ldr	r3, [pc, #24]	; (b673c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b6722:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6724:	4b06      	ldr	r3, [pc, #24]	; (b6740 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6726:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6728:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b672a:	a803      	add	r0, sp, #12
   b672c:	f7ff facb 	bl	b5cc6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6730:	2200      	movs	r2, #0
   b6732:	4629      	mov	r1, r5
   b6734:	4803      	ldr	r0, [pc, #12]	; (b6744 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b6736:	f7fe ff0f 	bl	b5558 <application_thread_invoke>
   b673a:	e7c7      	b.n	b66cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b673c:	000b6365 	.word	0x000b6365
   b6740:	000b6749 	.word	0x000b6749
   b6744:	000b6a2d 	.word	0x000b6a2d

000b6748 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b6748:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b674a:	b570      	push	{r4, r5, r6, lr}
   b674c:	4604      	mov	r4, r0
	switch (__op)
   b674e:	d103      	bne.n	b6758 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6750:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6752:	6003      	str	r3, [r0, #0]
      }
   b6754:	2000      	movs	r0, #0
   b6756:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b6758:	2a02      	cmp	r2, #2
   b675a:	d00c      	beq.n	b6776 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b675c:	2a03      	cmp	r2, #3
   b675e:	d1f9      	bne.n	b6754 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6760:	6804      	ldr	r4, [r0, #0]
   b6762:	2c00      	cmp	r4, #0
   b6764:	d0f6      	beq.n	b6754 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b6766:	4620      	mov	r0, r4
   b6768:	f7ff faad 	bl	b5cc6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b676c:	2114      	movs	r1, #20
   b676e:	4620      	mov	r0, r4
   b6770:	f7fd fc93 	bl	b409a <_ZdlPvj>
   b6774:	e7ee      	b.n	b6754 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6776:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b6778:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b677a:	f7fd fc8a 	bl	b4092 <_Znwj>
   b677e:	4605      	mov	r5, r0
   b6780:	b120      	cbz	r0, b678c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b6782:	4631      	mov	r1, r6
   b6784:	f7ff ff4e 	bl	b6624 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b6788:	7c33      	ldrb	r3, [r6, #16]
   b678a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b678c:	6025      	str	r5, [r4, #0]
	}
   b678e:	e7e1      	b.n	b6754 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b6790 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6790:	4770      	bx	lr

000b6792 <_ZN9IPAddressD0Ev>:
   b6792:	b510      	push	{r4, lr}
   b6794:	2118      	movs	r1, #24
   b6796:	4604      	mov	r4, r0
   b6798:	f7fd fc7f 	bl	b409a <_ZdlPvj>
   b679c:	4620      	mov	r0, r4
   b679e:	bd10      	pop	{r4, pc}

000b67a0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b67a0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b67a2:	7d03      	ldrb	r3, [r0, #20]
   b67a4:	2b06      	cmp	r3, #6
{
   b67a6:	b08d      	sub	sp, #52	; 0x34
   b67a8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b67aa:	f100 0704 	add.w	r7, r0, #4
   b67ae:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b67b2:	d012      	beq.n	b67da <_ZNK9IPAddress7printToER5Print+0x3a>
   b67b4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b67b8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b67bc:	220a      	movs	r2, #10
   b67be:	4630      	mov	r0, r6
   b67c0:	f7ff fae5 	bl	b5d8e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b67c4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b67c6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b67c8:	d019      	beq.n	b67fe <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b67ca:	2c00      	cmp	r4, #0
   b67cc:	d0f4      	beq.n	b67b8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b67ce:	212e      	movs	r1, #46	; 0x2e
   b67d0:	4630      	mov	r0, r6
   b67d2:	f7ff fac3 	bl	b5d5c <_ZN5Print5printEc>
   b67d6:	4404      	add	r4, r0
   b67d8:	e7ee      	b.n	b67b8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b67da:	232f      	movs	r3, #47	; 0x2f
   b67dc:	466a      	mov	r2, sp
   b67de:	4639      	mov	r1, r7
   b67e0:	200a      	movs	r0, #10
		buf[0] = 0;
   b67e2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b67e6:	f7fe fdc5 	bl	b5374 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b67ea:	4668      	mov	r0, sp
   b67ec:	f001 fa81 	bl	b7cf2 <strlen>
   b67f0:	6833      	ldr	r3, [r6, #0]
   b67f2:	4602      	mov	r2, r0
   b67f4:	68db      	ldr	r3, [r3, #12]
   b67f6:	4669      	mov	r1, sp
   b67f8:	4630      	mov	r0, r6
   b67fa:	4798      	blx	r3
   b67fc:	4604      	mov	r4, r0
    }
    return n;
}
   b67fe:	4620      	mov	r0, r4
   b6800:	b00d      	add	sp, #52	; 0x34
   b6802:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6804 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6804:	b510      	push	{r4, lr}
   b6806:	4b05      	ldr	r3, [pc, #20]	; (b681c <_ZN9IPAddressC1Ev+0x18>)
   b6808:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b680a:	2211      	movs	r2, #17
   b680c:	f840 3b04 	str.w	r3, [r0], #4
   b6810:	2100      	movs	r1, #0
   b6812:	f001 fa09 	bl	b7c28 <memset>
}
   b6816:	4620      	mov	r0, r4
   b6818:	bd10      	pop	{r4, pc}
   b681a:	bf00      	nop
   b681c:	000b834c 	.word	0x000b834c

000b6820 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6820:	4603      	mov	r3, r0
   b6822:	4a07      	ldr	r2, [pc, #28]	; (b6840 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6824:	b510      	push	{r4, lr}
   b6826:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b682a:	f101 0210 	add.w	r2, r1, #16
   b682e:	f851 4b04 	ldr.w	r4, [r1], #4
   b6832:	f843 4b04 	str.w	r4, [r3], #4
   b6836:	4291      	cmp	r1, r2
   b6838:	d1f9      	bne.n	b682e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b683a:	780a      	ldrb	r2, [r1, #0]
   b683c:	701a      	strb	r2, [r3, #0]
}
   b683e:	bd10      	pop	{r4, pc}
   b6840:	000b834c 	.word	0x000b834c

000b6844 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6844:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6846:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b684a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b684e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6852:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6856:	2304      	movs	r3, #4
   b6858:	6041      	str	r1, [r0, #4]
   b685a:	7503      	strb	r3, [r0, #20]
}
   b685c:	bd10      	pop	{r4, pc}
	...

000b6860 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6860:	b507      	push	{r0, r1, r2, lr}
   b6862:	4b06      	ldr	r3, [pc, #24]	; (b687c <_ZN9IPAddressC1EPKh+0x1c>)
   b6864:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6866:	78cb      	ldrb	r3, [r1, #3]
   b6868:	9300      	str	r3, [sp, #0]
   b686a:	788b      	ldrb	r3, [r1, #2]
   b686c:	784a      	ldrb	r2, [r1, #1]
   b686e:	7809      	ldrb	r1, [r1, #0]
   b6870:	f7ff ffe8 	bl	b6844 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6874:	b003      	add	sp, #12
   b6876:	f85d fb04 	ldr.w	pc, [sp], #4
   b687a:	bf00      	nop
   b687c:	000b834c 	.word	0x000b834c

000b6880 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6880:	7441      	strb	r1, [r0, #17]
}
   b6882:	4770      	bx	lr

000b6884 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6884:	4770      	bx	lr

000b6886 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6886:	4770      	bx	lr

000b6888 <_ZN9USBSerial4readEv>:
{
   b6888:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b688a:	2100      	movs	r1, #0
   b688c:	7c00      	ldrb	r0, [r0, #16]
   b688e:	f7fe fe21 	bl	b54d4 <HAL_USB_USART_Receive_Data>
}
   b6892:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6896:	bd08      	pop	{r3, pc}

000b6898 <_ZN9USBSerial4peekEv>:
{
   b6898:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b689a:	2101      	movs	r1, #1
   b689c:	7c00      	ldrb	r0, [r0, #16]
   b689e:	f7fe fe19 	bl	b54d4 <HAL_USB_USART_Receive_Data>
}
   b68a2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b68a6:	bd08      	pop	{r3, pc}

000b68a8 <_ZN9USBSerial17availableForWriteEv>:
{
   b68a8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b68aa:	7c00      	ldrb	r0, [r0, #16]
   b68ac:	f7fe fe0a 	bl	b54c4 <HAL_USB_USART_Available_Data_For_Write>
}
   b68b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b68b4:	bd08      	pop	{r3, pc}

000b68b6 <_ZN9USBSerial9availableEv>:
{
   b68b6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b68b8:	7c00      	ldrb	r0, [r0, #16]
   b68ba:	f7fe fdfb 	bl	b54b4 <HAL_USB_USART_Available_Data>
}
   b68be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b68c2:	bd08      	pop	{r3, pc}

000b68c4 <_ZN9USBSerial5writeEh>:
{
   b68c4:	b513      	push	{r0, r1, r4, lr}
   b68c6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b68c8:	7c00      	ldrb	r0, [r0, #16]
{
   b68ca:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b68cc:	f7fe fdfa 	bl	b54c4 <HAL_USB_USART_Available_Data_For_Write>
   b68d0:	2800      	cmp	r0, #0
   b68d2:	9901      	ldr	r1, [sp, #4]
   b68d4:	dc01      	bgt.n	b68da <_ZN9USBSerial5writeEh+0x16>
   b68d6:	7c60      	ldrb	r0, [r4, #17]
   b68d8:	b120      	cbz	r0, b68e4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b68da:	7c20      	ldrb	r0, [r4, #16]
   b68dc:	f7fe fe02 	bl	b54e4 <HAL_USB_USART_Send_Data>
   b68e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b68e4:	b002      	add	sp, #8
   b68e6:	bd10      	pop	{r4, pc}

000b68e8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b68e8:	7c00      	ldrb	r0, [r0, #16]
   b68ea:	f7fe be03 	b.w	b54f4 <HAL_USB_USART_Flush_Data>

000b68ee <_ZN9USBSerialD0Ev>:
   b68ee:	b510      	push	{r4, lr}
   b68f0:	2114      	movs	r1, #20
   b68f2:	4604      	mov	r4, r0
   b68f4:	f7fd fbd1 	bl	b409a <_ZdlPvj>
   b68f8:	4620      	mov	r0, r4
   b68fa:	bd10      	pop	{r4, pc}

000b68fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b68fc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b68fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6902:	4604      	mov	r4, r0
   b6904:	4608      	mov	r0, r1
   b6906:	2100      	movs	r1, #0
   b6908:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b690c:	4b04      	ldr	r3, [pc, #16]	; (b6920 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b690e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6910:	2301      	movs	r3, #1
  _serial = serial;
   b6912:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6914:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6916:	4611      	mov	r1, r2
   b6918:	f7fe fdbc 	bl	b5494 <HAL_USB_USART_Init>
}
   b691c:	4620      	mov	r0, r4
   b691e:	bd10      	pop	{r4, pc}
   b6920:	000b8360 	.word	0x000b8360

000b6924 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6924:	7c00      	ldrb	r0, [r0, #16]
   b6926:	2200      	movs	r2, #0
   b6928:	f7fe bdbc 	b.w	b54a4 <HAL_USB_USART_Begin>

000b692c <_Z19acquireSerialBufferv>:
{
   b692c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b692e:	2214      	movs	r2, #20
{
   b6930:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6932:	2100      	movs	r1, #0
   b6934:	f001 f978 	bl	b7c28 <memset>
}
   b6938:	4620      	mov	r0, r4
   b693a:	bd10      	pop	{r4, pc}

000b693c <_Z16_fetch_usbserialv>:
{
   b693c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b693e:	4c0f      	ldr	r4, [pc, #60]	; (b697c <_Z16_fetch_usbserialv+0x40>)
{
   b6940:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6942:	a803      	add	r0, sp, #12
   b6944:	f7ff fff2 	bl	b692c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6948:	7821      	ldrb	r1, [r4, #0]
   b694a:	f3bf 8f5b 	dmb	ish
   b694e:	f011 0101 	ands.w	r1, r1, #1
   b6952:	d10f      	bne.n	b6974 <_Z16_fetch_usbserialv+0x38>
   b6954:	4620      	mov	r0, r4
   b6956:	9101      	str	r1, [sp, #4]
   b6958:	f7fd fba1 	bl	b409e <__cxa_guard_acquire>
   b695c:	9901      	ldr	r1, [sp, #4]
   b695e:	b148      	cbz	r0, b6974 <_Z16_fetch_usbserialv+0x38>
   b6960:	aa03      	add	r2, sp, #12
   b6962:	4807      	ldr	r0, [pc, #28]	; (b6980 <_Z16_fetch_usbserialv+0x44>)
   b6964:	f7ff ffca 	bl	b68fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6968:	4620      	mov	r0, r4
   b696a:	f7fd fb9d 	bl	b40a8 <__cxa_guard_release>
   b696e:	4805      	ldr	r0, [pc, #20]	; (b6984 <_Z16_fetch_usbserialv+0x48>)
   b6970:	f001 f92e 	bl	b7bd0 <atexit>
	return _usbserial;
}
   b6974:	4802      	ldr	r0, [pc, #8]	; (b6980 <_Z16_fetch_usbserialv+0x44>)
   b6976:	b008      	add	sp, #32
   b6978:	bd10      	pop	{r4, pc}
   b697a:	bf00      	nop
   b697c:	2003e700 	.word	0x2003e700
   b6980:	2003e704 	.word	0x2003e704
   b6984:	000b6885 	.word	0x000b6885

000b6988 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6988:	4770      	bx	lr

000b698a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b698a:	7441      	strb	r1, [r0, #17]
}
   b698c:	4770      	bx	lr

000b698e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b698e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6990:	7c00      	ldrb	r0, [r0, #16]
   b6992:	f7fe fd1f 	bl	b53d4 <hal_usart_available_data_for_write>
}
   b6996:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b699a:	bd08      	pop	{r3, pc}

000b699c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b699c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b699e:	7c00      	ldrb	r0, [r0, #16]
   b69a0:	f7fe fcf8 	bl	b5394 <hal_usart_available>
}
   b69a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b69a8:	bd08      	pop	{r3, pc}

000b69aa <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b69aa:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b69ac:	7c00      	ldrb	r0, [r0, #16]
   b69ae:	f7fe fd01 	bl	b53b4 <hal_usart_peek>
}
   b69b2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b69b6:	bd08      	pop	{r3, pc}

000b69b8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b69b8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b69ba:	7c00      	ldrb	r0, [r0, #16]
   b69bc:	f7fe fcf2 	bl	b53a4 <hal_usart_read>
}
   b69c0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b69c4:	bd08      	pop	{r3, pc}

000b69c6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b69c6:	7c00      	ldrb	r0, [r0, #16]
   b69c8:	f7fe bcfc 	b.w	b53c4 <hal_usart_flush>

000b69cc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b69cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b69ce:	7c45      	ldrb	r5, [r0, #17]
{
   b69d0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b69d2:	b12d      	cbz	r5, b69e0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b69d4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b69d6:	b003      	add	sp, #12
   b69d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b69dc:	f7fe bcd2 	b.w	b5384 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b69e0:	7c00      	ldrb	r0, [r0, #16]
   b69e2:	9101      	str	r1, [sp, #4]
   b69e4:	f7fe fcf6 	bl	b53d4 <hal_usart_available_data_for_write>
   b69e8:	2800      	cmp	r0, #0
   b69ea:	9901      	ldr	r1, [sp, #4]
   b69ec:	dcf2      	bgt.n	b69d4 <_ZN11USARTSerial5writeEh+0x8>
}
   b69ee:	4628      	mov	r0, r5
   b69f0:	b003      	add	sp, #12
   b69f2:	bd30      	pop	{r4, r5, pc}

000b69f4 <_ZN11USARTSerialD0Ev>:
   b69f4:	b510      	push	{r4, lr}
   b69f6:	2114      	movs	r1, #20
   b69f8:	4604      	mov	r4, r0
   b69fa:	f7fd fb4e 	bl	b409a <_ZdlPvj>
   b69fe:	4620      	mov	r0, r4
   b6a00:	bd10      	pop	{r4, pc}
	...

000b6a04 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6a04:	b510      	push	{r4, lr}
   b6a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6a0a:	4604      	mov	r4, r0
   b6a0c:	4608      	mov	r0, r1
   b6a0e:	4611      	mov	r1, r2
   b6a10:	2200      	movs	r2, #0
   b6a12:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6a16:	4b04      	ldr	r3, [pc, #16]	; (b6a28 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6a18:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6a1a:	2301      	movs	r3, #1
  _serial = serial;
   b6a1c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6a1e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6a20:	f7fe fce0 	bl	b53e4 <hal_usart_init_ex>
}
   b6a24:	4620      	mov	r0, r4
   b6a26:	bd10      	pop	{r4, pc}
   b6a28:	000b8390 	.word	0x000b8390

000b6a2c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b6a2c:	b510      	push	{r4, lr}
      if (_M_empty())
   b6a2e:	6883      	ldr	r3, [r0, #8]
   b6a30:	4604      	mov	r4, r0
   b6a32:	b90b      	cbnz	r3, b6a38 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b6a34:	f000 fa08 	bl	b6e48 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6a38:	68c3      	ldr	r3, [r0, #12]
   b6a3a:	4798      	blx	r3
      if (_M_manager)
   b6a3c:	68a3      	ldr	r3, [r4, #8]
   b6a3e:	b11b      	cbz	r3, b6a48 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6a40:	2203      	movs	r2, #3
   b6a42:	4621      	mov	r1, r4
   b6a44:	4620      	mov	r0, r4
   b6a46:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b6a48:	4620      	mov	r0, r4
   b6a4a:	2110      	movs	r1, #16
}
   b6a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b6a50:	f7fd bb23 	b.w	b409a <_ZdlPvj>

000b6a54 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6a54:	4770      	bx	lr

000b6a56 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6a56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6a58:	4606      	mov	r6, r0
   b6a5a:	4615      	mov	r5, r2
   b6a5c:	460c      	mov	r4, r1
   b6a5e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6a60:	42bc      	cmp	r4, r7
   b6a62:	d006      	beq.n	b6a72 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6a64:	6833      	ldr	r3, [r6, #0]
   b6a66:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6a6a:	689b      	ldr	r3, [r3, #8]
   b6a6c:	4630      	mov	r0, r6
   b6a6e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6a70:	e7f6      	b.n	b6a60 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6a72:	4628      	mov	r0, r5
   b6a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6a76 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6a76:	7c00      	ldrb	r0, [r0, #16]
   b6a78:	2200      	movs	r2, #0
   b6a7a:	f7fe bcd3 	b.w	b5424 <hal_i2c_write>

000b6a7e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6a7e:	7c00      	ldrb	r0, [r0, #16]
   b6a80:	2100      	movs	r1, #0
   b6a82:	f7fe bcd7 	b.w	b5434 <hal_i2c_available>

000b6a86 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6a86:	7c00      	ldrb	r0, [r0, #16]
   b6a88:	2100      	movs	r1, #0
   b6a8a:	f7fe bcdb 	b.w	b5444 <hal_i2c_read>

000b6a8e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6a8e:	7c00      	ldrb	r0, [r0, #16]
   b6a90:	2100      	movs	r1, #0
   b6a92:	f7fe bcdf 	b.w	b5454 <hal_i2c_peek>

000b6a96 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6a96:	7c00      	ldrb	r0, [r0, #16]
   b6a98:	2100      	movs	r1, #0
   b6a9a:	f7fe bce3 	b.w	b5464 <hal_i2c_flush>

000b6a9e <_ZN7TwoWireD0Ev>:
   b6a9e:	b510      	push	{r4, lr}
   b6aa0:	2114      	movs	r1, #20
   b6aa2:	4604      	mov	r4, r0
   b6aa4:	f7fd faf9 	bl	b409a <_ZdlPvj>
   b6aa8:	4620      	mov	r0, r4
   b6aaa:	bd10      	pop	{r4, pc}

000b6aac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6aac:	b538      	push	{r3, r4, r5, lr}
   b6aae:	4604      	mov	r4, r0
   b6ab0:	4615      	mov	r5, r2
   b6ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6ab6:	2200      	movs	r2, #0
   b6ab8:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6abc:	4b09      	ldr	r3, [pc, #36]	; (b6ae4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b6abe:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6ac0:	4608      	mov	r0, r1
   b6ac2:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6ac4:	4629      	mov	r1, r5
   b6ac6:	f7fe fcd5 	bl	b5474 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6aca:	30bf      	adds	r0, #191	; 0xbf
   b6acc:	d108      	bne.n	b6ae0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b6ace:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6ad0:	07db      	lsls	r3, r3, #31
   b6ad2:	d505      	bpl.n	b6ae0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6ad4:	6868      	ldr	r0, [r5, #4]
   b6ad6:	f7fe fe03 	bl	b56e0 <free>
    free(conf.tx_buffer);
   b6ada:	68e8      	ldr	r0, [r5, #12]
   b6adc:	f7fe fe00 	bl	b56e0 <free>
}
   b6ae0:	4620      	mov	r0, r4
   b6ae2:	bd38      	pop	{r3, r4, r5, pc}
   b6ae4:	000b83c0 	.word	0x000b83c0

000b6ae8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6ae8:	2300      	movs	r3, #0
   b6aea:	7c00      	ldrb	r0, [r0, #16]
   b6aec:	461a      	mov	r2, r3
   b6aee:	4619      	mov	r1, r3
   b6af0:	f7fe bc80 	b.w	b53f4 <hal_i2c_begin>

000b6af4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6af4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6af6:	2200      	movs	r2, #0
   b6af8:	2314      	movs	r3, #20
   b6afa:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b6afe:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b6b02:	780b      	ldrb	r3, [r1, #0]
   b6b04:	f88d 3008 	strb.w	r3, [sp, #8]
   b6b08:	684b      	ldr	r3, [r1, #4]
   b6b0a:	9303      	str	r3, [sp, #12]
   b6b0c:	68cb      	ldr	r3, [r1, #12]
   b6b0e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b6b10:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b6b12:	7a0b      	ldrb	r3, [r1, #8]
   b6b14:	9305      	str	r3, [sp, #20]
   b6b16:	a901      	add	r1, sp, #4
   b6b18:	f7fe fcb4 	bl	b5484 <hal_i2c_request_ex>
}
   b6b1c:	b007      	add	sp, #28
   b6b1e:	f85d fb04 	ldr.w	pc, [sp], #4

000b6b22 <_ZN7TwoWire11requestFromEhjh>:
{
   b6b22:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b6b24:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b6b26:	f88d 1000 	strb.w	r1, [sp]
   b6b2a:	f04f 0164 	mov.w	r1, #100	; 0x64
   b6b2e:	9103      	str	r1, [sp, #12]
   b6b30:	bf18      	it	ne
   b6b32:	2301      	movne	r3, #1
   b6b34:	4669      	mov	r1, sp
    size_ = size;
   b6b36:	9201      	str	r2, [sp, #4]
   b6b38:	f88d 3008 	strb.w	r3, [sp, #8]
   b6b3c:	f7ff ffda 	bl	b6af4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b6b40:	b005      	add	sp, #20
   b6b42:	f85d fb04 	ldr.w	pc, [sp], #4

000b6b46 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b6b46:	2301      	movs	r3, #1
   b6b48:	f7ff bfeb 	b.w	b6b22 <_ZN7TwoWire11requestFromEhjh>

000b6b4c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6b4c:	7c00      	ldrb	r0, [r0, #16]
   b6b4e:	2200      	movs	r2, #0
   b6b50:	f7fe bc58 	b.w	b5404 <hal_i2c_begin_transmission>

000b6b54 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6b54:	7c00      	ldrb	r0, [r0, #16]
   b6b56:	2200      	movs	r2, #0
   b6b58:	f7fe bc5c 	b.w	b5414 <hal_i2c_end_transmission>

000b6b5c <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b6b5c:	2101      	movs	r1, #1
   b6b5e:	f7ff bff9 	b.w	b6b54 <_ZN7TwoWire15endTransmissionEh>

000b6b62 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6b62:	2200      	movs	r2, #0
   b6b64:	6840      	ldr	r0, [r0, #4]
   b6b66:	4611      	mov	r1, r2
   b6b68:	f7fe bd3a 	b.w	b55e0 <network_ready>

000b6b6c <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6b6c:	2200      	movs	r2, #0
   b6b6e:	6840      	ldr	r0, [r0, #4]
   b6b70:	4611      	mov	r1, r2
   b6b72:	f7fe bd55 	b.w	b5620 <network_listening>

000b6b76 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6b76:	2200      	movs	r2, #0
   b6b78:	6840      	ldr	r0, [r0, #4]
   b6b7a:	4611      	mov	r1, r2
   b6b7c:	f7fe bd60 	b.w	b5640 <network_get_listen_timeout>

000b6b80 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6b80:	6840      	ldr	r0, [r0, #4]
   b6b82:	2200      	movs	r2, #0
   b6b84:	f7fe bd54 	b.w	b5630 <network_set_listen_timeout>

000b6b88 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6b88:	6840      	ldr	r0, [r0, #4]
   b6b8a:	2200      	movs	r2, #0
   b6b8c:	f081 0101 	eor.w	r1, r1, #1
   b6b90:	f7fe bd3e 	b.w	b5610 <network_listen>

000b6b94 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6b94:	2300      	movs	r3, #0
   b6b96:	6840      	ldr	r0, [r0, #4]
   b6b98:	461a      	mov	r2, r3
   b6b9a:	4619      	mov	r1, r3
   b6b9c:	f7fe bd30 	b.w	b5600 <network_off>

000b6ba0 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6ba0:	2300      	movs	r3, #0
   b6ba2:	6840      	ldr	r0, [r0, #4]
   b6ba4:	461a      	mov	r2, r3
   b6ba6:	4619      	mov	r1, r3
   b6ba8:	f7fe bd22 	b.w	b55f0 <network_on>

000b6bac <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6bac:	2200      	movs	r2, #0
   b6bae:	6840      	ldr	r0, [r0, #4]
   b6bb0:	4611      	mov	r1, r2
   b6bb2:	f7fe bd05 	b.w	b55c0 <network_connecting>

000b6bb6 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6bb6:	6840      	ldr	r0, [r0, #4]
   b6bb8:	2200      	movs	r2, #0
   b6bba:	2102      	movs	r1, #2
   b6bbc:	f7fe bd08 	b.w	b55d0 <network_disconnect>

000b6bc0 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6bc0:	2300      	movs	r3, #0
   b6bc2:	6840      	ldr	r0, [r0, #4]
   b6bc4:	461a      	mov	r2, r3
   b6bc6:	f7fe bcf3 	b.w	b55b0 <network_connect>
	...

000b6bcc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6bcc:	4b02      	ldr	r3, [pc, #8]	; (b6bd8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6bce:	2204      	movs	r2, #4
   b6bd0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6bd2:	4a02      	ldr	r2, [pc, #8]	; (b6bdc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6bd4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6bd6:	4770      	bx	lr
   b6bd8:	2003e718 	.word	0x2003e718
   b6bdc:	000b83e8 	.word	0x000b83e8

000b6be0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6be0:	2300      	movs	r3, #0
   b6be2:	6840      	ldr	r0, [r0, #4]
   b6be4:	461a      	mov	r2, r3
   b6be6:	f7fe bce3 	b.w	b55b0 <network_connect>

000b6bea <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6bea:	6840      	ldr	r0, [r0, #4]
   b6bec:	2200      	movs	r2, #0
   b6bee:	2102      	movs	r1, #2
   b6bf0:	f7fe bcee 	b.w	b55d0 <network_disconnect>

000b6bf4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6bf4:	2200      	movs	r2, #0
   b6bf6:	6840      	ldr	r0, [r0, #4]
   b6bf8:	4611      	mov	r1, r2
   b6bfa:	f7fe bce1 	b.w	b55c0 <network_connecting>

000b6bfe <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6bfe:	2200      	movs	r2, #0
   b6c00:	6840      	ldr	r0, [r0, #4]
   b6c02:	4611      	mov	r1, r2
   b6c04:	f7fe bcec 	b.w	b55e0 <network_ready>

000b6c08 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6c08:	2300      	movs	r3, #0
   b6c0a:	6840      	ldr	r0, [r0, #4]
   b6c0c:	461a      	mov	r2, r3
   b6c0e:	4619      	mov	r1, r3
   b6c10:	f7fe bcee 	b.w	b55f0 <network_on>

000b6c14 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6c14:	2300      	movs	r3, #0
   b6c16:	6840      	ldr	r0, [r0, #4]
   b6c18:	461a      	mov	r2, r3
   b6c1a:	4619      	mov	r1, r3
   b6c1c:	f7fe bcf0 	b.w	b5600 <network_off>

000b6c20 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6c20:	6840      	ldr	r0, [r0, #4]
   b6c22:	2100      	movs	r1, #0
   b6c24:	f7fe bd14 	b.w	b5650 <network_is_on>

000b6c28 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6c28:	6840      	ldr	r0, [r0, #4]
   b6c2a:	2100      	movs	r1, #0
   b6c2c:	f7fe bd18 	b.w	b5660 <network_is_off>

000b6c30 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6c30:	6840      	ldr	r0, [r0, #4]
   b6c32:	2200      	movs	r2, #0
   b6c34:	f081 0101 	eor.w	r1, r1, #1
   b6c38:	f7fe bcea 	b.w	b5610 <network_listen>

000b6c3c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6c3c:	6840      	ldr	r0, [r0, #4]
   b6c3e:	2200      	movs	r2, #0
   b6c40:	f7fe bcf6 	b.w	b5630 <network_set_listen_timeout>

000b6c44 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6c44:	2200      	movs	r2, #0
   b6c46:	6840      	ldr	r0, [r0, #4]
   b6c48:	4611      	mov	r1, r2
   b6c4a:	f7fe bcf9 	b.w	b5640 <network_get_listen_timeout>

000b6c4e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6c4e:	2200      	movs	r2, #0
   b6c50:	6840      	ldr	r0, [r0, #4]
   b6c52:	4611      	mov	r1, r2
   b6c54:	f7fe bce4 	b.w	b5620 <network_listening>

000b6c58 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6c58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6c5c:	b095      	sub	sp, #84	; 0x54
   b6c5e:	4614      	mov	r4, r2
   b6c60:	460d      	mov	r5, r1
   b6c62:	4607      	mov	r7, r0
    IPAddress addr;
   b6c64:	f7ff fdce 	bl	b6804 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6c68:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6c6a:	221c      	movs	r2, #28
   b6c6c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6c6e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6c70:	f000 ffda 	bl	b7c28 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6c74:	2340      	movs	r3, #64	; 0x40
   b6c76:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6c78:	4620      	mov	r0, r4
   b6c7a:	466b      	mov	r3, sp
   b6c7c:	aa0c      	add	r2, sp, #48	; 0x30
   b6c7e:	2100      	movs	r1, #0
   b6c80:	f7fe fb48 	bl	b5314 <netdb_getaddrinfo>
    if (!r) {
   b6c84:	4604      	mov	r4, r0
   b6c86:	2800      	cmp	r0, #0
   b6c88:	d14b      	bne.n	b6d22 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6c8a:	4602      	mov	r2, r0
   b6c8c:	2101      	movs	r1, #1
   b6c8e:	6868      	ldr	r0, [r5, #4]
   b6c90:	f7fe fca6 	bl	b55e0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6c94:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6c96:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6c98:	4622      	mov	r2, r4
   b6c9a:	6868      	ldr	r0, [r5, #4]
   b6c9c:	f7fe fca0 	bl	b55e0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6ca0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6ca2:	4681      	mov	r9, r0
        bool ok = false;
   b6ca4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6ca6:	2e00      	cmp	r6, #0
   b6ca8:	d03b      	beq.n	b6d22 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6caa:	2900      	cmp	r1, #0
   b6cac:	d139      	bne.n	b6d22 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6cae:	6873      	ldr	r3, [r6, #4]
   b6cb0:	2b02      	cmp	r3, #2
   b6cb2:	d003      	beq.n	b6cbc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6cb4:	2b0a      	cmp	r3, #10
   b6cb6:	d011      	beq.n	b6cdc <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6cb8:	69f6      	ldr	r6, [r6, #28]
   b6cba:	e7f4      	b.n	b6ca6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6cbc:	f1b8 0f00 	cmp.w	r8, #0
   b6cc0:	d0fa      	beq.n	b6cb8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6cc2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6cc4:	a806      	add	r0, sp, #24
   b6cc6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6cc8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6cca:	f7ff fdc9 	bl	b6860 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6cce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6cd0:	1d3c      	adds	r4, r7, #4
   b6cd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6cd4:	682b      	ldr	r3, [r5, #0]
   b6cd6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6cd8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6cda:	e7ed      	b.n	b6cb8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6cdc:	f1b9 0f00 	cmp.w	r9, #0
   b6ce0:	d0ea      	beq.n	b6cb8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6ce2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6ce4:	2210      	movs	r2, #16
   b6ce6:	a801      	add	r0, sp, #4
   b6ce8:	f000 ff9e 	bl	b7c28 <memset>
                    a.v = 6;
   b6cec:	2306      	movs	r3, #6
   b6cee:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6cf2:	ad01      	add	r5, sp, #4
   b6cf4:	f104 0308 	add.w	r3, r4, #8
   b6cf8:	3418      	adds	r4, #24
   b6cfa:	6818      	ldr	r0, [r3, #0]
   b6cfc:	6859      	ldr	r1, [r3, #4]
   b6cfe:	462a      	mov	r2, r5
   b6d00:	c203      	stmia	r2!, {r0, r1}
   b6d02:	3308      	adds	r3, #8
   b6d04:	42a3      	cmp	r3, r4
   b6d06:	4615      	mov	r5, r2
   b6d08:	d1f7      	bne.n	b6cfa <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6d0a:	a901      	add	r1, sp, #4
   b6d0c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6d0e:	ad07      	add	r5, sp, #28
   b6d10:	f7ff fd86 	bl	b6820 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6d16:	1d3c      	adds	r4, r7, #4
   b6d18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6d1a:	682b      	ldr	r3, [r5, #0]
   b6d1c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6d1e:	4649      	mov	r1, r9
   b6d20:	e7ca      	b.n	b6cb8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6d22:	9800      	ldr	r0, [sp, #0]
   b6d24:	f7fe faee 	bl	b5304 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6d28:	4638      	mov	r0, r7
   b6d2a:	b015      	add	sp, #84	; 0x54
   b6d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6d30 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6d30:	4b02      	ldr	r3, [pc, #8]	; (b6d3c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6d32:	4a03      	ldr	r2, [pc, #12]	; (b6d40 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6d34:	601a      	str	r2, [r3, #0]
   b6d36:	2200      	movs	r2, #0
   b6d38:	605a      	str	r2, [r3, #4]

} // spark
   b6d3a:	4770      	bx	lr
   b6d3c:	2003e720 	.word	0x2003e720
   b6d40:	000b8424 	.word	0x000b8424

000b6d44 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6d44:	4770      	bx	lr
	...

000b6d48 <_Z20acquireSerial1Bufferv>:
{
   b6d48:	b538      	push	{r3, r4, r5, lr}
   b6d4a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6d4c:	2514      	movs	r5, #20
   b6d4e:	462a      	mov	r2, r5
   b6d50:	2100      	movs	r1, #0
   b6d52:	f000 ff69 	bl	b7c28 <memset>
   b6d56:	8025      	strh	r5, [r4, #0]
   b6d58:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6d5a:	4907      	ldr	r1, [pc, #28]	; (b6d78 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6d5c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6d5e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6d60:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6d62:	f000 f86f 	bl	b6e44 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6d66:	4904      	ldr	r1, [pc, #16]	; (b6d78 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6d68:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6d6a:	4628      	mov	r0, r5
   b6d6c:	f000 f86a 	bl	b6e44 <_ZnajRKSt9nothrow_t>
    };
   b6d70:	60e0      	str	r0, [r4, #12]
}
   b6d72:	4620      	mov	r0, r4
   b6d74:	bd38      	pop	{r3, r4, r5, pc}
   b6d76:	bf00      	nop
   b6d78:	000b8458 	.word	0x000b8458

000b6d7c <_Z22__fetch_global_Serial1v>:
{
   b6d7c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6d7e:	4d0e      	ldr	r5, [pc, #56]	; (b6db8 <_Z22__fetch_global_Serial1v+0x3c>)
   b6d80:	7829      	ldrb	r1, [r5, #0]
   b6d82:	f3bf 8f5b 	dmb	ish
   b6d86:	f011 0401 	ands.w	r4, r1, #1
{
   b6d8a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6d8c:	d111      	bne.n	b6db2 <_Z22__fetch_global_Serial1v+0x36>
   b6d8e:	4628      	mov	r0, r5
   b6d90:	f7fd f985 	bl	b409e <__cxa_guard_acquire>
   b6d94:	b168      	cbz	r0, b6db2 <_Z22__fetch_global_Serial1v+0x36>
   b6d96:	a801      	add	r0, sp, #4
   b6d98:	f7ff ffd6 	bl	b6d48 <_Z20acquireSerial1Bufferv>
   b6d9c:	aa01      	add	r2, sp, #4
   b6d9e:	4621      	mov	r1, r4
   b6da0:	4806      	ldr	r0, [pc, #24]	; (b6dbc <_Z22__fetch_global_Serial1v+0x40>)
   b6da2:	f7ff fe2f 	bl	b6a04 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6da6:	4628      	mov	r0, r5
   b6da8:	f7fd f97e 	bl	b40a8 <__cxa_guard_release>
   b6dac:	4804      	ldr	r0, [pc, #16]	; (b6dc0 <_Z22__fetch_global_Serial1v+0x44>)
   b6dae:	f000 ff0f 	bl	b7bd0 <atexit>
    return serial1;
}
   b6db2:	4802      	ldr	r0, [pc, #8]	; (b6dbc <_Z22__fetch_global_Serial1v+0x40>)
   b6db4:	b007      	add	sp, #28
   b6db6:	bd30      	pop	{r4, r5, pc}
   b6db8:	2003e728 	.word	0x2003e728
   b6dbc:	2003e72c 	.word	0x2003e72c
   b6dc0:	000b6d45 	.word	0x000b6d45

000b6dc4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6dc4:	4770      	bx	lr
	...

000b6dc8 <_Z17acquireWireBufferv>:
{
   b6dc8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b6dca:	4b0a      	ldr	r3, [pc, #40]	; (b6df4 <_Z17acquireWireBufferv+0x2c>)
   b6dcc:	6003      	str	r3, [r0, #0]
   b6dce:	2301      	movs	r3, #1
{
   b6dd0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6dd2:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6dd4:	4908      	ldr	r1, [pc, #32]	; (b6df8 <_Z17acquireWireBufferv+0x30>)
   b6dd6:	2020      	movs	r0, #32
   b6dd8:	f000 f834 	bl	b6e44 <_ZnajRKSt9nothrow_t>
	};
   b6ddc:	2520      	movs	r5, #32
   b6dde:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6de0:	4905      	ldr	r1, [pc, #20]	; (b6df8 <_Z17acquireWireBufferv+0x30>)
	};
   b6de2:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6de4:	4628      	mov	r0, r5
   b6de6:	f000 f82d 	bl	b6e44 <_ZnajRKSt9nothrow_t>
	};
   b6dea:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b6dee:	4620      	mov	r0, r4
   b6df0:	bd38      	pop	{r3, r4, r5, pc}
   b6df2:	bf00      	nop
   b6df4:	00010018 	.word	0x00010018
   b6df8:	000b8458 	.word	0x000b8458

000b6dfc <_Z19__fetch_global_Wirev>:
{
   b6dfc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6dfe:	4d0e      	ldr	r5, [pc, #56]	; (b6e38 <_Z19__fetch_global_Wirev+0x3c>)
   b6e00:	7829      	ldrb	r1, [r5, #0]
   b6e02:	f3bf 8f5b 	dmb	ish
   b6e06:	f011 0401 	ands.w	r4, r1, #1
{
   b6e0a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6e0c:	d111      	bne.n	b6e32 <_Z19__fetch_global_Wirev+0x36>
   b6e0e:	4628      	mov	r0, r5
   b6e10:	f7fd f945 	bl	b409e <__cxa_guard_acquire>
   b6e14:	b168      	cbz	r0, b6e32 <_Z19__fetch_global_Wirev+0x36>
   b6e16:	4668      	mov	r0, sp
   b6e18:	f7ff ffd6 	bl	b6dc8 <_Z17acquireWireBufferv>
   b6e1c:	466a      	mov	r2, sp
   b6e1e:	4621      	mov	r1, r4
   b6e20:	4806      	ldr	r0, [pc, #24]	; (b6e3c <_Z19__fetch_global_Wirev+0x40>)
   b6e22:	f7ff fe43 	bl	b6aac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6e26:	4628      	mov	r0, r5
   b6e28:	f7fd f93e 	bl	b40a8 <__cxa_guard_release>
   b6e2c:	4804      	ldr	r0, [pc, #16]	; (b6e40 <_Z19__fetch_global_Wirev+0x44>)
   b6e2e:	f000 fecf 	bl	b7bd0 <atexit>
	return wire;
}
   b6e32:	4802      	ldr	r0, [pc, #8]	; (b6e3c <_Z19__fetch_global_Wirev+0x40>)
   b6e34:	b007      	add	sp, #28
   b6e36:	bd30      	pop	{r4, r5, pc}
   b6e38:	2003e744 	.word	0x2003e744
   b6e3c:	2003e748 	.word	0x2003e748
   b6e40:	000b6dc5 	.word	0x000b6dc5

000b6e44 <_ZnajRKSt9nothrow_t>:
   b6e44:	f7fd b927 	b.w	b4096 <_Znaj>

000b6e48 <_ZSt25__throw_bad_function_callv>:
   b6e48:	b508      	push	{r3, lr}
   b6e4a:	f7fe fc69 	bl	b5720 <abort>
	...

000b6e50 <__aeabi_drsub>:
   b6e50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b6e54:	e002      	b.n	b6e5c <__adddf3>
   b6e56:	bf00      	nop

000b6e58 <__aeabi_dsub>:
   b6e58:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b6e5c <__adddf3>:
   b6e5c:	b530      	push	{r4, r5, lr}
   b6e5e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b6e62:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b6e66:	ea94 0f05 	teq	r4, r5
   b6e6a:	bf08      	it	eq
   b6e6c:	ea90 0f02 	teqeq	r0, r2
   b6e70:	bf1f      	itttt	ne
   b6e72:	ea54 0c00 	orrsne.w	ip, r4, r0
   b6e76:	ea55 0c02 	orrsne.w	ip, r5, r2
   b6e7a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b6e7e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6e82:	f000 80e2 	beq.w	b704a <__adddf3+0x1ee>
   b6e86:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b6e8a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b6e8e:	bfb8      	it	lt
   b6e90:	426d      	neglt	r5, r5
   b6e92:	dd0c      	ble.n	b6eae <__adddf3+0x52>
   b6e94:	442c      	add	r4, r5
   b6e96:	ea80 0202 	eor.w	r2, r0, r2
   b6e9a:	ea81 0303 	eor.w	r3, r1, r3
   b6e9e:	ea82 0000 	eor.w	r0, r2, r0
   b6ea2:	ea83 0101 	eor.w	r1, r3, r1
   b6ea6:	ea80 0202 	eor.w	r2, r0, r2
   b6eaa:	ea81 0303 	eor.w	r3, r1, r3
   b6eae:	2d36      	cmp	r5, #54	; 0x36
   b6eb0:	bf88      	it	hi
   b6eb2:	bd30      	pophi	{r4, r5, pc}
   b6eb4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b6eb8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6ebc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b6ec0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b6ec4:	d002      	beq.n	b6ecc <__adddf3+0x70>
   b6ec6:	4240      	negs	r0, r0
   b6ec8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6ecc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b6ed0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6ed4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b6ed8:	d002      	beq.n	b6ee0 <__adddf3+0x84>
   b6eda:	4252      	negs	r2, r2
   b6edc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b6ee0:	ea94 0f05 	teq	r4, r5
   b6ee4:	f000 80a7 	beq.w	b7036 <__adddf3+0x1da>
   b6ee8:	f1a4 0401 	sub.w	r4, r4, #1
   b6eec:	f1d5 0e20 	rsbs	lr, r5, #32
   b6ef0:	db0d      	blt.n	b6f0e <__adddf3+0xb2>
   b6ef2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b6ef6:	fa22 f205 	lsr.w	r2, r2, r5
   b6efa:	1880      	adds	r0, r0, r2
   b6efc:	f141 0100 	adc.w	r1, r1, #0
   b6f00:	fa03 f20e 	lsl.w	r2, r3, lr
   b6f04:	1880      	adds	r0, r0, r2
   b6f06:	fa43 f305 	asr.w	r3, r3, r5
   b6f0a:	4159      	adcs	r1, r3
   b6f0c:	e00e      	b.n	b6f2c <__adddf3+0xd0>
   b6f0e:	f1a5 0520 	sub.w	r5, r5, #32
   b6f12:	f10e 0e20 	add.w	lr, lr, #32
   b6f16:	2a01      	cmp	r2, #1
   b6f18:	fa03 fc0e 	lsl.w	ip, r3, lr
   b6f1c:	bf28      	it	cs
   b6f1e:	f04c 0c02 	orrcs.w	ip, ip, #2
   b6f22:	fa43 f305 	asr.w	r3, r3, r5
   b6f26:	18c0      	adds	r0, r0, r3
   b6f28:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b6f2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6f30:	d507      	bpl.n	b6f42 <__adddf3+0xe6>
   b6f32:	f04f 0e00 	mov.w	lr, #0
   b6f36:	f1dc 0c00 	rsbs	ip, ip, #0
   b6f3a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b6f3e:	eb6e 0101 	sbc.w	r1, lr, r1
   b6f42:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b6f46:	d31b      	bcc.n	b6f80 <__adddf3+0x124>
   b6f48:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b6f4c:	d30c      	bcc.n	b6f68 <__adddf3+0x10c>
   b6f4e:	0849      	lsrs	r1, r1, #1
   b6f50:	ea5f 0030 	movs.w	r0, r0, rrx
   b6f54:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b6f58:	f104 0401 	add.w	r4, r4, #1
   b6f5c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b6f60:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b6f64:	f080 809a 	bcs.w	b709c <__adddf3+0x240>
   b6f68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b6f6c:	bf08      	it	eq
   b6f6e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6f72:	f150 0000 	adcs.w	r0, r0, #0
   b6f76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6f7a:	ea41 0105 	orr.w	r1, r1, r5
   b6f7e:	bd30      	pop	{r4, r5, pc}
   b6f80:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b6f84:	4140      	adcs	r0, r0
   b6f86:	eb41 0101 	adc.w	r1, r1, r1
   b6f8a:	3c01      	subs	r4, #1
   b6f8c:	bf28      	it	cs
   b6f8e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b6f92:	d2e9      	bcs.n	b6f68 <__adddf3+0x10c>
   b6f94:	f091 0f00 	teq	r1, #0
   b6f98:	bf04      	itt	eq
   b6f9a:	4601      	moveq	r1, r0
   b6f9c:	2000      	moveq	r0, #0
   b6f9e:	fab1 f381 	clz	r3, r1
   b6fa2:	bf08      	it	eq
   b6fa4:	3320      	addeq	r3, #32
   b6fa6:	f1a3 030b 	sub.w	r3, r3, #11
   b6faa:	f1b3 0220 	subs.w	r2, r3, #32
   b6fae:	da0c      	bge.n	b6fca <__adddf3+0x16e>
   b6fb0:	320c      	adds	r2, #12
   b6fb2:	dd08      	ble.n	b6fc6 <__adddf3+0x16a>
   b6fb4:	f102 0c14 	add.w	ip, r2, #20
   b6fb8:	f1c2 020c 	rsb	r2, r2, #12
   b6fbc:	fa01 f00c 	lsl.w	r0, r1, ip
   b6fc0:	fa21 f102 	lsr.w	r1, r1, r2
   b6fc4:	e00c      	b.n	b6fe0 <__adddf3+0x184>
   b6fc6:	f102 0214 	add.w	r2, r2, #20
   b6fca:	bfd8      	it	le
   b6fcc:	f1c2 0c20 	rsble	ip, r2, #32
   b6fd0:	fa01 f102 	lsl.w	r1, r1, r2
   b6fd4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b6fd8:	bfdc      	itt	le
   b6fda:	ea41 010c 	orrle.w	r1, r1, ip
   b6fde:	4090      	lslle	r0, r2
   b6fe0:	1ae4      	subs	r4, r4, r3
   b6fe2:	bfa2      	ittt	ge
   b6fe4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b6fe8:	4329      	orrge	r1, r5
   b6fea:	bd30      	popge	{r4, r5, pc}
   b6fec:	ea6f 0404 	mvn.w	r4, r4
   b6ff0:	3c1f      	subs	r4, #31
   b6ff2:	da1c      	bge.n	b702e <__adddf3+0x1d2>
   b6ff4:	340c      	adds	r4, #12
   b6ff6:	dc0e      	bgt.n	b7016 <__adddf3+0x1ba>
   b6ff8:	f104 0414 	add.w	r4, r4, #20
   b6ffc:	f1c4 0220 	rsb	r2, r4, #32
   b7000:	fa20 f004 	lsr.w	r0, r0, r4
   b7004:	fa01 f302 	lsl.w	r3, r1, r2
   b7008:	ea40 0003 	orr.w	r0, r0, r3
   b700c:	fa21 f304 	lsr.w	r3, r1, r4
   b7010:	ea45 0103 	orr.w	r1, r5, r3
   b7014:	bd30      	pop	{r4, r5, pc}
   b7016:	f1c4 040c 	rsb	r4, r4, #12
   b701a:	f1c4 0220 	rsb	r2, r4, #32
   b701e:	fa20 f002 	lsr.w	r0, r0, r2
   b7022:	fa01 f304 	lsl.w	r3, r1, r4
   b7026:	ea40 0003 	orr.w	r0, r0, r3
   b702a:	4629      	mov	r1, r5
   b702c:	bd30      	pop	{r4, r5, pc}
   b702e:	fa21 f004 	lsr.w	r0, r1, r4
   b7032:	4629      	mov	r1, r5
   b7034:	bd30      	pop	{r4, r5, pc}
   b7036:	f094 0f00 	teq	r4, #0
   b703a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b703e:	bf06      	itte	eq
   b7040:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b7044:	3401      	addeq	r4, #1
   b7046:	3d01      	subne	r5, #1
   b7048:	e74e      	b.n	b6ee8 <__adddf3+0x8c>
   b704a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b704e:	bf18      	it	ne
   b7050:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7054:	d029      	beq.n	b70aa <__adddf3+0x24e>
   b7056:	ea94 0f05 	teq	r4, r5
   b705a:	bf08      	it	eq
   b705c:	ea90 0f02 	teqeq	r0, r2
   b7060:	d005      	beq.n	b706e <__adddf3+0x212>
   b7062:	ea54 0c00 	orrs.w	ip, r4, r0
   b7066:	bf04      	itt	eq
   b7068:	4619      	moveq	r1, r3
   b706a:	4610      	moveq	r0, r2
   b706c:	bd30      	pop	{r4, r5, pc}
   b706e:	ea91 0f03 	teq	r1, r3
   b7072:	bf1e      	ittt	ne
   b7074:	2100      	movne	r1, #0
   b7076:	2000      	movne	r0, #0
   b7078:	bd30      	popne	{r4, r5, pc}
   b707a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b707e:	d105      	bne.n	b708c <__adddf3+0x230>
   b7080:	0040      	lsls	r0, r0, #1
   b7082:	4149      	adcs	r1, r1
   b7084:	bf28      	it	cs
   b7086:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b708a:	bd30      	pop	{r4, r5, pc}
   b708c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b7090:	bf3c      	itt	cc
   b7092:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b7096:	bd30      	popcc	{r4, r5, pc}
   b7098:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b709c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b70a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b70a4:	f04f 0000 	mov.w	r0, #0
   b70a8:	bd30      	pop	{r4, r5, pc}
   b70aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b70ae:	bf1a      	itte	ne
   b70b0:	4619      	movne	r1, r3
   b70b2:	4610      	movne	r0, r2
   b70b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b70b8:	bf1c      	itt	ne
   b70ba:	460b      	movne	r3, r1
   b70bc:	4602      	movne	r2, r0
   b70be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b70c2:	bf06      	itte	eq
   b70c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b70c8:	ea91 0f03 	teqeq	r1, r3
   b70cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b70d0:	bd30      	pop	{r4, r5, pc}
   b70d2:	bf00      	nop

000b70d4 <__aeabi_ui2d>:
   b70d4:	f090 0f00 	teq	r0, #0
   b70d8:	bf04      	itt	eq
   b70da:	2100      	moveq	r1, #0
   b70dc:	4770      	bxeq	lr
   b70de:	b530      	push	{r4, r5, lr}
   b70e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b70e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b70e8:	f04f 0500 	mov.w	r5, #0
   b70ec:	f04f 0100 	mov.w	r1, #0
   b70f0:	e750      	b.n	b6f94 <__adddf3+0x138>
   b70f2:	bf00      	nop

000b70f4 <__aeabi_i2d>:
   b70f4:	f090 0f00 	teq	r0, #0
   b70f8:	bf04      	itt	eq
   b70fa:	2100      	moveq	r1, #0
   b70fc:	4770      	bxeq	lr
   b70fe:	b530      	push	{r4, r5, lr}
   b7100:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7104:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7108:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b710c:	bf48      	it	mi
   b710e:	4240      	negmi	r0, r0
   b7110:	f04f 0100 	mov.w	r1, #0
   b7114:	e73e      	b.n	b6f94 <__adddf3+0x138>
   b7116:	bf00      	nop

000b7118 <__aeabi_f2d>:
   b7118:	0042      	lsls	r2, r0, #1
   b711a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b711e:	ea4f 0131 	mov.w	r1, r1, rrx
   b7122:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b7126:	bf1f      	itttt	ne
   b7128:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b712c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b7130:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b7134:	4770      	bxne	lr
   b7136:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b713a:	bf08      	it	eq
   b713c:	4770      	bxeq	lr
   b713e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b7142:	bf04      	itt	eq
   b7144:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b7148:	4770      	bxeq	lr
   b714a:	b530      	push	{r4, r5, lr}
   b714c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b7150:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7154:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7158:	e71c      	b.n	b6f94 <__adddf3+0x138>
   b715a:	bf00      	nop

000b715c <__aeabi_ul2d>:
   b715c:	ea50 0201 	orrs.w	r2, r0, r1
   b7160:	bf08      	it	eq
   b7162:	4770      	bxeq	lr
   b7164:	b530      	push	{r4, r5, lr}
   b7166:	f04f 0500 	mov.w	r5, #0
   b716a:	e00a      	b.n	b7182 <__aeabi_l2d+0x16>

000b716c <__aeabi_l2d>:
   b716c:	ea50 0201 	orrs.w	r2, r0, r1
   b7170:	bf08      	it	eq
   b7172:	4770      	bxeq	lr
   b7174:	b530      	push	{r4, r5, lr}
   b7176:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b717a:	d502      	bpl.n	b7182 <__aeabi_l2d+0x16>
   b717c:	4240      	negs	r0, r0
   b717e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7182:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7186:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b718a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b718e:	f43f aed8 	beq.w	b6f42 <__adddf3+0xe6>
   b7192:	f04f 0203 	mov.w	r2, #3
   b7196:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b719a:	bf18      	it	ne
   b719c:	3203      	addne	r2, #3
   b719e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b71a2:	bf18      	it	ne
   b71a4:	3203      	addne	r2, #3
   b71a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b71aa:	f1c2 0320 	rsb	r3, r2, #32
   b71ae:	fa00 fc03 	lsl.w	ip, r0, r3
   b71b2:	fa20 f002 	lsr.w	r0, r0, r2
   b71b6:	fa01 fe03 	lsl.w	lr, r1, r3
   b71ba:	ea40 000e 	orr.w	r0, r0, lr
   b71be:	fa21 f102 	lsr.w	r1, r1, r2
   b71c2:	4414      	add	r4, r2
   b71c4:	e6bd      	b.n	b6f42 <__adddf3+0xe6>
   b71c6:	bf00      	nop

000b71c8 <__aeabi_dmul>:
   b71c8:	b570      	push	{r4, r5, r6, lr}
   b71ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b71ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b71d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b71d6:	bf1d      	ittte	ne
   b71d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b71dc:	ea94 0f0c 	teqne	r4, ip
   b71e0:	ea95 0f0c 	teqne	r5, ip
   b71e4:	f000 f8de 	bleq	b73a4 <__aeabi_dmul+0x1dc>
   b71e8:	442c      	add	r4, r5
   b71ea:	ea81 0603 	eor.w	r6, r1, r3
   b71ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b71f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b71f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b71fa:	bf18      	it	ne
   b71fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b7200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b7208:	d038      	beq.n	b727c <__aeabi_dmul+0xb4>
   b720a:	fba0 ce02 	umull	ip, lr, r0, r2
   b720e:	f04f 0500 	mov.w	r5, #0
   b7212:	fbe1 e502 	umlal	lr, r5, r1, r2
   b7216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b721a:	fbe0 e503 	umlal	lr, r5, r0, r3
   b721e:	f04f 0600 	mov.w	r6, #0
   b7222:	fbe1 5603 	umlal	r5, r6, r1, r3
   b7226:	f09c 0f00 	teq	ip, #0
   b722a:	bf18      	it	ne
   b722c:	f04e 0e01 	orrne.w	lr, lr, #1
   b7230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b7234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b7238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b723c:	d204      	bcs.n	b7248 <__aeabi_dmul+0x80>
   b723e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b7242:	416d      	adcs	r5, r5
   b7244:	eb46 0606 	adc.w	r6, r6, r6
   b7248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b724c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b7250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b7254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b7258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b725c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7260:	bf88      	it	hi
   b7262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7266:	d81e      	bhi.n	b72a6 <__aeabi_dmul+0xde>
   b7268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b726c:	bf08      	it	eq
   b726e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b7272:	f150 0000 	adcs.w	r0, r0, #0
   b7276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b727a:	bd70      	pop	{r4, r5, r6, pc}
   b727c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b7280:	ea46 0101 	orr.w	r1, r6, r1
   b7284:	ea40 0002 	orr.w	r0, r0, r2
   b7288:	ea81 0103 	eor.w	r1, r1, r3
   b728c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b7290:	bfc2      	ittt	gt
   b7292:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b729a:	bd70      	popgt	{r4, r5, r6, pc}
   b729c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b72a0:	f04f 0e00 	mov.w	lr, #0
   b72a4:	3c01      	subs	r4, #1
   b72a6:	f300 80ab 	bgt.w	b7400 <__aeabi_dmul+0x238>
   b72aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b72ae:	bfde      	ittt	le
   b72b0:	2000      	movle	r0, #0
   b72b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b72b6:	bd70      	pople	{r4, r5, r6, pc}
   b72b8:	f1c4 0400 	rsb	r4, r4, #0
   b72bc:	3c20      	subs	r4, #32
   b72be:	da35      	bge.n	b732c <__aeabi_dmul+0x164>
   b72c0:	340c      	adds	r4, #12
   b72c2:	dc1b      	bgt.n	b72fc <__aeabi_dmul+0x134>
   b72c4:	f104 0414 	add.w	r4, r4, #20
   b72c8:	f1c4 0520 	rsb	r5, r4, #32
   b72cc:	fa00 f305 	lsl.w	r3, r0, r5
   b72d0:	fa20 f004 	lsr.w	r0, r0, r4
   b72d4:	fa01 f205 	lsl.w	r2, r1, r5
   b72d8:	ea40 0002 	orr.w	r0, r0, r2
   b72dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b72e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b72e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b72e8:	fa21 f604 	lsr.w	r6, r1, r4
   b72ec:	eb42 0106 	adc.w	r1, r2, r6
   b72f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b72f4:	bf08      	it	eq
   b72f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b72fa:	bd70      	pop	{r4, r5, r6, pc}
   b72fc:	f1c4 040c 	rsb	r4, r4, #12
   b7300:	f1c4 0520 	rsb	r5, r4, #32
   b7304:	fa00 f304 	lsl.w	r3, r0, r4
   b7308:	fa20 f005 	lsr.w	r0, r0, r5
   b730c:	fa01 f204 	lsl.w	r2, r1, r4
   b7310:	ea40 0002 	orr.w	r0, r0, r2
   b7314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b731c:	f141 0100 	adc.w	r1, r1, #0
   b7320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7324:	bf08      	it	eq
   b7326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b732a:	bd70      	pop	{r4, r5, r6, pc}
   b732c:	f1c4 0520 	rsb	r5, r4, #32
   b7330:	fa00 f205 	lsl.w	r2, r0, r5
   b7334:	ea4e 0e02 	orr.w	lr, lr, r2
   b7338:	fa20 f304 	lsr.w	r3, r0, r4
   b733c:	fa01 f205 	lsl.w	r2, r1, r5
   b7340:	ea43 0302 	orr.w	r3, r3, r2
   b7344:	fa21 f004 	lsr.w	r0, r1, r4
   b7348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b734c:	fa21 f204 	lsr.w	r2, r1, r4
   b7350:	ea20 0002 	bic.w	r0, r0, r2
   b7354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b7358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b735c:	bf08      	it	eq
   b735e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7362:	bd70      	pop	{r4, r5, r6, pc}
   b7364:	f094 0f00 	teq	r4, #0
   b7368:	d10f      	bne.n	b738a <__aeabi_dmul+0x1c2>
   b736a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b736e:	0040      	lsls	r0, r0, #1
   b7370:	eb41 0101 	adc.w	r1, r1, r1
   b7374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7378:	bf08      	it	eq
   b737a:	3c01      	subeq	r4, #1
   b737c:	d0f7      	beq.n	b736e <__aeabi_dmul+0x1a6>
   b737e:	ea41 0106 	orr.w	r1, r1, r6
   b7382:	f095 0f00 	teq	r5, #0
   b7386:	bf18      	it	ne
   b7388:	4770      	bxne	lr
   b738a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b738e:	0052      	lsls	r2, r2, #1
   b7390:	eb43 0303 	adc.w	r3, r3, r3
   b7394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b7398:	bf08      	it	eq
   b739a:	3d01      	subeq	r5, #1
   b739c:	d0f7      	beq.n	b738e <__aeabi_dmul+0x1c6>
   b739e:	ea43 0306 	orr.w	r3, r3, r6
   b73a2:	4770      	bx	lr
   b73a4:	ea94 0f0c 	teq	r4, ip
   b73a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b73ac:	bf18      	it	ne
   b73ae:	ea95 0f0c 	teqne	r5, ip
   b73b2:	d00c      	beq.n	b73ce <__aeabi_dmul+0x206>
   b73b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b73b8:	bf18      	it	ne
   b73ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b73be:	d1d1      	bne.n	b7364 <__aeabi_dmul+0x19c>
   b73c0:	ea81 0103 	eor.w	r1, r1, r3
   b73c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b73c8:	f04f 0000 	mov.w	r0, #0
   b73cc:	bd70      	pop	{r4, r5, r6, pc}
   b73ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b73d2:	bf06      	itte	eq
   b73d4:	4610      	moveq	r0, r2
   b73d6:	4619      	moveq	r1, r3
   b73d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b73dc:	d019      	beq.n	b7412 <__aeabi_dmul+0x24a>
   b73de:	ea94 0f0c 	teq	r4, ip
   b73e2:	d102      	bne.n	b73ea <__aeabi_dmul+0x222>
   b73e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b73e8:	d113      	bne.n	b7412 <__aeabi_dmul+0x24a>
   b73ea:	ea95 0f0c 	teq	r5, ip
   b73ee:	d105      	bne.n	b73fc <__aeabi_dmul+0x234>
   b73f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b73f4:	bf1c      	itt	ne
   b73f6:	4610      	movne	r0, r2
   b73f8:	4619      	movne	r1, r3
   b73fa:	d10a      	bne.n	b7412 <__aeabi_dmul+0x24a>
   b73fc:	ea81 0103 	eor.w	r1, r1, r3
   b7400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b740c:	f04f 0000 	mov.w	r0, #0
   b7410:	bd70      	pop	{r4, r5, r6, pc}
   b7412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b741a:	bd70      	pop	{r4, r5, r6, pc}

000b741c <__aeabi_ddiv>:
   b741c:	b570      	push	{r4, r5, r6, lr}
   b741e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b7422:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7426:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b742a:	bf1d      	ittte	ne
   b742c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7430:	ea94 0f0c 	teqne	r4, ip
   b7434:	ea95 0f0c 	teqne	r5, ip
   b7438:	f000 f8a7 	bleq	b758a <__aeabi_ddiv+0x16e>
   b743c:	eba4 0405 	sub.w	r4, r4, r5
   b7440:	ea81 0e03 	eor.w	lr, r1, r3
   b7444:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7448:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b744c:	f000 8088 	beq.w	b7560 <__aeabi_ddiv+0x144>
   b7450:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7454:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b7458:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b745c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b7460:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b7464:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b7468:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b746c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b7470:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b7474:	429d      	cmp	r5, r3
   b7476:	bf08      	it	eq
   b7478:	4296      	cmpeq	r6, r2
   b747a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b747e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b7482:	d202      	bcs.n	b748a <__aeabi_ddiv+0x6e>
   b7484:	085b      	lsrs	r3, r3, #1
   b7486:	ea4f 0232 	mov.w	r2, r2, rrx
   b748a:	1ab6      	subs	r6, r6, r2
   b748c:	eb65 0503 	sbc.w	r5, r5, r3
   b7490:	085b      	lsrs	r3, r3, #1
   b7492:	ea4f 0232 	mov.w	r2, r2, rrx
   b7496:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b749a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b749e:	ebb6 0e02 	subs.w	lr, r6, r2
   b74a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b74a6:	bf22      	ittt	cs
   b74a8:	1ab6      	subcs	r6, r6, r2
   b74aa:	4675      	movcs	r5, lr
   b74ac:	ea40 000c 	orrcs.w	r0, r0, ip
   b74b0:	085b      	lsrs	r3, r3, #1
   b74b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b74b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b74ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b74be:	bf22      	ittt	cs
   b74c0:	1ab6      	subcs	r6, r6, r2
   b74c2:	4675      	movcs	r5, lr
   b74c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b74c8:	085b      	lsrs	r3, r3, #1
   b74ca:	ea4f 0232 	mov.w	r2, r2, rrx
   b74ce:	ebb6 0e02 	subs.w	lr, r6, r2
   b74d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b74d6:	bf22      	ittt	cs
   b74d8:	1ab6      	subcs	r6, r6, r2
   b74da:	4675      	movcs	r5, lr
   b74dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b74e0:	085b      	lsrs	r3, r3, #1
   b74e2:	ea4f 0232 	mov.w	r2, r2, rrx
   b74e6:	ebb6 0e02 	subs.w	lr, r6, r2
   b74ea:	eb75 0e03 	sbcs.w	lr, r5, r3
   b74ee:	bf22      	ittt	cs
   b74f0:	1ab6      	subcs	r6, r6, r2
   b74f2:	4675      	movcs	r5, lr
   b74f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b74f8:	ea55 0e06 	orrs.w	lr, r5, r6
   b74fc:	d018      	beq.n	b7530 <__aeabi_ddiv+0x114>
   b74fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b7502:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b7506:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b750a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b750e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b7512:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b7516:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b751a:	d1c0      	bne.n	b749e <__aeabi_ddiv+0x82>
   b751c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7520:	d10b      	bne.n	b753a <__aeabi_ddiv+0x11e>
   b7522:	ea41 0100 	orr.w	r1, r1, r0
   b7526:	f04f 0000 	mov.w	r0, #0
   b752a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b752e:	e7b6      	b.n	b749e <__aeabi_ddiv+0x82>
   b7530:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7534:	bf04      	itt	eq
   b7536:	4301      	orreq	r1, r0
   b7538:	2000      	moveq	r0, #0
   b753a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b753e:	bf88      	it	hi
   b7540:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7544:	f63f aeaf 	bhi.w	b72a6 <__aeabi_dmul+0xde>
   b7548:	ebb5 0c03 	subs.w	ip, r5, r3
   b754c:	bf04      	itt	eq
   b754e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b7552:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7556:	f150 0000 	adcs.w	r0, r0, #0
   b755a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b755e:	bd70      	pop	{r4, r5, r6, pc}
   b7560:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b7564:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b7568:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b756c:	bfc2      	ittt	gt
   b756e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7572:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7576:	bd70      	popgt	{r4, r5, r6, pc}
   b7578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b757c:	f04f 0e00 	mov.w	lr, #0
   b7580:	3c01      	subs	r4, #1
   b7582:	e690      	b.n	b72a6 <__aeabi_dmul+0xde>
   b7584:	ea45 0e06 	orr.w	lr, r5, r6
   b7588:	e68d      	b.n	b72a6 <__aeabi_dmul+0xde>
   b758a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b758e:	ea94 0f0c 	teq	r4, ip
   b7592:	bf08      	it	eq
   b7594:	ea95 0f0c 	teqeq	r5, ip
   b7598:	f43f af3b 	beq.w	b7412 <__aeabi_dmul+0x24a>
   b759c:	ea94 0f0c 	teq	r4, ip
   b75a0:	d10a      	bne.n	b75b8 <__aeabi_ddiv+0x19c>
   b75a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b75a6:	f47f af34 	bne.w	b7412 <__aeabi_dmul+0x24a>
   b75aa:	ea95 0f0c 	teq	r5, ip
   b75ae:	f47f af25 	bne.w	b73fc <__aeabi_dmul+0x234>
   b75b2:	4610      	mov	r0, r2
   b75b4:	4619      	mov	r1, r3
   b75b6:	e72c      	b.n	b7412 <__aeabi_dmul+0x24a>
   b75b8:	ea95 0f0c 	teq	r5, ip
   b75bc:	d106      	bne.n	b75cc <__aeabi_ddiv+0x1b0>
   b75be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b75c2:	f43f aefd 	beq.w	b73c0 <__aeabi_dmul+0x1f8>
   b75c6:	4610      	mov	r0, r2
   b75c8:	4619      	mov	r1, r3
   b75ca:	e722      	b.n	b7412 <__aeabi_dmul+0x24a>
   b75cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b75d0:	bf18      	it	ne
   b75d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b75d6:	f47f aec5 	bne.w	b7364 <__aeabi_dmul+0x19c>
   b75da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b75de:	f47f af0d 	bne.w	b73fc <__aeabi_dmul+0x234>
   b75e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b75e6:	f47f aeeb 	bne.w	b73c0 <__aeabi_dmul+0x1f8>
   b75ea:	e712      	b.n	b7412 <__aeabi_dmul+0x24a>

000b75ec <__gedf2>:
   b75ec:	f04f 3cff 	mov.w	ip, #4294967295
   b75f0:	e006      	b.n	b7600 <__cmpdf2+0x4>
   b75f2:	bf00      	nop

000b75f4 <__ledf2>:
   b75f4:	f04f 0c01 	mov.w	ip, #1
   b75f8:	e002      	b.n	b7600 <__cmpdf2+0x4>
   b75fa:	bf00      	nop

000b75fc <__cmpdf2>:
   b75fc:	f04f 0c01 	mov.w	ip, #1
   b7600:	f84d cd04 	str.w	ip, [sp, #-4]!
   b7604:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7608:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b760c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7610:	bf18      	it	ne
   b7612:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b7616:	d01b      	beq.n	b7650 <__cmpdf2+0x54>
   b7618:	b001      	add	sp, #4
   b761a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b761e:	bf0c      	ite	eq
   b7620:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b7624:	ea91 0f03 	teqne	r1, r3
   b7628:	bf02      	ittt	eq
   b762a:	ea90 0f02 	teqeq	r0, r2
   b762e:	2000      	moveq	r0, #0
   b7630:	4770      	bxeq	lr
   b7632:	f110 0f00 	cmn.w	r0, #0
   b7636:	ea91 0f03 	teq	r1, r3
   b763a:	bf58      	it	pl
   b763c:	4299      	cmppl	r1, r3
   b763e:	bf08      	it	eq
   b7640:	4290      	cmpeq	r0, r2
   b7642:	bf2c      	ite	cs
   b7644:	17d8      	asrcs	r0, r3, #31
   b7646:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b764a:	f040 0001 	orr.w	r0, r0, #1
   b764e:	4770      	bx	lr
   b7650:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7654:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7658:	d102      	bne.n	b7660 <__cmpdf2+0x64>
   b765a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b765e:	d107      	bne.n	b7670 <__cmpdf2+0x74>
   b7660:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7664:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7668:	d1d6      	bne.n	b7618 <__cmpdf2+0x1c>
   b766a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b766e:	d0d3      	beq.n	b7618 <__cmpdf2+0x1c>
   b7670:	f85d 0b04 	ldr.w	r0, [sp], #4
   b7674:	4770      	bx	lr
   b7676:	bf00      	nop

000b7678 <__aeabi_cdrcmple>:
   b7678:	4684      	mov	ip, r0
   b767a:	4610      	mov	r0, r2
   b767c:	4662      	mov	r2, ip
   b767e:	468c      	mov	ip, r1
   b7680:	4619      	mov	r1, r3
   b7682:	4663      	mov	r3, ip
   b7684:	e000      	b.n	b7688 <__aeabi_cdcmpeq>
   b7686:	bf00      	nop

000b7688 <__aeabi_cdcmpeq>:
   b7688:	b501      	push	{r0, lr}
   b768a:	f7ff ffb7 	bl	b75fc <__cmpdf2>
   b768e:	2800      	cmp	r0, #0
   b7690:	bf48      	it	mi
   b7692:	f110 0f00 	cmnmi.w	r0, #0
   b7696:	bd01      	pop	{r0, pc}

000b7698 <__aeabi_dcmpeq>:
   b7698:	f84d ed08 	str.w	lr, [sp, #-8]!
   b769c:	f7ff fff4 	bl	b7688 <__aeabi_cdcmpeq>
   b76a0:	bf0c      	ite	eq
   b76a2:	2001      	moveq	r0, #1
   b76a4:	2000      	movne	r0, #0
   b76a6:	f85d fb08 	ldr.w	pc, [sp], #8
   b76aa:	bf00      	nop

000b76ac <__aeabi_dcmplt>:
   b76ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   b76b0:	f7ff ffea 	bl	b7688 <__aeabi_cdcmpeq>
   b76b4:	bf34      	ite	cc
   b76b6:	2001      	movcc	r0, #1
   b76b8:	2000      	movcs	r0, #0
   b76ba:	f85d fb08 	ldr.w	pc, [sp], #8
   b76be:	bf00      	nop

000b76c0 <__aeabi_dcmple>:
   b76c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b76c4:	f7ff ffe0 	bl	b7688 <__aeabi_cdcmpeq>
   b76c8:	bf94      	ite	ls
   b76ca:	2001      	movls	r0, #1
   b76cc:	2000      	movhi	r0, #0
   b76ce:	f85d fb08 	ldr.w	pc, [sp], #8
   b76d2:	bf00      	nop

000b76d4 <__aeabi_dcmpge>:
   b76d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b76d8:	f7ff ffce 	bl	b7678 <__aeabi_cdrcmple>
   b76dc:	bf94      	ite	ls
   b76de:	2001      	movls	r0, #1
   b76e0:	2000      	movhi	r0, #0
   b76e2:	f85d fb08 	ldr.w	pc, [sp], #8
   b76e6:	bf00      	nop

000b76e8 <__aeabi_dcmpgt>:
   b76e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b76ec:	f7ff ffc4 	bl	b7678 <__aeabi_cdrcmple>
   b76f0:	bf34      	ite	cc
   b76f2:	2001      	movcc	r0, #1
   b76f4:	2000      	movcs	r0, #0
   b76f6:	f85d fb08 	ldr.w	pc, [sp], #8
   b76fa:	bf00      	nop

000b76fc <__aeabi_d2uiz>:
   b76fc:	004a      	lsls	r2, r1, #1
   b76fe:	d211      	bcs.n	b7724 <__aeabi_d2uiz+0x28>
   b7700:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b7704:	d211      	bcs.n	b772a <__aeabi_d2uiz+0x2e>
   b7706:	d50d      	bpl.n	b7724 <__aeabi_d2uiz+0x28>
   b7708:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b770c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b7710:	d40e      	bmi.n	b7730 <__aeabi_d2uiz+0x34>
   b7712:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7716:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b771a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b771e:	fa23 f002 	lsr.w	r0, r3, r2
   b7722:	4770      	bx	lr
   b7724:	f04f 0000 	mov.w	r0, #0
   b7728:	4770      	bx	lr
   b772a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b772e:	d102      	bne.n	b7736 <__aeabi_d2uiz+0x3a>
   b7730:	f04f 30ff 	mov.w	r0, #4294967295
   b7734:	4770      	bx	lr
   b7736:	f04f 0000 	mov.w	r0, #0
   b773a:	4770      	bx	lr

000b773c <__aeabi_d2f>:
   b773c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b7740:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b7744:	bf24      	itt	cs
   b7746:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b774a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b774e:	d90d      	bls.n	b776c <__aeabi_d2f+0x30>
   b7750:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b7754:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b7758:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b775c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b7760:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b7764:	bf08      	it	eq
   b7766:	f020 0001 	biceq.w	r0, r0, #1
   b776a:	4770      	bx	lr
   b776c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b7770:	d121      	bne.n	b77b6 <__aeabi_d2f+0x7a>
   b7772:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b7776:	bfbc      	itt	lt
   b7778:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b777c:	4770      	bxlt	lr
   b777e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7782:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b7786:	f1c2 0218 	rsb	r2, r2, #24
   b778a:	f1c2 0c20 	rsb	ip, r2, #32
   b778e:	fa10 f30c 	lsls.w	r3, r0, ip
   b7792:	fa20 f002 	lsr.w	r0, r0, r2
   b7796:	bf18      	it	ne
   b7798:	f040 0001 	orrne.w	r0, r0, #1
   b779c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b77a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b77a4:	fa03 fc0c 	lsl.w	ip, r3, ip
   b77a8:	ea40 000c 	orr.w	r0, r0, ip
   b77ac:	fa23 f302 	lsr.w	r3, r3, r2
   b77b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b77b4:	e7cc      	b.n	b7750 <__aeabi_d2f+0x14>
   b77b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b77ba:	d107      	bne.n	b77cc <__aeabi_d2f+0x90>
   b77bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b77c0:	bf1e      	ittt	ne
   b77c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b77c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b77ca:	4770      	bxne	lr
   b77cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b77d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b77d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b77d8:	4770      	bx	lr
   b77da:	bf00      	nop

000b77dc <__aeabi_uldivmod>:
   b77dc:	b953      	cbnz	r3, b77f4 <__aeabi_uldivmod+0x18>
   b77de:	b94a      	cbnz	r2, b77f4 <__aeabi_uldivmod+0x18>
   b77e0:	2900      	cmp	r1, #0
   b77e2:	bf08      	it	eq
   b77e4:	2800      	cmpeq	r0, #0
   b77e6:	bf1c      	itt	ne
   b77e8:	f04f 31ff 	movne.w	r1, #4294967295
   b77ec:	f04f 30ff 	movne.w	r0, #4294967295
   b77f0:	f000 b9c6 	b.w	b7b80 <__aeabi_idiv0>
   b77f4:	f1ad 0c08 	sub.w	ip, sp, #8
   b77f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b77fc:	f000 f858 	bl	b78b0 <__udivmoddi4>
   b7800:	f8dd e004 	ldr.w	lr, [sp, #4]
   b7804:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7808:	b004      	add	sp, #16
   b780a:	4770      	bx	lr

000b780c <__aeabi_f2lz>:
   b780c:	ee07 0a90 	vmov	s15, r0
   b7810:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b7814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7818:	d401      	bmi.n	b781e <__aeabi_f2lz+0x12>
   b781a:	f000 b80b 	b.w	b7834 <__aeabi_f2ulz>
   b781e:	eef1 7a67 	vneg.f32	s15, s15
   b7822:	b508      	push	{r3, lr}
   b7824:	ee17 0a90 	vmov	r0, s15
   b7828:	f000 f804 	bl	b7834 <__aeabi_f2ulz>
   b782c:	4240      	negs	r0, r0
   b782e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7832:	bd08      	pop	{r3, pc}

000b7834 <__aeabi_f2ulz>:
   b7834:	b5d0      	push	{r4, r6, r7, lr}
   b7836:	f7ff fc6f 	bl	b7118 <__aeabi_f2d>
   b783a:	4b0c      	ldr	r3, [pc, #48]	; (b786c <__aeabi_f2ulz+0x38>)
   b783c:	2200      	movs	r2, #0
   b783e:	4606      	mov	r6, r0
   b7840:	460f      	mov	r7, r1
   b7842:	f7ff fcc1 	bl	b71c8 <__aeabi_dmul>
   b7846:	f7ff ff59 	bl	b76fc <__aeabi_d2uiz>
   b784a:	4604      	mov	r4, r0
   b784c:	f7ff fc42 	bl	b70d4 <__aeabi_ui2d>
   b7850:	4b07      	ldr	r3, [pc, #28]	; (b7870 <__aeabi_f2ulz+0x3c>)
   b7852:	2200      	movs	r2, #0
   b7854:	f7ff fcb8 	bl	b71c8 <__aeabi_dmul>
   b7858:	4602      	mov	r2, r0
   b785a:	460b      	mov	r3, r1
   b785c:	4630      	mov	r0, r6
   b785e:	4639      	mov	r1, r7
   b7860:	f7ff fafa 	bl	b6e58 <__aeabi_dsub>
   b7864:	f7ff ff4a 	bl	b76fc <__aeabi_d2uiz>
   b7868:	4621      	mov	r1, r4
   b786a:	bdd0      	pop	{r4, r6, r7, pc}
   b786c:	3df00000 	.word	0x3df00000
   b7870:	41f00000 	.word	0x41f00000

000b7874 <__aeabi_d2ulz>:
   b7874:	b5d0      	push	{r4, r6, r7, lr}
   b7876:	4b0c      	ldr	r3, [pc, #48]	; (b78a8 <__aeabi_d2ulz+0x34>)
   b7878:	2200      	movs	r2, #0
   b787a:	4606      	mov	r6, r0
   b787c:	460f      	mov	r7, r1
   b787e:	f7ff fca3 	bl	b71c8 <__aeabi_dmul>
   b7882:	f7ff ff3b 	bl	b76fc <__aeabi_d2uiz>
   b7886:	4604      	mov	r4, r0
   b7888:	f7ff fc24 	bl	b70d4 <__aeabi_ui2d>
   b788c:	4b07      	ldr	r3, [pc, #28]	; (b78ac <__aeabi_d2ulz+0x38>)
   b788e:	2200      	movs	r2, #0
   b7890:	f7ff fc9a 	bl	b71c8 <__aeabi_dmul>
   b7894:	4602      	mov	r2, r0
   b7896:	460b      	mov	r3, r1
   b7898:	4630      	mov	r0, r6
   b789a:	4639      	mov	r1, r7
   b789c:	f7ff fadc 	bl	b6e58 <__aeabi_dsub>
   b78a0:	f7ff ff2c 	bl	b76fc <__aeabi_d2uiz>
   b78a4:	4621      	mov	r1, r4
   b78a6:	bdd0      	pop	{r4, r6, r7, pc}
   b78a8:	3df00000 	.word	0x3df00000
   b78ac:	41f00000 	.word	0x41f00000

000b78b0 <__udivmoddi4>:
   b78b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b78b4:	9d08      	ldr	r5, [sp, #32]
   b78b6:	4604      	mov	r4, r0
   b78b8:	468e      	mov	lr, r1
   b78ba:	2b00      	cmp	r3, #0
   b78bc:	d14d      	bne.n	b795a <__udivmoddi4+0xaa>
   b78be:	428a      	cmp	r2, r1
   b78c0:	4694      	mov	ip, r2
   b78c2:	d969      	bls.n	b7998 <__udivmoddi4+0xe8>
   b78c4:	fab2 f282 	clz	r2, r2
   b78c8:	b152      	cbz	r2, b78e0 <__udivmoddi4+0x30>
   b78ca:	fa01 f302 	lsl.w	r3, r1, r2
   b78ce:	f1c2 0120 	rsb	r1, r2, #32
   b78d2:	fa20 f101 	lsr.w	r1, r0, r1
   b78d6:	fa0c fc02 	lsl.w	ip, ip, r2
   b78da:	ea41 0e03 	orr.w	lr, r1, r3
   b78de:	4094      	lsls	r4, r2
   b78e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b78e4:	0c21      	lsrs	r1, r4, #16
   b78e6:	fbbe f6f8 	udiv	r6, lr, r8
   b78ea:	fa1f f78c 	uxth.w	r7, ip
   b78ee:	fb08 e316 	mls	r3, r8, r6, lr
   b78f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b78f6:	fb06 f107 	mul.w	r1, r6, r7
   b78fa:	4299      	cmp	r1, r3
   b78fc:	d90a      	bls.n	b7914 <__udivmoddi4+0x64>
   b78fe:	eb1c 0303 	adds.w	r3, ip, r3
   b7902:	f106 30ff 	add.w	r0, r6, #4294967295
   b7906:	f080 811f 	bcs.w	b7b48 <__udivmoddi4+0x298>
   b790a:	4299      	cmp	r1, r3
   b790c:	f240 811c 	bls.w	b7b48 <__udivmoddi4+0x298>
   b7910:	3e02      	subs	r6, #2
   b7912:	4463      	add	r3, ip
   b7914:	1a5b      	subs	r3, r3, r1
   b7916:	b2a4      	uxth	r4, r4
   b7918:	fbb3 f0f8 	udiv	r0, r3, r8
   b791c:	fb08 3310 	mls	r3, r8, r0, r3
   b7920:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b7924:	fb00 f707 	mul.w	r7, r0, r7
   b7928:	42a7      	cmp	r7, r4
   b792a:	d90a      	bls.n	b7942 <__udivmoddi4+0x92>
   b792c:	eb1c 0404 	adds.w	r4, ip, r4
   b7930:	f100 33ff 	add.w	r3, r0, #4294967295
   b7934:	f080 810a 	bcs.w	b7b4c <__udivmoddi4+0x29c>
   b7938:	42a7      	cmp	r7, r4
   b793a:	f240 8107 	bls.w	b7b4c <__udivmoddi4+0x29c>
   b793e:	4464      	add	r4, ip
   b7940:	3802      	subs	r0, #2
   b7942:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b7946:	1be4      	subs	r4, r4, r7
   b7948:	2600      	movs	r6, #0
   b794a:	b11d      	cbz	r5, b7954 <__udivmoddi4+0xa4>
   b794c:	40d4      	lsrs	r4, r2
   b794e:	2300      	movs	r3, #0
   b7950:	e9c5 4300 	strd	r4, r3, [r5]
   b7954:	4631      	mov	r1, r6
   b7956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b795a:	428b      	cmp	r3, r1
   b795c:	d909      	bls.n	b7972 <__udivmoddi4+0xc2>
   b795e:	2d00      	cmp	r5, #0
   b7960:	f000 80ef 	beq.w	b7b42 <__udivmoddi4+0x292>
   b7964:	2600      	movs	r6, #0
   b7966:	e9c5 0100 	strd	r0, r1, [r5]
   b796a:	4630      	mov	r0, r6
   b796c:	4631      	mov	r1, r6
   b796e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7972:	fab3 f683 	clz	r6, r3
   b7976:	2e00      	cmp	r6, #0
   b7978:	d14a      	bne.n	b7a10 <__udivmoddi4+0x160>
   b797a:	428b      	cmp	r3, r1
   b797c:	d302      	bcc.n	b7984 <__udivmoddi4+0xd4>
   b797e:	4282      	cmp	r2, r0
   b7980:	f200 80f9 	bhi.w	b7b76 <__udivmoddi4+0x2c6>
   b7984:	1a84      	subs	r4, r0, r2
   b7986:	eb61 0303 	sbc.w	r3, r1, r3
   b798a:	2001      	movs	r0, #1
   b798c:	469e      	mov	lr, r3
   b798e:	2d00      	cmp	r5, #0
   b7990:	d0e0      	beq.n	b7954 <__udivmoddi4+0xa4>
   b7992:	e9c5 4e00 	strd	r4, lr, [r5]
   b7996:	e7dd      	b.n	b7954 <__udivmoddi4+0xa4>
   b7998:	b902      	cbnz	r2, b799c <__udivmoddi4+0xec>
   b799a:	deff      	udf	#255	; 0xff
   b799c:	fab2 f282 	clz	r2, r2
   b79a0:	2a00      	cmp	r2, #0
   b79a2:	f040 8092 	bne.w	b7aca <__udivmoddi4+0x21a>
   b79a6:	eba1 010c 	sub.w	r1, r1, ip
   b79aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b79ae:	fa1f fe8c 	uxth.w	lr, ip
   b79b2:	2601      	movs	r6, #1
   b79b4:	0c20      	lsrs	r0, r4, #16
   b79b6:	fbb1 f3f7 	udiv	r3, r1, r7
   b79ba:	fb07 1113 	mls	r1, r7, r3, r1
   b79be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b79c2:	fb0e f003 	mul.w	r0, lr, r3
   b79c6:	4288      	cmp	r0, r1
   b79c8:	d908      	bls.n	b79dc <__udivmoddi4+0x12c>
   b79ca:	eb1c 0101 	adds.w	r1, ip, r1
   b79ce:	f103 38ff 	add.w	r8, r3, #4294967295
   b79d2:	d202      	bcs.n	b79da <__udivmoddi4+0x12a>
   b79d4:	4288      	cmp	r0, r1
   b79d6:	f200 80cb 	bhi.w	b7b70 <__udivmoddi4+0x2c0>
   b79da:	4643      	mov	r3, r8
   b79dc:	1a09      	subs	r1, r1, r0
   b79de:	b2a4      	uxth	r4, r4
   b79e0:	fbb1 f0f7 	udiv	r0, r1, r7
   b79e4:	fb07 1110 	mls	r1, r7, r0, r1
   b79e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b79ec:	fb0e fe00 	mul.w	lr, lr, r0
   b79f0:	45a6      	cmp	lr, r4
   b79f2:	d908      	bls.n	b7a06 <__udivmoddi4+0x156>
   b79f4:	eb1c 0404 	adds.w	r4, ip, r4
   b79f8:	f100 31ff 	add.w	r1, r0, #4294967295
   b79fc:	d202      	bcs.n	b7a04 <__udivmoddi4+0x154>
   b79fe:	45a6      	cmp	lr, r4
   b7a00:	f200 80bb 	bhi.w	b7b7a <__udivmoddi4+0x2ca>
   b7a04:	4608      	mov	r0, r1
   b7a06:	eba4 040e 	sub.w	r4, r4, lr
   b7a0a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b7a0e:	e79c      	b.n	b794a <__udivmoddi4+0x9a>
   b7a10:	f1c6 0720 	rsb	r7, r6, #32
   b7a14:	40b3      	lsls	r3, r6
   b7a16:	fa22 fc07 	lsr.w	ip, r2, r7
   b7a1a:	ea4c 0c03 	orr.w	ip, ip, r3
   b7a1e:	fa20 f407 	lsr.w	r4, r0, r7
   b7a22:	fa01 f306 	lsl.w	r3, r1, r6
   b7a26:	431c      	orrs	r4, r3
   b7a28:	40f9      	lsrs	r1, r7
   b7a2a:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b7a2e:	fa00 f306 	lsl.w	r3, r0, r6
   b7a32:	fbb1 f8f9 	udiv	r8, r1, r9
   b7a36:	0c20      	lsrs	r0, r4, #16
   b7a38:	fa1f fe8c 	uxth.w	lr, ip
   b7a3c:	fb09 1118 	mls	r1, r9, r8, r1
   b7a40:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b7a44:	fb08 f00e 	mul.w	r0, r8, lr
   b7a48:	4288      	cmp	r0, r1
   b7a4a:	fa02 f206 	lsl.w	r2, r2, r6
   b7a4e:	d90b      	bls.n	b7a68 <__udivmoddi4+0x1b8>
   b7a50:	eb1c 0101 	adds.w	r1, ip, r1
   b7a54:	f108 3aff 	add.w	sl, r8, #4294967295
   b7a58:	f080 8088 	bcs.w	b7b6c <__udivmoddi4+0x2bc>
   b7a5c:	4288      	cmp	r0, r1
   b7a5e:	f240 8085 	bls.w	b7b6c <__udivmoddi4+0x2bc>
   b7a62:	f1a8 0802 	sub.w	r8, r8, #2
   b7a66:	4461      	add	r1, ip
   b7a68:	1a09      	subs	r1, r1, r0
   b7a6a:	b2a4      	uxth	r4, r4
   b7a6c:	fbb1 f0f9 	udiv	r0, r1, r9
   b7a70:	fb09 1110 	mls	r1, r9, r0, r1
   b7a74:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b7a78:	fb00 fe0e 	mul.w	lr, r0, lr
   b7a7c:	458e      	cmp	lr, r1
   b7a7e:	d908      	bls.n	b7a92 <__udivmoddi4+0x1e2>
   b7a80:	eb1c 0101 	adds.w	r1, ip, r1
   b7a84:	f100 34ff 	add.w	r4, r0, #4294967295
   b7a88:	d26c      	bcs.n	b7b64 <__udivmoddi4+0x2b4>
   b7a8a:	458e      	cmp	lr, r1
   b7a8c:	d96a      	bls.n	b7b64 <__udivmoddi4+0x2b4>
   b7a8e:	3802      	subs	r0, #2
   b7a90:	4461      	add	r1, ip
   b7a92:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b7a96:	fba0 9402 	umull	r9, r4, r0, r2
   b7a9a:	eba1 010e 	sub.w	r1, r1, lr
   b7a9e:	42a1      	cmp	r1, r4
   b7aa0:	46c8      	mov	r8, r9
   b7aa2:	46a6      	mov	lr, r4
   b7aa4:	d356      	bcc.n	b7b54 <__udivmoddi4+0x2a4>
   b7aa6:	d053      	beq.n	b7b50 <__udivmoddi4+0x2a0>
   b7aa8:	b15d      	cbz	r5, b7ac2 <__udivmoddi4+0x212>
   b7aaa:	ebb3 0208 	subs.w	r2, r3, r8
   b7aae:	eb61 010e 	sbc.w	r1, r1, lr
   b7ab2:	fa01 f707 	lsl.w	r7, r1, r7
   b7ab6:	fa22 f306 	lsr.w	r3, r2, r6
   b7aba:	40f1      	lsrs	r1, r6
   b7abc:	431f      	orrs	r7, r3
   b7abe:	e9c5 7100 	strd	r7, r1, [r5]
   b7ac2:	2600      	movs	r6, #0
   b7ac4:	4631      	mov	r1, r6
   b7ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7aca:	f1c2 0320 	rsb	r3, r2, #32
   b7ace:	40d8      	lsrs	r0, r3
   b7ad0:	fa0c fc02 	lsl.w	ip, ip, r2
   b7ad4:	fa21 f303 	lsr.w	r3, r1, r3
   b7ad8:	4091      	lsls	r1, r2
   b7ada:	4301      	orrs	r1, r0
   b7adc:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b7ae0:	fa1f fe8c 	uxth.w	lr, ip
   b7ae4:	fbb3 f0f7 	udiv	r0, r3, r7
   b7ae8:	fb07 3610 	mls	r6, r7, r0, r3
   b7aec:	0c0b      	lsrs	r3, r1, #16
   b7aee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b7af2:	fb00 f60e 	mul.w	r6, r0, lr
   b7af6:	429e      	cmp	r6, r3
   b7af8:	fa04 f402 	lsl.w	r4, r4, r2
   b7afc:	d908      	bls.n	b7b10 <__udivmoddi4+0x260>
   b7afe:	eb1c 0303 	adds.w	r3, ip, r3
   b7b02:	f100 38ff 	add.w	r8, r0, #4294967295
   b7b06:	d22f      	bcs.n	b7b68 <__udivmoddi4+0x2b8>
   b7b08:	429e      	cmp	r6, r3
   b7b0a:	d92d      	bls.n	b7b68 <__udivmoddi4+0x2b8>
   b7b0c:	3802      	subs	r0, #2
   b7b0e:	4463      	add	r3, ip
   b7b10:	1b9b      	subs	r3, r3, r6
   b7b12:	b289      	uxth	r1, r1
   b7b14:	fbb3 f6f7 	udiv	r6, r3, r7
   b7b18:	fb07 3316 	mls	r3, r7, r6, r3
   b7b1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b7b20:	fb06 f30e 	mul.w	r3, r6, lr
   b7b24:	428b      	cmp	r3, r1
   b7b26:	d908      	bls.n	b7b3a <__udivmoddi4+0x28a>
   b7b28:	eb1c 0101 	adds.w	r1, ip, r1
   b7b2c:	f106 38ff 	add.w	r8, r6, #4294967295
   b7b30:	d216      	bcs.n	b7b60 <__udivmoddi4+0x2b0>
   b7b32:	428b      	cmp	r3, r1
   b7b34:	d914      	bls.n	b7b60 <__udivmoddi4+0x2b0>
   b7b36:	3e02      	subs	r6, #2
   b7b38:	4461      	add	r1, ip
   b7b3a:	1ac9      	subs	r1, r1, r3
   b7b3c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b7b40:	e738      	b.n	b79b4 <__udivmoddi4+0x104>
   b7b42:	462e      	mov	r6, r5
   b7b44:	4628      	mov	r0, r5
   b7b46:	e705      	b.n	b7954 <__udivmoddi4+0xa4>
   b7b48:	4606      	mov	r6, r0
   b7b4a:	e6e3      	b.n	b7914 <__udivmoddi4+0x64>
   b7b4c:	4618      	mov	r0, r3
   b7b4e:	e6f8      	b.n	b7942 <__udivmoddi4+0x92>
   b7b50:	454b      	cmp	r3, r9
   b7b52:	d2a9      	bcs.n	b7aa8 <__udivmoddi4+0x1f8>
   b7b54:	ebb9 0802 	subs.w	r8, r9, r2
   b7b58:	eb64 0e0c 	sbc.w	lr, r4, ip
   b7b5c:	3801      	subs	r0, #1
   b7b5e:	e7a3      	b.n	b7aa8 <__udivmoddi4+0x1f8>
   b7b60:	4646      	mov	r6, r8
   b7b62:	e7ea      	b.n	b7b3a <__udivmoddi4+0x28a>
   b7b64:	4620      	mov	r0, r4
   b7b66:	e794      	b.n	b7a92 <__udivmoddi4+0x1e2>
   b7b68:	4640      	mov	r0, r8
   b7b6a:	e7d1      	b.n	b7b10 <__udivmoddi4+0x260>
   b7b6c:	46d0      	mov	r8, sl
   b7b6e:	e77b      	b.n	b7a68 <__udivmoddi4+0x1b8>
   b7b70:	3b02      	subs	r3, #2
   b7b72:	4461      	add	r1, ip
   b7b74:	e732      	b.n	b79dc <__udivmoddi4+0x12c>
   b7b76:	4630      	mov	r0, r6
   b7b78:	e709      	b.n	b798e <__udivmoddi4+0xde>
   b7b7a:	4464      	add	r4, ip
   b7b7c:	3802      	subs	r0, #2
   b7b7e:	e742      	b.n	b7a06 <__udivmoddi4+0x156>

000b7b80 <__aeabi_idiv0>:
   b7b80:	4770      	bx	lr
   b7b82:	bf00      	nop

000b7b84 <asctime_r>:
   b7b84:	b510      	push	{r4, lr}
   b7b86:	460c      	mov	r4, r1
   b7b88:	6941      	ldr	r1, [r0, #20]
   b7b8a:	6903      	ldr	r3, [r0, #16]
   b7b8c:	6982      	ldr	r2, [r0, #24]
   b7b8e:	b086      	sub	sp, #24
   b7b90:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   b7b94:	9104      	str	r1, [sp, #16]
   b7b96:	6801      	ldr	r1, [r0, #0]
   b7b98:	9103      	str	r1, [sp, #12]
   b7b9a:	6841      	ldr	r1, [r0, #4]
   b7b9c:	9102      	str	r1, [sp, #8]
   b7b9e:	6881      	ldr	r1, [r0, #8]
   b7ba0:	9101      	str	r1, [sp, #4]
   b7ba2:	68c1      	ldr	r1, [r0, #12]
   b7ba4:	9100      	str	r1, [sp, #0]
   b7ba6:	4907      	ldr	r1, [pc, #28]	; (b7bc4 <asctime_r+0x40>)
   b7ba8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b7bac:	440b      	add	r3, r1
   b7bae:	4906      	ldr	r1, [pc, #24]	; (b7bc8 <asctime_r+0x44>)
   b7bb0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b7bb4:	440a      	add	r2, r1
   b7bb6:	4620      	mov	r0, r4
   b7bb8:	4904      	ldr	r1, [pc, #16]	; (b7bcc <asctime_r+0x48>)
   b7bba:	f7fd fda1 	bl	b5700 <siprintf>
   b7bbe:	4620      	mov	r0, r4
   b7bc0:	b006      	add	sp, #24
   b7bc2:	bd10      	pop	{r4, pc}
   b7bc4:	000b848e 	.word	0x000b848e
   b7bc8:	000b8479 	.word	0x000b8479
   b7bcc:	000b8459 	.word	0x000b8459

000b7bd0 <atexit>:
   b7bd0:	2300      	movs	r3, #0
   b7bd2:	4601      	mov	r1, r0
   b7bd4:	461a      	mov	r2, r3
   b7bd6:	4618      	mov	r0, r3
   b7bd8:	f000 b932 	b.w	b7e40 <__register_exitproc>

000b7bdc <atol>:
   b7bdc:	220a      	movs	r2, #10
   b7bde:	2100      	movs	r1, #0
   b7be0:	f000 b924 	b.w	b7e2c <strtol>

000b7be4 <ldiv>:
   b7be4:	2900      	cmp	r1, #0
   b7be6:	b510      	push	{r4, lr}
   b7be8:	fb91 f4f2 	sdiv	r4, r1, r2
   b7bec:	fb02 1314 	mls	r3, r2, r4, r1
   b7bf0:	db06      	blt.n	b7c00 <ldiv+0x1c>
   b7bf2:	2b00      	cmp	r3, #0
   b7bf4:	da01      	bge.n	b7bfa <ldiv+0x16>
   b7bf6:	3401      	adds	r4, #1
   b7bf8:	1a9b      	subs	r3, r3, r2
   b7bfa:	e9c0 4300 	strd	r4, r3, [r0]
   b7bfe:	bd10      	pop	{r4, pc}
   b7c00:	2b00      	cmp	r3, #0
   b7c02:	bfc4      	itt	gt
   b7c04:	f104 34ff 	addgt.w	r4, r4, #4294967295
   b7c08:	189b      	addgt	r3, r3, r2
   b7c0a:	e7f6      	b.n	b7bfa <ldiv+0x16>

000b7c0c <memcpy>:
   b7c0c:	440a      	add	r2, r1
   b7c0e:	4291      	cmp	r1, r2
   b7c10:	f100 33ff 	add.w	r3, r0, #4294967295
   b7c14:	d100      	bne.n	b7c18 <memcpy+0xc>
   b7c16:	4770      	bx	lr
   b7c18:	b510      	push	{r4, lr}
   b7c1a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7c1e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7c22:	4291      	cmp	r1, r2
   b7c24:	d1f9      	bne.n	b7c1a <memcpy+0xe>
   b7c26:	bd10      	pop	{r4, pc}

000b7c28 <memset>:
   b7c28:	4402      	add	r2, r0
   b7c2a:	4603      	mov	r3, r0
   b7c2c:	4293      	cmp	r3, r2
   b7c2e:	d100      	bne.n	b7c32 <memset+0xa>
   b7c30:	4770      	bx	lr
   b7c32:	f803 1b01 	strb.w	r1, [r3], #1
   b7c36:	e7f9      	b.n	b7c2c <memset+0x4>

000b7c38 <srand>:
   b7c38:	b538      	push	{r3, r4, r5, lr}
   b7c3a:	4b10      	ldr	r3, [pc, #64]	; (b7c7c <srand+0x44>)
   b7c3c:	681d      	ldr	r5, [r3, #0]
   b7c3e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7c40:	4604      	mov	r4, r0
   b7c42:	b9b3      	cbnz	r3, b7c72 <srand+0x3a>
   b7c44:	2018      	movs	r0, #24
   b7c46:	f7fd fd43 	bl	b56d0 <malloc>
   b7c4a:	4602      	mov	r2, r0
   b7c4c:	63a8      	str	r0, [r5, #56]	; 0x38
   b7c4e:	b920      	cbnz	r0, b7c5a <srand+0x22>
   b7c50:	4b0b      	ldr	r3, [pc, #44]	; (b7c80 <srand+0x48>)
   b7c52:	480c      	ldr	r0, [pc, #48]	; (b7c84 <srand+0x4c>)
   b7c54:	2142      	movs	r1, #66	; 0x42
   b7c56:	f7fd fd7b 	bl	b5750 <__assert_func>
   b7c5a:	490b      	ldr	r1, [pc, #44]	; (b7c88 <srand+0x50>)
   b7c5c:	4b0b      	ldr	r3, [pc, #44]	; (b7c8c <srand+0x54>)
   b7c5e:	e9c0 1300 	strd	r1, r3, [r0]
   b7c62:	4b0b      	ldr	r3, [pc, #44]	; (b7c90 <srand+0x58>)
   b7c64:	6083      	str	r3, [r0, #8]
   b7c66:	230b      	movs	r3, #11
   b7c68:	8183      	strh	r3, [r0, #12]
   b7c6a:	2100      	movs	r1, #0
   b7c6c:	2001      	movs	r0, #1
   b7c6e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7c72:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7c74:	2200      	movs	r2, #0
   b7c76:	611c      	str	r4, [r3, #16]
   b7c78:	615a      	str	r2, [r3, #20]
   b7c7a:	bd38      	pop	{r3, r4, r5, pc}
   b7c7c:	2003dd20 	.word	0x2003dd20
   b7c80:	000b84b2 	.word	0x000b84b2
   b7c84:	000b84c9 	.word	0x000b84c9
   b7c88:	abcd330e 	.word	0xabcd330e
   b7c8c:	e66d1234 	.word	0xe66d1234
   b7c90:	0005deec 	.word	0x0005deec

000b7c94 <strcmp>:
   b7c94:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7c98:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7c9c:	2a01      	cmp	r2, #1
   b7c9e:	bf28      	it	cs
   b7ca0:	429a      	cmpcs	r2, r3
   b7ca2:	d0f7      	beq.n	b7c94 <strcmp>
   b7ca4:	1ad0      	subs	r0, r2, r3
   b7ca6:	4770      	bx	lr

000b7ca8 <strcpy>:
   b7ca8:	4603      	mov	r3, r0
   b7caa:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7cae:	f803 2b01 	strb.w	r2, [r3], #1
   b7cb2:	2a00      	cmp	r2, #0
   b7cb4:	d1f9      	bne.n	b7caa <strcpy+0x2>
   b7cb6:	4770      	bx	lr

000b7cb8 <strdup>:
   b7cb8:	4b02      	ldr	r3, [pc, #8]	; (b7cc4 <strdup+0xc>)
   b7cba:	4601      	mov	r1, r0
   b7cbc:	6818      	ldr	r0, [r3, #0]
   b7cbe:	f000 b803 	b.w	b7cc8 <_strdup_r>
   b7cc2:	bf00      	nop
   b7cc4:	2003dd20 	.word	0x2003dd20

000b7cc8 <_strdup_r>:
   b7cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7cca:	4604      	mov	r4, r0
   b7ccc:	4608      	mov	r0, r1
   b7cce:	460d      	mov	r5, r1
   b7cd0:	f000 f80f 	bl	b7cf2 <strlen>
   b7cd4:	1c42      	adds	r2, r0, #1
   b7cd6:	4611      	mov	r1, r2
   b7cd8:	4620      	mov	r0, r4
   b7cda:	9201      	str	r2, [sp, #4]
   b7cdc:	f7fd fd28 	bl	b5730 <_malloc_r>
   b7ce0:	4604      	mov	r4, r0
   b7ce2:	b118      	cbz	r0, b7cec <_strdup_r+0x24>
   b7ce4:	9a01      	ldr	r2, [sp, #4]
   b7ce6:	4629      	mov	r1, r5
   b7ce8:	f7ff ff90 	bl	b7c0c <memcpy>
   b7cec:	4620      	mov	r0, r4
   b7cee:	b003      	add	sp, #12
   b7cf0:	bd30      	pop	{r4, r5, pc}

000b7cf2 <strlen>:
   b7cf2:	4603      	mov	r3, r0
   b7cf4:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7cf8:	2a00      	cmp	r2, #0
   b7cfa:	d1fb      	bne.n	b7cf4 <strlen+0x2>
   b7cfc:	1a18      	subs	r0, r3, r0
   b7cfe:	3801      	subs	r0, #1
   b7d00:	4770      	bx	lr

000b7d02 <strncpy>:
   b7d02:	b510      	push	{r4, lr}
   b7d04:	3901      	subs	r1, #1
   b7d06:	4603      	mov	r3, r0
   b7d08:	b132      	cbz	r2, b7d18 <strncpy+0x16>
   b7d0a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b7d0e:	f803 4b01 	strb.w	r4, [r3], #1
   b7d12:	3a01      	subs	r2, #1
   b7d14:	2c00      	cmp	r4, #0
   b7d16:	d1f7      	bne.n	b7d08 <strncpy+0x6>
   b7d18:	441a      	add	r2, r3
   b7d1a:	2100      	movs	r1, #0
   b7d1c:	4293      	cmp	r3, r2
   b7d1e:	d100      	bne.n	b7d22 <strncpy+0x20>
   b7d20:	bd10      	pop	{r4, pc}
   b7d22:	f803 1b01 	strb.w	r1, [r3], #1
   b7d26:	e7f9      	b.n	b7d1c <strncpy+0x1a>

000b7d28 <_strtol_l.constprop.0>:
   b7d28:	2b01      	cmp	r3, #1
   b7d2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7d2e:	d001      	beq.n	b7d34 <_strtol_l.constprop.0+0xc>
   b7d30:	2b24      	cmp	r3, #36	; 0x24
   b7d32:	d906      	bls.n	b7d42 <_strtol_l.constprop.0+0x1a>
   b7d34:	f7fd fd04 	bl	b5740 <__errno>
   b7d38:	2316      	movs	r3, #22
   b7d3a:	6003      	str	r3, [r0, #0]
   b7d3c:	2000      	movs	r0, #0
   b7d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7d42:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b7e28 <_strtol_l.constprop.0+0x100>
   b7d46:	460d      	mov	r5, r1
   b7d48:	462e      	mov	r6, r5
   b7d4a:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7d4e:	f814 700c 	ldrb.w	r7, [r4, ip]
   b7d52:	f017 0708 	ands.w	r7, r7, #8
   b7d56:	d1f7      	bne.n	b7d48 <_strtol_l.constprop.0+0x20>
   b7d58:	2c2d      	cmp	r4, #45	; 0x2d
   b7d5a:	d132      	bne.n	b7dc2 <_strtol_l.constprop.0+0x9a>
   b7d5c:	782c      	ldrb	r4, [r5, #0]
   b7d5e:	2701      	movs	r7, #1
   b7d60:	1cb5      	adds	r5, r6, #2
   b7d62:	2b00      	cmp	r3, #0
   b7d64:	d05b      	beq.n	b7e1e <_strtol_l.constprop.0+0xf6>
   b7d66:	2b10      	cmp	r3, #16
   b7d68:	d109      	bne.n	b7d7e <_strtol_l.constprop.0+0x56>
   b7d6a:	2c30      	cmp	r4, #48	; 0x30
   b7d6c:	d107      	bne.n	b7d7e <_strtol_l.constprop.0+0x56>
   b7d6e:	782c      	ldrb	r4, [r5, #0]
   b7d70:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b7d74:	2c58      	cmp	r4, #88	; 0x58
   b7d76:	d14d      	bne.n	b7e14 <_strtol_l.constprop.0+0xec>
   b7d78:	786c      	ldrb	r4, [r5, #1]
   b7d7a:	2310      	movs	r3, #16
   b7d7c:	3502      	adds	r5, #2
   b7d7e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b7d82:	f108 38ff 	add.w	r8, r8, #4294967295
   b7d86:	f04f 0c00 	mov.w	ip, #0
   b7d8a:	fbb8 f9f3 	udiv	r9, r8, r3
   b7d8e:	4666      	mov	r6, ip
   b7d90:	fb03 8a19 	mls	sl, r3, r9, r8
   b7d94:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b7d98:	f1be 0f09 	cmp.w	lr, #9
   b7d9c:	d816      	bhi.n	b7dcc <_strtol_l.constprop.0+0xa4>
   b7d9e:	4674      	mov	r4, lr
   b7da0:	42a3      	cmp	r3, r4
   b7da2:	dd24      	ble.n	b7dee <_strtol_l.constprop.0+0xc6>
   b7da4:	f1bc 0f00 	cmp.w	ip, #0
   b7da8:	db1e      	blt.n	b7de8 <_strtol_l.constprop.0+0xc0>
   b7daa:	45b1      	cmp	r9, r6
   b7dac:	d31c      	bcc.n	b7de8 <_strtol_l.constprop.0+0xc0>
   b7dae:	d101      	bne.n	b7db4 <_strtol_l.constprop.0+0x8c>
   b7db0:	45a2      	cmp	sl, r4
   b7db2:	db19      	blt.n	b7de8 <_strtol_l.constprop.0+0xc0>
   b7db4:	fb06 4603 	mla	r6, r6, r3, r4
   b7db8:	f04f 0c01 	mov.w	ip, #1
   b7dbc:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7dc0:	e7e8      	b.n	b7d94 <_strtol_l.constprop.0+0x6c>
   b7dc2:	2c2b      	cmp	r4, #43	; 0x2b
   b7dc4:	bf04      	itt	eq
   b7dc6:	782c      	ldrbeq	r4, [r5, #0]
   b7dc8:	1cb5      	addeq	r5, r6, #2
   b7dca:	e7ca      	b.n	b7d62 <_strtol_l.constprop.0+0x3a>
   b7dcc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b7dd0:	f1be 0f19 	cmp.w	lr, #25
   b7dd4:	d801      	bhi.n	b7dda <_strtol_l.constprop.0+0xb2>
   b7dd6:	3c37      	subs	r4, #55	; 0x37
   b7dd8:	e7e2      	b.n	b7da0 <_strtol_l.constprop.0+0x78>
   b7dda:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b7dde:	f1be 0f19 	cmp.w	lr, #25
   b7de2:	d804      	bhi.n	b7dee <_strtol_l.constprop.0+0xc6>
   b7de4:	3c57      	subs	r4, #87	; 0x57
   b7de6:	e7db      	b.n	b7da0 <_strtol_l.constprop.0+0x78>
   b7de8:	f04f 3cff 	mov.w	ip, #4294967295
   b7dec:	e7e6      	b.n	b7dbc <_strtol_l.constprop.0+0x94>
   b7dee:	f1bc 0f00 	cmp.w	ip, #0
   b7df2:	da05      	bge.n	b7e00 <_strtol_l.constprop.0+0xd8>
   b7df4:	2322      	movs	r3, #34	; 0x22
   b7df6:	6003      	str	r3, [r0, #0]
   b7df8:	4646      	mov	r6, r8
   b7dfa:	b942      	cbnz	r2, b7e0e <_strtol_l.constprop.0+0xe6>
   b7dfc:	4630      	mov	r0, r6
   b7dfe:	e79e      	b.n	b7d3e <_strtol_l.constprop.0+0x16>
   b7e00:	b107      	cbz	r7, b7e04 <_strtol_l.constprop.0+0xdc>
   b7e02:	4276      	negs	r6, r6
   b7e04:	2a00      	cmp	r2, #0
   b7e06:	d0f9      	beq.n	b7dfc <_strtol_l.constprop.0+0xd4>
   b7e08:	f1bc 0f00 	cmp.w	ip, #0
   b7e0c:	d000      	beq.n	b7e10 <_strtol_l.constprop.0+0xe8>
   b7e0e:	1e69      	subs	r1, r5, #1
   b7e10:	6011      	str	r1, [r2, #0]
   b7e12:	e7f3      	b.n	b7dfc <_strtol_l.constprop.0+0xd4>
   b7e14:	2430      	movs	r4, #48	; 0x30
   b7e16:	2b00      	cmp	r3, #0
   b7e18:	d1b1      	bne.n	b7d7e <_strtol_l.constprop.0+0x56>
   b7e1a:	2308      	movs	r3, #8
   b7e1c:	e7af      	b.n	b7d7e <_strtol_l.constprop.0+0x56>
   b7e1e:	2c30      	cmp	r4, #48	; 0x30
   b7e20:	d0a5      	beq.n	b7d6e <_strtol_l.constprop.0+0x46>
   b7e22:	230a      	movs	r3, #10
   b7e24:	e7ab      	b.n	b7d7e <_strtol_l.constprop.0+0x56>
   b7e26:	bf00      	nop
   b7e28:	000b8547 	.word	0x000b8547

000b7e2c <strtol>:
   b7e2c:	4613      	mov	r3, r2
   b7e2e:	460a      	mov	r2, r1
   b7e30:	4601      	mov	r1, r0
   b7e32:	4802      	ldr	r0, [pc, #8]	; (b7e3c <strtol+0x10>)
   b7e34:	6800      	ldr	r0, [r0, #0]
   b7e36:	f7ff bf77 	b.w	b7d28 <_strtol_l.constprop.0>
   b7e3a:	bf00      	nop
   b7e3c:	2003dd20 	.word	0x2003dd20

000b7e40 <__register_exitproc>:
   b7e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7e44:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7f00 <__register_exitproc+0xc0>
   b7e48:	4606      	mov	r6, r0
   b7e4a:	f8d8 0000 	ldr.w	r0, [r8]
   b7e4e:	461f      	mov	r7, r3
   b7e50:	460d      	mov	r5, r1
   b7e52:	4691      	mov	r9, r2
   b7e54:	f000 f856 	bl	b7f04 <__retarget_lock_acquire_recursive>
   b7e58:	4b25      	ldr	r3, [pc, #148]	; (b7ef0 <__register_exitproc+0xb0>)
   b7e5a:	681c      	ldr	r4, [r3, #0]
   b7e5c:	b934      	cbnz	r4, b7e6c <__register_exitproc+0x2c>
   b7e5e:	4c25      	ldr	r4, [pc, #148]	; (b7ef4 <__register_exitproc+0xb4>)
   b7e60:	601c      	str	r4, [r3, #0]
   b7e62:	4b25      	ldr	r3, [pc, #148]	; (b7ef8 <__register_exitproc+0xb8>)
   b7e64:	b113      	cbz	r3, b7e6c <__register_exitproc+0x2c>
   b7e66:	681b      	ldr	r3, [r3, #0]
   b7e68:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7e6c:	6863      	ldr	r3, [r4, #4]
   b7e6e:	2b1f      	cmp	r3, #31
   b7e70:	dd07      	ble.n	b7e82 <__register_exitproc+0x42>
   b7e72:	f8d8 0000 	ldr.w	r0, [r8]
   b7e76:	f000 f847 	bl	b7f08 <__retarget_lock_release_recursive>
   b7e7a:	f04f 30ff 	mov.w	r0, #4294967295
   b7e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7e82:	b34e      	cbz	r6, b7ed8 <__register_exitproc+0x98>
   b7e84:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7e88:	b988      	cbnz	r0, b7eae <__register_exitproc+0x6e>
   b7e8a:	4b1c      	ldr	r3, [pc, #112]	; (b7efc <__register_exitproc+0xbc>)
   b7e8c:	b923      	cbnz	r3, b7e98 <__register_exitproc+0x58>
   b7e8e:	f8d8 0000 	ldr.w	r0, [r8]
   b7e92:	f000 f838 	bl	b7f06 <__retarget_lock_release>
   b7e96:	e7f0      	b.n	b7e7a <__register_exitproc+0x3a>
   b7e98:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7e9c:	f7fd fc18 	bl	b56d0 <malloc>
   b7ea0:	2800      	cmp	r0, #0
   b7ea2:	d0f4      	beq.n	b7e8e <__register_exitproc+0x4e>
   b7ea4:	2300      	movs	r3, #0
   b7ea6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7eaa:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7eae:	6863      	ldr	r3, [r4, #4]
   b7eb0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7eb4:	2201      	movs	r2, #1
   b7eb6:	409a      	lsls	r2, r3
   b7eb8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7ebc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7ec0:	4313      	orrs	r3, r2
   b7ec2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7ec6:	2e02      	cmp	r6, #2
   b7ec8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7ecc:	bf02      	ittt	eq
   b7ece:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7ed2:	4313      	orreq	r3, r2
   b7ed4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7ed8:	6863      	ldr	r3, [r4, #4]
   b7eda:	f8d8 0000 	ldr.w	r0, [r8]
   b7ede:	1c5a      	adds	r2, r3, #1
   b7ee0:	3302      	adds	r3, #2
   b7ee2:	6062      	str	r2, [r4, #4]
   b7ee4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7ee8:	f000 f80e 	bl	b7f08 <__retarget_lock_release_recursive>
   b7eec:	2000      	movs	r0, #0
   b7eee:	e7c6      	b.n	b7e7e <__register_exitproc+0x3e>
   b7ef0:	2003e7e8 	.word	0x2003e7e8
   b7ef4:	2003e75c 	.word	0x2003e75c
   b7ef8:	00000000 	.word	0x00000000
   b7efc:	000b56d1 	.word	0x000b56d1
   b7f00:	2003dd84 	.word	0x2003dd84

000b7f04 <__retarget_lock_acquire_recursive>:
   b7f04:	4770      	bx	lr

000b7f06 <__retarget_lock_release>:
   b7f06:	4770      	bx	lr

000b7f08 <__retarget_lock_release_recursive>:
   b7f08:	4770      	bx	lr

000b7f0a <link_code_end>:
	...

000b7f0c <dynalib_user>:
   b7f0c:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b7f1c:	0000 0000 7055 6164 6574 2064 6564 616c     ....Updated dela
   b7f2c:	2079 6974 656d 7420 3a6f 0020 7055 6164     y time to: .Upda
   b7f3c:	6574 2064 7473 7261 2074 6172 676e 2065     ted start range 
   b7f4c:	6f74 203a 5500 6470 7461 6465 7220 6e61     to: .Updated ran
   b7f5c:	6567 6520 646e 7420 3a6f 0020 6e45 6574     ge end to: .Ente
   b7f6c:	6972 676e 7320 7465 7075 6620 6e75 7463     ring setup funct
   b7f7c:	6f69 2e6e 5300 7465 7075 6620 6e69 7369     ion..Setup finis
   b7f8c:	6568 2164 6800 6f6f 2d6b 6572 7073 6e6f     hed!.hook-respon
   b7f9c:	6573 552f 6470 7461 0065 6f68 6b6f 722d     se/Update.hook-r
   b7fac:	7365 6f70 736e 2f65 6552 6461 6e69 0067     esponse/Reading.
   b7fbc:	6f43 646e 7469 6f69 736e 6d20 7465 202c     Conditions met, 
   b7fcc:	7270 7065 7261 6e69 2067 6f74 7420 6b61     preparing to tak
   b7fdc:	2065 2061 656d 7361 7275 6d65 6e65 2174     e a measurement!
   b7fec:	5700 6961 6974 676e 6620 726f 6120 6d20     .Waiting for a m
   b7ffc:	6165 7573 6572 656d 746e 202c 7562 2074     easurement, but 
   b800c:	7469 6820 7361 276e 2074 6562 6e65 6c20     it hasn't been l
   b801c:	6e6f 2067 6e65 756f 6867 7920 7465 002e     ong enough yet..
   b802c:	7564 6d6d 5f79 6164 6174 5700 6961 6974     dummy_data.Waiti
   b803c:	676e 6620 726f 6120 6d20 6165 7573 6572     ng for a measure
   b804c:	656d 746e 202c 7562 2074 7469 7327 6e20     ment, but it's n
   b805c:	746f 6920 206e 6874 2065 6361 6563 7470     ot in the accept
   b806c:	6261 656c 7420 6d69 2065 7266 6d61 2e65     able time frame.
   b807c:	4320 7275 6572 746e 7420 6d69 3a65 0020      Current time: .
   b808c:	6552 7571 7365 6974 676e 6120 6d20 6165     Requesting a mea
   b809c:	7573 6572 656d 746e 2d20 7020 616c 6563     surement - place
   b80ac:	6620 6e69 6567 2072 6e6f 7320 6e65 6f73      finger on senso
   b80bc:	2e72 4600 6e69 6567 2072 6564 6574 7463     r..Finger detect
   b80cc:	6465 6f20 206e 6573 736e 726f 002e 6e45     ed on sensor..En
   b80dc:	6574 6972 676e 6d20 6165 7573 6572 656d     tering measureme
   b80ec:	746e 6c20 6f6f 0070 6156 696c 2064 656d     nt loop.Valid me
   b80fc:	7361 7275 6d65 6e65 2c74 7320 6e65 6964     asurement, sendi
   b810c:	676e 6420 7461 2e61 4e00 746f 6120 7620     ng data..Not a v
   b811c:	6c61 6469 6d20 6165 7573 6572 656d 746e     alid measurement
   b812c:	202e 5248 003a 5320 4f50 3a32 0020 207b     . HR:. SPO2: .{ 
   b813c:	6222 6165 2274 203a 0022 202c 6f22 2278     "beat": "., "ox"
   b814c:	203a 2c00 2220 6974 656d 3a22 0020 007d     : ., "time": .}.
   b815c:	6144 6174 7320 6375 6563 7373 7566 6c6c     Data successfull
   b816c:	2079 6573 746e 002e 6553 646e 7320 6f74     y sent..Send sto
   b817c:	6572 2064 6f70 6e69 3a74 0020 7453 726f     red point: .Stor
   b818c:	6465 6420 7461 2061 6f70 6e69 2074 6f74     ed data point to
   b819c:	206f 6c6f 2064 202d 6f6e 2074 6573 746e     o old - not sent
   b81ac:	002e 6c41 206c 7473 726f 6465 6420 7461     ..All stored dat
   b81bc:	2061 6f70 6e69 7374 7320 6e65 2e74 4e00     a points sent..N
   b81cc:	206f 6e69 6574 6e72 7465 2d20 7320 7661     o internet - sav
   b81dc:	6e69 2067 6164 6174 6620 726f 6c20 7461     ing data for lat
   b81ec:	7265 002e                                   er..

000b81f0 <_ZTVN8particle9LEDStatusE>:
	...
   b81f8:	40c5 000b 40e1 000b 40af 000b               .@...@...@..

000b8204 <_ZL14uch_spo2_table>:
   b8204:	5f5f 605f 6060 6161 6161 6261 6262 6262     ___```aaaaabbbbb
   b8214:	6363 6363 6363 6363 6464 6464 6464 6464     ccccccccdddddddd
   b8224:	6464 6464 6464 6464 6464 6464 6363 6363     ddddddddddddcccc
   b8234:	6363 6363 6262 6262 6262 6161 6161 6060     ccccbbbbbbaaaa``
   b8244:	6060 5f5f 5e5f 5e5e 5d5d 5c5d 5c5c 5b5b     ``___^^^]]]\\\[[
   b8254:	5a5a 5959 5859 5758 5657 5556 5455 5354     ZZYYYXXWWVVUUTTS
   b8264:	5252 5151 5050 4e4f 4d4e 4c4c 4a4b 494a     RRQQPPONNMLLKJJI
   b8274:	4848 4647 4545 4344 4242 4041 3e3f 3d3e     HHGFEEDCBBA@?>>=
   b8284:	3b3c 393a 3838 3637 3435 3233 3031 2e2f     <;:98876543210/.
   b8294:	2c2d 2a2b 2829 2627 2425 2223 1f21 1d1e     -,+*)('&%$#"!...
   b82a4:	1b1c 191a 1617 1415 1113 0f10 0c0e 0a0b     ................
   b82b4:	0709 0506 0203 0001                         ........

000b82bc <_ZTVN5spark13EthernetClassE>:
	...
   b82c4:	57ef 000b 57e5 000b 57db 000b 57d1 000b     .W...W...W...W..
   b82d4:	57c5 000b 57b9 000b 6c21 000b 6c29 000b     .W...W..!l..)l..
   b82e4:	57ad 000b 57a5 000b 579b 000b 5791 000b     .W...W...W...W..
   b82f4:	6c59 000b 7061 0070 005a 2b25 3330 3a64     Yl..app.Z.%+03d:
   b8304:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   b8314:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   b8324:	0000 0000                                   ....

000b8328 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8330:	6261 000b 6267 000b 62a5 000b 6275 000b     ab..gb...b..ub..
   b8340:	6263 000b                                   cb..

000b8344 <_ZTV9IPAddress>:
	...
   b834c:	67a1 000b 6791 000b 6793 000b               .g...g...g..

000b8358 <_ZTV9USBSerial>:
	...
   b8360:	6887 000b 68ef 000b 68c5 000b 5d0d 000b     .h...h...h...]..
   b8370:	68b7 000b 6889 000b 6899 000b 68e9 000b     .h...h...h...h..
   b8380:	68a9 000b 6881 000b                         .h...h..

000b8388 <_ZTV11USARTSerial>:
	...
   b8390:	6989 000b 69f5 000b 69cd 000b 5d0d 000b     .i...i...i...]..
   b83a0:	699d 000b 69b9 000b 69ab 000b 69c7 000b     .i...i...i...i..
   b83b0:	698b 000b 698f 000b                         .i...i..

000b83b8 <_ZTV7TwoWire>:
	...
   b83c0:	6a55 000b 6a9f 000b 6a77 000b 6a57 000b     Uj...j..wj..Wj..
   b83d0:	6a7f 000b 6a87 000b 6a8f 000b 6a97 000b     .j...j...j...j..

000b83e0 <_ZTVN5spark9WiFiClassE>:
	...
   b83e8:	6bc1 000b 6bb7 000b 6bad 000b 6b63 000b     .k...k...k..ck..
   b83f8:	6ba1 000b 6b95 000b 6c21 000b 6c29 000b     .k...k..!l..)l..
   b8408:	6b89 000b 6b81 000b 6b77 000b 6b6d 000b     .k...k..wk..mk..
   b8418:	6c59 000b                                   Yl..

000b841c <_ZTVN5spark12NetworkClassE>:
	...
   b8424:	6be1 000b 6beb 000b 6bf5 000b 6bff 000b     .k...k...k...k..
   b8434:	6c09 000b 6c15 000b 6c21 000b 6c29 000b     .l...l..!l..)l..
   b8444:	6c31 000b 6c3d 000b 6c45 000b 6c4f 000b     1l..=l..El..Ol..
   b8454:	6c59 000b                                   Yl..

000b8458 <_ZSt7nothrow>:
   b8458:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   b8468:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000b8479 <day_name.1>:
   b8479:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   b8489:	6972 6153                                    riSat

000b848e <mon_name.0>:
   b848e:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   b849e:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   b84ae:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   b84be:	7320 6375 6563 6465 6465 2f00 6e6d 2f74      succeeded./mnt/
   b84ce:	6f77 6b72 7073 6361 2f65 6f77 6b72 7073     workspace/worksp
   b84de:	6361 2f65 4347 2d43 3031 702d 7069 6c65     ace/GCC-10-pipel
   b84ee:	6e69 2f65 656a 6b6e 6e69 2d73 4347 2d43     ine/jenkins-GCC-
   b84fe:	3031 702d 7069 6c65 6e69 2d65 3834 325f     10-pipeline-48_2
   b850e:	3230 3130 3231 5f34 3631 3630 3831 3630     0201124_16061806
   b851e:	3134 732f 6372 6e2f 7765 696c 2f62 656e     41/src/newlib/ne
   b852e:	6c77 6269 6c2f 6269 2f63 7473 6c64 6269     wlib/libc/stdlib
   b853e:	722f 6e61 2e64 0063                         /rand.c.

000b8546 <_ctype_>:
   b8546:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b8556:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b8566:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b8576:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b8586:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b8596:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b85a6:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b85b6:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b85c6:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b8647 <link_const_variable_data_end>:
	...

000b8648 <link_constructors_location>:
   b8648:	000b498d 	.word	0x000b498d
   b864c:	000b57f9 	.word	0x000b57f9
   b8650:	000b585d 	.word	0x000b585d
   b8654:	000b5cfd 	.word	0x000b5cfd
   b8658:	000b5dcd 	.word	0x000b5dcd
   b865c:	000b6101 	.word	0x000b6101
   b8660:	000b611d 	.word	0x000b611d
   b8664:	000b6bcd 	.word	0x000b6bcd
   b8668:	000b6d31 	.word	0x000b6d31

000b866c <link_constructors_end>:
   b866c:	00000000 	.word	0x00000000
