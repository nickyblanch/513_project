
c:/Users/nicky/OneDrive/Documents/GitHub/513_project/Particle/PW_Project/target/4.0.1/argon/PW_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003ef4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7f10  000b7f10  00007f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  000b7f34  000b7f34  00007f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .backup       00000004  2003f400  000b7f3c  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  2003e0f4  000b7f40  0001e0f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000688  2003e168  2003e168  0002e168  2**3
                  ALLOC
  8 .module_info_suffix 00000028  000b7fb4  000b7fb4  00027fb4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b7fdc  000b7fdc  00027fdc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00112993  00000000  00000000  00027fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00011ea5  00000000  00000000  0013a973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00038b26  00000000  00000000  0014c818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002a38  00000000  00000000  0018533e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000a058  00000000  00000000  00187d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00038e8b  00000000  00000000  00191dce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003cc70  00000000  00000000  001cac59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013767f  00000000  00000000  002078c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000787c  00000000  00000000  0033ef48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f003 fae1 	bl	b75f4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f003 fae9 	bl	b7610 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e0f4 	.word	0x2003e0f4
   b4048:	000b7f40 	.word	0x000b7f40
   b404c:	2003e168 	.word	0x2003e168
   b4050:	2003e168 	.word	0x2003e168
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 fe1b 	bl	b5c98 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b7ee0 	.word	0x000b7ee0
   b407c:	000b7f04 	.word	0x000b7f04

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b8f6 	b.w	b4270 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f94d 	bl	b4324 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 bdbb 	b.w	b5c08 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f001 b993 	b.w	b53bc <malloc>

000b4096 <_Znaj>:
   b4096:	f001 b991 	b.w	b53bc <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f001 b997 	b.w	b53cc <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr

000b40ae <_Z14readingHandlerPKcS0_>:

    }
  }
}

void readingHandler(const char *event, const char *data) {
   b40ae:	b507      	push	{r0, r1, r2, lr}
   b40b0:	9101      	str	r1, [sp, #4]
  // Handle the integration response
  Serial.println(data);
   b40b2:	f002 f991 	bl	b63d8 <_Z16_fetch_usbserialv>
   b40b6:	9901      	ldr	r1, [sp, #4]
}
   b40b8:	b003      	add	sp, #12
   b40ba:	f85d eb04 	ldr.w	lr, [sp], #4
  Serial.println(data);
   b40be:	f001 bc92 	b.w	b59e6 <_ZN5Print7printlnEPKc>
	...

000b40c4 <_Z13return_stringhhPKc>:

String return_string(uint8_t start, uint8_t end, const char* input) {
   b40c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t index = start + 1;
   b40c6:	1c4c      	adds	r4, r1, #1
String return_string(uint8_t start, uint8_t end, const char* input) {
   b40c8:	b085      	sub	sp, #20
  String temp = "";
   b40ca:	4910      	ldr	r1, [pc, #64]	; (b410c <_Z13return_stringhhPKc+0x48>)
String return_string(uint8_t start, uint8_t end, const char* input) {
   b40cc:	461d      	mov	r5, r3
   b40ce:	4606      	mov	r6, r0
   b40d0:	4617      	mov	r7, r2
  String temp = "";
   b40d2:	f001 fb46 	bl	b5762 <_ZN6StringC1EPK19__FlashStringHelper>
  uint8_t index = start + 1;
   b40d6:	b2e4      	uxtb	r4, r4
  String temp = "";
   b40d8:	4425      	add	r5, r4
  while (index < end) {
   b40da:	42bc      	cmp	r4, r7
   b40dc:	d212      	bcs.n	b4104 <_Z13return_stringhhPKc+0x40>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b40de:	4631      	mov	r1, r6
   b40e0:	4668      	mov	r0, sp
   b40e2:	f001 fb61 	bl	b57a8 <_ZN6StringC1ERKS_>
    temp = temp + input[index];
   b40e6:	f815 1b01 	ldrb.w	r1, [r5], #1
   b40ea:	4668      	mov	r0, sp
   b40ec:	f001 fc12 	bl	b5914 <_ZplRK15StringSumHelperc>
   b40f0:	4601      	mov	r1, r0
   b40f2:	4630      	mov	r0, r6
   b40f4:	f001 fb49 	bl	b578a <_ZN6StringaSERKS_>
    index++;
   b40f8:	3401      	adds	r4, #1
class StringSumHelper : public String
   b40fa:	4668      	mov	r0, sp
   b40fc:	f001 fae6 	bl	b56cc <_ZN6StringD1Ev>
   b4100:	b2e4      	uxtb	r4, r4
  while (index < end) {
   b4102:	e7ea      	b.n	b40da <_Z13return_stringhhPKc+0x16>
  }

  return temp;
}
   b4104:	4630      	mov	r0, r6
   b4106:	b005      	add	sp, #20
   b4108:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b410a:	bf00      	nop
   b410c:	000b7afe 	.word	0x000b7afe

000b4110 <_Z13updateHandlerPKcS0_>:
void updateHandler(const char *event, const char *data) {
   b4110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4114:	460c      	mov	r4, r1
   b4116:	b089      	sub	sp, #36	; 0x24
  Serial.println(data);
   b4118:	f002 f95e 	bl	b63d8 <_Z16_fetch_usbserialv>
   b411c:	4621      	mov	r1, r4
   b411e:	f001 fc62 	bl	b59e6 <_ZN5Print7printlnEPKc>
  if (data) {
   b4122:	2c00      	cmp	r4, #0
   b4124:	f000 8095 	beq.w	b4252 <_Z13updateHandlerPKcS0_+0x142>
   b4128:	2600      	movs	r6, #0
        constraint_time_upper = return_string(starting_location, i, data).toInt();
   b412a:	f8df 8138 	ldr.w	r8, [pc, #312]	; b4264 <_Z13updateHandlerPKcS0_+0x154>
	StringSumHelper(const char *p) : String(p) {}
   b412e:	f8df a138 	ldr.w	sl, [pc, #312]	; b4268 <_Z13updateHandlerPKcS0_+0x158>
          constraint_time_lower = return_string(starting_location, ending_location, data).toInt();
   b4132:	f8df 9138 	ldr.w	r9, [pc, #312]	; b426c <_Z13updateHandlerPKcS0_+0x15c>
    uint8_t starting_location = 0;
   b4136:	4637      	mov	r7, r6
    uint8_t data_part = 0;
   b4138:	4635      	mov	r5, r6
   b413a:	b2f2      	uxtb	r2, r6
    while (*(data + i) != '\0') {
   b413c:	5ca3      	ldrb	r3, [r4, r2]
   b413e:	2b00      	cmp	r3, #0
   b4140:	f000 8087 	beq.w	b4252 <_Z13updateHandlerPKcS0_+0x142>
      if (*(data + i) == ':') {
   b4144:	2b3a      	cmp	r3, #58	; 0x3a
   b4146:	f000 8082 	beq.w	b424e <_Z13updateHandlerPKcS0_+0x13e>
      else if (*(data+i) == ',') {
   b414a:	2b2c      	cmp	r3, #44	; 0x2c
   b414c:	d150      	bne.n	b41f0 <_Z13updateHandlerPKcS0_+0xe0>
        if (data_part == 0) {
   b414e:	bb75      	cbnz	r5, b41ae <_Z13updateHandlerPKcS0_+0x9e>
          delay_time = return_string(starting_location, ending_location, data).toInt() * 60 * 1000;
   b4150:	4639      	mov	r1, r7
   b4152:	4623      	mov	r3, r4
   b4154:	a804      	add	r0, sp, #16
   b4156:	f7ff ffb5 	bl	b40c4 <_Z13return_stringhhPKc>
   b415a:	a804      	add	r0, sp, #16
   b415c:	f001 fbe4 	bl	b5928 <_ZNK6String5toIntEv>
   b4160:	4b3d      	ldr	r3, [pc, #244]	; (b4258 <_Z13updateHandlerPKcS0_+0x148>)
   b4162:	f64e 2260 	movw	r2, #60000	; 0xea60
   b4166:	4350      	muls	r0, r2
   b4168:	6018      	str	r0, [r3, #0]
   b416a:	a804      	add	r0, sp, #16
   b416c:	f001 faae 	bl	b56cc <_ZN6StringD1Ev>
          Serial.println("Updated delay time to: " + String(delay_time));
   b4170:	f002 f932 	bl	b63d8 <_Z16_fetch_usbserialv>
   b4174:	4939      	ldr	r1, [pc, #228]	; (b425c <_Z13updateHandlerPKcS0_+0x14c>)
   b4176:	4683      	mov	fp, r0
   b4178:	4668      	mov	r0, sp
   b417a:	f001 faf2 	bl	b5762 <_ZN6StringC1EPK19__FlashStringHelper>
   b417e:	4b36      	ldr	r3, [pc, #216]	; (b4258 <_Z13updateHandlerPKcS0_+0x148>)
   b4180:	220a      	movs	r2, #10
   b4182:	6819      	ldr	r1, [r3, #0]
   b4184:	a804      	add	r0, sp, #16
   b4186:	f001 fb52 	bl	b582e <_ZN6StringC1Emh>
          Serial.println("Updated start range to: " + String(constraint_time_lower));
   b418a:	a904      	add	r1, sp, #16
   b418c:	4668      	mov	r0, sp
   b418e:	f001 fba0 	bl	b58d2 <_ZplRK15StringSumHelperRK6String>
   b4192:	6801      	ldr	r1, [r0, #0]
   b4194:	4658      	mov	r0, fp
   b4196:	f001 fc26 	bl	b59e6 <_ZN5Print7printlnEPKc>
   b419a:	a804      	add	r0, sp, #16
   b419c:	f001 fa96 	bl	b56cc <_ZN6StringD1Ev>
class StringSumHelper : public String
   b41a0:	4668      	mov	r0, sp
   b41a2:	f001 fa93 	bl	b56cc <_ZN6StringD1Ev>
        data_part = data_part + 1;
   b41a6:	3501      	adds	r5, #1
   b41a8:	b2ed      	uxtb	r5, r5
      i++;
   b41aa:	3601      	adds	r6, #1
    while (*(data + i) != '\0') {
   b41ac:	e7c5      	b.n	b413a <_Z13updateHandlerPKcS0_+0x2a>
        if (data_part == 1) {
   b41ae:	2d01      	cmp	r5, #1
   b41b0:	d1f9      	bne.n	b41a6 <_Z13updateHandlerPKcS0_+0x96>
          constraint_time_lower = return_string(starting_location, ending_location, data).toInt();
   b41b2:	4623      	mov	r3, r4
   b41b4:	4639      	mov	r1, r7
   b41b6:	a804      	add	r0, sp, #16
   b41b8:	f7ff ff84 	bl	b40c4 <_Z13return_stringhhPKc>
   b41bc:	a804      	add	r0, sp, #16
   b41be:	f001 fbb3 	bl	b5928 <_ZNK6String5toIntEv>
   b41c2:	ee07 0a90 	vmov	s15, r0
   b41c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b41ca:	a804      	add	r0, sp, #16
   b41cc:	edc9 7a00 	vstr	s15, [r9]
   b41d0:	f001 fa7c 	bl	b56cc <_ZN6StringD1Ev>
          Serial.println("Updated start range to: " + String(constraint_time_lower));
   b41d4:	f002 f900 	bl	b63d8 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b41d8:	4921      	ldr	r1, [pc, #132]	; (b4260 <_Z13updateHandlerPKcS0_+0x150>)
   b41da:	4683      	mov	fp, r0
   b41dc:	4668      	mov	r0, sp
   b41de:	f001 fac0 	bl	b5762 <_ZN6StringC1EPK19__FlashStringHelper>
   b41e2:	ed99 0a00 	vldr	s0, [r9]
   b41e6:	2106      	movs	r1, #6
   b41e8:	a804      	add	r0, sp, #16
   b41ea:	f001 fb34 	bl	b5856 <_ZN6StringC1Efi>
   b41ee:	e7cc      	b.n	b418a <_Z13updateHandlerPKcS0_+0x7a>
      else if (*(data+i) == '}') {
   b41f0:	2b7d      	cmp	r3, #125	; 0x7d
   b41f2:	d1da      	bne.n	b41aa <_Z13updateHandlerPKcS0_+0x9a>
        constraint_time_upper = return_string(starting_location, i, data).toInt();
   b41f4:	4623      	mov	r3, r4
   b41f6:	4639      	mov	r1, r7
   b41f8:	a804      	add	r0, sp, #16
   b41fa:	f7ff ff63 	bl	b40c4 <_Z13return_stringhhPKc>
   b41fe:	a804      	add	r0, sp, #16
   b4200:	f001 fb92 	bl	b5928 <_ZNK6String5toIntEv>
   b4204:	ee07 0a90 	vmov	s15, r0
   b4208:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b420c:	a804      	add	r0, sp, #16
   b420e:	edc8 7a00 	vstr	s15, [r8]
   b4212:	f001 fa5b 	bl	b56cc <_ZN6StringD1Ev>
        Serial.println("Updated range end to: " + String(constraint_time_upper));
   b4216:	f002 f8df 	bl	b63d8 <_Z16_fetch_usbserialv>
   b421a:	4651      	mov	r1, sl
   b421c:	4683      	mov	fp, r0
   b421e:	4668      	mov	r0, sp
   b4220:	f001 fa9f 	bl	b5762 <_ZN6StringC1EPK19__FlashStringHelper>
   b4224:	ed98 0a00 	vldr	s0, [r8]
   b4228:	2106      	movs	r1, #6
   b422a:	a804      	add	r0, sp, #16
   b422c:	f001 fb13 	bl	b5856 <_ZN6StringC1Efi>
   b4230:	a904      	add	r1, sp, #16
   b4232:	4668      	mov	r0, sp
   b4234:	f001 fb4d 	bl	b58d2 <_ZplRK15StringSumHelperRK6String>
   b4238:	6801      	ldr	r1, [r0, #0]
   b423a:	4658      	mov	r0, fp
   b423c:	f001 fbd3 	bl	b59e6 <_ZN5Print7printlnEPKc>
   b4240:	a804      	add	r0, sp, #16
   b4242:	f001 fa43 	bl	b56cc <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4246:	4668      	mov	r0, sp
   b4248:	f001 fa40 	bl	b56cc <_ZN6StringD1Ev>
   b424c:	e7ad      	b.n	b41aa <_Z13updateHandlerPKcS0_+0x9a>
        starting_location = i;
   b424e:	4617      	mov	r7, r2
   b4250:	e7ab      	b.n	b41aa <_Z13updateHandlerPKcS0_+0x9a>
}
   b4252:	b009      	add	sp, #36	; 0x24
   b4254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4258:	2003e0f8 	.word	0x2003e0f8
   b425c:	000b78d0 	.word	0x000b78d0
   b4260:	000b78e8 	.word	0x000b78e8
   b4264:	2003e0f4 	.word	0x2003e0f4
   b4268:	000b7901 	.word	0x000b7901
   b426c:	2003e170 	.word	0x2003e170

000b4270 <setup>:

// Setup Function
void setup() {
   b4270:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  Serial.begin(9600);
   b4272:	f002 f8b1 	bl	b63d8 <_Z16_fetch_usbserialv>
  Serial.println("Entering setup function.");
  max30105.begin();
   b4276:	4c19      	ldr	r4, [pc, #100]	; (b42dc <setup+0x6c>)
  Serial.begin(9600);
   b4278:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b427c:	f002 f8a0 	bl	b63c0 <_ZN9USBSerial5beginEl>
  Serial.println("Entering setup function.");
   b4280:	f002 f8aa 	bl	b63d8 <_Z16_fetch_usbserialv>
   b4284:	4916      	ldr	r1, [pc, #88]	; (b42e0 <setup+0x70>)
   b4286:	f001 fbae 	bl	b59e6 <_ZN5Print7printlnEPKc>
  max30105.begin();
   b428a:	4620      	mov	r0, r4
   b428c:	f000 fb4c 	bl	b4928 <_ZN8MAX301055beginEv>
  max30105.setup(60, 4, 2, 100, 411, 4096);
   b4290:	f240 139b 	movw	r3, #411	; 0x19b
   b4294:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   b4298:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b429c:	2364      	movs	r3, #100	; 0x64
   b429e:	2204      	movs	r2, #4
   b42a0:	9300      	str	r3, [sp, #0]
   b42a2:	213c      	movs	r1, #60	; 0x3c
   b42a4:	2302      	movs	r3, #2
   b42a6:	4620      	mov	r0, r4
   b42a8:	f000 fbf8 	bl	b4a9c <_ZN8MAX301055setupEhhhiii>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b42ac:	2400      	movs	r4, #0
  Serial.println("Setup finished!");
   b42ae:	f002 f893 	bl	b63d8 <_Z16_fetch_usbserialv>
   b42b2:	490c      	ldr	r1, [pc, #48]	; (b42e4 <setup+0x74>)
   b42b4:	f001 fb97 	bl	b59e6 <_ZN5Print7printlnEPKc>
   b42b8:	4623      	mov	r3, r4
   b42ba:	4622      	mov	r2, r4
   b42bc:	e9cd 4400 	strd	r4, r4, [sp]
   b42c0:	4909      	ldr	r1, [pc, #36]	; (b42e8 <setup+0x78>)
   b42c2:	480a      	ldr	r0, [pc, #40]	; (b42ec <setup+0x7c>)
   b42c4:	f001 f862 	bl	b538c <spark_subscribe>
   b42c8:	e9cd 4400 	strd	r4, r4, [sp]
   b42cc:	4908      	ldr	r1, [pc, #32]	; (b42f0 <setup+0x80>)
   b42ce:	4809      	ldr	r0, [pc, #36]	; (b42f4 <setup+0x84>)
   b42d0:	4623      	mov	r3, r4
   b42d2:	4622      	mov	r2, r4
   b42d4:	f001 f85a 	bl	b538c <spark_subscribe>

  // Subscribe to the integration response event
  Particle.subscribe("hook-response/Update", updateHandler, MY_DEVICES);
  Particle.subscribe("hook-response/Reading", readingHandler, MY_DEVICES);

}
   b42d8:	b004      	add	sp, #16
   b42da:	bd10      	pop	{r4, pc}
   b42dc:	2003e254 	.word	0x2003e254
   b42e0:	000b7918 	.word	0x000b7918
   b42e4:	000b7931 	.word	0x000b7931
   b42e8:	000b4111 	.word	0x000b4111
   b42ec:	000b7941 	.word	0x000b7941
   b42f0:	000b40af 	.word	0x000b40af
   b42f4:	000b7956 	.word	0x000b7956

000b42f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b42f8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b42fa:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b42fc:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b42fe:	b17c      	cbz	r4, b4320 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4300:	6863      	ldr	r3, [r4, #4]
   b4302:	3b01      	subs	r3, #1
   b4304:	6063      	str	r3, [r4, #4]
   b4306:	b95b      	cbnz	r3, b4320 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4308:	6823      	ldr	r3, [r4, #0]
   b430a:	4620      	mov	r0, r4
   b430c:	689b      	ldr	r3, [r3, #8]
   b430e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4310:	68a3      	ldr	r3, [r4, #8]
   b4312:	3b01      	subs	r3, #1
   b4314:	60a3      	str	r3, [r4, #8]
   b4316:	b91b      	cbnz	r3, b4320 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4318:	6823      	ldr	r3, [r4, #0]
   b431a:	4620      	mov	r0, r4
   b431c:	68db      	ldr	r3, [r3, #12]
   b431e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4320:	4628      	mov	r0, r5
   b4322:	bd38      	pop	{r3, r4, r5, pc}

000b4324 <loop>:

// Loop Function
void loop() {
   b4324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  // If we are waiting to take a measurement
  if (state == 0) {
   b4328:	4cba      	ldr	r4, [pc, #744]	; (b4614 <loop+0x2f0>)
void loop() {
   b432a:	ed2d 8b02 	vpush	{d8}
  if (state == 0) {
   b432e:	7823      	ldrb	r3, [r4, #0]
void loop() {
   b4330:	b098      	sub	sp, #96	; 0x60
  if (state == 0) {
   b4332:	2b00      	cmp	r3, #0
   b4334:	d14c      	bne.n	b43d0 <loop+0xac>

    // Update current time
    current_time = float(Time.hour()) + float(Time.minute()) / 60.00;
   b4336:	f001 fbf7 	bl	b5b28 <_ZN9TimeClass4hourEv>
   b433a:	ee08 0a10 	vmov	s16, r0
   b433e:	f001 fbff 	bl	b5b40 <_ZN9TimeClass6minuteEv>
   b4342:	ee07 0a90 	vmov	s15, r0
   b4346:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b434a:	ee17 0a90 	vmov	r0, s15
   b434e:	f002 fc31 	bl	b6bb4 <__aeabi_f2d>
   b4352:	4bb1      	ldr	r3, [pc, #708]	; (b4618 <loop+0x2f4>)
   b4354:	2200      	movs	r2, #0
   b4356:	f002 fdaf 	bl	b6eb8 <__aeabi_ddiv>
   b435a:	eef8 7ac8 	vcvt.f32.s32	s15, s16
   b435e:	4606      	mov	r6, r0
   b4360:	ee17 0a90 	vmov	r0, s15
   b4364:	460f      	mov	r7, r1
   b4366:	f002 fc25 	bl	b6bb4 <__aeabi_f2d>
   b436a:	460b      	mov	r3, r1
   b436c:	4602      	mov	r2, r0
   b436e:	4639      	mov	r1, r7
   b4370:	4630      	mov	r0, r6
   b4372:	f002 fac1 	bl	b68f8 <__adddf3>
   b4376:	f002 ff2f 	bl	b71d8 <__aeabi_d2f>

    // If we are in the acceptable time frame
    if (current_time > constraint_time_lower && current_time < constraint_time_upper) {
   b437a:	4ba8      	ldr	r3, [pc, #672]	; (b461c <loop+0x2f8>)
    current_time = float(Time.hour()) + float(Time.minute()) / 60.00;
   b437c:	4ea8      	ldr	r6, [pc, #672]	; (b4620 <loop+0x2fc>)
    if (current_time > constraint_time_lower && current_time < constraint_time_upper) {
   b437e:	ed93 7a00 	vldr	s14, [r3]
    current_time = float(Time.hour()) + float(Time.minute()) / 60.00;
   b4382:	6030      	str	r0, [r6, #0]
   b4384:	ee07 0a90 	vmov	s15, r0
    if (current_time > constraint_time_lower && current_time < constraint_time_upper) {
   b4388:	eef4 7ac7 	vcmpe.f32	s15, s14
   b438c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4390:	dd6d      	ble.n	b446e <loop+0x14a>
   b4392:	4ba4      	ldr	r3, [pc, #656]	; (b4624 <loop+0x300>)
   b4394:	ed93 7a00 	vldr	s14, [r3]
   b4398:	eef4 7ac7 	vcmpe.f32	s15, s14
   b439c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b43a0:	d565      	bpl.n	b446e <loop+0x14a>

      // If we've waited enough between measurements
      if (millis() - previous_request >= delay_time) {
   b43a2:	4da1      	ldr	r5, [pc, #644]	; (b4628 <loop+0x304>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b43a4:	f000 fe26 	bl	b4ff4 <HAL_Timer_Get_Milli_Seconds>
   b43a8:	682b      	ldr	r3, [r5, #0]
   b43aa:	1ac0      	subs	r0, r0, r3
   b43ac:	4b9f      	ldr	r3, [pc, #636]	; (b462c <loop+0x308>)
   b43ae:	681b      	ldr	r3, [r3, #0]
   b43b0:	4298      	cmp	r0, r3
   b43b2:	d342      	bcc.n	b443a <loop+0x116>

        // Transition to measurement state
        state = 1;
   b43b4:	2301      	movs	r3, #1
   b43b6:	7023      	strb	r3, [r4, #0]
   b43b8:	f000 fe1c 	bl	b4ff4 <HAL_Timer_Get_Milli_Seconds>
        previous_request = millis();
   b43bc:	6028      	str	r0, [r5, #0]
        Serial.println("Conditions met, preparing to take a measurement!");
   b43be:	f002 f80b 	bl	b63d8 <_Z16_fetch_usbserialv>
   b43c2:	499b      	ldr	r1, [pc, #620]	; (b4630 <loop+0x30c>)
   b43c4:	f001 fb0f 	bl	b59e6 <_ZN5Print7printlnEPKc>
      Serial.println("Waiting for a measurement, but it's not in the acceptable time frame. Current time: " + String(current_time));
      // Check for updates from Particle cloud
      Particle.publish("Update", String("dummy_data"), PRIVATE);
    }

    delay(10000);
   b43c8:	f242 7010 	movw	r0, #10000	; 0x2710
   b43cc:	f001 fbce 	bl	b5b6c <delay>
  }

  // If we are requesting a measurement
  if (state == 1) {
   b43d0:	7825      	ldrb	r5, [r4, #0]
   b43d2:	2d01      	cmp	r5, #1
   b43d4:	d167      	bne.n	b44a6 <loop+0x182>

    Serial.println("Requesting a measurement - place finger on sensor.");
   b43d6:	f001 ffff 	bl	b63d8 <_Z16_fetch_usbserialv>
   b43da:	4996      	ldr	r1, [pc, #600]	; (b4634 <loop+0x310>)
   b43dc:	f001 fb03 	bl	b59e6 <_ZN5Print7printlnEPKc>

    // Enable LED
    RGB.control(true);
   b43e0:	4628      	mov	r0, r5
   b43e2:	f001 fbc6 	bl	b5b72 <_ZN8RGBClass7controlEb>
    RGB.color(0, 0, 255);
   b43e6:	2100      	movs	r1, #0
   b43e8:	22ff      	movs	r2, #255	; 0xff
   b43ea:	4608      	mov	r0, r1
   b43ec:	f001 fbd1 	bl	b5b92 <_ZN8RGBClass5colorEiii>

    // If the user places their finger on the sensor
    if (1) {


      Serial.println("Finger detected on sensor."); 
   b43f0:	f001 fff2 	bl	b63d8 <_Z16_fetch_usbserialv>
   b43f4:	4990      	ldr	r1, [pc, #576]	; (b4638 <loop+0x314>)
   b43f6:	f001 faf6 	bl	b59e6 <_ZN5Print7printlnEPKc>
      // Transition to measurement state
      state = 2;
   b43fa:	2302      	movs	r3, #2
   b43fc:	7023      	strb	r3, [r4, #0]
  }

  // If we are taking a measurement:
  if (state == 2) {

    bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
   b43fe:	f8df 8290 	ldr.w	r8, [pc, #656]	; b4690 <loop+0x36c>
  
    //read the first 300 samples, and determine the signal range
    Serial.println("Entering measurement loop");
    for (byte i = 0 ; i < bufferLength ; i++) {
      while (max30105.available() == false) //do we have new data?
   b4402:	4d8e      	ldr	r5, [pc, #568]	; (b463c <loop+0x318>)
        max30105.check(); //Check the sensor for new data

        redBuffer[i] = max30105.getRed();
   b4404:	f8df a260 	ldr.w	sl, [pc, #608]	; b4668 <loop+0x344>
        irBuffer[i] = max30105.getIR();
   b4408:	f8df 9260 	ldr.w	r9, [pc, #608]	; b466c <loop+0x348>
    bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
   b440c:	2364      	movs	r3, #100	; 0x64
   b440e:	f8c8 3000 	str.w	r3, [r8]
    Serial.println("Entering measurement loop");
   b4412:	f001 ffe1 	bl	b63d8 <_Z16_fetch_usbserialv>
   b4416:	498a      	ldr	r1, [pc, #552]	; (b4640 <loop+0x31c>)
   b4418:	f001 fae5 	bl	b59e6 <_ZN5Print7printlnEPKc>
   b441c:	2600      	movs	r6, #0
    for (byte i = 0 ; i < bufferLength ; i++) {
   b441e:	f8d8 1000 	ldr.w	r1, [r8]
   b4422:	b2f7      	uxtb	r7, r6
   b4424:	428f      	cmp	r7, r1
   b4426:	da53      	bge.n	b44d0 <loop+0x1ac>
      while (max30105.available() == false) //do we have new data?
   b4428:	4628      	mov	r0, r5
   b442a:	f000 f949 	bl	b46c0 <_ZN8MAX301059availableEv>
   b442e:	2800      	cmp	r0, #0
   b4430:	d13f      	bne.n	b44b2 <loop+0x18e>
        max30105.check(); //Check the sensor for new data
   b4432:	4628      	mov	r0, r5
   b4434:	f000 f98c 	bl	b4750 <_ZN8MAX301055checkEv>
      while (max30105.available() == false) //do we have new data?
   b4438:	e7f6      	b.n	b4428 <loop+0x104>
        Serial.println("Waiting for a measurement, but it hasn't been long enough yet.");
   b443a:	f001 ffcd 	bl	b63d8 <_Z16_fetch_usbserialv>
   b443e:	4981      	ldr	r1, [pc, #516]	; (b4644 <loop+0x320>)
   b4440:	f001 fad1 	bl	b59e6 <_ZN5Print7printlnEPKc>
      Particle.publish("Update", String("dummy_data"), PRIVATE);
   b4444:	4980      	ldr	r1, [pc, #512]	; (b4648 <loop+0x324>)
   b4446:	a814      	add	r0, sp, #80	; 0x50
   b4448:	f001 f98b 	bl	b5762 <_ZN6StringC1EPK19__FlashStringHelper>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b444c:	4b7f      	ldr	r3, [pc, #508]	; (b464c <loop+0x328>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b444e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b4450:	781b      	ldrb	r3, [r3, #0]
   b4452:	497f      	ldr	r1, [pc, #508]	; (b4650 <loop+0x32c>)
   b4454:	f88d 3000 	strb.w	r3, [sp]
   b4458:	a810      	add	r0, sp, #64	; 0x40
   b445a:	233c      	movs	r3, #60	; 0x3c
   b445c:	f001 fd7a 	bl	b5f54 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4460:	a811      	add	r0, sp, #68	; 0x44
   b4462:	f7ff ff49 	bl	b42f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4466:	a814      	add	r0, sp, #80	; 0x50
   b4468:	f001 f930 	bl	b56cc <_ZN6StringD1Ev>
   b446c:	e7ac      	b.n	b43c8 <loop+0xa4>
      Serial.println("Waiting for a measurement, but it's not in the acceptable time frame. Current time: " + String(current_time));
   b446e:	f001 ffb3 	bl	b63d8 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4472:	4978      	ldr	r1, [pc, #480]	; (b4654 <loop+0x330>)
   b4474:	4605      	mov	r5, r0
   b4476:	a814      	add	r0, sp, #80	; 0x50
   b4478:	f001 f973 	bl	b5762 <_ZN6StringC1EPK19__FlashStringHelper>
   b447c:	ed96 0a00 	vldr	s0, [r6]
   b4480:	2106      	movs	r1, #6
   b4482:	a810      	add	r0, sp, #64	; 0x40
   b4484:	f001 f9e7 	bl	b5856 <_ZN6StringC1Efi>
   b4488:	a910      	add	r1, sp, #64	; 0x40
   b448a:	a814      	add	r0, sp, #80	; 0x50
   b448c:	f001 fa21 	bl	b58d2 <_ZplRK15StringSumHelperRK6String>
   b4490:	6801      	ldr	r1, [r0, #0]
   b4492:	4628      	mov	r0, r5
   b4494:	f001 faa7 	bl	b59e6 <_ZN5Print7printlnEPKc>
   b4498:	a810      	add	r0, sp, #64	; 0x40
   b449a:	f001 f917 	bl	b56cc <_ZN6StringD1Ev>
class StringSumHelper : public String
   b449e:	a814      	add	r0, sp, #80	; 0x50
   b44a0:	f001 f914 	bl	b56cc <_ZN6StringD1Ev>
   b44a4:	e7ce      	b.n	b4444 <loop+0x120>
  if (state == 2) {
   b44a6:	2d02      	cmp	r5, #2
   b44a8:	d0a9      	beq.n	b43fe <loop+0xda>
    }

  }

  // If we are posting data to the server
  if (state == 3) {
   b44aa:	2d03      	cmp	r5, #3
   b44ac:	f040 80ad 	bne.w	b460a <loop+0x2e6>
   b44b0:	e02a      	b.n	b4508 <loop+0x1e4>
        redBuffer[i] = max30105.getRed();
   b44b2:	4628      	mov	r0, r5
   b44b4:	f000 fa10 	bl	b48d8 <_ZN8MAX301056getRedEv>
   b44b8:	f82a 0017 	strh.w	r0, [sl, r7, lsl #1]
        irBuffer[i] = max30105.getIR();
   b44bc:	4628      	mov	r0, r5
   b44be:	f000 fa19 	bl	b48f4 <_ZN8MAX301055getIREv>
   b44c2:	f829 0017 	strh.w	r0, [r9, r7, lsl #1]
        max30105.nextSample(); //We're finished with this sample so move to next sample
   b44c6:	4628      	mov	r0, r5
   b44c8:	f000 f904 	bl	b46d4 <_ZN8MAX3010510nextSampleEv>
    for (byte i = 0 ; i < bufferLength ; i++) {
   b44cc:	3601      	adds	r6, #1
   b44ce:	e7a6      	b.n	b441e <loop+0xfa>
    maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
   b44d0:	4f61      	ldr	r7, [pc, #388]	; (b4658 <loop+0x334>)
   b44d2:	4b62      	ldr	r3, [pc, #392]	; (b465c <loop+0x338>)
   b44d4:	9302      	str	r3, [sp, #8]
   b44d6:	4e62      	ldr	r6, [pc, #392]	; (b4660 <loop+0x33c>)
   b44d8:	4b62      	ldr	r3, [pc, #392]	; (b4664 <loop+0x340>)
   b44da:	9300      	str	r3, [sp, #0]
   b44dc:	4a62      	ldr	r2, [pc, #392]	; (b4668 <loop+0x344>)
   b44de:	4863      	ldr	r0, [pc, #396]	; (b466c <loop+0x348>)
   b44e0:	9601      	str	r6, [sp, #4]
   b44e2:	463b      	mov	r3, r7
   b44e4:	f000 fc38 	bl	b4d58 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_>
    if ((50 < spo2) && (spo2 < 101) && (30 < heartRate) && (heartRate < 300)) {
   b44e8:	683b      	ldr	r3, [r7, #0]
   b44ea:	3b33      	subs	r3, #51	; 0x33
   b44ec:	2b31      	cmp	r3, #49	; 0x31
   b44ee:	d860      	bhi.n	b45b2 <loop+0x28e>
   b44f0:	6833      	ldr	r3, [r6, #0]
   b44f2:	3b1f      	subs	r3, #31
   b44f4:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
   b44f8:	d85b      	bhi.n	b45b2 <loop+0x28e>
      Serial.println("Valid measurement, sending data.");
   b44fa:	f001 ff6d 	bl	b63d8 <_Z16_fetch_usbserialv>
   b44fe:	495c      	ldr	r1, [pc, #368]	; (b4670 <loop+0x34c>)
   b4500:	f001 fa71 	bl	b59e6 <_ZN5Print7printlnEPKc>
      state = 3;
   b4504:	2303      	movs	r3, #3
   b4506:	7023      	strb	r3, [r4, #0]

      String send_data = String("{ \"beat\": \"") + String(heartRate) + "\"" + ", \"ox\": " + String(spo2) + "}";
   b4508:	495a      	ldr	r1, [pc, #360]	; (b4674 <loop+0x350>)
   b450a:	a808      	add	r0, sp, #32
   b450c:	f001 f929 	bl	b5762 <_ZN6StringC1EPK19__FlashStringHelper>
	StringSumHelper(const String &s) : String(s) {}
   b4510:	a908      	add	r1, sp, #32
   b4512:	a810      	add	r0, sp, #64	; 0x40
   b4514:	f001 f948 	bl	b57a8 <_ZN6StringC1ERKS_>
   b4518:	4b51      	ldr	r3, [pc, #324]	; (b4660 <loop+0x33c>)
   b451a:	220a      	movs	r2, #10
   b451c:	6819      	ldr	r1, [r3, #0]
   b451e:	a80c      	add	r0, sp, #48	; 0x30
   b4520:	f001 f972 	bl	b5808 <_ZN6StringC1Elh>
   b4524:	a90c      	add	r1, sp, #48	; 0x30
   b4526:	a810      	add	r0, sp, #64	; 0x40
   b4528:	f001 f9d3 	bl	b58d2 <_ZplRK15StringSumHelperRK6String>
   b452c:	4952      	ldr	r1, [pc, #328]	; (b4678 <loop+0x354>)
   b452e:	f001 f9dc 	bl	b58ea <_ZplRK15StringSumHelperPKc>
   b4532:	4952      	ldr	r1, [pc, #328]	; (b467c <loop+0x358>)
   b4534:	f001 f9d9 	bl	b58ea <_ZplRK15StringSumHelperPKc>
   b4538:	4b47      	ldr	r3, [pc, #284]	; (b4658 <loop+0x334>)
   b453a:	220a      	movs	r2, #10
   b453c:	6819      	ldr	r1, [r3, #0]
   b453e:	4605      	mov	r5, r0
   b4540:	a814      	add	r0, sp, #80	; 0x50
   b4542:	f001 f961 	bl	b5808 <_ZN6StringC1Elh>
   b4546:	a914      	add	r1, sp, #80	; 0x50
   b4548:	4628      	mov	r0, r5
   b454a:	f001 f9c2 	bl	b58d2 <_ZplRK15StringSumHelperRK6String>
   b454e:	494c      	ldr	r1, [pc, #304]	; (b4680 <loop+0x35c>)
   b4550:	f001 f9cb 	bl	b58ea <_ZplRK15StringSumHelperPKc>
   b4554:	4601      	mov	r1, r0
   b4556:	a804      	add	r0, sp, #16
   b4558:	f001 f926 	bl	b57a8 <_ZN6StringC1ERKS_>
   b455c:	a814      	add	r0, sp, #80	; 0x50
   b455e:	f001 f8b5 	bl	b56cc <_ZN6StringD1Ev>
   b4562:	a80c      	add	r0, sp, #48	; 0x30
   b4564:	f001 f8b2 	bl	b56cc <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4568:	a810      	add	r0, sp, #64	; 0x40
   b456a:	f001 f8af 	bl	b56cc <_ZN6StringD1Ev>
   b456e:	a808      	add	r0, sp, #32
   b4570:	f001 f8ac 	bl	b56cc <_ZN6StringD1Ev>
      Particle.publish("Reading", String(send_data), PRIVATE);
   b4574:	a904      	add	r1, sp, #16
   b4576:	a814      	add	r0, sp, #80	; 0x50
   b4578:	f001 f916 	bl	b57a8 <_ZN6StringC1ERKS_>
   b457c:	4b33      	ldr	r3, [pc, #204]	; (b464c <loop+0x328>)
   b457e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b4580:	781b      	ldrb	r3, [r3, #0]
   b4582:	4940      	ldr	r1, [pc, #256]	; (b4684 <loop+0x360>)
   b4584:	f88d 3000 	strb.w	r3, [sp]
   b4588:	a810      	add	r0, sp, #64	; 0x40
   b458a:	233c      	movs	r3, #60	; 0x3c
   b458c:	f001 fce2 	bl	b5f54 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4590:	a811      	add	r0, sp, #68	; 0x44
   b4592:	f7ff feb1 	bl	b42f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4596:	a814      	add	r0, sp, #80	; 0x50
   b4598:	f001 f898 	bl	b56cc <_ZN6StringD1Ev>
      Serial.println(send_data);
   b459c:	f001 ff1c 	bl	b63d8 <_Z16_fetch_usbserialv>
   b45a0:	9904      	ldr	r1, [sp, #16]
   b45a2:	f001 fa20 	bl	b59e6 <_ZN5Print7printlnEPKc>

      // Transition to wait state
      state = 0;
   b45a6:	2300      	movs	r3, #0
      String send_data = String("{ \"beat\": \"") + String(heartRate) + "\"" + ", \"ox\": " + String(spo2) + "}";
   b45a8:	a804      	add	r0, sp, #16
      state = 0;
   b45aa:	7023      	strb	r3, [r4, #0]
      String send_data = String("{ \"beat\": \"") + String(heartRate) + "\"" + ", \"ox\": " + String(spo2) + "}";
   b45ac:	f001 f88e 	bl	b56cc <_ZN6StringD1Ev>
  }

   b45b0:	e02b      	b.n	b460a <loop+0x2e6>
      Serial.println("Not a valid measurement. HR:" + String(heartRate) + " SPO2: " + String(spo2));
   b45b2:	f001 ff11 	bl	b63d8 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b45b6:	4934      	ldr	r1, [pc, #208]	; (b4688 <loop+0x364>)
   b45b8:	4605      	mov	r5, r0
   b45ba:	a810      	add	r0, sp, #64	; 0x40
   b45bc:	f001 f8d1 	bl	b5762 <_ZN6StringC1EPK19__FlashStringHelper>
   b45c0:	220a      	movs	r2, #10
   b45c2:	6831      	ldr	r1, [r6, #0]
   b45c4:	a80c      	add	r0, sp, #48	; 0x30
   b45c6:	f001 f91f 	bl	b5808 <_ZN6StringC1Elh>
   b45ca:	a90c      	add	r1, sp, #48	; 0x30
   b45cc:	a810      	add	r0, sp, #64	; 0x40
   b45ce:	f001 f980 	bl	b58d2 <_ZplRK15StringSumHelperRK6String>
   b45d2:	492e      	ldr	r1, [pc, #184]	; (b468c <loop+0x368>)
   b45d4:	f001 f989 	bl	b58ea <_ZplRK15StringSumHelperPKc>
   b45d8:	220a      	movs	r2, #10
   b45da:	6839      	ldr	r1, [r7, #0]
   b45dc:	4606      	mov	r6, r0
   b45de:	a814      	add	r0, sp, #80	; 0x50
   b45e0:	f001 f912 	bl	b5808 <_ZN6StringC1Elh>
   b45e4:	a914      	add	r1, sp, #80	; 0x50
   b45e6:	4630      	mov	r0, r6
   b45e8:	f001 f973 	bl	b58d2 <_ZplRK15StringSumHelperRK6String>
   b45ec:	6801      	ldr	r1, [r0, #0]
   b45ee:	4628      	mov	r0, r5
   b45f0:	f001 f9f9 	bl	b59e6 <_ZN5Print7printlnEPKc>
   b45f4:	a814      	add	r0, sp, #80	; 0x50
   b45f6:	f001 f869 	bl	b56cc <_ZN6StringD1Ev>
   b45fa:	a80c      	add	r0, sp, #48	; 0x30
   b45fc:	f001 f866 	bl	b56cc <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4600:	a810      	add	r0, sp, #64	; 0x40
   b4602:	f001 f863 	bl	b56cc <_ZN6StringD1Ev>
      state = 2; // Try getting a reading again
   b4606:	2302      	movs	r3, #2
   b4608:	7023      	strb	r3, [r4, #0]
   b460a:	b018      	add	sp, #96	; 0x60
   b460c:	ecbd 8b02 	vpop	{d8}
   b4610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4614:	2003e32c 	.word	0x2003e32c
   b4618:	404e0000 	.word	0x404e0000
   b461c:	2003e170 	.word	0x2003e170
   b4620:	2003e174 	.word	0x2003e174
   b4624:	2003e0f4 	.word	0x2003e0f4
   b4628:	2003e25c 	.word	0x2003e25c
   b462c:	2003e0f8 	.word	0x2003e0f8
   b4630:	000b796c 	.word	0x000b796c
   b4634:	000b7a3c 	.word	0x000b7a3c
   b4638:	000b7a6f 	.word	0x000b7a6f
   b463c:	2003e254 	.word	0x2003e254
   b4640:	000b7a8a 	.word	0x000b7a8a
   b4644:	000b799d 	.word	0x000b799d
   b4648:	000b79dc 	.word	0x000b79dc
   b464c:	2003e168 	.word	0x2003e168
   b4650:	000b794f 	.word	0x000b794f
   b4654:	000b79e7 	.word	0x000b79e7
   b4658:	2003e328 	.word	0x2003e328
   b465c:	2003e32d 	.word	0x2003e32d
   b4660:	2003e188 	.word	0x2003e188
   b4664:	2003e32e 	.word	0x2003e32e
   b4668:	2003e260 	.word	0x2003e260
   b466c:	2003e18c 	.word	0x2003e18c
   b4670:	000b7aa4 	.word	0x000b7aa4
   b4674:	000b7aea 	.word	0x000b7aea
   b4678:	000b7af4 	.word	0x000b7af4
   b467c:	000b7af6 	.word	0x000b7af6
   b4680:	000b7aff 	.word	0x000b7aff
   b4684:	000b7964 	.word	0x000b7964
   b4688:	000b7ac5 	.word	0x000b7ac5
   b468c:	000b7ae2 	.word	0x000b7ae2
   b4690:	2003e16c 	.word	0x2003e16c

000b4694 <_GLOBAL__sub_I_max30105>:
   b4694:	b508      	push	{r3, lr}
        val_(val) {
   b4696:	4b06      	ldr	r3, [pc, #24]	; (b46b0 <_GLOBAL__sub_I_max30105+0x1c>)
MAX30105 max30105;                    // Sensor
   b4698:	4806      	ldr	r0, [pc, #24]	; (b46b4 <_GLOBAL__sub_I_max30105+0x20>)
   b469a:	2201      	movs	r2, #1
   b469c:	701a      	strb	r2, [r3, #0]
   b469e:	f000 f80d 	bl	b46bc <_ZN8MAX30105C1Ev>
String data = String(10);             //data to be sent to server
   b46a2:	220a      	movs	r2, #10
   b46a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
String data = String(10);             //data to be sent to server
   b46a8:	4803      	ldr	r0, [pc, #12]	; (b46b8 <_GLOBAL__sub_I_max30105+0x24>)
   b46aa:	4611      	mov	r1, r2
   b46ac:	f001 b899 	b.w	b57e2 <_ZN6StringC1Eih>
   b46b0:	2003e168 	.word	0x2003e168
   b46b4:	2003e254 	.word	0x2003e254
   b46b8:	2003e178 	.word	0x2003e178

000b46bc <_ZN8MAX30105C1Ev>:
  byte tail;
} sense; //This is our circular buffer of readings from the sensor

MAX30105::MAX30105() {
  // Constructor
}
   b46bc:	4770      	bx	lr
	...

000b46c0 <_ZN8MAX301059availableEv>:
//

//Tell caller how many samples are available
uint8_t MAX30105::available(void)
{
  uint8_t numberOfSamples = sense.head - sense.tail;
   b46c0:	4b03      	ldr	r3, [pc, #12]	; (b46d0 <_ZN8MAX301059availableEv+0x10>)
   b46c2:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
   b46c6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   b46ca:	1ac0      	subs	r0, r0, r3
  if (numberOfSamples < 0) numberOfSamples += STORAGE_SIZE;

  return (numberOfSamples);
}
   b46cc:	b2c0      	uxtb	r0, r0
   b46ce:	4770      	bx	lr
   b46d0:	2003e330 	.word	0x2003e330

000b46d4 <_ZN8MAX3010510nextSampleEv>:
  uint8_t numberOfSamples = sense.head - sense.tail;
   b46d4:	4a06      	ldr	r2, [pc, #24]	; (b46f0 <_ZN8MAX3010510nextSampleEv+0x1c>)
   b46d6:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
}

//Advance the tail
void MAX30105::nextSample(void)
{
  if(available()) //Only advance the tail if new data is available
   b46da:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
   b46de:	4299      	cmp	r1, r3
  {
    sense.tail++;
   b46e0:	bf1e      	ittt	ne
   b46e2:	3301      	addne	r3, #1
    sense.tail %= STORAGE_SIZE; //Wrap condition
   b46e4:	f003 0303 	andne.w	r3, r3, #3
   b46e8:	f882 3031 	strbne.w	r3, [r2, #49]	; 0x31
  }
}
   b46ec:	4770      	bx	lr
   b46ee:	bf00      	nop
   b46f0:	2003e330 	.word	0x2003e330

000b46f4 <_ZN8MAX3010513readRegister8Ehh>:
}

//
// Low-level I2C Communication
//
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
   b46f4:	b538      	push	{r3, r4, r5, lr}
   b46f6:	460c      	mov	r4, r1
   b46f8:	4615      	mov	r5, r2

	Wire.beginTransmission(address);
   b46fa:	f002 f8cd 	bl	b6898 <_Z19__fetch_global_Wirev>
   b46fe:	4621      	mov	r1, r4
   b4700:	f001 ff72 	bl	b65e8 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(reg);
   b4704:	f002 f8c8 	bl	b6898 <_Z19__fetch_global_Wirev>
   b4708:	6803      	ldr	r3, [r0, #0]
   b470a:	4629      	mov	r1, r5
   b470c:	689b      	ldr	r3, [r3, #8]
   b470e:	4798      	blx	r3
	Wire.endTransmission();
   b4710:	f002 f8c2 	bl	b6898 <_Z19__fetch_global_Wirev>
   b4714:	f001 ff70 	bl	b65f8 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(address, 1);
   b4718:	f002 f8be 	bl	b6898 <_Z19__fetch_global_Wirev>
   b471c:	2201      	movs	r2, #1
   b471e:	4621      	mov	r1, r4
   b4720:	f001 ff5f 	bl	b65e2 <_ZN7TwoWire11requestFromEhj>
	while ( Wire.available() ) // slave may send less than requested
   b4724:	f002 f8b8 	bl	b6898 <_Z19__fetch_global_Wirev>
   b4728:	6803      	ldr	r3, [r0, #0]
   b472a:	691b      	ldr	r3, [r3, #16]
   b472c:	4798      	blx	r3
   b472e:	b128      	cbz	r0, b473c <_ZN8MAX3010513readRegister8Ehh+0x48>
	{
		return(Wire.read()); // receive a byte as a proper uint8_t
   b4730:	f002 f8b2 	bl	b6898 <_Z19__fetch_global_Wirev>
   b4734:	6803      	ldr	r3, [r0, #0]
   b4736:	695b      	ldr	r3, [r3, #20]
   b4738:	4798      	blx	r3
   b473a:	b2c0      	uxtb	r0, r0
	}

}

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
   b473c:	bd38      	pop	{r3, r4, r5, pc}

000b473e <_ZN8MAX3010515getWritePointerEv>:
  return (readRegister8(MAX30105_ADDRESS, MAX30105_FIFOWRITEPTR));
   b473e:	2204      	movs	r2, #4
   b4740:	2157      	movs	r1, #87	; 0x57
   b4742:	f7ff bfd7 	b.w	b46f4 <_ZN8MAX3010513readRegister8Ehh>

000b4746 <_ZN8MAX3010514getReadPointerEv>:
  return (readRegister8(MAX30105_ADDRESS, MAX30105_FIFOREADPTR));
   b4746:	2206      	movs	r2, #6
   b4748:	2157      	movs	r1, #87	; 0x57
   b474a:	f7ff bfd3 	b.w	b46f4 <_ZN8MAX3010513readRegister8Ehh>
	...

000b4750 <_ZN8MAX301055checkEv>:
{
   b4750:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b4754:	4607      	mov	r7, r0
  byte readPointer = getReadPointer();
   b4756:	f7ff fff6 	bl	b4746 <_ZN8MAX3010514getReadPointerEv>
   b475a:	4604      	mov	r4, r0
  byte writePointer = getWritePointer();
   b475c:	4638      	mov	r0, r7
   b475e:	f7ff ffee 	bl	b473e <_ZN8MAX3010515getWritePointerEv>
  if (readPointer != writePointer)
   b4762:	4284      	cmp	r4, r0
   b4764:	f000 809b 	beq.w	b489e <_ZN8MAX301055checkEv+0x14e>
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
   b4768:	1b04      	subs	r4, r0, r4
   b476a:	bf48      	it	mi
   b476c:	3420      	addmi	r4, #32
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
   b476e:	797e      	ldrb	r6, [r7, #5]
        sense.head %= STORAGE_SIZE; //Wrap condition
   b4770:	f8df 8134 	ldr.w	r8, [pc, #308]	; b48a8 <_ZN8MAX301055checkEv+0x158>
    Wire.beginTransmission(MAX30105_ADDRESS);
   b4774:	f002 f890 	bl	b6898 <_Z19__fetch_global_Wirev>
   b4778:	2157      	movs	r1, #87	; 0x57
   b477a:	f001 ff35 	bl	b65e8 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write(MAX30105_FIFODATA);
   b477e:	f002 f88b 	bl	b6898 <_Z19__fetch_global_Wirev>
   b4782:	6803      	ldr	r3, [r0, #0]
   b4784:	2107      	movs	r1, #7
   b4786:	689b      	ldr	r3, [r3, #8]
   b4788:	4798      	blx	r3
    Wire.endTransmission();
   b478a:	f002 f885 	bl	b6898 <_Z19__fetch_global_Wirev>
   b478e:	f001 ff33 	bl	b65f8 <_ZN7TwoWire15endTransmissionEv>
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
   b4792:	4366      	muls	r6, r4
   b4794:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    while (bytesLeftToRead > 0)
   b4798:	2e00      	cmp	r6, #0
   b479a:	f340 8081 	ble.w	b48a0 <_ZN8MAX301055checkEv+0x150>
      if (toGet > I2C_BUFFER_LENGTH)
   b479e:	2e20      	cmp	r6, #32
        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   b47a0:	bfc3      	ittte	gt
   b47a2:	797d      	ldrbgt	r5, [r7, #5]
   b47a4:	eb05 0345 	addgt.w	r3, r5, r5, lsl #1
   b47a8:	2520      	movgt	r5, #32
   b47aa:	4635      	movle	r5, r6
   b47ac:	bfc4      	itt	gt
   b47ae:	fbb5 f5f3 	udivgt	r5, r5, r3
   b47b2:	435d      	mulgt	r5, r3
      Wire.requestFrom(MAX30105_ADDRESS, toGet);
   b47b4:	f002 f870 	bl	b6898 <_Z19__fetch_global_Wirev>
   b47b8:	462a      	mov	r2, r5
   b47ba:	2157      	movs	r1, #87	; 0x57
   b47bc:	f001 ff11 	bl	b65e2 <_ZN7TwoWire11requestFromEhj>
      bytesLeftToRead -= toGet;
   b47c0:	1b76      	subs	r6, r6, r5
        temp[3] = 0;
   b47c2:	f04f 0900 	mov.w	r9, #0
      while (toGet > 0)
   b47c6:	2d00      	cmp	r5, #0
   b47c8:	dde6      	ble.n	b4798 <_ZN8MAX301055checkEv+0x48>
        sense.head++; //Advance the head of the storage struct
   b47ca:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
        temp[3] = 0;
   b47ce:	f88d 9007 	strb.w	r9, [sp, #7]
        sense.head++; //Advance the head of the storage struct
   b47d2:	3301      	adds	r3, #1
        sense.head %= STORAGE_SIZE; //Wrap condition
   b47d4:	f003 0303 	and.w	r3, r3, #3
   b47d8:	f888 3030 	strb.w	r3, [r8, #48]	; 0x30
        temp[2] = Wire.read();
   b47dc:	f002 f85c 	bl	b6898 <_Z19__fetch_global_Wirev>
   b47e0:	6803      	ldr	r3, [r0, #0]
   b47e2:	695b      	ldr	r3, [r3, #20]
   b47e4:	4798      	blx	r3
   b47e6:	f88d 0006 	strb.w	r0, [sp, #6]
        temp[1] = Wire.read();
   b47ea:	f002 f855 	bl	b6898 <_Z19__fetch_global_Wirev>
   b47ee:	6803      	ldr	r3, [r0, #0]
   b47f0:	695b      	ldr	r3, [r3, #20]
   b47f2:	4798      	blx	r3
   b47f4:	f88d 0005 	strb.w	r0, [sp, #5]
        temp[0] = Wire.read();
   b47f8:	f002 f84e 	bl	b6898 <_Z19__fetch_global_Wirev>
   b47fc:	6803      	ldr	r3, [r0, #0]
   b47fe:	695b      	ldr	r3, [r3, #20]
   b4800:	4798      	blx	r3
   b4802:	f88d 0004 	strb.w	r0, [sp, #4]
		tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b4806:	9b01      	ldr	r3, [sp, #4]
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   b4808:	f898 2030 	ldrb.w	r2, [r8, #48]	; 0x30
		tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b480c:	f3c3 0311 	ubfx	r3, r3, #0, #18
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   b4810:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
        if (activeLEDs > 1)
   b4814:	797b      	ldrb	r3, [r7, #5]
   b4816:	2b01      	cmp	r3, #1
   b4818:	d91c      	bls.n	b4854 <_ZN8MAX301055checkEv+0x104>
          temp[2] = Wire.read();
   b481a:	f002 f83d 	bl	b6898 <_Z19__fetch_global_Wirev>
   b481e:	6803      	ldr	r3, [r0, #0]
   b4820:	695b      	ldr	r3, [r3, #20]
   b4822:	4798      	blx	r3
   b4824:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = Wire.read();
   b4828:	f002 f836 	bl	b6898 <_Z19__fetch_global_Wirev>
   b482c:	6803      	ldr	r3, [r0, #0]
   b482e:	695b      	ldr	r3, [r3, #20]
   b4830:	4798      	blx	r3
   b4832:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = Wire.read();
   b4836:	f002 f82f 	bl	b6898 <_Z19__fetch_global_Wirev>
   b483a:	6803      	ldr	r3, [r0, #0]
   b483c:	695b      	ldr	r3, [r3, #20]
   b483e:	4798      	blx	r3
		  sense.IR[sense.head] = tempLong;
   b4840:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
          temp[0] = Wire.read();
   b4844:	f88d 0004 	strb.w	r0, [sp, #4]
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b4848:	9a01      	ldr	r2, [sp, #4]
		  sense.IR[sense.head] = tempLong;
   b484a:	3304      	adds	r3, #4
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b484c:	f3c2 0211 	ubfx	r2, r2, #0, #18
		  sense.IR[sense.head] = tempLong;
   b4850:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
        if (activeLEDs > 2)
   b4854:	797b      	ldrb	r3, [r7, #5]
   b4856:	2b02      	cmp	r3, #2
   b4858:	d91c      	bls.n	b4894 <_ZN8MAX301055checkEv+0x144>
          temp[2] = Wire.read();
   b485a:	f002 f81d 	bl	b6898 <_Z19__fetch_global_Wirev>
   b485e:	6803      	ldr	r3, [r0, #0]
   b4860:	695b      	ldr	r3, [r3, #20]
   b4862:	4798      	blx	r3
   b4864:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = Wire.read();
   b4868:	f002 f816 	bl	b6898 <_Z19__fetch_global_Wirev>
   b486c:	6803      	ldr	r3, [r0, #0]
   b486e:	695b      	ldr	r3, [r3, #20]
   b4870:	4798      	blx	r3
   b4872:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = Wire.read();
   b4876:	f002 f80f 	bl	b6898 <_Z19__fetch_global_Wirev>
   b487a:	6803      	ldr	r3, [r0, #0]
   b487c:	695b      	ldr	r3, [r3, #20]
   b487e:	4798      	blx	r3
          sense.green[sense.head] = tempLong;
   b4880:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
          temp[0] = Wire.read();
   b4884:	f88d 0004 	strb.w	r0, [sp, #4]
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b4888:	9a01      	ldr	r2, [sp, #4]
          sense.green[sense.head] = tempLong;
   b488a:	3308      	adds	r3, #8
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b488c:	f3c2 0211 	ubfx	r2, r2, #0, #18
          sense.green[sense.head] = tempLong;
   b4890:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
        toGet -= activeLEDs * 3;
   b4894:	797b      	ldrb	r3, [r7, #5]
   b4896:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   b489a:	441d      	add	r5, r3
      while (toGet > 0)
   b489c:	e793      	b.n	b47c6 <_ZN8MAX301055checkEv+0x76>
  int numberOfSamples = 0;
   b489e:	2400      	movs	r4, #0
}
   b48a0:	b2a0      	uxth	r0, r4
   b48a2:	b003      	add	sp, #12
   b48a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b48a8:	2003e330 	.word	0x2003e330

000b48ac <_ZN8MAX301059safeCheckEh>:
{
   b48ac:	b570      	push	{r4, r5, r6, lr}
   b48ae:	4605      	mov	r5, r0
   b48b0:	460e      	mov	r6, r1
   b48b2:	f000 fb9f 	bl	b4ff4 <HAL_Timer_Get_Milli_Seconds>
   b48b6:	4604      	mov	r4, r0
   b48b8:	f000 fb9c 	bl	b4ff4 <HAL_Timer_Get_Milli_Seconds>
	if(millis() - markTime > maxTimeToCheck) return(false);
   b48bc:	1b00      	subs	r0, r0, r4
   b48be:	42b0      	cmp	r0, r6
   b48c0:	d808      	bhi.n	b48d4 <_ZN8MAX301059safeCheckEh+0x28>
	if(check() == true) //We found new data!
   b48c2:	4628      	mov	r0, r5
   b48c4:	f7ff ff44 	bl	b4750 <_ZN8MAX301055checkEv>
   b48c8:	2801      	cmp	r0, #1
   b48ca:	d004      	beq.n	b48d6 <_ZN8MAX301059safeCheckEh+0x2a>
	delay(1);
   b48cc:	2001      	movs	r0, #1
   b48ce:	f001 f94d 	bl	b5b6c <delay>
	if(millis() - markTime > maxTimeToCheck) return(false);
   b48d2:	e7f1      	b.n	b48b8 <_ZN8MAX301059safeCheckEh+0xc>
   b48d4:	2000      	movs	r0, #0
}
   b48d6:	bd70      	pop	{r4, r5, r6, pc}

000b48d8 <_ZN8MAX301056getRedEv>:
{
   b48d8:	b508      	push	{r3, lr}
  if(safeCheck(250))
   b48da:	21fa      	movs	r1, #250	; 0xfa
   b48dc:	f7ff ffe6 	bl	b48ac <_ZN8MAX301059safeCheckEh>
   b48e0:	b120      	cbz	r0, b48ec <_ZN8MAX301056getRedEv+0x14>
    return (sense.red[sense.head]);
   b48e2:	4b03      	ldr	r3, [pc, #12]	; (b48f0 <_ZN8MAX301056getRedEv+0x18>)
   b48e4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   b48e8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
}
   b48ec:	bd08      	pop	{r3, pc}
   b48ee:	bf00      	nop
   b48f0:	2003e330 	.word	0x2003e330

000b48f4 <_ZN8MAX301055getIREv>:
{
   b48f4:	b508      	push	{r3, lr}
  if(safeCheck(250))
   b48f6:	21fa      	movs	r1, #250	; 0xfa
   b48f8:	f7ff ffd8 	bl	b48ac <_ZN8MAX301059safeCheckEh>
   b48fc:	b128      	cbz	r0, b490a <_ZN8MAX301055getIREv+0x16>
    return (sense.IR[sense.head]);
   b48fe:	4a03      	ldr	r2, [pc, #12]	; (b490c <_ZN8MAX301055getIREv+0x18>)
   b4900:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   b4904:	3304      	adds	r3, #4
   b4906:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
}
   b490a:	bd08      	pop	{r3, pc}
   b490c:	2003e330 	.word	0x2003e330

000b4910 <_ZN8MAX3010510readPartIDEv>:
  return readRegister8(MAX30105_ADDRESS, MAX30105_PARTID);
   b4910:	22ff      	movs	r2, #255	; 0xff
   b4912:	2157      	movs	r1, #87	; 0x57
   b4914:	f7ff beee 	b.w	b46f4 <_ZN8MAX3010513readRegister8Ehh>

000b4918 <_ZN8MAX3010514readRevisionIDEv>:
void MAX30105::readRevisionID() {
   b4918:	b510      	push	{r4, lr}
  revisionID = readRegister8(MAX30105_ADDRESS, MAX30105_REVISIONID);
   b491a:	22fe      	movs	r2, #254	; 0xfe
   b491c:	2157      	movs	r1, #87	; 0x57
void MAX30105::readRevisionID() {
   b491e:	4604      	mov	r4, r0
  revisionID = readRegister8(MAX30105_ADDRESS, MAX30105_REVISIONID);
   b4920:	f7ff fee8 	bl	b46f4 <_ZN8MAX3010513readRegister8Ehh>
   b4924:	71a0      	strb	r0, [r4, #6]
}
   b4926:	bd10      	pop	{r4, pc}

000b4928 <_ZN8MAX301055beginEv>:
boolean MAX30105::begin() {
   b4928:	b510      	push	{r4, lr}
   b492a:	4604      	mov	r4, r0
 	Wire.begin();
   b492c:	f001 ffb4 	bl	b6898 <_Z19__fetch_global_Wirev>
   b4930:	f001 fe28 	bl	b6584 <_ZN7TwoWire5beginEv>
  if (!readPartID() == MAX_30105_EXPECTEDPARTID) {
   b4934:	4620      	mov	r0, r4
   b4936:	f7ff ffeb 	bl	b4910 <_ZN8MAX3010510readPartIDEv>
  readRevisionID();
   b493a:	4620      	mov	r0, r4
   b493c:	f7ff ffec 	bl	b4918 <_ZN8MAX3010514readRevisionIDEv>
}
   b4940:	2001      	movs	r0, #1
   b4942:	bd10      	pop	{r4, pc}

000b4944 <_ZN8MAX3010514writeRegister8Ehhh>:
  Wire.beginTransmission(address);
  Wire.write(reg);
   b4944:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4946:	4615      	mov	r5, r2
   b4948:	461c      	mov	r4, r3
   b494a:	9101      	str	r1, [sp, #4]
  Wire.write(value);
   b494c:	f001 ffa4 	bl	b6898 <_Z19__fetch_global_Wirev>
   b4950:	9901      	ldr	r1, [sp, #4]
   b4952:	f001 fe49 	bl	b65e8 <_ZN7TwoWire17beginTransmissionEh>
  Wire.endTransmission();
   b4956:	f001 ff9f 	bl	b6898 <_Z19__fetch_global_Wirev>
   b495a:	6803      	ldr	r3, [r0, #0]
   b495c:	4629      	mov	r1, r5
   b495e:	689b      	ldr	r3, [r3, #8]
   b4960:	4798      	blx	r3
}
   b4962:	f001 ff99 	bl	b6898 <_Z19__fetch_global_Wirev>
   b4966:	6803      	ldr	r3, [r0, #0]
   b4968:	4621      	mov	r1, r4
   b496a:	689b      	ldr	r3, [r3, #8]
   b496c:	4798      	blx	r3
   b496e:	f001 ff93 	bl	b6898 <_Z19__fetch_global_Wirev>
   b4972:	b003      	add	sp, #12
   b4974:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   b4978:	f001 be3e 	b.w	b65f8 <_ZN7TwoWire15endTransmissionEv>

000b497c <_ZN8MAX3010520setPulseAmplitudeRedEh>:
void MAX30105::setPulseAmplitudeRed(uint8_t amplitude) {
   b497c:	460b      	mov	r3, r1
  writeRegister8(MAX30105_ADDRESS, MAX30105_LED1_PULSEAMP, amplitude);
   b497e:	220c      	movs	r2, #12
   b4980:	2157      	movs	r1, #87	; 0x57
   b4982:	f7ff bfdf 	b.w	b4944 <_ZN8MAX3010514writeRegister8Ehhh>

000b4986 <_ZN8MAX3010519setPulseAmplitudeIREh>:
void MAX30105::setPulseAmplitudeIR(uint8_t amplitude) {
   b4986:	460b      	mov	r3, r1
  writeRegister8(MAX30105_ADDRESS, MAX30105_LED2_PULSEAMP, amplitude);
   b4988:	220d      	movs	r2, #13
   b498a:	2157      	movs	r1, #87	; 0x57
   b498c:	f7ff bfda 	b.w	b4944 <_ZN8MAX3010514writeRegister8Ehhh>

000b4990 <_ZN8MAX3010522setPulseAmplitudeGreenEh>:
void MAX30105::setPulseAmplitudeGreen(uint8_t amplitude) {
   b4990:	460b      	mov	r3, r1
  writeRegister8(MAX30105_ADDRESS, MAX30105_LED3_PULSEAMP, amplitude);
   b4992:	220e      	movs	r2, #14
   b4994:	2157      	movs	r1, #87	; 0x57
   b4996:	f7ff bfd5 	b.w	b4944 <_ZN8MAX3010514writeRegister8Ehhh>

000b499a <_ZN8MAX3010526setPulseAmplitudeProximityEh>:
void MAX30105::setPulseAmplitudeProximity(uint8_t amplitude) {
   b499a:	460b      	mov	r3, r1
  writeRegister8(MAX30105_ADDRESS, MAX30105_LED_PROX_AMP, amplitude);
   b499c:	2210      	movs	r2, #16
   b499e:	2157      	movs	r1, #87	; 0x57
   b49a0:	f7ff bfd0 	b.w	b4944 <_ZN8MAX3010514writeRegister8Ehhh>

000b49a4 <_ZN8MAX301059clearFIFOEv>:
void MAX30105::clearFIFO(void) {
   b49a4:	b510      	push	{r4, lr}
  writeRegister8(MAX30105_ADDRESS, MAX30105_FIFOWRITEPTR, 0);
   b49a6:	2300      	movs	r3, #0
void MAX30105::clearFIFO(void) {
   b49a8:	4604      	mov	r4, r0
  writeRegister8(MAX30105_ADDRESS, MAX30105_FIFOWRITEPTR, 0);
   b49aa:	2204      	movs	r2, #4
   b49ac:	2157      	movs	r1, #87	; 0x57
   b49ae:	f7ff ffc9 	bl	b4944 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(MAX30105_ADDRESS, MAX30105_FIFOOVERFLOW, 0);
   b49b2:	4620      	mov	r0, r4
   b49b4:	2300      	movs	r3, #0
   b49b6:	2205      	movs	r2, #5
   b49b8:	2157      	movs	r1, #87	; 0x57
   b49ba:	f7ff ffc3 	bl	b4944 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(MAX30105_ADDRESS, MAX30105_FIFOREADPTR, 0);
   b49be:	4620      	mov	r0, r4
   b49c0:	2300      	movs	r3, #0
}
   b49c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeRegister8(MAX30105_ADDRESS, MAX30105_FIFOREADPTR, 0);
   b49c6:	2206      	movs	r2, #6
   b49c8:	2157      	movs	r1, #87	; 0x57
   b49ca:	f7ff bfbb 	b.w	b4944 <_ZN8MAX3010514writeRegister8Ehhh>

000b49ce <_ZN8MAX301057bitMaskEhhh>:
{
   b49ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b49d2:	460c      	mov	r4, r1
   b49d4:	4617      	mov	r7, r2
  uint8_t originalContents = readRegister8(MAX30105_ADDRESS, reg);
   b49d6:	460a      	mov	r2, r1
   b49d8:	2157      	movs	r1, #87	; 0x57
{
   b49da:	4605      	mov	r5, r0
   b49dc:	461e      	mov	r6, r3
  uint8_t originalContents = readRegister8(MAX30105_ADDRESS, reg);
   b49de:	f7ff fe89 	bl	b46f4 <_ZN8MAX3010513readRegister8Ehh>
  originalContents = originalContents & mask;
   b49e2:	4038      	ands	r0, r7
  writeRegister8(MAX30105_ADDRESS, reg, originalContents | thing);
   b49e4:	ea46 0300 	orr.w	r3, r6, r0
   b49e8:	4622      	mov	r2, r4
   b49ea:	4628      	mov	r0, r5
   b49ec:	2157      	movs	r1, #87	; 0x57
}
   b49ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  writeRegister8(MAX30105_ADDRESS, reg, originalContents | thing);
   b49f2:	f7ff bfa7 	b.w	b4944 <_ZN8MAX3010514writeRegister8Ehhh>

000b49f6 <_ZN8MAX301059softResetEv>:
void MAX30105::softReset(void) {
   b49f6:	b538      	push	{r3, r4, r5, lr}
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
   b49f8:	22bf      	movs	r2, #191	; 0xbf
   b49fa:	2340      	movs	r3, #64	; 0x40
   b49fc:	2109      	movs	r1, #9
void MAX30105::softReset(void) {
   b49fe:	4605      	mov	r5, r0
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
   b4a00:	f7ff ffe5 	bl	b49ce <_ZN8MAX301057bitMaskEhhh>
   b4a04:	f000 faf6 	bl	b4ff4 <HAL_Timer_Get_Milli_Seconds>
   b4a08:	4604      	mov	r4, r0
   b4a0a:	f000 faf3 	bl	b4ff4 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < 100)
   b4a0e:	1b00      	subs	r0, r0, r4
   b4a10:	2863      	cmp	r0, #99	; 0x63
   b4a12:	d80a      	bhi.n	b4a2a <_ZN8MAX301059softResetEv+0x34>
    uint8_t response = readRegister8(MAX30105_ADDRESS, MAX30105_MODECONFIG);
   b4a14:	2209      	movs	r2, #9
   b4a16:	2157      	movs	r1, #87	; 0x57
   b4a18:	4628      	mov	r0, r5
   b4a1a:	f7ff fe6b 	bl	b46f4 <_ZN8MAX3010513readRegister8Ehh>
    if ((response & MAX30105_RESET) == 0) break; //We're done!
   b4a1e:	0643      	lsls	r3, r0, #25
   b4a20:	d503      	bpl.n	b4a2a <_ZN8MAX301059softResetEv+0x34>
    delay(1); //Let's not over burden the I2C bus
   b4a22:	2001      	movs	r0, #1
   b4a24:	f001 f8a2 	bl	b5b6c <delay>
  while (millis() - startTime < 100)
   b4a28:	e7ef      	b.n	b4a0a <_ZN8MAX301059softResetEv+0x14>
}
   b4a2a:	bd38      	pop	{r3, r4, r5, pc}

000b4a2c <_ZN8MAX3010510setLEDModeEh>:
void MAX30105::setLEDMode(uint8_t mode) {
   b4a2c:	460b      	mov	r3, r1
  bitMask(MAX30105_MODECONFIG, MAX30105_MODE_MASK, mode);
   b4a2e:	22f8      	movs	r2, #248	; 0xf8
   b4a30:	2109      	movs	r1, #9
   b4a32:	f7ff bfcc 	b.w	b49ce <_ZN8MAX301057bitMaskEhhh>

000b4a36 <_ZN8MAX3010511setADCRangeEh>:
void MAX30105::setADCRange(uint8_t adcRange) {
   b4a36:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_ADCRANGE_MASK, adcRange);
   b4a38:	229f      	movs	r2, #159	; 0x9f
   b4a3a:	210a      	movs	r1, #10
   b4a3c:	f7ff bfc7 	b.w	b49ce <_ZN8MAX301057bitMaskEhhh>

000b4a40 <_ZN8MAX3010513setSampleRateEh>:
void MAX30105::setSampleRate(uint8_t sampleRate) {
   b4a40:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_SAMPLERATE_MASK, sampleRate);
   b4a42:	22e3      	movs	r2, #227	; 0xe3
   b4a44:	210a      	movs	r1, #10
   b4a46:	f7ff bfc2 	b.w	b49ce <_ZN8MAX301057bitMaskEhhh>

000b4a4a <_ZN8MAX3010513setPulseWidthEh>:
void MAX30105::setPulseWidth(uint8_t pulseWidth) {
   b4a4a:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_PULSEWIDTH_MASK, pulseWidth);
   b4a4c:	22fc      	movs	r2, #252	; 0xfc
   b4a4e:	210a      	movs	r1, #10
   b4a50:	f7ff bfbd 	b.w	b49ce <_ZN8MAX301057bitMaskEhhh>

000b4a54 <_ZN8MAX3010510enableSlotEhh>:
  switch (slotNumber) {
   b4a54:	3901      	subs	r1, #1
void MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {
   b4a56:	4613      	mov	r3, r2
   b4a58:	2903      	cmp	r1, #3
   b4a5a:	d814      	bhi.n	b4a86 <_ZN8MAX3010510enableSlotEhh+0x32>
   b4a5c:	e8df f001 	tbb	[pc, r1]
   b4a60:	0e0b0602 	.word	0x0e0b0602
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
   b4a64:	22f8      	movs	r2, #248	; 0xf8
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   b4a66:	2111      	movs	r1, #17
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
   b4a68:	f7ff bfb1 	b.w	b49ce <_ZN8MAX301057bitMaskEhhh>
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   b4a6c:	011b      	lsls	r3, r3, #4
   b4a6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   b4a72:	228f      	movs	r2, #143	; 0x8f
   b4a74:	e7f7      	b.n	b4a66 <_ZN8MAX3010510enableSlotEhh+0x12>
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT3_MASK, device);
   b4a76:	22f8      	movs	r2, #248	; 0xf8
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
   b4a78:	2112      	movs	r1, #18
   b4a7a:	e7f5      	b.n	b4a68 <_ZN8MAX3010510enableSlotEhh+0x14>
   b4a7c:	011b      	lsls	r3, r3, #4
   b4a7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   b4a82:	228f      	movs	r2, #143	; 0x8f
   b4a84:	e7f8      	b.n	b4a78 <_ZN8MAX3010510enableSlotEhh+0x24>
}
   b4a86:	4770      	bx	lr

000b4a88 <_ZN8MAX3010514setFIFOAverageEh>:
void MAX30105::setFIFOAverage(uint8_t numberOfSamples) {
   b4a88:	460b      	mov	r3, r1
  bitMask(MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);
   b4a8a:	221f      	movs	r2, #31
   b4a8c:	2108      	movs	r1, #8
   b4a8e:	f7ff bf9e 	b.w	b49ce <_ZN8MAX301057bitMaskEhhh>

000b4a92 <_ZN8MAX3010518enableFIFORolloverEv>:
  bitMask(MAX30105_FIFOCONFIG, MAX30105_ROLLOVER_MASK, MAX30105_ROLLOVER_ENABLE);
   b4a92:	2310      	movs	r3, #16
   b4a94:	22ef      	movs	r2, #239	; 0xef
   b4a96:	2108      	movs	r1, #8
   b4a98:	f7ff bf99 	b.w	b49ce <_ZN8MAX301057bitMaskEhhh>

000b4a9c <_ZN8MAX301055setupEhhhiii>:
void MAX30105::setup(byte powerLevel, byte sampleAverage, byte ledMode, int sampleRate, int pulseWidth, int adcRange) {
   b4a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4aa0:	4615      	mov	r5, r2
   b4aa2:	e9dd 7908 	ldrd	r7, r9, [sp, #32]
   b4aa6:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   b4aaa:	4604      	mov	r4, r0
   b4aac:	4688      	mov	r8, r1
   b4aae:	461e      	mov	r6, r3
  softReset(); //Reset all configuration, threshold, and data registers to POR values
   b4ab0:	f7ff ffa1 	bl	b49f6 <_ZN8MAX301059softResetEv>
  if (sampleAverage == 1) setFIFOAverage(MAX30105_SAMPLEAVG_1); //No averaging per FIFO record
   b4ab4:	2d01      	cmp	r5, #1
   b4ab6:	d149      	bne.n	b4b4c <_ZN8MAX301055setupEhhhiii+0xb0>
   b4ab8:	2100      	movs	r1, #0
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
   b4aba:	4620      	mov	r0, r4
   b4abc:	f7ff ffe4 	bl	b4a88 <_ZN8MAX3010514setFIFOAverageEh>
  enableFIFORollover(); //Allow FIFO to wrap/roll over
   b4ac0:	4620      	mov	r0, r4
   b4ac2:	f7ff ffe6 	bl	b4a92 <_ZN8MAX3010518enableFIFORolloverEv>
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
   b4ac6:	2e03      	cmp	r6, #3
   b4ac8:	d154      	bne.n	b4b74 <_ZN8MAX301055setupEhhhiii+0xd8>
   b4aca:	2107      	movs	r1, #7
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
   b4acc:	4620      	mov	r0, r4
   b4ace:	f7ff ffad 	bl	b4a2c <_ZN8MAX3010510setLEDModeEh>
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
   b4ad2:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
   b4ad6:	7166      	strb	r6, [r4, #5]
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
   b4ad8:	da51      	bge.n	b4b7e <_ZN8MAX301055setupEhhhiii+0xe2>
   b4ada:	2100      	movs	r1, #0
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
   b4adc:	4620      	mov	r0, r4
   b4ade:	f7ff ffaa 	bl	b4a36 <_ZN8MAX3010511setADCRangeEh>
  if (sampleRate < 100) setSampleRate(MAX30105_SAMPLERATE_50); //Take 50 samples per second
   b4ae2:	2f63      	cmp	r7, #99	; 0x63
   b4ae4:	dc58      	bgt.n	b4b98 <_ZN8MAX301055setupEhhhiii+0xfc>
   b4ae6:	2100      	movs	r1, #0
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
   b4ae8:	4620      	mov	r0, r4
   b4aea:	f7ff ffa9 	bl	b4a40 <_ZN8MAX3010513setSampleRateEh>
  if (pulseWidth < 118) setPulseWidth(MAX30105_PULSEWIDTH_69); //Page 26, Gets us 15 bit resolution
   b4aee:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
   b4af2:	dc71      	bgt.n	b4bd8 <_ZN8MAX301055setupEhhhiii+0x13c>
   b4af4:	2100      	movs	r1, #0
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
   b4af6:	4620      	mov	r0, r4
   b4af8:	f7ff ffa7 	bl	b4a4a <_ZN8MAX3010513setPulseWidthEh>
  setPulseAmplitudeRed(powerLevel);
   b4afc:	4641      	mov	r1, r8
   b4afe:	4620      	mov	r0, r4
   b4b00:	f7ff ff3c 	bl	b497c <_ZN8MAX3010520setPulseAmplitudeRedEh>
  setPulseAmplitudeIR(powerLevel);
   b4b04:	4641      	mov	r1, r8
   b4b06:	4620      	mov	r0, r4
   b4b08:	f7ff ff3d 	bl	b4986 <_ZN8MAX3010519setPulseAmplitudeIREh>
  setPulseAmplitudeGreen(powerLevel);
   b4b0c:	4641      	mov	r1, r8
   b4b0e:	4620      	mov	r0, r4
   b4b10:	f7ff ff3e 	bl	b4990 <_ZN8MAX3010522setPulseAmplitudeGreenEh>
  setPulseAmplitudeProximity(powerLevel);
   b4b14:	4641      	mov	r1, r8
   b4b16:	4620      	mov	r0, r4
   b4b18:	f7ff ff3f 	bl	b499a <_ZN8MAX3010526setPulseAmplitudeProximityEh>
  enableSlot(1, SLOT_RED_LED);
   b4b1c:	2201      	movs	r2, #1
   b4b1e:	4611      	mov	r1, r2
   b4b20:	4620      	mov	r0, r4
   b4b22:	f7ff ff97 	bl	b4a54 <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
   b4b26:	2e01      	cmp	r6, #1
   b4b28:	d90b      	bls.n	b4b42 <_ZN8MAX301055setupEhhhiii+0xa6>
   b4b2a:	2202      	movs	r2, #2
   b4b2c:	4611      	mov	r1, r2
   b4b2e:	4620      	mov	r0, r4
   b4b30:	f7ff ff90 	bl	b4a54 <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 2) enableSlot(3, SLOT_GREEN_LED);
   b4b34:	2e02      	cmp	r6, #2
   b4b36:	d004      	beq.n	b4b42 <_ZN8MAX301055setupEhhhiii+0xa6>
   b4b38:	2203      	movs	r2, #3
   b4b3a:	4611      	mov	r1, r2
   b4b3c:	4620      	mov	r0, r4
   b4b3e:	f7ff ff89 	bl	b4a54 <_ZN8MAX3010510enableSlotEhh>
  clearFIFO(); //Reset the FIFO before we begin checking the sensor
   b4b42:	4620      	mov	r0, r4
}
   b4b44:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  clearFIFO(); //Reset the FIFO before we begin checking the sensor
   b4b48:	f7ff bf2c 	b.w	b49a4 <_ZN8MAX301059clearFIFOEv>
  else if (sampleAverage == 2) setFIFOAverage(MAX30105_SAMPLEAVG_2);
   b4b4c:	2d02      	cmp	r5, #2
   b4b4e:	d101      	bne.n	b4b54 <_ZN8MAX301055setupEhhhiii+0xb8>
   b4b50:	2120      	movs	r1, #32
   b4b52:	e7b2      	b.n	b4aba <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 4) setFIFOAverage(MAX30105_SAMPLEAVG_4);
   b4b54:	2d04      	cmp	r5, #4
   b4b56:	d101      	bne.n	b4b5c <_ZN8MAX301055setupEhhhiii+0xc0>
   b4b58:	2140      	movs	r1, #64	; 0x40
   b4b5a:	e7ae      	b.n	b4aba <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 8) setFIFOAverage(MAX30105_SAMPLEAVG_8);
   b4b5c:	2d08      	cmp	r5, #8
   b4b5e:	d101      	bne.n	b4b64 <_ZN8MAX301055setupEhhhiii+0xc8>
   b4b60:	2160      	movs	r1, #96	; 0x60
   b4b62:	e7aa      	b.n	b4aba <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 16) setFIFOAverage(MAX30105_SAMPLEAVG_16);
   b4b64:	2d10      	cmp	r5, #16
   b4b66:	d101      	bne.n	b4b6c <_ZN8MAX301055setupEhhhiii+0xd0>
   b4b68:	2180      	movs	r1, #128	; 0x80
   b4b6a:	e7a6      	b.n	b4aba <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
   b4b6c:	2d20      	cmp	r5, #32
   b4b6e:	d1f3      	bne.n	b4b58 <_ZN8MAX301055setupEhhhiii+0xbc>
   b4b70:	21a0      	movs	r1, #160	; 0xa0
   b4b72:	e7a2      	b.n	b4aba <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
   b4b74:	2e02      	cmp	r6, #2
   b4b76:	bf0c      	ite	eq
   b4b78:	2103      	moveq	r1, #3
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
   b4b7a:	2102      	movne	r1, #2
   b4b7c:	e7a6      	b.n	b4acc <_ZN8MAX301055setupEhhhiii+0x30>
  else if(adcRange < 8192) setADCRange(MAX30105_ADCRANGE_4096); //15.63pA per LSB
   b4b7e:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
   b4b82:	da01      	bge.n	b4b88 <_ZN8MAX301055setupEhhhiii+0xec>
   b4b84:	2120      	movs	r1, #32
   b4b86:	e7a9      	b.n	b4adc <_ZN8MAX301055setupEhhhiii+0x40>
  else if(adcRange < 16384) setADCRange(MAX30105_ADCRANGE_8192); //31.25pA per LSB
   b4b88:	f5ba 4f80 	cmp.w	sl, #16384	; 0x4000
   b4b8c:	da01      	bge.n	b4b92 <_ZN8MAX301055setupEhhhiii+0xf6>
   b4b8e:	2140      	movs	r1, #64	; 0x40
   b4b90:	e7a4      	b.n	b4adc <_ZN8MAX301055setupEhhhiii+0x40>
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
   b4b92:	d1a2      	bne.n	b4ada <_ZN8MAX301055setupEhhhiii+0x3e>
   b4b94:	2160      	movs	r1, #96	; 0x60
   b4b96:	e7a1      	b.n	b4adc <_ZN8MAX301055setupEhhhiii+0x40>
  else if (sampleRate < 200) setSampleRate(MAX30105_SAMPLERATE_100);
   b4b98:	2fc7      	cmp	r7, #199	; 0xc7
   b4b9a:	dc01      	bgt.n	b4ba0 <_ZN8MAX301055setupEhhhiii+0x104>
   b4b9c:	2104      	movs	r1, #4
   b4b9e:	e7a3      	b.n	b4ae8 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 400) setSampleRate(MAX30105_SAMPLERATE_200);
   b4ba0:	f5b7 7fc8 	cmp.w	r7, #400	; 0x190
   b4ba4:	da01      	bge.n	b4baa <_ZN8MAX301055setupEhhhiii+0x10e>
   b4ba6:	2108      	movs	r1, #8
   b4ba8:	e79e      	b.n	b4ae8 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 800) setSampleRate(MAX30105_SAMPLERATE_400);
   b4baa:	f5b7 7f48 	cmp.w	r7, #800	; 0x320
   b4bae:	da01      	bge.n	b4bb4 <_ZN8MAX301055setupEhhhiii+0x118>
   b4bb0:	210c      	movs	r1, #12
   b4bb2:	e799      	b.n	b4ae8 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 1000) setSampleRate(MAX30105_SAMPLERATE_800);
   b4bb4:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
   b4bb8:	da01      	bge.n	b4bbe <_ZN8MAX301055setupEhhhiii+0x122>
   b4bba:	2110      	movs	r1, #16
   b4bbc:	e794      	b.n	b4ae8 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 1600) setSampleRate(MAX30105_SAMPLERATE_1000);
   b4bbe:	f5b7 6fc8 	cmp.w	r7, #1600	; 0x640
   b4bc2:	da01      	bge.n	b4bc8 <_ZN8MAX301055setupEhhhiii+0x12c>
   b4bc4:	2114      	movs	r1, #20
   b4bc6:	e78f      	b.n	b4ae8 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 3200) setSampleRate(MAX30105_SAMPLERATE_1600);
   b4bc8:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
   b4bcc:	da01      	bge.n	b4bd2 <_ZN8MAX301055setupEhhhiii+0x136>
   b4bce:	2118      	movs	r1, #24
   b4bd0:	e78a      	b.n	b4ae8 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
   b4bd2:	d188      	bne.n	b4ae6 <_ZN8MAX301055setupEhhhiii+0x4a>
   b4bd4:	211c      	movs	r1, #28
   b4bd6:	e787      	b.n	b4ae8 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (pulseWidth < 215) setPulseWidth(MAX30105_PULSEWIDTH_118); //16 bit resolution
   b4bd8:	f1b9 0fd6 	cmp.w	r9, #214	; 0xd6
   b4bdc:	dc01      	bgt.n	b4be2 <_ZN8MAX301055setupEhhhiii+0x146>
   b4bde:	2101      	movs	r1, #1
   b4be0:	e789      	b.n	b4af6 <_ZN8MAX301055setupEhhhiii+0x5a>
  else if (pulseWidth < 411) setPulseWidth(MAX30105_PULSEWIDTH_215); //17 bit resolution
   b4be2:	f5b9 7fcd 	cmp.w	r9, #410	; 0x19a
   b4be6:	dc01      	bgt.n	b4bec <_ZN8MAX301055setupEhhhiii+0x150>
   b4be8:	2102      	movs	r1, #2
   b4bea:	e784      	b.n	b4af6 <_ZN8MAX301055setupEhhhiii+0x5a>
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
   b4bec:	f240 139b 	movw	r3, #411	; 0x19b
   b4bf0:	4599      	cmp	r9, r3
   b4bf2:	f47f af7f 	bne.w	b4af4 <_ZN8MAX301055setupEhhhiii+0x58>
   b4bf6:	2103      	movs	r1, #3
   b4bf8:	e77d      	b.n	b4af6 <_ZN8MAX301055setupEhhhiii+0x5a>

000b4bfa <_Z28maxim_peaks_above_min_heightPlS_S_ll>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
   b4bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int32_t i = 1, n_width;
  *n_npks = 0;
   b4bfe:	2400      	movs	r4, #0
   b4c00:	600c      	str	r4, [r1, #0]
  
  while (i < n_size-1){
   b4c02:	f103 38ff 	add.w	r8, r3, #4294967295
  int32_t i = 1, n_width;
   b4c06:	2401      	movs	r4, #1
  while (i < n_size-1){
   b4c08:	45a0      	cmp	r8, r4
   b4c0a:	dd27      	ble.n	b4c5c <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x62>
    if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){      // find left edge of potential peaks
   b4c0c:	9d06      	ldr	r5, [sp, #24]
   b4c0e:	f852 c024 	ldr.w	ip, [r2, r4, lsl #2]
   b4c12:	45ac      	cmp	ip, r5
   b4c14:	ea4f 0684 	mov.w	r6, r4, lsl #2
   b4c18:	f104 0501 	add.w	r5, r4, #1
   b4c1c:	dd1c      	ble.n	b4c58 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
   b4c1e:	4416      	add	r6, r2
   b4c20:	f856 6c04 	ldr.w	r6, [r6, #-4]
   b4c24:	45b4      	cmp	ip, r6
   b4c26:	dd17      	ble.n	b4c58 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
   b4c28:	462e      	mov	r6, r5
      n_width = 1;
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
   b4c2a:	429e      	cmp	r6, r3
   b4c2c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
   b4c30:	eba6 0e04 	sub.w	lr, r6, r4
   b4c34:	4635      	mov	r5, r6
   b4c36:	d003      	beq.n	b4c40 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x46>
   b4c38:	45bc      	cmp	ip, r7
   b4c3a:	f106 0601 	add.w	r6, r6, #1
   b4c3e:	d0f4      	beq.n	b4c2a <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x30>
        n_width++;
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
   b4c40:	45bc      	cmp	ip, r7
   b4c42:	dd09      	ble.n	b4c58 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
   b4c44:	680e      	ldr	r6, [r1, #0]
   b4c46:	2e0e      	cmp	r6, #14
   b4c48:	dc06      	bgt.n	b4c58 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
        pn_locs[(*n_npks)++] = i;    
   b4c4a:	1c75      	adds	r5, r6, #1
   b4c4c:	600d      	str	r5, [r1, #0]
        // for flat peaks, peak location is left edge
        i += n_width+1;
   b4c4e:	f10e 0501 	add.w	r5, lr, #1
        pn_locs[(*n_npks)++] = i;    
   b4c52:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
        i += n_width+1;
   b4c56:	4425      	add	r5, r4
{
   b4c58:	462c      	mov	r4, r5
   b4c5a:	e7d5      	b.n	b4c08 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0xe>
        i += n_width;
    }
    else
      i++;
  }
}
   b4c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4c60 <_Z17maxim_sort_ascendPll>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
   b4c60:	b5f0      	push	{r4, r5, r6, r7, lr}
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
   b4c62:	2301      	movs	r3, #1
   b4c64:	4604      	mov	r4, r0
   b4c66:	428b      	cmp	r3, r1
   b4c68:	da0f      	bge.n	b4c8a <_Z17maxim_sort_ascendPll+0x2a>
    n_temp = pn_x[i];
   b4c6a:	f854 6f04 	ldr.w	r6, [r4, #4]!
   b4c6e:	461a      	mov	r2, r3
   b4c70:	4625      	mov	r5, r4
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
   b4c72:	f855 7c04 	ldr.w	r7, [r5, #-4]
   b4c76:	42b7      	cmp	r7, r6
   b4c78:	dd03      	ble.n	b4c82 <_Z17maxim_sort_ascendPll+0x22>
   b4c7a:	3a01      	subs	r2, #1
        pn_x[j] = pn_x[j-1];
   b4c7c:	f845 7904 	str.w	r7, [r5], #-4
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
   b4c80:	d1f7      	bne.n	b4c72 <_Z17maxim_sort_ascendPll+0x12>
    pn_x[j] = n_temp;
   b4c82:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
  for (i = 1; i < n_size; i++) {
   b4c86:	3301      	adds	r3, #1
   b4c88:	e7ed      	b.n	b4c66 <_Z17maxim_sort_ascendPll+0x6>
  }
}
   b4c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4c8c <_Z26maxim_sort_indices_descendPlS_l>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/ 
{
   b4c8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
   b4c90:	2301      	movs	r3, #1
{
   b4c92:	4690      	mov	r8, r2
   b4c94:	460d      	mov	r5, r1
  for (i = 1; i < n_size; i++) {
   b4c96:	4543      	cmp	r3, r8
   b4c98:	da16      	bge.n	b4cc8 <_Z26maxim_sort_indices_descendPlS_l+0x3c>
    n_temp = pn_indx[i];
   b4c9a:	f855 6f04 	ldr.w	r6, [r5, #4]!
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
   b4c9e:	461c      	mov	r4, r3
   b4ca0:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   b4ca4:	46ac      	mov	ip, r5
   b4ca6:	f8d9 2000 	ldr.w	r2, [r9]
   b4caa:	f85c 7c04 	ldr.w	r7, [ip, #-4]
   b4cae:	4696      	mov	lr, r2
   b4cb0:	f850 2027 	ldr.w	r2, [r0, r7, lsl #2]
   b4cb4:	4596      	cmp	lr, r2
   b4cb6:	dd03      	ble.n	b4cc0 <_Z26maxim_sort_indices_descendPlS_l+0x34>
   b4cb8:	3c01      	subs	r4, #1
      pn_indx[j] = pn_indx[j-1];
   b4cba:	f84c 7904 	str.w	r7, [ip], #-4
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
   b4cbe:	d1f2      	bne.n	b4ca6 <_Z26maxim_sort_indices_descendPlS_l+0x1a>
    pn_indx[j] = n_temp;
   b4cc0:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
  for (i = 1; i < n_size; i++) {
   b4cc4:	3301      	adds	r3, #1
   b4cc6:	e7e6      	b.n	b4c96 <_Z26maxim_sort_indices_descendPlS_l+0xa>
  }
}
   b4cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4ccc <_Z24maxim_remove_close_peaksPlS_S_l>:
{
   b4ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4cd0:	4604      	mov	r4, r0
   b4cd2:	461f      	mov	r7, r3
   b4cd4:	4610      	mov	r0, r2
   b4cd6:	460d      	mov	r5, r1
  maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
   b4cd8:	680a      	ldr	r2, [r1, #0]
   b4cda:	4621      	mov	r1, r4
   b4cdc:	f7ff ffd6 	bl	b4c8c <_Z26maxim_sort_indices_descendPlS_l>
   b4ce0:	f04f 32ff 	mov.w	r2, #4294967295
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
   b4ce4:	f1c7 0e00 	rsb	lr, r7, #0
  for ( i = -1; i < *pn_npks; i++ ){
   b4ce8:	6829      	ldr	r1, [r5, #0]
   b4cea:	4291      	cmp	r1, r2
   b4cec:	dd1d      	ble.n	b4d2a <_Z24maxim_remove_close_peaksPlS_S_l+0x5e>
    *pn_npks = i+1;
   b4cee:	1c53      	adds	r3, r2, #1
   b4cf0:	461e      	mov	r6, r3
   b4cf2:	602b      	str	r3, [r5, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
   b4cf4:	42b1      	cmp	r1, r6
   b4cf6:	d016      	beq.n	b4d26 <_Z24maxim_remove_close_peaksPlS_S_l+0x5a>
      n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
   b4cf8:	1c50      	adds	r0, r2, #1
   b4cfa:	bf18      	it	ne
   b4cfc:	f854 0022 	ldrne.w	r0, [r4, r2, lsl #2]
   b4d00:	f854 c026 	ldr.w	ip, [r4, r6, lsl #2]
   b4d04:	bf08      	it	eq
   b4d06:	4610      	moveq	r0, r2
   b4d08:	ebac 0000 	sub.w	r0, ip, r0
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
   b4d0c:	42b8      	cmp	r0, r7
   b4d0e:	dc01      	bgt.n	b4d14 <_Z24maxim_remove_close_peaksPlS_S_l+0x48>
   b4d10:	4586      	cmp	lr, r0
   b4d12:	dd06      	ble.n	b4d22 <_Z24maxim_remove_close_peaksPlS_S_l+0x56>
        pn_locs[(*pn_npks)++] = pn_locs[j];
   b4d14:	6828      	ldr	r0, [r5, #0]
   b4d16:	f100 0801 	add.w	r8, r0, #1
   b4d1a:	f8c5 8000 	str.w	r8, [r5]
   b4d1e:	f844 c020 	str.w	ip, [r4, r0, lsl #2]
    for ( j = i+1; j < n_old_npks; j++ ){
   b4d22:	3601      	adds	r6, #1
   b4d24:	e7e6      	b.n	b4cf4 <_Z24maxim_remove_close_peaksPlS_S_l+0x28>
   b4d26:	461a      	mov	r2, r3
   b4d28:	e7de      	b.n	b4ce8 <_Z24maxim_remove_close_peaksPlS_S_l+0x1c>
  maxim_sort_ascend( pn_locs, *pn_npks );
   b4d2a:	4620      	mov	r0, r4
}
   b4d2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  maxim_sort_ascend( pn_locs, *pn_npks );
   b4d30:	f7ff bf96 	b.w	b4c60 <_Z17maxim_sort_ascendPll>

000b4d34 <_Z16maxim_find_peaksPlS_S_llll>:
{
   b4d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
   b4d36:	9d06      	ldr	r5, [sp, #24]
   b4d38:	9500      	str	r5, [sp, #0]
   b4d3a:	f7ff ff5e 	bl	b4bfa <_Z28maxim_peaks_above_min_heightPlS_S_ll>
{
   b4d3e:	460c      	mov	r4, r1
  maxim_remove_close_peaks( pn_locs, n_npks, pn_x, n_min_distance );
   b4d40:	9b07      	ldr	r3, [sp, #28]
   b4d42:	f7ff ffc3 	bl	b4ccc <_Z24maxim_remove_close_peaksPlS_S_l>
  *n_npks = min( *n_npks, n_max_num );
   b4d46:	6822      	ldr	r2, [r4, #0]
   b4d48:	9b08      	ldr	r3, [sp, #32]
   b4d4a:	429a      	cmp	r2, r3
   b4d4c:	bfd4      	ite	le
   b4d4e:	6022      	strle	r2, [r4, #0]
   b4d50:	6023      	strgt	r3, [r4, #0]
}
   b4d52:	b003      	add	sp, #12
   b4d54:	bd30      	pop	{r4, r5, pc}
	...

000b4d58 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_>:
{
   b4d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4d5c:	b09d      	sub	sp, #116	; 0x74
   b4d5e:	e9dd 9827 	ldrd	r9, r8, [sp, #156]	; 0x9c
   b4d62:	4616      	mov	r6, r2
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
   b4d64:	2200      	movs	r2, #0
{
   b4d66:	469b      	mov	fp, r3
   b4d68:	4605      	mov	r5, r0
   b4d6a:	460c      	mov	r4, r1
  un_ir_mean =0; 
   b4d6c:	4613      	mov	r3, r2
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
   b4d6e:	42a2      	cmp	r2, r4
   b4d70:	da04      	bge.n	b4d7c <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x24>
   b4d72:	f835 1012 	ldrh.w	r1, [r5, r2, lsl #1]
   b4d76:	3201      	adds	r2, #1
   b4d78:	440b      	add	r3, r1
   b4d7a:	e7f8      	b.n	b4d6e <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x16>
  un_ir_mean =un_ir_mean/n_ir_buffer_length ;
   b4d7c:	4f8d      	ldr	r7, [pc, #564]	; (b4fb4 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x25c>)
   b4d7e:	fbb3 f3f4 	udiv	r3, r3, r4
   b4d82:	4638      	mov	r0, r7
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
   b4d84:	2200      	movs	r2, #0
   b4d86:	42a2      	cmp	r2, r4
   b4d88:	da06      	bge.n	b4d98 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x40>
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ; 
   b4d8a:	f835 1012 	ldrh.w	r1, [r5, r2, lsl #1]
   b4d8e:	1a59      	subs	r1, r3, r1
   b4d90:	f840 1b04 	str.w	r1, [r0], #4
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
   b4d94:	3201      	adds	r2, #1
   b4d96:	e7f6      	b.n	b4d86 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x2e>
   b4d98:	4a86      	ldr	r2, [pc, #536]	; (b4fb4 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x25c>)
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
   b4d9a:	2100      	movs	r1, #0
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
   b4d9c:	6813      	ldr	r3, [r2, #0]
   b4d9e:	f852 0f04 	ldr.w	r0, [r2, #4]!
   b4da2:	4403      	add	r3, r0
   b4da4:	6850      	ldr	r0, [r2, #4]
   b4da6:	4403      	add	r3, r0
   b4da8:	6890      	ldr	r0, [r2, #8]
   b4daa:	181b      	adds	r3, r3, r0
   b4dac:	bf48      	it	mi
   b4dae:	3303      	addmi	r3, #3
   b4db0:	3101      	adds	r1, #1
   b4db2:	109b      	asrs	r3, r3, #2
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
   b4db4:	2960      	cmp	r1, #96	; 0x60
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
   b4db6:	f842 3c04 	str.w	r3, [r2, #-4]
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
   b4dba:	d1ef      	bne.n	b4d9c <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x44>
  n_th1=0; 
   b4dbc:	2300      	movs	r3, #0
   b4dbe:	4a7d      	ldr	r2, [pc, #500]	; (b4fb4 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x25c>)
  for ( k=0 ; k<BUFFER_SIZE ;k++){
   b4dc0:	469a      	mov	sl, r3
    n_th1 +=  an_x[k];
   b4dc2:	f852 1b04 	ldr.w	r1, [r2], #4
  for ( k=0 ; k<BUFFER_SIZE ;k++){
   b4dc6:	f10a 0a01 	add.w	sl, sl, #1
   b4dca:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
    n_th1 +=  an_x[k];
   b4dce:	440b      	add	r3, r1
  for ( k=0 ; k<BUFFER_SIZE ;k++){
   b4dd0:	d1f7      	bne.n	b4dc2 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x6a>
  if( n_th1<30) n_th1=30; // min allowed
   b4dd2:	f640 32b7 	movw	r2, #2999	; 0xbb7
   b4dd6:	4293      	cmp	r3, r2
   b4dd8:	dd4f      	ble.n	b4e7a <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x122>
  n_th1=  n_th1/ ( BUFFER_SIZE);
   b4dda:	fb93 fafa 	sdiv	sl, r3, sl
   b4dde:	f1ba 0f3c 	cmp.w	sl, #60	; 0x3c
   b4de2:	bfa8      	it	ge
   b4de4:	f04f 0a3c 	movge.w	sl, #60	; 0x3c
  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
   b4de8:	223c      	movs	r2, #60	; 0x3c
   b4dea:	2100      	movs	r1, #0
   b4dec:	a80d      	add	r0, sp, #52	; 0x34
   b4dee:	f002 fc0f 	bl	b7610 <memset>
  maxim_find_peaks( an_ir_valley_locs, &n_npks, an_x, BUFFER_SIZE, n_th1, 4, 15 );//peak_height, peak_distance, max_num_peaks 
   b4df2:	2304      	movs	r3, #4
   b4df4:	220f      	movs	r2, #15
   b4df6:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b4dfa:	f8cd a000 	str.w	sl, [sp]
   b4dfe:	4a6d      	ldr	r2, [pc, #436]	; (b4fb4 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x25c>)
   b4e00:	2364      	movs	r3, #100	; 0x64
   b4e02:	a907      	add	r1, sp, #28
   b4e04:	a80d      	add	r0, sp, #52	; 0x34
   b4e06:	f7ff ff95 	bl	b4d34 <_Z16maxim_find_peaksPlS_S_llll>
  if (n_npks>=2){
   b4e0a:	9b07      	ldr	r3, [sp, #28]
   b4e0c:	2b01      	cmp	r3, #1
   b4e0e:	f04f 0200 	mov.w	r2, #0
   b4e12:	dd35      	ble.n	b4e80 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x128>
   b4e14:	a90d      	add	r1, sp, #52	; 0x34
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
   b4e16:	f04f 0c01 	mov.w	ip, #1
   b4e1a:	4608      	mov	r0, r1
   b4e1c:	f8d1 e004 	ldr.w	lr, [r1, #4]
   b4e20:	6800      	ldr	r0, [r0, #0]
   b4e22:	f10c 0c01 	add.w	ip, ip, #1
   b4e26:	ebae 0000 	sub.w	r0, lr, r0
   b4e2a:	4563      	cmp	r3, ip
   b4e2c:	f101 0104 	add.w	r1, r1, #4
   b4e30:	4402      	add	r2, r0
   b4e32:	d1f2      	bne.n	b4e1a <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0xc2>
    n_peak_interval_sum =n_peak_interval_sum/(n_npks-1);
   b4e34:	1e59      	subs	r1, r3, #1
   b4e36:	fb92 f2f1 	sdiv	r2, r2, r1
    *pn_heart_rate =(int32_t)( (FreqS*60)/ n_peak_interval_sum );
   b4e3a:	f240 51dc 	movw	r1, #1500	; 0x5dc
   b4e3e:	fb91 f2f2 	sdiv	r2, r1, r2
   b4e42:	f8c9 2000 	str.w	r2, [r9]
    *pch_hr_valid  = 1;
   b4e46:	2201      	movs	r2, #1
   b4e48:	495b      	ldr	r1, [pc, #364]	; (b4fb8 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x260>)
   b4e4a:	f888 2000 	strb.w	r2, [r8]
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
   b4e4e:	2200      	movs	r2, #0
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
   b4e50:	42a2      	cmp	r2, r4
   b4e52:	db19      	blt.n	b4e88 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x130>
  for(k=0; k< 5; k++) an_ratio[k]=0;
   b4e54:	2200      	movs	r2, #0
   b4e56:	e9cd 2208 	strd	r2, r2, [sp, #32]
   b4e5a:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
   b4e5e:	ae0d      	add	r6, sp, #52	; 0x34
   b4e60:	920c      	str	r2, [sp, #48]	; 0x30
   b4e62:	4631      	mov	r1, r6
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
   b4e64:	4293      	cmp	r3, r2
   b4e66:	dd1b      	ble.n	b4ea0 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x148>
    if (an_ir_valley_locs[k] > BUFFER_SIZE ){
   b4e68:	f851 0b04 	ldr.w	r0, [r1], #4
   b4e6c:	2864      	cmp	r0, #100	; 0x64
   b4e6e:	dd15      	ble.n	b4e9c <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x144>
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
   b4e70:	4b52      	ldr	r3, [pc, #328]	; (b4fbc <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x264>)
   b4e72:	f8cb 3000 	str.w	r3, [fp]
    *pch_spo2_valid  = 0; 
   b4e76:	2300      	movs	r3, #0
   b4e78:	e092      	b.n	b4fa0 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x248>
  if( n_th1<30) n_th1=30; // min allowed
   b4e7a:	f04f 0a1e 	mov.w	sl, #30
   b4e7e:	e7b3      	b.n	b4de8 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x90>
    *pn_heart_rate = -999; // unable to calculate because # of peaks are too small
   b4e80:	494e      	ldr	r1, [pc, #312]	; (b4fbc <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x264>)
   b4e82:	f8c9 1000 	str.w	r1, [r9]
    *pch_hr_valid  = 0;
   b4e86:	e7df      	b.n	b4e48 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0xf0>
      an_x[k] =  pun_ir_buffer[k] ; 
   b4e88:	f835 0012 	ldrh.w	r0, [r5, r2, lsl #1]
   b4e8c:	f847 0b04 	str.w	r0, [r7], #4
      an_y[k] =  pun_red_buffer[k] ; 
   b4e90:	f836 0012 	ldrh.w	r0, [r6, r2, lsl #1]
   b4e94:	f841 0b04 	str.w	r0, [r1], #4
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
   b4e98:	3201      	adds	r2, #1
   b4e9a:	e7d9      	b.n	b4e50 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0xf8>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
   b4e9c:	3201      	adds	r2, #1
   b4e9e:	e7e1      	b.n	b4e64 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x10c>
  int32_t n_x_dc_max_idx = 0; 
   b4ea0:	2400      	movs	r4, #0
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
   b4ea2:	3b01      	subs	r3, #1
   b4ea4:	4f43      	ldr	r7, [pc, #268]	; (b4fb4 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x25c>)
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   b4ea6:	f8df c110 	ldr.w	ip, [pc, #272]	; b4fb8 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x260>
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
   b4eaa:	9404      	str	r4, [sp, #16]
  int32_t n_y_dc_max_idx = 0;
   b4eac:	4625      	mov	r5, r4
  n_i_ratio_count = 0; 
   b4eae:	4621      	mov	r1, r4
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
   b4eb0:	9305      	str	r3, [sp, #20]
   b4eb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b4eb6:	4293      	cmp	r3, r2
   b4eb8:	dd56      	ble.n	b4f68 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x210>
    if (an_ir_valley_locs[k+1]-an_ir_valley_locs[k] >3){
   b4eba:	f8d6 8004 	ldr.w	r8, [r6, #4]
   b4ebe:	f856 0b04 	ldr.w	r0, [r6], #4
   b4ec2:	4613      	mov	r3, r2
   b4ec4:	eba8 0900 	sub.w	r9, r8, r0
   b4ec8:	3301      	adds	r3, #1
   b4eca:	f1b9 0f03 	cmp.w	r9, #3
   b4ece:	9304      	str	r3, [sp, #16]
   b4ed0:	ddef      	ble.n	b4eb2 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x15a>
    n_x_dc_max= -16777216; 
   b4ed2:	f04f 4e7f 	mov.w	lr, #4278190080	; 0xff000000
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
   b4ed6:	4603      	mov	r3, r0
    n_y_dc_max= -16777216 ; 
   b4ed8:	46f2      	mov	sl, lr
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
   b4eda:	4598      	cmp	r8, r3
   b4edc:	dd0e      	ble.n	b4efc <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x1a4>
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
   b4ede:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
   b4ee2:	4572      	cmp	r2, lr
   b4ee4:	bfc8      	it	gt
   b4ee6:	4696      	movgt	lr, r2
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   b4ee8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
   b4eec:	bfc8      	it	gt
   b4eee:	461c      	movgt	r4, r3
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   b4ef0:	4552      	cmp	r2, sl
   b4ef2:	bfc4      	itt	gt
   b4ef4:	461d      	movgt	r5, r3
   b4ef6:	4692      	movgt	sl, r2
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
   b4ef8:	3301      	adds	r3, #1
   b4efa:	e7ee      	b.n	b4eda <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x182>
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
   b4efc:	f857 2020 	ldr.w	r2, [r7, r0, lsl #2]
   b4f00:	f857 3028 	ldr.w	r3, [r7, r8, lsl #2]
   b4f04:	1a9b      	subs	r3, r3, r2
   b4f06:	1a22      	subs	r2, r4, r0
   b4f08:	4353      	muls	r3, r2
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]); 
   b4f0a:	f857 2020 	ldr.w	r2, [r7, r0, lsl #2]
   b4f0e:	fb93 f3f9 	sdiv	r3, r3, r9
   b4f12:	4413      	add	r3, r2
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
   b4f14:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
   b4f18:	1ad2      	subs	r2, r2, r3
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
   b4f1a:	fb0a f202 	mul.w	r2, sl, r2
   b4f1e:	ea4f 1ae2 	mov.w	sl, r2, asr #7
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
   b4f22:	f1ba 0f00 	cmp.w	sl, #0
   b4f26:	ddc4      	ble.n	b4eb2 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x15a>
   b4f28:	2904      	cmp	r1, #4
   b4f2a:	dcc2      	bgt.n	b4eb2 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x15a>
      n_y_ac= (an_y[an_ir_valley_locs[k+1]] - an_y[an_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_ir_valley_locs[k]); //red
   b4f2c:	f85c 3020 	ldr.w	r3, [ip, r0, lsl #2]
   b4f30:	f85c 2028 	ldr.w	r2, [ip, r8, lsl #2]
   b4f34:	1a28      	subs	r0, r5, r0
   b4f36:	1ad2      	subs	r2, r2, r3
   b4f38:	4350      	muls	r0, r2
      n_y_ac=  an_y[an_ir_valley_locs[k]] + n_y_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k])  ; 
   b4f3a:	fb90 f0f9 	sdiv	r0, r0, r9
   b4f3e:	4418      	add	r0, r3
      n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw 
   b4f40:	f85c 3025 	ldr.w	r3, [ip, r5, lsl #2]
   b4f44:	1a1b      	subs	r3, r3, r0
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
   b4f46:	fb0e fe03 	mul.w	lr, lr, r3
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
   b4f4a:	ea5f 1eee 	movs.w	lr, lr, asr #7
   b4f4e:	d0b0      	beq.n	b4eb2 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x15a>
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
   b4f50:	ab1c      	add	r3, sp, #112	; 0x70
   b4f52:	eb03 0881 	add.w	r8, r3, r1, lsl #2
   b4f56:	2364      	movs	r3, #100	; 0x64
   b4f58:	fb03 f20e 	mul.w	r2, r3, lr
        n_i_ratio_count++;
   b4f5c:	3101      	adds	r1, #1
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
   b4f5e:	fb92 f2fa 	sdiv	r2, r2, sl
   b4f62:	f848 2c50 	str.w	r2, [r8, #-80]
        n_i_ratio_count++;
   b4f66:	e7a4      	b.n	b4eb2 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x15a>
  maxim_sort_ascend(an_ratio, n_i_ratio_count);
   b4f68:	a808      	add	r0, sp, #32
   b4f6a:	f7ff fe79 	bl	b4c60 <_Z17maxim_sort_ascendPll>
  n_middle_idx= n_i_ratio_count/2;
   b4f6e:	104a      	asrs	r2, r1, #1
  if (n_middle_idx >1)
   b4f70:	2903      	cmp	r1, #3
   b4f72:	ea4f 0382 	mov.w	r3, r2, lsl #2
   b4f76:	dd18      	ble.n	b4faa <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x252>
    n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
   b4f78:	a91c      	add	r1, sp, #112	; 0x70
   b4f7a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   b4f7e:	f851 3c54 	ldr.w	r3, [r1, #-84]
   b4f82:	f851 2c50 	ldr.w	r2, [r1, #-80]
   b4f86:	4413      	add	r3, r2
   b4f88:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   b4f8c:	105b      	asrs	r3, r3, #1
  if( n_ratio_average>2 && n_ratio_average <184){
   b4f8e:	1eda      	subs	r2, r3, #3
   b4f90:	2ab4      	cmp	r2, #180	; 0xb4
   b4f92:	f63f af6d 	bhi.w	b4e70 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x118>
    n_spo2_calc= uch_spo2_table[n_ratio_average] ;
   b4f96:	4a0a      	ldr	r2, [pc, #40]	; (b4fc0 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x268>)
   b4f98:	5cd3      	ldrb	r3, [r2, r3]
   b4f9a:	f8cb 3000 	str.w	r3, [fp]
    *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
   b4f9e:	2301      	movs	r3, #1
    *pch_spo2_valid  = 0; 
   b4fa0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   b4fa2:	7013      	strb	r3, [r2, #0]
}
   b4fa4:	b01d      	add	sp, #116	; 0x74
   b4fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    n_ratio_average = an_ratio[n_middle_idx ];
   b4faa:	aa1c      	add	r2, sp, #112	; 0x70
   b4fac:	4413      	add	r3, r2
   b4fae:	f853 3c50 	ldr.w	r3, [r3, #-80]
   b4fb2:	e7ec      	b.n	b4f8e <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x236>
   b4fb4:	2003e364 	.word	0x2003e364
   b4fb8:	2003e4f4 	.word	0x2003e4f4
   b4fbc:	fffffc19 	.word	0xfffffc19
   b4fc0:	000b7b01 	.word	0x000b7b01

000b4fc4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4fc4:	b508      	push	{r3, lr}
   b4fc6:	4b02      	ldr	r3, [pc, #8]	; (b4fd0 <netdb_freeaddrinfo+0xc>)
   b4fc8:	681b      	ldr	r3, [r3, #0]
   b4fca:	689b      	ldr	r3, [r3, #8]
   b4fcc:	9301      	str	r3, [sp, #4]
   b4fce:	bd08      	pop	{r3, pc}
   b4fd0:	00030268 	.word	0x00030268

000b4fd4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4fd4:	b508      	push	{r3, lr}
   b4fd6:	4b02      	ldr	r3, [pc, #8]	; (b4fe0 <netdb_getaddrinfo+0xc>)
   b4fd8:	681b      	ldr	r3, [r3, #0]
   b4fda:	68db      	ldr	r3, [r3, #12]
   b4fdc:	9301      	str	r3, [sp, #4]
   b4fde:	bd08      	pop	{r3, pc}
   b4fe0:	00030268 	.word	0x00030268

000b4fe4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4fe4:	b508      	push	{r3, lr}
   b4fe6:	4b02      	ldr	r3, [pc, #8]	; (b4ff0 <HAL_RNG_GetRandomNumber+0xc>)
   b4fe8:	681b      	ldr	r3, [r3, #0]
   b4fea:	685b      	ldr	r3, [r3, #4]
   b4fec:	9301      	str	r3, [sp, #4]
   b4fee:	bd08      	pop	{r3, pc}
   b4ff0:	00030218 	.word	0x00030218

000b4ff4 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4ff4:	b508      	push	{r3, lr}
   b4ff6:	4b02      	ldr	r3, [pc, #8]	; (b5000 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4ff8:	681b      	ldr	r3, [r3, #0]
   b4ffa:	695b      	ldr	r3, [r3, #20]
   b4ffc:	9301      	str	r3, [sp, #4]
   b4ffe:	bd08      	pop	{r3, pc}
   b5000:	00030218 	.word	0x00030218

000b5004 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b5004:	b508      	push	{r3, lr}
   b5006:	4b02      	ldr	r3, [pc, #8]	; (b5010 <hal_rtc_time_is_valid+0xc>)
   b5008:	681b      	ldr	r3, [r3, #0]
   b500a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b500c:	9301      	str	r3, [sp, #4]
   b500e:	bd08      	pop	{r3, pc}
   b5010:	00030218 	.word	0x00030218

000b5014 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b5014:	b508      	push	{r3, lr}
   b5016:	4b02      	ldr	r3, [pc, #8]	; (b5020 <hal_rtc_get_time+0xc>)
   b5018:	681b      	ldr	r3, [r3, #0]
   b501a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b501c:	9301      	str	r3, [sp, #4]
   b501e:	bd08      	pop	{r3, pc}
   b5020:	00030218 	.word	0x00030218

000b5024 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5024:	b508      	push	{r3, lr}
   b5026:	4b02      	ldr	r3, [pc, #8]	; (b5030 <os_mutex_recursive_create+0xc>)
   b5028:	681b      	ldr	r3, [r3, #0]
   b502a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b502c:	9301      	str	r3, [sp, #4]
   b502e:	bd08      	pop	{r3, pc}
   b5030:	00030248 	.word	0x00030248

000b5034 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5034:	b508      	push	{r3, lr}
   b5036:	4b02      	ldr	r3, [pc, #8]	; (b5040 <inet_inet_ntop+0xc>)
   b5038:	681b      	ldr	r3, [r3, #0]
   b503a:	695b      	ldr	r3, [r3, #20]
   b503c:	9301      	str	r3, [sp, #4]
   b503e:	bd08      	pop	{r3, pc}
   b5040:	00030264 	.word	0x00030264

000b5044 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5044:	b508      	push	{r3, lr}
   b5046:	4b02      	ldr	r3, [pc, #8]	; (b5050 <hal_usart_write+0xc>)
   b5048:	681b      	ldr	r3, [r3, #0]
   b504a:	68db      	ldr	r3, [r3, #12]
   b504c:	9301      	str	r3, [sp, #4]
   b504e:	bd08      	pop	{r3, pc}
   b5050:	0003023c 	.word	0x0003023c

000b5054 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5054:	b508      	push	{r3, lr}
   b5056:	4b02      	ldr	r3, [pc, #8]	; (b5060 <hal_usart_available+0xc>)
   b5058:	681b      	ldr	r3, [r3, #0]
   b505a:	691b      	ldr	r3, [r3, #16]
   b505c:	9301      	str	r3, [sp, #4]
   b505e:	bd08      	pop	{r3, pc}
   b5060:	0003023c 	.word	0x0003023c

000b5064 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5064:	b508      	push	{r3, lr}
   b5066:	4b02      	ldr	r3, [pc, #8]	; (b5070 <hal_usart_read+0xc>)
   b5068:	681b      	ldr	r3, [r3, #0]
   b506a:	695b      	ldr	r3, [r3, #20]
   b506c:	9301      	str	r3, [sp, #4]
   b506e:	bd08      	pop	{r3, pc}
   b5070:	0003023c 	.word	0x0003023c

000b5074 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5074:	b508      	push	{r3, lr}
   b5076:	4b02      	ldr	r3, [pc, #8]	; (b5080 <hal_usart_peek+0xc>)
   b5078:	681b      	ldr	r3, [r3, #0]
   b507a:	699b      	ldr	r3, [r3, #24]
   b507c:	9301      	str	r3, [sp, #4]
   b507e:	bd08      	pop	{r3, pc}
   b5080:	0003023c 	.word	0x0003023c

000b5084 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5084:	b508      	push	{r3, lr}
   b5086:	4b02      	ldr	r3, [pc, #8]	; (b5090 <hal_usart_flush+0xc>)
   b5088:	681b      	ldr	r3, [r3, #0]
   b508a:	69db      	ldr	r3, [r3, #28]
   b508c:	9301      	str	r3, [sp, #4]
   b508e:	bd08      	pop	{r3, pc}
   b5090:	0003023c 	.word	0x0003023c

000b5094 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5094:	b508      	push	{r3, lr}
   b5096:	4b02      	ldr	r3, [pc, #8]	; (b50a0 <hal_usart_available_data_for_write+0xc>)
   b5098:	681b      	ldr	r3, [r3, #0]
   b509a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b509c:	9301      	str	r3, [sp, #4]
   b509e:	bd08      	pop	{r3, pc}
   b50a0:	0003023c 	.word	0x0003023c

000b50a4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b50a4:	b508      	push	{r3, lr}
   b50a6:	4b02      	ldr	r3, [pc, #8]	; (b50b0 <hal_usart_init_ex+0xc>)
   b50a8:	681b      	ldr	r3, [r3, #0]
   b50aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b50ac:	9301      	str	r3, [sp, #4]
   b50ae:	bd08      	pop	{r3, pc}
   b50b0:	0003023c 	.word	0x0003023c

000b50b4 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b50b4:	b508      	push	{r3, lr}
   b50b6:	4b02      	ldr	r3, [pc, #8]	; (b50c0 <hal_i2c_begin+0xc>)
   b50b8:	681b      	ldr	r3, [r3, #0]
   b50ba:	68db      	ldr	r3, [r3, #12]
   b50bc:	9301      	str	r3, [sp, #4]
   b50be:	bd08      	pop	{r3, pc}
   b50c0:	00030228 	.word	0x00030228

000b50c4 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b50c4:	b508      	push	{r3, lr}
   b50c6:	4b02      	ldr	r3, [pc, #8]	; (b50d0 <hal_i2c_begin_transmission+0xc>)
   b50c8:	681b      	ldr	r3, [r3, #0]
   b50ca:	699b      	ldr	r3, [r3, #24]
   b50cc:	9301      	str	r3, [sp, #4]
   b50ce:	bd08      	pop	{r3, pc}
   b50d0:	00030228 	.word	0x00030228

000b50d4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b50d4:	b508      	push	{r3, lr}
   b50d6:	4b02      	ldr	r3, [pc, #8]	; (b50e0 <hal_i2c_end_transmission+0xc>)
   b50d8:	681b      	ldr	r3, [r3, #0]
   b50da:	69db      	ldr	r3, [r3, #28]
   b50dc:	9301      	str	r3, [sp, #4]
   b50de:	bd08      	pop	{r3, pc}
   b50e0:	00030228 	.word	0x00030228

000b50e4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b50e4:	b508      	push	{r3, lr}
   b50e6:	4b02      	ldr	r3, [pc, #8]	; (b50f0 <hal_i2c_write+0xc>)
   b50e8:	681b      	ldr	r3, [r3, #0]
   b50ea:	6a1b      	ldr	r3, [r3, #32]
   b50ec:	9301      	str	r3, [sp, #4]
   b50ee:	bd08      	pop	{r3, pc}
   b50f0:	00030228 	.word	0x00030228

000b50f4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b50f4:	b508      	push	{r3, lr}
   b50f6:	4b02      	ldr	r3, [pc, #8]	; (b5100 <hal_i2c_available+0xc>)
   b50f8:	681b      	ldr	r3, [r3, #0]
   b50fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b50fc:	9301      	str	r3, [sp, #4]
   b50fe:	bd08      	pop	{r3, pc}
   b5100:	00030228 	.word	0x00030228

000b5104 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5104:	b508      	push	{r3, lr}
   b5106:	4b02      	ldr	r3, [pc, #8]	; (b5110 <hal_i2c_read+0xc>)
   b5108:	681b      	ldr	r3, [r3, #0]
   b510a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b510c:	9301      	str	r3, [sp, #4]
   b510e:	bd08      	pop	{r3, pc}
   b5110:	00030228 	.word	0x00030228

000b5114 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5114:	b508      	push	{r3, lr}
   b5116:	4b02      	ldr	r3, [pc, #8]	; (b5120 <hal_i2c_peek+0xc>)
   b5118:	681b      	ldr	r3, [r3, #0]
   b511a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b511c:	9301      	str	r3, [sp, #4]
   b511e:	bd08      	pop	{r3, pc}
   b5120:	00030228 	.word	0x00030228

000b5124 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5124:	b508      	push	{r3, lr}
   b5126:	4b02      	ldr	r3, [pc, #8]	; (b5130 <hal_i2c_flush+0xc>)
   b5128:	681b      	ldr	r3, [r3, #0]
   b512a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b512c:	9301      	str	r3, [sp, #4]
   b512e:	bd08      	pop	{r3, pc}
   b5130:	00030228 	.word	0x00030228

000b5134 <hal_i2c_init>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5134:	b508      	push	{r3, lr}
   b5136:	4b02      	ldr	r3, [pc, #8]	; (b5140 <hal_i2c_init+0xc>)
   b5138:	681b      	ldr	r3, [r3, #0]
   b513a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b513c:	9301      	str	r3, [sp, #4]
   b513e:	bd08      	pop	{r3, pc}
   b5140:	00030228 	.word	0x00030228

000b5144 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b5144:	b508      	push	{r3, lr}
   b5146:	4b02      	ldr	r3, [pc, #8]	; (b5150 <hal_i2c_request_ex+0xc>)
   b5148:	681b      	ldr	r3, [r3, #0]
   b514a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b514c:	9301      	str	r3, [sp, #4]
   b514e:	bd08      	pop	{r3, pc}
   b5150:	00030228 	.word	0x00030228

000b5154 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5154:	b508      	push	{r3, lr}
   b5156:	4b02      	ldr	r3, [pc, #8]	; (b5160 <HAL_USB_USART_Init+0xc>)
   b5158:	681b      	ldr	r3, [r3, #0]
   b515a:	681b      	ldr	r3, [r3, #0]
   b515c:	9301      	str	r3, [sp, #4]
   b515e:	bd08      	pop	{r3, pc}
   b5160:	0003024c 	.word	0x0003024c

000b5164 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5164:	b508      	push	{r3, lr}
   b5166:	4b02      	ldr	r3, [pc, #8]	; (b5170 <HAL_USB_USART_Begin+0xc>)
   b5168:	681b      	ldr	r3, [r3, #0]
   b516a:	685b      	ldr	r3, [r3, #4]
   b516c:	9301      	str	r3, [sp, #4]
   b516e:	bd08      	pop	{r3, pc}
   b5170:	0003024c 	.word	0x0003024c

000b5174 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5174:	b508      	push	{r3, lr}
   b5176:	4b02      	ldr	r3, [pc, #8]	; (b5180 <HAL_USB_USART_Available_Data+0xc>)
   b5178:	681b      	ldr	r3, [r3, #0]
   b517a:	691b      	ldr	r3, [r3, #16]
   b517c:	9301      	str	r3, [sp, #4]
   b517e:	bd08      	pop	{r3, pc}
   b5180:	0003024c 	.word	0x0003024c

000b5184 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5184:	b508      	push	{r3, lr}
   b5186:	4b02      	ldr	r3, [pc, #8]	; (b5190 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5188:	681b      	ldr	r3, [r3, #0]
   b518a:	695b      	ldr	r3, [r3, #20]
   b518c:	9301      	str	r3, [sp, #4]
   b518e:	bd08      	pop	{r3, pc}
   b5190:	0003024c 	.word	0x0003024c

000b5194 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5194:	b508      	push	{r3, lr}
   b5196:	4b02      	ldr	r3, [pc, #8]	; (b51a0 <HAL_USB_USART_Receive_Data+0xc>)
   b5198:	681b      	ldr	r3, [r3, #0]
   b519a:	699b      	ldr	r3, [r3, #24]
   b519c:	9301      	str	r3, [sp, #4]
   b519e:	bd08      	pop	{r3, pc}
   b51a0:	0003024c 	.word	0x0003024c

000b51a4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b51a4:	b508      	push	{r3, lr}
   b51a6:	4b02      	ldr	r3, [pc, #8]	; (b51b0 <HAL_USB_USART_Send_Data+0xc>)
   b51a8:	681b      	ldr	r3, [r3, #0]
   b51aa:	69db      	ldr	r3, [r3, #28]
   b51ac:	9301      	str	r3, [sp, #4]
   b51ae:	bd08      	pop	{r3, pc}
   b51b0:	0003024c 	.word	0x0003024c

000b51b4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b51b4:	b508      	push	{r3, lr}
   b51b6:	4b02      	ldr	r3, [pc, #8]	; (b51c0 <HAL_USB_USART_Flush_Data+0xc>)
   b51b8:	681b      	ldr	r3, [r3, #0]
   b51ba:	6a1b      	ldr	r3, [r3, #32]
   b51bc:	9301      	str	r3, [sp, #4]
   b51be:	bd08      	pop	{r3, pc}
   b51c0:	0003024c 	.word	0x0003024c

000b51c4 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   b51c4:	b508      	push	{r3, lr}
   b51c6:	4b02      	ldr	r3, [pc, #8]	; (b51d0 <LED_SetSignalingColor+0xc>)
   b51c8:	681b      	ldr	r3, [r3, #0]
   b51ca:	685b      	ldr	r3, [r3, #4]
   b51cc:	9301      	str	r3, [sp, #4]
   b51ce:	bd08      	pop	{r3, pc}
   b51d0:	00030260 	.word	0x00030260

000b51d4 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   b51d4:	b508      	push	{r3, lr}
   b51d6:	4b02      	ldr	r3, [pc, #8]	; (b51e0 <LED_Signaling_Start+0xc>)
   b51d8:	681b      	ldr	r3, [r3, #0]
   b51da:	689b      	ldr	r3, [r3, #8]
   b51dc:	9301      	str	r3, [sp, #4]
   b51de:	bd08      	pop	{r3, pc}
   b51e0:	00030260 	.word	0x00030260

000b51e4 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   b51e4:	b508      	push	{r3, lr}
   b51e6:	4b02      	ldr	r3, [pc, #8]	; (b51f0 <LED_Signaling_Stop+0xc>)
   b51e8:	681b      	ldr	r3, [r3, #0]
   b51ea:	68db      	ldr	r3, [r3, #12]
   b51ec:	9301      	str	r3, [sp, #4]
   b51ee:	bd08      	pop	{r3, pc}
   b51f0:	00030260 	.word	0x00030260

000b51f4 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   b51f4:	b508      	push	{r3, lr}
   b51f6:	4b02      	ldr	r3, [pc, #8]	; (b5200 <LED_RGB_IsOverRidden+0xc>)
   b51f8:	681b      	ldr	r3, [r3, #0]
   b51fa:	699b      	ldr	r3, [r3, #24]
   b51fc:	9301      	str	r3, [sp, #4]
   b51fe:	bd08      	pop	{r3, pc}
   b5200:	00030260 	.word	0x00030260

000b5204 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   b5204:	b508      	push	{r3, lr}
   b5206:	4b02      	ldr	r3, [pc, #8]	; (b5210 <LED_On+0xc>)
   b5208:	681b      	ldr	r3, [r3, #0]
   b520a:	69db      	ldr	r3, [r3, #28]
   b520c:	9301      	str	r3, [sp, #4]
   b520e:	bd08      	pop	{r3, pc}
   b5210:	00030260 	.word	0x00030260

000b5214 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b5214:	b508      	push	{r3, lr}
   b5216:	4b02      	ldr	r3, [pc, #8]	; (b5220 <system_mode+0xc>)
   b5218:	681b      	ldr	r3, [r3, #0]
   b521a:	681b      	ldr	r3, [r3, #0]
   b521c:	9301      	str	r3, [sp, #4]
   b521e:	bd08      	pop	{r3, pc}
   b5220:	00030220 	.word	0x00030220

000b5224 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5224:	b508      	push	{r3, lr}
   b5226:	4b02      	ldr	r3, [pc, #8]	; (b5230 <set_system_mode+0xc>)
   b5228:	681b      	ldr	r3, [r3, #0]
   b522a:	685b      	ldr	r3, [r3, #4]
   b522c:	9301      	str	r3, [sp, #4]
   b522e:	bd08      	pop	{r3, pc}
   b5230:	00030220 	.word	0x00030220

000b5234 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5234:	b508      	push	{r3, lr}
   b5236:	4b02      	ldr	r3, [pc, #8]	; (b5240 <system_delay_ms+0xc>)
   b5238:	681b      	ldr	r3, [r3, #0]
   b523a:	695b      	ldr	r3, [r3, #20]
   b523c:	9301      	str	r3, [sp, #4]
   b523e:	bd08      	pop	{r3, pc}
   b5240:	00030220 	.word	0x00030220

000b5244 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b5244:	b508      	push	{r3, lr}
   b5246:	4b02      	ldr	r3, [pc, #8]	; (b5250 <application_thread_current+0xc>)
   b5248:	681b      	ldr	r3, [r3, #0]
   b524a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b524c:	9301      	str	r3, [sp, #4]
   b524e:	bd08      	pop	{r3, pc}
   b5250:	00030220 	.word	0x00030220

000b5254 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b5254:	b508      	push	{r3, lr}
   b5256:	4b02      	ldr	r3, [pc, #8]	; (b5260 <application_thread_invoke+0xc>)
   b5258:	681b      	ldr	r3, [r3, #0]
   b525a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b525c:	9301      	str	r3, [sp, #4]
   b525e:	bd08      	pop	{r3, pc}
   b5260:	00030220 	.word	0x00030220

000b5264 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b5264:	b508      	push	{r3, lr}
   b5266:	4b02      	ldr	r3, [pc, #8]	; (b5270 <system_thread_get_state+0xc>)
   b5268:	681b      	ldr	r3, [r3, #0]
   b526a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b526c:	9301      	str	r3, [sp, #4]
   b526e:	bd08      	pop	{r3, pc}
   b5270:	00030220 	.word	0x00030220

000b5274 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5274:	b508      	push	{r3, lr}
   b5276:	4b03      	ldr	r3, [pc, #12]	; (b5284 <system_ctrl_set_app_request_handler+0x10>)
   b5278:	681b      	ldr	r3, [r3, #0]
   b527a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b527e:	9301      	str	r3, [sp, #4]
   b5280:	bd08      	pop	{r3, pc}
   b5282:	0000      	.short	0x0000
   b5284:	00030220 	.word	0x00030220

000b5288 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5288:	b508      	push	{r3, lr}
   b528a:	4b03      	ldr	r3, [pc, #12]	; (b5298 <system_ctrl_set_result+0x10>)
   b528c:	681b      	ldr	r3, [r3, #0]
   b528e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5292:	9301      	str	r3, [sp, #4]
   b5294:	bd08      	pop	{r3, pc}
   b5296:	0000      	.short	0x0000
   b5298:	00030220 	.word	0x00030220

000b529c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b529c:	b508      	push	{r3, lr}
   b529e:	4b02      	ldr	r3, [pc, #8]	; (b52a8 <network_connect+0xc>)
   b52a0:	681b      	ldr	r3, [r3, #0]
   b52a2:	685b      	ldr	r3, [r3, #4]
   b52a4:	9301      	str	r3, [sp, #4]
   b52a6:	bd08      	pop	{r3, pc}
   b52a8:	00030240 	.word	0x00030240

000b52ac <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b52ac:	b508      	push	{r3, lr}
   b52ae:	4b02      	ldr	r3, [pc, #8]	; (b52b8 <network_connecting+0xc>)
   b52b0:	681b      	ldr	r3, [r3, #0]
   b52b2:	689b      	ldr	r3, [r3, #8]
   b52b4:	9301      	str	r3, [sp, #4]
   b52b6:	bd08      	pop	{r3, pc}
   b52b8:	00030240 	.word	0x00030240

000b52bc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b52bc:	b508      	push	{r3, lr}
   b52be:	4b02      	ldr	r3, [pc, #8]	; (b52c8 <network_disconnect+0xc>)
   b52c0:	681b      	ldr	r3, [r3, #0]
   b52c2:	68db      	ldr	r3, [r3, #12]
   b52c4:	9301      	str	r3, [sp, #4]
   b52c6:	bd08      	pop	{r3, pc}
   b52c8:	00030240 	.word	0x00030240

000b52cc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b52cc:	b508      	push	{r3, lr}
   b52ce:	4b02      	ldr	r3, [pc, #8]	; (b52d8 <network_ready+0xc>)
   b52d0:	681b      	ldr	r3, [r3, #0]
   b52d2:	691b      	ldr	r3, [r3, #16]
   b52d4:	9301      	str	r3, [sp, #4]
   b52d6:	bd08      	pop	{r3, pc}
   b52d8:	00030240 	.word	0x00030240

000b52dc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b52dc:	b508      	push	{r3, lr}
   b52de:	4b02      	ldr	r3, [pc, #8]	; (b52e8 <network_on+0xc>)
   b52e0:	681b      	ldr	r3, [r3, #0]
   b52e2:	695b      	ldr	r3, [r3, #20]
   b52e4:	9301      	str	r3, [sp, #4]
   b52e6:	bd08      	pop	{r3, pc}
   b52e8:	00030240 	.word	0x00030240

000b52ec <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b52ec:	b508      	push	{r3, lr}
   b52ee:	4b02      	ldr	r3, [pc, #8]	; (b52f8 <network_off+0xc>)
   b52f0:	681b      	ldr	r3, [r3, #0]
   b52f2:	699b      	ldr	r3, [r3, #24]
   b52f4:	9301      	str	r3, [sp, #4]
   b52f6:	bd08      	pop	{r3, pc}
   b52f8:	00030240 	.word	0x00030240

000b52fc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b52fc:	b508      	push	{r3, lr}
   b52fe:	4b02      	ldr	r3, [pc, #8]	; (b5308 <network_listen+0xc>)
   b5300:	681b      	ldr	r3, [r3, #0]
   b5302:	69db      	ldr	r3, [r3, #28]
   b5304:	9301      	str	r3, [sp, #4]
   b5306:	bd08      	pop	{r3, pc}
   b5308:	00030240 	.word	0x00030240

000b530c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b530c:	b508      	push	{r3, lr}
   b530e:	4b02      	ldr	r3, [pc, #8]	; (b5318 <network_listening+0xc>)
   b5310:	681b      	ldr	r3, [r3, #0]
   b5312:	6a1b      	ldr	r3, [r3, #32]
   b5314:	9301      	str	r3, [sp, #4]
   b5316:	bd08      	pop	{r3, pc}
   b5318:	00030240 	.word	0x00030240

000b531c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b531c:	b508      	push	{r3, lr}
   b531e:	4b02      	ldr	r3, [pc, #8]	; (b5328 <network_set_listen_timeout+0xc>)
   b5320:	681b      	ldr	r3, [r3, #0]
   b5322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5324:	9301      	str	r3, [sp, #4]
   b5326:	bd08      	pop	{r3, pc}
   b5328:	00030240 	.word	0x00030240

000b532c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b532c:	b508      	push	{r3, lr}
   b532e:	4b02      	ldr	r3, [pc, #8]	; (b5338 <network_get_listen_timeout+0xc>)
   b5330:	681b      	ldr	r3, [r3, #0]
   b5332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5334:	9301      	str	r3, [sp, #4]
   b5336:	bd08      	pop	{r3, pc}
   b5338:	00030240 	.word	0x00030240

000b533c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b533c:	b508      	push	{r3, lr}
   b533e:	4b02      	ldr	r3, [pc, #8]	; (b5348 <network_is_on+0xc>)
   b5340:	681b      	ldr	r3, [r3, #0]
   b5342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5344:	9301      	str	r3, [sp, #4]
   b5346:	bd08      	pop	{r3, pc}
   b5348:	00030240 	.word	0x00030240

000b534c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b534c:	b508      	push	{r3, lr}
   b534e:	4b02      	ldr	r3, [pc, #8]	; (b5358 <network_is_off+0xc>)
   b5350:	681b      	ldr	r3, [r3, #0]
   b5352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5354:	9301      	str	r3, [sp, #4]
   b5356:	bd08      	pop	{r3, pc}
   b5358:	00030240 	.word	0x00030240

000b535c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b535c:	b508      	push	{r3, lr}
   b535e:	4b02      	ldr	r3, [pc, #8]	; (b5368 <spark_process+0xc>)
   b5360:	681b      	ldr	r3, [r3, #0]
   b5362:	689b      	ldr	r3, [r3, #8]
   b5364:	9301      	str	r3, [sp, #4]
   b5366:	bd08      	pop	{r3, pc}
   b5368:	00030244 	.word	0x00030244

000b536c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b536c:	b508      	push	{r3, lr}
   b536e:	4b02      	ldr	r3, [pc, #8]	; (b5378 <spark_cloud_flag_connected+0xc>)
   b5370:	681b      	ldr	r3, [r3, #0]
   b5372:	695b      	ldr	r3, [r3, #20]
   b5374:	9301      	str	r3, [sp, #4]
   b5376:	bd08      	pop	{r3, pc}
   b5378:	00030244 	.word	0x00030244

000b537c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b537c:	b508      	push	{r3, lr}
   b537e:	4b02      	ldr	r3, [pc, #8]	; (b5388 <spark_send_event+0xc>)
   b5380:	681b      	ldr	r3, [r3, #0]
   b5382:	6a1b      	ldr	r3, [r3, #32]
   b5384:	9301      	str	r3, [sp, #4]
   b5386:	bd08      	pop	{r3, pc}
   b5388:	00030244 	.word	0x00030244

000b538c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b538c:	b508      	push	{r3, lr}
   b538e:	4b02      	ldr	r3, [pc, #8]	; (b5398 <spark_subscribe+0xc>)
   b5390:	681b      	ldr	r3, [r3, #0]
   b5392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5394:	9301      	str	r3, [sp, #4]
   b5396:	bd08      	pop	{r3, pc}
   b5398:	00030244 	.word	0x00030244

000b539c <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b539c:	b508      	push	{r3, lr}
   b539e:	4b02      	ldr	r3, [pc, #8]	; (b53a8 <spark_sync_time_pending+0xc>)
   b53a0:	681b      	ldr	r3, [r3, #0]
   b53a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b53a4:	9301      	str	r3, [sp, #4]
   b53a6:	bd08      	pop	{r3, pc}
   b53a8:	00030244 	.word	0x00030244

000b53ac <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b53ac:	b508      	push	{r3, lr}
   b53ae:	4b02      	ldr	r3, [pc, #8]	; (b53b8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b53b0:	681b      	ldr	r3, [r3, #0]
   b53b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b53b4:	9301      	str	r3, [sp, #4]
   b53b6:	bd08      	pop	{r3, pc}
   b53b8:	00030244 	.word	0x00030244

000b53bc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b53bc:	b508      	push	{r3, lr}
   b53be:	4b02      	ldr	r3, [pc, #8]	; (b53c8 <malloc+0xc>)
   b53c0:	681b      	ldr	r3, [r3, #0]
   b53c2:	681b      	ldr	r3, [r3, #0]
   b53c4:	9301      	str	r3, [sp, #4]
   b53c6:	bd08      	pop	{r3, pc}
   b53c8:	0003021c 	.word	0x0003021c

000b53cc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b53cc:	b508      	push	{r3, lr}
   b53ce:	4b02      	ldr	r3, [pc, #8]	; (b53d8 <free+0xc>)
   b53d0:	681b      	ldr	r3, [r3, #0]
   b53d2:	685b      	ldr	r3, [r3, #4]
   b53d4:	9301      	str	r3, [sp, #4]
   b53d6:	bd08      	pop	{r3, pc}
   b53d8:	0003021c 	.word	0x0003021c

000b53dc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b53dc:	b508      	push	{r3, lr}
   b53de:	4b02      	ldr	r3, [pc, #8]	; (b53e8 <realloc+0xc>)
   b53e0:	681b      	ldr	r3, [r3, #0]
   b53e2:	689b      	ldr	r3, [r3, #8]
   b53e4:	9301      	str	r3, [sp, #4]
   b53e6:	bd08      	pop	{r3, pc}
   b53e8:	0003021c 	.word	0x0003021c

000b53ec <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b53ec:	b508      	push	{r3, lr}
   b53ee:	4b02      	ldr	r3, [pc, #8]	; (b53f8 <abort+0xc>)
   b53f0:	681b      	ldr	r3, [r3, #0]
   b53f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b53f4:	9301      	str	r3, [sp, #4]
   b53f6:	bd08      	pop	{r3, pc}
   b53f8:	0003021c 	.word	0x0003021c

000b53fc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b53fc:	b508      	push	{r3, lr}
   b53fe:	4b02      	ldr	r3, [pc, #8]	; (b5408 <_malloc_r+0xc>)
   b5400:	681b      	ldr	r3, [r3, #0]
   b5402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5404:	9301      	str	r3, [sp, #4]
   b5406:	bd08      	pop	{r3, pc}
   b5408:	0003021c 	.word	0x0003021c

000b540c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b540c:	b508      	push	{r3, lr}
   b540e:	4b02      	ldr	r3, [pc, #8]	; (b5418 <__errno+0xc>)
   b5410:	681b      	ldr	r3, [r3, #0]
   b5412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5414:	9301      	str	r3, [sp, #4]
   b5416:	bd08      	pop	{r3, pc}
   b5418:	0003021c 	.word	0x0003021c

000b541c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b541c:	b508      	push	{r3, lr}
   b541e:	4b02      	ldr	r3, [pc, #8]	; (b5428 <__assert_func+0xc>)
   b5420:	681b      	ldr	r3, [r3, #0]
   b5422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5424:	9301      	str	r3, [sp, #4]
   b5426:	bd08      	pop	{r3, pc}
   b5428:	0003021c 	.word	0x0003021c

000b542c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b542c:	b508      	push	{r3, lr}
   b542e:	4b02      	ldr	r3, [pc, #8]	; (b5438 <newlib_impure_ptr_callback+0xc>)
   b5430:	681b      	ldr	r3, [r3, #0]
   b5432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5434:	9301      	str	r3, [sp, #4]
   b5436:	bd08      	pop	{r3, pc}
   b5438:	0003021c 	.word	0x0003021c

000b543c <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b543c:	b508      	push	{r3, lr}
   b543e:	4b02      	ldr	r3, [pc, #8]	; (b5448 <localtime_r+0xc>)
   b5440:	681b      	ldr	r3, [r3, #0]
   b5442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5444:	9301      	str	r3, [sp, #4]
   b5446:	bd08      	pop	{r3, pc}
   b5448:	0003021c 	.word	0x0003021c

000b544c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b544c:	2200      	movs	r2, #0
   b544e:	6840      	ldr	r0, [r0, #4]
   b5450:	4611      	mov	r1, r2
   b5452:	f7ff bf5b 	b.w	b530c <network_listening>

000b5456 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5456:	2200      	movs	r2, #0
   b5458:	6840      	ldr	r0, [r0, #4]
   b545a:	4611      	mov	r1, r2
   b545c:	f7ff bf66 	b.w	b532c <network_get_listen_timeout>

000b5460 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5460:	6840      	ldr	r0, [r0, #4]
   b5462:	2200      	movs	r2, #0
   b5464:	f7ff bf5a 	b.w	b531c <network_set_listen_timeout>

000b5468 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5468:	6840      	ldr	r0, [r0, #4]
   b546a:	2200      	movs	r2, #0
   b546c:	f081 0101 	eor.w	r1, r1, #1
   b5470:	f7ff bf44 	b.w	b52fc <network_listen>

000b5474 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5474:	2300      	movs	r3, #0
   b5476:	6840      	ldr	r0, [r0, #4]
   b5478:	461a      	mov	r2, r3
   b547a:	4619      	mov	r1, r3
   b547c:	f7ff bf36 	b.w	b52ec <network_off>

000b5480 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5480:	2300      	movs	r3, #0
   b5482:	6840      	ldr	r0, [r0, #4]
   b5484:	461a      	mov	r2, r3
   b5486:	4619      	mov	r1, r3
   b5488:	f7ff bf28 	b.w	b52dc <network_on>

000b548c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b548c:	2200      	movs	r2, #0
   b548e:	6840      	ldr	r0, [r0, #4]
   b5490:	4611      	mov	r1, r2
   b5492:	f7ff bf1b 	b.w	b52cc <network_ready>

000b5496 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5496:	2200      	movs	r2, #0
   b5498:	6840      	ldr	r0, [r0, #4]
   b549a:	4611      	mov	r1, r2
   b549c:	f7ff bf06 	b.w	b52ac <network_connecting>

000b54a0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b54a0:	6840      	ldr	r0, [r0, #4]
   b54a2:	2200      	movs	r2, #0
   b54a4:	2102      	movs	r1, #2
   b54a6:	f7ff bf09 	b.w	b52bc <network_disconnect>

000b54aa <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b54aa:	2300      	movs	r3, #0
   b54ac:	6840      	ldr	r0, [r0, #4]
   b54ae:	461a      	mov	r2, r3
   b54b0:	f7ff bef4 	b.w	b529c <network_connect>

000b54b4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b54b4:	4b02      	ldr	r3, [pc, #8]	; (b54c0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b54b6:	2203      	movs	r2, #3
   b54b8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b54ba:	4a02      	ldr	r2, [pc, #8]	; (b54c4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b54bc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b54be:	4770      	bx	lr
   b54c0:	2003e684 	.word	0x2003e684
   b54c4:	000b7bc4 	.word	0x000b7bc4

000b54c8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b54c8:	4b05      	ldr	r3, [pc, #20]	; (b54e0 <_GLOBAL__sub_I_System+0x18>)
   b54ca:	2202      	movs	r2, #2
   b54cc:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b54ce:	4b05      	ldr	r3, [pc, #20]	; (b54e4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b54d0:	4a05      	ldr	r2, [pc, #20]	; (b54e8 <_GLOBAL__sub_I_System+0x20>)
   b54d2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b54d4:	2000      	movs	r0, #0
   b54d6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b54da:	f7ff bea3 	b.w	b5224 <set_system_mode>
   b54de:	bf00      	nop
   b54e0:	2003e698 	.word	0x2003e698
   b54e4:	2003e68c 	.word	0x2003e68c
   b54e8:	ffff0000 	.word	0xffff0000

000b54ec <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b54ec:	b510      	push	{r4, lr}
   b54ee:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b54f0:	f002 f8e9 	bl	b76c6 <strlen>
   b54f4:	3801      	subs	r0, #1
   b54f6:	1823      	adds	r3, r4, r0
   b54f8:	4620      	mov	r0, r4
	while(i<j){
   b54fa:	4283      	cmp	r3, r0
   b54fc:	d906      	bls.n	b550c <_Z11str_reversePc+0x20>
		c = *i;
   b54fe:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b5500:	7819      	ldrb	r1, [r3, #0]
   b5502:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b5506:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b550a:	e7f6      	b.n	b54fa <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b550c:	bd10      	pop	{r4, pc}

000b550e <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b550e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b5512:	1e93      	subs	r3, r2, #2
{
   b5514:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b5516:	2b22      	cmp	r3, #34	; 0x22
   b5518:	f04f 0300 	mov.w	r3, #0
{
   b551c:	460d      	mov	r5, r1
   b551e:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b5520:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b5524:	d927      	bls.n	b5576 <ltoa+0x68>

      if (10 == base && N < 0L)
   b5526:	2800      	cmp	r0, #0
   b5528:	da2a      	bge.n	b5580 <ltoa+0x72>
      {
            *head++ = '-';
   b552a:	462e      	mov	r6, r5
   b552c:	232d      	movs	r3, #45	; 0x2d
   b552e:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b5532:	4240      	negs	r0, r0
   b5534:	240a      	movs	r4, #10
      *tail-- = '\0';
   b5536:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b553a:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b553e:	4622      	mov	r2, r4
   b5540:	4601      	mov	r1, r0
   b5542:	a801      	add	r0, sp, #4
   b5544:	f002 f842 	bl	b75cc <ldiv>
   b5548:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b554a:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b554c:	2b09      	cmp	r3, #9
   b554e:	bfcc      	ite	gt
   b5550:	2237      	movgt	r2, #55	; 0x37
   b5552:	2230      	movle	r2, #48	; 0x30
   b5554:	fa52 f383 	uxtab	r3, r2, r3
   b5558:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b555c:	f108 0801 	add.w	r8, r8, #1
   b5560:	2800      	cmp	r0, #0
   b5562:	d1ec      	bne.n	b553e <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b5564:	4642      	mov	r2, r8
   b5566:	1c79      	adds	r1, r7, #1
   b5568:	4630      	mov	r0, r6
   b556a:	f002 f843 	bl	b75f4 <memcpy>
      return str;
}
   b556e:	4628      	mov	r0, r5
   b5570:	b00c      	add	sp, #48	; 0x30
   b5572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b5576:	2a0a      	cmp	r2, #10
   b5578:	d0d5      	beq.n	b5526 <ltoa+0x18>
      if (uarg)
   b557a:	b118      	cbz	r0, b5584 <ltoa+0x76>
   b557c:	462e      	mov	r6, r5
   b557e:	e7da      	b.n	b5536 <ltoa+0x28>
   b5580:	240a      	movs	r4, #10
   b5582:	e7fa      	b.n	b557a <ltoa+0x6c>
      else  *tail-- = '0';
   b5584:	2330      	movs	r3, #48	; 0x30
   b5586:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b558a:	462e      	mov	r6, r5
   b558c:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b5590:	f04f 0802 	mov.w	r8, #2
   b5594:	e7e6      	b.n	b5564 <ltoa+0x56>

000b5596 <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b5596:	b570      	push	{r4, r5, r6, lr}
   b5598:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b559a:	1e91      	subs	r1, r2, #2
   b559c:	2922      	cmp	r1, #34	; 0x22
   b559e:	d81d      	bhi.n	b55dc <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b55a0:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b55a2:	b930      	cbnz	r0, b55b2 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b55a4:	4423      	add	r3, r4
            *ptr++ = '0';
   b55a6:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b55a8:	429d      	cmp	r5, r3
   b55aa:	d210      	bcs.n	b55ce <ultoa+0x38>
            *ptr++ = '0';
   b55ac:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b55b0:	e7fa      	b.n	b55a8 <ultoa+0x12>
            result.quot = a/radix;
   b55b2:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b55b6:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b55ba:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b55bc:	2809      	cmp	r0, #9
                *ptr += '0';
   b55be:	bf94      	ite	ls
   b55c0:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b55c2:	3157      	addhi	r1, #87	; 0x57
   b55c4:	b2c9      	uxtb	r1, r1
   b55c6:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b55ca:	4630      	mov	r0, r6
	while(a){
   b55cc:	e7e9      	b.n	b55a2 <ultoa+0xc>

	*ptr = '\0';
   b55ce:	2300      	movs	r3, #0
	str_reverse(buffer);
   b55d0:	4620      	mov	r0, r4
	*ptr = '\0';
   b55d2:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b55d4:	f7ff ff8a 	bl	b54ec <_Z11str_reversePc>
	return buffer;
   b55d8:	4620      	mov	r0, r4
}
   b55da:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b55dc:	2000      	movs	r0, #0
   b55de:	e7fc      	b.n	b55da <ultoa+0x44>

000b55e0 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b55e0:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b55e2:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b55e4:	460c      	mov	r4, r1
   b55e6:	4615      	mov	r5, r2
	if(a<0){
   b55e8:	da0e      	bge.n	b5608 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b55ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b55ee:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b55f2:	bf14      	ite	ne
   b55f4:	4258      	negne	r0, r3
   b55f6:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b55f8:	2301      	movs	r3, #1
		*buffer = '-';
   b55fa:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b55fc:	462a      	mov	r2, r5
   b55fe:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b5600:	f7ff ffc9 	bl	b5596 <ultoa>
	}
	return buffer;
}
   b5604:	4620      	mov	r0, r4
   b5606:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b5608:	2301      	movs	r3, #1
   b560a:	e7f9      	b.n	b5600 <itoa+0x20>

000b560c <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   b560c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5610:	ec57 6b10 	vmov	r6, r7, d0
   b5614:	4680      	mov	r8, r0
   b5616:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   b5618:	ee10 0a10 	vmov	r0, s0
   b561c:	2200      	movs	r2, #0
   b561e:	2300      	movs	r3, #0
   b5620:	4639      	mov	r1, r7
   b5622:	f001 fd91 	bl	b7148 <__aeabi_dcmplt>
   b5626:	b128      	cbz	r0, b5634 <_Z4dtoadhPc+0x28>
        val = -val;
   b5628:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b562c:	461f      	mov	r7, r3
        *sout++ = '-';
   b562e:	232d      	movs	r3, #45	; 0x2d
   b5630:	f804 3b01 	strb.w	r3, [r4], #1
   b5634:	2300      	movs	r3, #0
    }
    long scale = 1;
   b5636:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   b563a:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   b563c:	b2d9      	uxtb	r1, r3
   b563e:	4588      	cmp	r8, r1
   b5640:	d903      	bls.n	b564a <_Z4dtoadhPc+0x3e>
        scale *= 10;
   b5642:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   b5646:	3301      	adds	r3, #1
   b5648:	e7f8      	b.n	b563c <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   b564a:	4648      	mov	r0, r9
   b564c:	f001 faa0 	bl	b6b90 <__aeabi_i2d>
   b5650:	4632      	mov	r2, r6
   b5652:	463b      	mov	r3, r7
   b5654:	f001 fb06 	bl	b6c64 <__aeabi_dmul>
   b5658:	4606      	mov	r6, r0
   b565a:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   b565c:	f001 fe24 	bl	b72a8 <__aeabi_d2ulz>
   b5660:	468a      	mov	sl, r1
   b5662:	4605      	mov	r5, r0
   b5664:	468b      	mov	fp, r1
    if ((val-fixed)>=0.5)    // round last digit
   b5666:	f001 fac7 	bl	b6bf8 <__aeabi_ul2d>
   b566a:	4602      	mov	r2, r0
   b566c:	460b      	mov	r3, r1
   b566e:	4630      	mov	r0, r6
   b5670:	4639      	mov	r1, r7
   b5672:	f001 f93f 	bl	b68f4 <__aeabi_dsub>
   b5676:	4b14      	ldr	r3, [pc, #80]	; (b56c8 <_Z4dtoadhPc+0xbc>)
   b5678:	2200      	movs	r2, #0
   b567a:	f001 fd79 	bl	b7170 <__aeabi_dcmpge>
   b567e:	b110      	cbz	r0, b5686 <_Z4dtoadhPc+0x7a>
        fixed++;
   b5680:	3501      	adds	r5, #1
   b5682:	f14a 0b00 	adc.w	fp, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   b5686:	464a      	mov	r2, r9
   b5688:	4628      	mov	r0, r5
   b568a:	17d3      	asrs	r3, r2, #31
   b568c:	4659      	mov	r1, fp
   b568e:	f001 fdf3 	bl	b7278 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   b5692:	2301      	movs	r3, #1
   b5694:	4615      	mov	r5, r2
   b5696:	4621      	mov	r1, r4
   b5698:	220a      	movs	r2, #10
   b569a:	f7ff ff7c 	bl	b5596 <ultoa>
    if (prec) {
   b569e:	f1b8 0f00 	cmp.w	r8, #0
   b56a2:	d00e      	beq.n	b56c2 <_Z4dtoadhPc+0xb6>
        sout += strlen(sout);
   b56a4:	4620      	mov	r0, r4
   b56a6:	f002 f80e 	bl	b76c6 <strlen>
        *sout++ = '.';
   b56aa:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   b56ac:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   b56ae:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   b56b0:	220a      	movs	r2, #10
   b56b2:	4643      	mov	r3, r8
   b56b4:	3101      	adds	r1, #1
   b56b6:	4628      	mov	r0, r5
    }
}
   b56b8:	b001      	add	sp, #4
   b56ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ultoa(second, sout, 10, prec);
   b56be:	f7ff bf6a 	b.w	b5596 <ultoa>
}
   b56c2:	b001      	add	sp, #4
   b56c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b56c8:	3fe00000 	.word	0x3fe00000

000b56cc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b56cc:	b510      	push	{r4, lr}
   b56ce:	4604      	mov	r4, r0
{
	free(buffer);
   b56d0:	6800      	ldr	r0, [r0, #0]
   b56d2:	f7ff fe7b 	bl	b53cc <free>
}
   b56d6:	4620      	mov	r0, r4
   b56d8:	bd10      	pop	{r4, pc}

000b56da <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b56da:	b510      	push	{r4, lr}
   b56dc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b56de:	6800      	ldr	r0, [r0, #0]
   b56e0:	b108      	cbz	r0, b56e6 <_ZN6String10invalidateEv+0xc>
   b56e2:	f7ff fe73 	bl	b53cc <free>
	buffer = NULL;
   b56e6:	2300      	movs	r3, #0
	capacity = len = 0;
   b56e8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b56ec:	6023      	str	r3, [r4, #0]
}
   b56ee:	bd10      	pop	{r4, pc}

000b56f0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b56f0:	b538      	push	{r3, r4, r5, lr}
   b56f2:	4604      	mov	r4, r0
   b56f4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b56f6:	6800      	ldr	r0, [r0, #0]
   b56f8:	3101      	adds	r1, #1
   b56fa:	f7ff fe6f 	bl	b53dc <realloc>
	if (newbuffer) {
   b56fe:	b110      	cbz	r0, b5706 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5700:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5704:	2001      	movs	r0, #1
	}
	return 0;
}
   b5706:	bd38      	pop	{r3, r4, r5, pc}

000b5708 <_ZN6String7reserveEj>:
{
   b5708:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b570a:	6803      	ldr	r3, [r0, #0]
{
   b570c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b570e:	b123      	cbz	r3, b571a <_ZN6String7reserveEj+0x12>
   b5710:	6843      	ldr	r3, [r0, #4]
   b5712:	428b      	cmp	r3, r1
   b5714:	d301      	bcc.n	b571a <_ZN6String7reserveEj+0x12>
   b5716:	2001      	movs	r0, #1
}
   b5718:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b571a:	4620      	mov	r0, r4
   b571c:	f7ff ffe8 	bl	b56f0 <_ZN6String12changeBufferEj>
   b5720:	2800      	cmp	r0, #0
   b5722:	d0f9      	beq.n	b5718 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5724:	68a3      	ldr	r3, [r4, #8]
   b5726:	2b00      	cmp	r3, #0
   b5728:	d1f5      	bne.n	b5716 <_ZN6String7reserveEj+0xe>
   b572a:	6822      	ldr	r2, [r4, #0]
   b572c:	7013      	strb	r3, [r2, #0]
   b572e:	e7f2      	b.n	b5716 <_ZN6String7reserveEj+0xe>

000b5730 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5730:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5732:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5734:	4611      	mov	r1, r2
   b5736:	9201      	str	r2, [sp, #4]
{
   b5738:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b573a:	f7ff ffe5 	bl	b5708 <_ZN6String7reserveEj>
   b573e:	9a01      	ldr	r2, [sp, #4]
   b5740:	b928      	cbnz	r0, b574e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5742:	4620      	mov	r0, r4
   b5744:	f7ff ffc9 	bl	b56da <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5748:	4620      	mov	r0, r4
   b574a:	b003      	add	sp, #12
   b574c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b574e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5750:	4629      	mov	r1, r5
   b5752:	6820      	ldr	r0, [r4, #0]
   b5754:	f001 ff4e 	bl	b75f4 <memcpy>
	buffer[len] = 0;
   b5758:	6822      	ldr	r2, [r4, #0]
   b575a:	68a3      	ldr	r3, [r4, #8]
   b575c:	2100      	movs	r1, #0
   b575e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5760:	e7f2      	b.n	b5748 <_ZN6String4copyEPKcj+0x18>

000b5762 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5762:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5764:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b5766:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b576a:	4604      	mov	r4, r0
	len = 0;
   b576c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b576e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5770:	b141      	cbz	r1, b5784 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5772:	4608      	mov	r0, r1
   b5774:	9101      	str	r1, [sp, #4]
   b5776:	f001 ffa6 	bl	b76c6 <strlen>
   b577a:	9901      	ldr	r1, [sp, #4]
   b577c:	4602      	mov	r2, r0
   b577e:	4620      	mov	r0, r4
   b5780:	f7ff ffd6 	bl	b5730 <_ZN6String4copyEPKcj>
}
   b5784:	4620      	mov	r0, r4
   b5786:	b002      	add	sp, #8
   b5788:	bd10      	pop	{r4, pc}

000b578a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b578a:	4288      	cmp	r0, r1
{
   b578c:	b510      	push	{r4, lr}
   b578e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b5790:	d005      	beq.n	b579e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b5792:	680b      	ldr	r3, [r1, #0]
   b5794:	b12b      	cbz	r3, b57a2 <_ZN6StringaSERKS_+0x18>
   b5796:	688a      	ldr	r2, [r1, #8]
   b5798:	4619      	mov	r1, r3
   b579a:	f7ff ffc9 	bl	b5730 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b579e:	4620      	mov	r0, r4
   b57a0:	bd10      	pop	{r4, pc}
	else invalidate();
   b57a2:	f7ff ff9a 	bl	b56da <_ZN6String10invalidateEv>
   b57a6:	e7fa      	b.n	b579e <_ZN6StringaSERKS_+0x14>

000b57a8 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b57a8:	b510      	push	{r4, lr}
	buffer = NULL;
   b57aa:	2300      	movs	r3, #0
String::String(const String &value)
   b57ac:	4604      	mov	r4, r0
	capacity = 0;
   b57ae:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b57b2:	6083      	str	r3, [r0, #8]
	flags = 0;
   b57b4:	7303      	strb	r3, [r0, #12]
	*this = value;
   b57b6:	f7ff ffe8 	bl	b578a <_ZN6StringaSERKS_>
}
   b57ba:	4620      	mov	r0, r4
   b57bc:	bd10      	pop	{r4, pc}

000b57be <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b57be:	b513      	push	{r0, r1, r4, lr}
   b57c0:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b57c2:	b159      	cbz	r1, b57dc <_ZN6StringaSEPKc+0x1e>
   b57c4:	4608      	mov	r0, r1
   b57c6:	9101      	str	r1, [sp, #4]
   b57c8:	f001 ff7d 	bl	b76c6 <strlen>
   b57cc:	9901      	ldr	r1, [sp, #4]
   b57ce:	4602      	mov	r2, r0
   b57d0:	4620      	mov	r0, r4
   b57d2:	f7ff ffad 	bl	b5730 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b57d6:	4620      	mov	r0, r4
   b57d8:	b002      	add	sp, #8
   b57da:	bd10      	pop	{r4, pc}
	else invalidate();
   b57dc:	f7ff ff7d 	bl	b56da <_ZN6String10invalidateEv>
   b57e0:	e7f9      	b.n	b57d6 <_ZN6StringaSEPKc+0x18>

000b57e2 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b57e2:	b510      	push	{r4, lr}
   b57e4:	4604      	mov	r4, r0
   b57e6:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b57e8:	2300      	movs	r3, #0
	capacity = 0;
   b57ea:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b57ee:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b57f0:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b57f2:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b57f4:	a901      	add	r1, sp, #4
   b57f6:	f7ff fef3 	bl	b55e0 <itoa>
	*this = buf;
   b57fa:	a901      	add	r1, sp, #4
   b57fc:	4620      	mov	r0, r4
   b57fe:	f7ff ffde 	bl	b57be <_ZN6StringaSEPKc>
}
   b5802:	4620      	mov	r0, r4
   b5804:	b00a      	add	sp, #40	; 0x28
   b5806:	bd10      	pop	{r4, pc}

000b5808 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   b5808:	b510      	push	{r4, lr}
   b580a:	4604      	mov	r4, r0
   b580c:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b580e:	2300      	movs	r3, #0
	capacity = 0;
   b5810:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b5814:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b5816:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   b5818:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   b581a:	a901      	add	r1, sp, #4
   b581c:	f7ff fe77 	bl	b550e <ltoa>
	*this = buf;
   b5820:	a901      	add	r1, sp, #4
   b5822:	4620      	mov	r0, r4
   b5824:	f7ff ffcb 	bl	b57be <_ZN6StringaSEPKc>
}
   b5828:	4620      	mov	r0, r4
   b582a:	b00a      	add	sp, #40	; 0x28
   b582c:	bd10      	pop	{r4, pc}

000b582e <_ZN6StringC1Emh>:
String::String(unsigned long value, unsigned char base)
   b582e:	b510      	push	{r4, lr}
   b5830:	4604      	mov	r4, r0
   b5832:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b5834:	2300      	movs	r3, #0
	capacity = 0;
   b5836:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b583a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b583c:	7323      	strb	r3, [r4, #12]
String::String(unsigned long value, unsigned char base)
   b583e:	4608      	mov	r0, r1
	ultoa(value, buf, base);
   b5840:	2301      	movs	r3, #1
   b5842:	a901      	add	r1, sp, #4
   b5844:	f7ff fea7 	bl	b5596 <ultoa>
	*this = buf;
   b5848:	a901      	add	r1, sp, #4
   b584a:	4620      	mov	r0, r4
   b584c:	f7ff ffb7 	bl	b57be <_ZN6StringaSEPKc>
}
   b5850:	4620      	mov	r0, r4
   b5852:	b00a      	add	sp, #40	; 0x28
   b5854:	bd10      	pop	{r4, pc}

000b5856 <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   b5856:	b530      	push	{r4, r5, lr}
   b5858:	4604      	mov	r4, r0
	buffer = NULL;
   b585a:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   b585c:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   b585e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b5862:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b5864:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   b5866:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   b586a:	b2cd      	uxtb	r5, r1
   b586c:	f001 f9a2 	bl	b6bb4 <__aeabi_f2d>
   b5870:	ec41 0b10 	vmov	d0, r0, r1
   b5874:	a901      	add	r1, sp, #4
   b5876:	4628      	mov	r0, r5
   b5878:	f7ff fec8 	bl	b560c <_Z4dtoadhPc>
        *this = buf;
   b587c:	a901      	add	r1, sp, #4
   b587e:	4620      	mov	r0, r4
   b5880:	f7ff ff9d 	bl	b57be <_ZN6StringaSEPKc>
}
   b5884:	4620      	mov	r0, r4
   b5886:	b00b      	add	sp, #44	; 0x2c
   b5888:	bd30      	pop	{r4, r5, pc}

000b588a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b588a:	b570      	push	{r4, r5, r6, lr}
   b588c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b588e:	460e      	mov	r6, r1
   b5890:	b909      	cbnz	r1, b5896 <_ZN6String6concatEPKcj+0xc>
   b5892:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b5894:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b5896:	b16a      	cbz	r2, b58b4 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b5898:	6884      	ldr	r4, [r0, #8]
   b589a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b589c:	4621      	mov	r1, r4
   b589e:	f7ff ff33 	bl	b5708 <_ZN6String7reserveEj>
   b58a2:	2800      	cmp	r0, #0
   b58a4:	d0f5      	beq.n	b5892 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b58a6:	6828      	ldr	r0, [r5, #0]
   b58a8:	68ab      	ldr	r3, [r5, #8]
   b58aa:	4631      	mov	r1, r6
   b58ac:	4418      	add	r0, r3
   b58ae:	f001 fee5 	bl	b767c <strcpy>
	len = newlen;
   b58b2:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b58b4:	2001      	movs	r0, #1
   b58b6:	e7ed      	b.n	b5894 <_ZN6String6concatEPKcj+0xa>

000b58b8 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b58b8:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b58ba:	2300      	movs	r3, #0
	buf[0] = c;
   b58bc:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b58c0:	2201      	movs	r2, #1
   b58c2:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b58c4:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b58c8:	f7ff ffdf 	bl	b588a <_ZN6String6concatEPKcj>
}
   b58cc:	b003      	add	sp, #12
   b58ce:	f85d fb04 	ldr.w	pc, [sp], #4

000b58d2 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b58d2:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b58d4:	688a      	ldr	r2, [r1, #8]
   b58d6:	6809      	ldr	r1, [r1, #0]
{
   b58d8:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b58da:	f7ff ffd6 	bl	b588a <_ZN6String6concatEPKcj>
   b58de:	b910      	cbnz	r0, b58e6 <_ZplRK15StringSumHelperRK6String+0x14>
   b58e0:	4620      	mov	r0, r4
   b58e2:	f7ff fefa 	bl	b56da <_ZN6String10invalidateEv>
	return a;
}
   b58e6:	4620      	mov	r0, r4
   b58e8:	bd10      	pop	{r4, pc}

000b58ea <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b58ea:	b513      	push	{r0, r1, r4, lr}
   b58ec:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b58ee:	b929      	cbnz	r1, b58fc <_ZplRK15StringSumHelperPKc+0x12>
   b58f0:	4620      	mov	r0, r4
   b58f2:	f7ff fef2 	bl	b56da <_ZN6String10invalidateEv>
	return a;
}
   b58f6:	4620      	mov	r0, r4
   b58f8:	b002      	add	sp, #8
   b58fa:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b58fc:	4608      	mov	r0, r1
   b58fe:	9101      	str	r1, [sp, #4]
   b5900:	f001 fee1 	bl	b76c6 <strlen>
   b5904:	9901      	ldr	r1, [sp, #4]
   b5906:	4602      	mov	r2, r0
   b5908:	4620      	mov	r0, r4
   b590a:	f7ff ffbe 	bl	b588a <_ZN6String6concatEPKcj>
   b590e:	2800      	cmp	r0, #0
   b5910:	d0ee      	beq.n	b58f0 <_ZplRK15StringSumHelperPKc+0x6>
   b5912:	e7f0      	b.n	b58f6 <_ZplRK15StringSumHelperPKc+0xc>

000b5914 <_ZplRK15StringSumHelperc>:

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
{
   b5914:	b510      	push	{r4, lr}
   b5916:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(c)) a.invalidate();
   b5918:	f7ff ffce 	bl	b58b8 <_ZN6String6concatEc>
   b591c:	b910      	cbnz	r0, b5924 <_ZplRK15StringSumHelperc+0x10>
   b591e:	4620      	mov	r0, r4
   b5920:	f7ff fedb 	bl	b56da <_ZN6String10invalidateEv>
	return a;
}
   b5924:	4620      	mov	r0, r4
   b5926:	bd10      	pop	{r4, pc}

000b5928 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   b5928:	6800      	ldr	r0, [r0, #0]
   b592a:	b108      	cbz	r0, b5930 <_ZNK6String5toIntEv+0x8>
   b592c:	f001 be4a 	b.w	b75c4 <atol>
	return 0;
}
   b5930:	4770      	bx	lr

000b5932 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b5932:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b5934:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5936:	4604      	mov	r4, r0
      if (_M_manager)
   b5938:	b113      	cbz	r3, b5940 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b593a:	2203      	movs	r2, #3
   b593c:	4601      	mov	r1, r0
   b593e:	4798      	blx	r3
    }
   b5940:	4620      	mov	r0, r4
   b5942:	bd10      	pop	{r4, pc}

000b5944 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b5944:	b513      	push	{r0, r1, r4, lr}
   b5946:	460b      	mov	r3, r1
   b5948:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b594a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b594e:	466c      	mov	r4, sp
   b5950:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5954:	e893 0003 	ldmia.w	r3, {r0, r1}
   b5958:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b595c:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5960:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b5964:	b002      	add	sp, #8
   b5966:	bd10      	pop	{r4, pc}

000b5968 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5968:	4802      	ldr	r0, [pc, #8]	; (b5974 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b596a:	2300      	movs	r3, #0
   b596c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b596e:	f7ff bb59 	b.w	b5024 <os_mutex_recursive_create>
   b5972:	bf00      	nop
   b5974:	2003e69c 	.word	0x2003e69c

000b5978 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b597a:	4606      	mov	r6, r0
   b597c:	460d      	mov	r5, r1
  size_t n = 0;
   b597e:	188f      	adds	r7, r1, r2
   b5980:	2400      	movs	r4, #0
  while (size--) {
   b5982:	42bd      	cmp	r5, r7
   b5984:	d00c      	beq.n	b59a0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5986:	6833      	ldr	r3, [r6, #0]
   b5988:	f815 1b01 	ldrb.w	r1, [r5], #1
   b598c:	689b      	ldr	r3, [r3, #8]
   b598e:	4630      	mov	r0, r6
   b5990:	4798      	blx	r3
     if (chunk>=0)
   b5992:	1e03      	subs	r3, r0, #0
   b5994:	db01      	blt.n	b599a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5996:	441c      	add	r4, r3
  while (size--) {
   b5998:	e7f3      	b.n	b5982 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b599a:	2c00      	cmp	r4, #0
   b599c:	bf08      	it	eq
   b599e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b59a0:	4620      	mov	r0, r4
   b59a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b59a4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b59a4:	b513      	push	{r0, r1, r4, lr}
   b59a6:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b59a8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b59aa:	b159      	cbz	r1, b59c4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b59ac:	9101      	str	r1, [sp, #4]
   b59ae:	f001 fe8a 	bl	b76c6 <strlen>
   b59b2:	6823      	ldr	r3, [r4, #0]
   b59b4:	9901      	ldr	r1, [sp, #4]
   b59b6:	68db      	ldr	r3, [r3, #12]
   b59b8:	4602      	mov	r2, r0
   b59ba:	4620      	mov	r0, r4
    }
   b59bc:	b002      	add	sp, #8
   b59be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b59c2:	4718      	bx	r3
    }
   b59c4:	b002      	add	sp, #8
   b59c6:	bd10      	pop	{r4, pc}

000b59c8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b59c8:	6803      	ldr	r3, [r0, #0]
   b59ca:	689b      	ldr	r3, [r3, #8]
   b59cc:	4718      	bx	r3

000b59ce <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b59ce:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b59d0:	210d      	movs	r1, #13
{
   b59d2:	4605      	mov	r5, r0
  size_t n = print('\r');
   b59d4:	f7ff fff8 	bl	b59c8 <_ZN5Print5printEc>
  n += print('\n');
   b59d8:	210a      	movs	r1, #10
  size_t n = print('\r');
   b59da:	4604      	mov	r4, r0
  n += print('\n');
   b59dc:	4628      	mov	r0, r5
   b59de:	f7ff fff3 	bl	b59c8 <_ZN5Print5printEc>
  return n;
}
   b59e2:	4420      	add	r0, r4
   b59e4:	bd38      	pop	{r3, r4, r5, pc}

000b59e6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b59e6:	b538      	push	{r3, r4, r5, lr}
   b59e8:	4605      	mov	r5, r0
  return write(str);
   b59ea:	f7ff ffdb 	bl	b59a4 <_ZN5Print5writeEPKc>
   b59ee:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b59f0:	4628      	mov	r0, r5
   b59f2:	f7ff ffec 	bl	b59ce <_ZN5Print7printlnEv>
  return n;
}
   b59f6:	4420      	add	r0, r4
   b59f8:	bd38      	pop	{r3, r4, r5, pc}

000b59fa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b59fa:	b530      	push	{r4, r5, lr}
   b59fc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b59fe:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5a00:	2a01      	cmp	r2, #1
  *str = '\0';
   b5a02:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5a06:	bf98      	it	ls
   b5a08:	220a      	movls	r2, #10
   b5a0a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5a0c:	460d      	mov	r5, r1
   b5a0e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5a12:	fb01 5312 	mls	r3, r1, r2, r5
   b5a16:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5a1a:	2b09      	cmp	r3, #9
   b5a1c:	bf94      	ite	ls
   b5a1e:	3330      	addls	r3, #48	; 0x30
   b5a20:	3337      	addhi	r3, #55	; 0x37
   b5a22:	b2db      	uxtb	r3, r3
  } while(n);
   b5a24:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5a26:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5a2a:	d9ef      	bls.n	b5a0c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5a2c:	4621      	mov	r1, r4
   b5a2e:	f7ff ffb9 	bl	b59a4 <_ZN5Print5writeEPKc>
}
   b5a32:	b00b      	add	sp, #44	; 0x2c
   b5a34:	bd30      	pop	{r4, r5, pc}
	...

000b5a38 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5a38:	4b01      	ldr	r3, [pc, #4]	; (b5a40 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5a3a:	4a02      	ldr	r2, [pc, #8]	; (b5a44 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5a3c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5a3e:	4770      	bx	lr
   b5a40:	2003e6a0 	.word	0x2003e6a0
   b5a44:	000b7bf8 	.word	0x000b7bf8

000b5a48 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b5a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b5a4c:	4a15      	ldr	r2, [pc, #84]	; (b5aa4 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b5a4e:	f8df 8060 	ldr.w	r8, [pc, #96]	; b5ab0 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b5a52:	e9d2 6300 	ldrd	r6, r3, [r2]
   b5a56:	1980      	adds	r0, r0, r6
   b5a58:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b5a5c:	4b12      	ldr	r3, [pc, #72]	; (b5aa8 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b5a5e:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b5a62:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b5a66:	1986      	adds	r6, r0, r6
   b5a68:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b5a6c:	42bb      	cmp	r3, r7
   b5a6e:	bf08      	it	eq
   b5a70:	42b2      	cmpeq	r2, r6
{
   b5a72:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b5a74:	d013      	beq.n	b5a9e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b5a76:	a903      	add	r1, sp, #12
   b5a78:	4668      	mov	r0, sp
   b5a7a:	e9cd 6700 	strd	r6, r7, [sp]
   b5a7e:	f7ff fcdd 	bl	b543c <localtime_r>
	calendar_time.tm_year += 1900;
   b5a82:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b5a84:	4d09      	ldr	r5, [pc, #36]	; (b5aac <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b5a86:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b5a8a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b5a8c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b5a8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5a90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5a92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5a94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b5a96:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b5a9a:	6823      	ldr	r3, [r4, #0]
   b5a9c:	602b      	str	r3, [r5, #0]
    }
}
   b5a9e:	b00c      	add	sp, #48	; 0x30
   b5aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5aa4:	2003e6d8 	.word	0x2003e6d8
   b5aa8:	2003e6d0 	.word	0x2003e6d0
   b5aac:	2003e6a8 	.word	0x2003e6a8
   b5ab0:	2003e6e0 	.word	0x2003e6e0

000b5ab4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b5ab4:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5ab6:	2000      	movs	r0, #0
   b5ab8:	f7ff fc70 	bl	b539c <spark_sync_time_pending>
   b5abc:	b128      	cbz	r0, b5aca <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5abe:	f7ff fc55 	bl	b536c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5ac2:	f080 0001 	eor.w	r0, r0, #1
   b5ac6:	b2c0      	uxtb	r0, r0
    }
   b5ac8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5aca:	2001      	movs	r0, #1
   b5acc:	e7fc      	b.n	b5ac8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b5ace <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b5ace:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b5ad0:	2000      	movs	r0, #0
   b5ad2:	f7ff fa97 	bl	b5004 <hal_rtc_time_is_valid>
    if (rtcstate)
   b5ad6:	4604      	mov	r4, r0
   b5ad8:	b9a0      	cbnz	r0, b5b04 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b5ada:	f7ff fb9b 	bl	b5214 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b5ade:	2801      	cmp	r0, #1
   b5ae0:	d110      	bne.n	b5b04 <_ZN9TimeClass7isValidEv+0x36>
   b5ae2:	4620      	mov	r0, r4
   b5ae4:	f7ff fbbe 	bl	b5264 <system_thread_get_state>
   b5ae8:	b960      	cbnz	r0, b5b04 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b5aea:	f7ff ffe3 	bl	b5ab4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b5aee:	b910      	cbnz	r0, b5af6 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b5af0:	f7ff fc34 	bl	b535c <spark_process>
        while (_while() && !_condition()) {
   b5af4:	e7f9      	b.n	b5aea <_ZN9TimeClass7isValidEv+0x1c>
   b5af6:	f7ff ffdd 	bl	b5ab4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b5afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b5afe:	2000      	movs	r0, #0
   b5b00:	f7ff ba80 	b.w	b5004 <hal_rtc_time_is_valid>
}
   b5b04:	4620      	mov	r0, r4
   b5b06:	bd10      	pop	{r4, pc}

000b5b08 <_ZN9TimeClass3nowEv>:
{
   b5b08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b5b0a:	f7ff ffe0 	bl	b5ace <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b5b0e:	2210      	movs	r2, #16
   b5b10:	2100      	movs	r1, #0
   b5b12:	4668      	mov	r0, sp
   b5b14:	f001 fd7c 	bl	b7610 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b5b18:	2100      	movs	r1, #0
   b5b1a:	4668      	mov	r0, sp
   b5b1c:	f7ff fa7a 	bl	b5014 <hal_rtc_get_time>
}
   b5b20:	9800      	ldr	r0, [sp, #0]
   b5b22:	b005      	add	sp, #20
   b5b24:	f85d fb04 	ldr.w	pc, [sp], #4

000b5b28 <_ZN9TimeClass4hourEv>:
{
   b5b28:	b508      	push	{r3, lr}
	return hour(now());
   b5b2a:	f7ff ffed 	bl	b5b08 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b5b2e:	17c1      	asrs	r1, r0, #31
   b5b30:	f7ff ff8a 	bl	b5a48 <_ZL22Refresh_UnixTime_Cachex>
}
   b5b34:	4b01      	ldr	r3, [pc, #4]	; (b5b3c <_ZN9TimeClass4hourEv+0x14>)
   b5b36:	6898      	ldr	r0, [r3, #8]
   b5b38:	bd08      	pop	{r3, pc}
   b5b3a:	bf00      	nop
   b5b3c:	2003e6a8 	.word	0x2003e6a8

000b5b40 <_ZN9TimeClass6minuteEv>:
{
   b5b40:	b508      	push	{r3, lr}
	return minute(now());
   b5b42:	f7ff ffe1 	bl	b5b08 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b5b46:	17c1      	asrs	r1, r0, #31
   b5b48:	f7ff ff7e 	bl	b5a48 <_ZL22Refresh_UnixTime_Cachex>
}
   b5b4c:	4b01      	ldr	r3, [pc, #4]	; (b5b54 <_ZN9TimeClass6minuteEv+0x14>)
   b5b4e:	6858      	ldr	r0, [r3, #4]
   b5b50:	bd08      	pop	{r3, pc}
   b5b52:	bf00      	nop
   b5b54:	2003e6a8 	.word	0x2003e6a8

000b5b58 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5b58:	4b02      	ldr	r3, [pc, #8]	; (b5b64 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5b5a:	681a      	ldr	r2, [r3, #0]
   b5b5c:	4b02      	ldr	r3, [pc, #8]	; (b5b68 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5b5e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5b60:	4770      	bx	lr
   b5b62:	bf00      	nop
   b5b64:	2003e0fc 	.word	0x2003e0fc
   b5b68:	2003e6a4 	.word	0x2003e6a4

000b5b6c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5b6c:	2100      	movs	r1, #0
   b5b6e:	f7ff bb61 	b.w	b5234 <system_delay_ms>

000b5b72 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   b5b72:	b510      	push	{r4, lr}
   b5b74:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
   b5b76:	f7ff fb3d 	bl	b51f4 <LED_RGB_IsOverRidden>
    if (override == controlled()) {
   b5b7a:	4284      	cmp	r4, r0
   b5b7c:	d008      	beq.n	b5b90 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   b5b7e:	b11c      	cbz	r4, b5b88 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   b5b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
   b5b84:	f7ff bb26 	b.w	b51d4 <LED_Signaling_Start>
}
   b5b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
   b5b8c:	f7ff bb2a 	b.w	b51e4 <LED_Signaling_Stop>
}
   b5b90:	bd10      	pop	{r4, pc}

000b5b92 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   b5b92:	b570      	push	{r4, r5, r6, lr}
   b5b94:	4605      	mov	r5, r0
   b5b96:	460e      	mov	r6, r1
   b5b98:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
   b5b9a:	f7ff fb2b 	bl	b51f4 <LED_RGB_IsOverRidden>
    if (!controlled()) {
   b5b9e:	b150      	cbz	r0, b5bb6 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   b5ba0:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
   b5ba4:	ea44 4005 	orr.w	r0, r4, r5, lsl #16
   b5ba8:	f7ff fb0c 	bl	b51c4 <LED_SetSignalingColor>
    LED_On(PARTICLE_LED_RGB);
}
   b5bac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(PARTICLE_LED_RGB);
   b5bb0:	20e7      	movs	r0, #231	; 0xe7
   b5bb2:	f7ff bb27 	b.w	b5204 <LED_On>
}
   b5bb6:	bd70      	pop	{r4, r5, r6, pc}

000b5bb8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b5bb8:	4b01      	ldr	r3, [pc, #4]	; (b5bc0 <_GLOBAL__sub_I_RGB+0x8>)
   b5bba:	2200      	movs	r2, #0
   b5bbc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5bbe:	4770      	bx	lr
   b5bc0:	2003e6e8 	.word	0x2003e6e8

000b5bc4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5bc4:	4b01      	ldr	r3, [pc, #4]	; (b5bcc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5bc6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5bc8:	4770      	bx	lr
   b5bca:	bf00      	nop
   b5bcc:	2003e100 	.word	0x2003e100

000b5bd0 <serialEventRun>:
{
   b5bd0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5bd2:	4b0b      	ldr	r3, [pc, #44]	; (b5c00 <serialEventRun+0x30>)
   b5bd4:	b143      	cbz	r3, b5be8 <serialEventRun+0x18>
   b5bd6:	f000 fbff 	bl	b63d8 <_Z16_fetch_usbserialv>
   b5bda:	6803      	ldr	r3, [r0, #0]
   b5bdc:	691b      	ldr	r3, [r3, #16]
   b5bde:	4798      	blx	r3
   b5be0:	2800      	cmp	r0, #0
   b5be2:	dd01      	ble.n	b5be8 <serialEventRun+0x18>
        serialEvent();
   b5be4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5be8:	4b06      	ldr	r3, [pc, #24]	; (b5c04 <serialEventRun+0x34>)
   b5bea:	b143      	cbz	r3, b5bfe <serialEventRun+0x2e>
   b5bec:	f000 fe14 	bl	b6818 <_Z22__fetch_global_Serial1v>
   b5bf0:	6803      	ldr	r3, [r0, #0]
   b5bf2:	691b      	ldr	r3, [r3, #16]
   b5bf4:	4798      	blx	r3
   b5bf6:	2800      	cmp	r0, #0
   b5bf8:	dd01      	ble.n	b5bfe <serialEventRun+0x2e>
        serialEvent1();
   b5bfa:	f3af 8000 	nop.w
}
   b5bfe:	bd08      	pop	{r3, pc}
	...

000b5c08 <_post_loop>:
{
   b5c08:	b508      	push	{r3, lr}
	serialEventRun();
   b5c0a:	f7ff ffe1 	bl	b5bd0 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5c0e:	f7ff f9f1 	bl	b4ff4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5c12:	4b01      	ldr	r3, [pc, #4]	; (b5c18 <_post_loop+0x10>)
   b5c14:	6018      	str	r0, [r3, #0]
}
   b5c16:	bd08      	pop	{r3, pc}
   b5c18:	2003e740 	.word	0x2003e740

000b5c1c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5c1c:	4805      	ldr	r0, [pc, #20]	; (b5c34 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5c1e:	4a06      	ldr	r2, [pc, #24]	; (b5c38 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5c20:	4906      	ldr	r1, [pc, #24]	; (b5c3c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5c22:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5c24:	1a12      	subs	r2, r2, r0
   b5c26:	f001 fce5 	bl	b75f4 <memcpy>
    __backup_sram_signature = signature;
   b5c2a:	4b05      	ldr	r3, [pc, #20]	; (b5c40 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5c2c:	4a05      	ldr	r2, [pc, #20]	; (b5c44 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5c2e:	601a      	str	r2, [r3, #0]
}
   b5c30:	bd08      	pop	{r3, pc}
   b5c32:	bf00      	nop
   b5c34:	2003f400 	.word	0x2003f400
   b5c38:	2003f404 	.word	0x2003f404
   b5c3c:	000b7f3c 	.word	0x000b7f3c
   b5c40:	2003f400 	.word	0x2003f400
   b5c44:	9a271c1e 	.word	0x9a271c1e

000b5c48 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5c48:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5c4a:	2300      	movs	r3, #0
   b5c4c:	9300      	str	r3, [sp, #0]
   b5c4e:	461a      	mov	r2, r3
   b5c50:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5c54:	f7ff fb18 	bl	b5288 <system_ctrl_set_result>
}
   b5c58:	b003      	add	sp, #12
   b5c5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5c60 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5c60:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5c62:	8843      	ldrh	r3, [r0, #2]
   b5c64:	2b0a      	cmp	r3, #10
   b5c66:	d008      	beq.n	b5c7a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5c68:	2b50      	cmp	r3, #80	; 0x50
   b5c6a:	d10b      	bne.n	b5c84 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5c6c:	4b09      	ldr	r3, [pc, #36]	; (b5c94 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5c6e:	681b      	ldr	r3, [r3, #0]
   b5c70:	b14b      	cbz	r3, b5c86 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5c72:	b003      	add	sp, #12
   b5c74:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5c78:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5c7a:	f7ff ffe5 	bl	b5c48 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5c7e:	b003      	add	sp, #12
   b5c80:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5c84:	2300      	movs	r3, #0
   b5c86:	9300      	str	r3, [sp, #0]
   b5c88:	461a      	mov	r2, r3
   b5c8a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5c8e:	f7ff fafb 	bl	b5288 <system_ctrl_set_result>
}
   b5c92:	e7f4      	b.n	b5c7e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5c94:	2003e6fc 	.word	0x2003e6fc

000b5c98 <module_user_init_hook>:
{
   b5c98:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5c9a:	4812      	ldr	r0, [pc, #72]	; (b5ce4 <module_user_init_hook+0x4c>)
   b5c9c:	2100      	movs	r1, #0
   b5c9e:	f7ff fbc5 	bl	b542c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5ca2:	4b11      	ldr	r3, [pc, #68]	; (b5ce8 <module_user_init_hook+0x50>)
   b5ca4:	681a      	ldr	r2, [r3, #0]
   b5ca6:	4b11      	ldr	r3, [pc, #68]	; (b5cec <module_user_init_hook+0x54>)
   b5ca8:	429a      	cmp	r2, r3
   b5caa:	4b11      	ldr	r3, [pc, #68]	; (b5cf0 <module_user_init_hook+0x58>)
   b5cac:	bf0c      	ite	eq
   b5cae:	2201      	moveq	r2, #1
   b5cb0:	2200      	movne	r2, #0
   b5cb2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5cb4:	d001      	beq.n	b5cba <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5cb6:	f7ff ffb1 	bl	b5c1c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5cba:	f7ff f993 	bl	b4fe4 <HAL_RNG_GetRandomNumber>
   b5cbe:	4604      	mov	r4, r0
    srand(seed);
   b5cc0:	f001 fcae 	bl	b7620 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5cc4:	4b0b      	ldr	r3, [pc, #44]	; (b5cf4 <module_user_init_hook+0x5c>)
   b5cc6:	b113      	cbz	r3, b5cce <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5cc8:	4620      	mov	r0, r4
   b5cca:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5cce:	2100      	movs	r1, #0
   b5cd0:	4808      	ldr	r0, [pc, #32]	; (b5cf4 <module_user_init_hook+0x5c>)
   b5cd2:	f7ff fb6b 	bl	b53ac <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5cda:	4807      	ldr	r0, [pc, #28]	; (b5cf8 <module_user_init_hook+0x60>)
   b5cdc:	2100      	movs	r1, #0
   b5cde:	f7ff bac9 	b.w	b5274 <system_ctrl_set_app_request_handler>
   b5ce2:	bf00      	nop
   b5ce4:	000b5bc5 	.word	0x000b5bc5
   b5ce8:	2003f400 	.word	0x2003f400
   b5cec:	9a271c1e 	.word	0x9a271c1e
   b5cf0:	2003e6f8 	.word	0x2003e6f8
   b5cf4:	00000000 	.word	0x00000000
   b5cf8:	000b5c61 	.word	0x000b5c61

000b5cfc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5cfc:	4770      	bx	lr

000b5cfe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b5cfe:	2000      	movs	r0, #0
   b5d00:	4770      	bx	lr

000b5d02 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5d02:	b510      	push	{r4, lr}
   b5d04:	2110      	movs	r1, #16
   b5d06:	4604      	mov	r4, r0
   b5d08:	f7fe f9c7 	bl	b409a <_ZdlPvj>
   b5d0c:	4620      	mov	r0, r4
   b5d0e:	bd10      	pop	{r4, pc}

000b5d10 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b5d10:	b508      	push	{r3, lr}
      { delete this; }
   b5d12:	f7ff fff6 	bl	b5d02 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b5d16:	bd08      	pop	{r3, pc}

000b5d18 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b5d18:	b530      	push	{r4, r5, lr}
        type_(type) {
   b5d1a:	2200      	movs	r2, #0
   b5d1c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b5d20:	6002      	str	r2, [r0, #0]
   b5d22:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5d24:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b5d26:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5d28:	680c      	ldr	r4, [r1, #0]
   b5d2a:	8085      	strh	r5, [r0, #4]
   b5d2c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5d2e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b5d30:	bd30      	pop	{r4, r5, pc}

000b5d32 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b5d32:	b510      	push	{r4, lr}
   b5d34:	4604      	mov	r4, r0
    free((void*)msg_);
   b5d36:	6800      	ldr	r0, [r0, #0]
   b5d38:	f7ff fb48 	bl	b53cc <free>
}
   b5d3c:	4620      	mov	r0, r4
   b5d3e:	bd10      	pop	{r4, pc}

000b5d40 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5d40:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b5d42:	68c4      	ldr	r4, [r0, #12]
   b5d44:	b1f4      	cbz	r4, b5d84 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b5d46:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b5d48:	2b02      	cmp	r3, #2
   b5d4a:	d103      	bne.n	b5d54 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b5d4c:	f104 000c 	add.w	r0, r4, #12
   b5d50:	f7ff ffef 	bl	b5d32 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b5d54:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b5d56:	b135      	cbz	r5, b5d66 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b5d58:	4628      	mov	r0, r5
   b5d5a:	f7ff fdea 	bl	b5932 <_ZNSt14_Function_baseD1Ev>
   b5d5e:	2110      	movs	r1, #16
   b5d60:	4628      	mov	r0, r5
   b5d62:	f7fe f99a 	bl	b409a <_ZdlPvj>
   b5d66:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b5d68:	b135      	cbz	r5, b5d78 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b5d6a:	4628      	mov	r0, r5
   b5d6c:	f7ff fde1 	bl	b5932 <_ZNSt14_Function_baseD1Ev>
   b5d70:	2110      	movs	r1, #16
   b5d72:	4628      	mov	r0, r5
   b5d74:	f7fe f991 	bl	b409a <_ZdlPvj>
   b5d78:	4620      	mov	r0, r4
   b5d7a:	2114      	movs	r1, #20
   b5d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5d80:	f7fe b98b 	b.w	b409a <_ZdlPvj>
   b5d84:	bd38      	pop	{r3, r4, r5, pc}

000b5d86 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5d86:	680b      	ldr	r3, [r1, #0]
   b5d88:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b5d8a:	684b      	ldr	r3, [r1, #4]
   b5d8c:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b5d8e:	b113      	cbz	r3, b5d96 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b5d90:	685a      	ldr	r2, [r3, #4]
   b5d92:	3201      	adds	r2, #1
   b5d94:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5d96:	4770      	bx	lr

000b5d98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b5d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5d9a:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5d9c:	4668      	mov	r0, sp
   b5d9e:	460d      	mov	r5, r1
   b5da0:	f7ff fff1 	bl	b5d86 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5da4:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5da6:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5da8:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b5daa:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b5dac:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5dae:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b5db0:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b5db2:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b5db4:	f7fe faa0 	bl	b42f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b5db8:	b135      	cbz	r5, b5dc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b5dba:	1d28      	adds	r0, r5, #4
   b5dbc:	f7fe fa9c 	bl	b42f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5dc0:	2108      	movs	r1, #8
   b5dc2:	4628      	mov	r0, r5
   b5dc4:	f7fe f969 	bl	b409a <_ZdlPvj>
        return p;
    }
   b5dc8:	4620      	mov	r0, r4
   b5dca:	b003      	add	sp, #12
   b5dcc:	bd30      	pop	{r4, r5, pc}

000b5dce <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b5dce:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5dd0:	b510      	push	{r4, lr}
      if (_M_empty())
   b5dd2:	b90a      	cbnz	r2, b5dd8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b5dd4:	f000 fd86 	bl	b68e4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b5dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5ddc:	68c3      	ldr	r3, [r0, #12]
   b5dde:	4718      	bx	r3

000b5de0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5de0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5de2:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5de4:	f100 0110 	add.w	r1, r0, #16
   b5de8:	f7ff fff1 	bl	b5dce <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b5dec:	bd08      	pop	{r3, pc}

000b5dee <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b5dee:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5df0:	b510      	push	{r4, lr}
      if (_M_empty())
   b5df2:	b90a      	cbnz	r2, b5df8 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b5df4:	f000 fd76 	bl	b68e4 <_ZSt25__throw_bad_function_callv>
    }
   b5df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5dfc:	68c3      	ldr	r3, [r0, #12]
   b5dfe:	4718      	bx	r3

000b5e00 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5e00:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5e02:	6800      	ldr	r0, [r0, #0]
   b5e04:	f100 0110 	add.w	r1, r0, #16
   b5e08:	f7ff fff1 	bl	b5dee <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b5e0c:	bd08      	pop	{r3, pc}
	...

000b5e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b5e10:	b538      	push	{r3, r4, r5, lr}
   b5e12:	2300      	movs	r3, #0
   b5e14:	4604      	mov	r4, r0
   b5e16:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5e18:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b5e1a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5e1c:	f7fe f939 	bl	b4092 <_Znwj>
   b5e20:	b128      	cbz	r0, b5e2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b5e22:	2301      	movs	r3, #1
   b5e24:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b5e28:	4b02      	ldr	r3, [pc, #8]	; (b5e34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b5e2a:	6003      	str	r3, [r0, #0]
   b5e2c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5e2e:	6020      	str	r0, [r4, #0]
	}
   b5e30:	4620      	mov	r0, r4
   b5e32:	bd38      	pop	{r3, r4, r5, pc}
   b5e34:	000b7c20 	.word	0x000b7c20

000b5e38 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b5e38:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5e3a:	2300      	movs	r3, #0
   b5e3c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5e3e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5e40:	4604      	mov	r4, r0
   b5e42:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5e44:	b12b      	cbz	r3, b5e52 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5e46:	2202      	movs	r2, #2
   b5e48:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5e4a:	68eb      	ldr	r3, [r5, #12]
   b5e4c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5e4e:	68ab      	ldr	r3, [r5, #8]
   b5e50:	60a3      	str	r3, [r4, #8]
    }
   b5e52:	4620      	mov	r0, r4
   b5e54:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5e58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b5e58:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5e5a:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5e5c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b5e5e:	4668      	mov	r0, sp
   b5e60:	f7ff ff5a 	bl	b5d18 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5e64:	f04f 0302 	mov.w	r3, #2
   b5e68:	e8d4 2f4f 	ldrexb	r2, [r4]
   b5e6c:	2a00      	cmp	r2, #0
   b5e6e:	d103      	bne.n	b5e78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b5e70:	e8c4 3f41 	strexb	r1, r3, [r4]
   b5e74:	2900      	cmp	r1, #0
   b5e76:	d1f7      	bne.n	b5e68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b5e78:	d125      	bne.n	b5ec6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b5e7a:	f104 050c 	add.w	r5, r4, #12
   b5e7e:	4669      	mov	r1, sp
   b5e80:	4628      	mov	r0, r5
   b5e82:	f7ff ff49 	bl	b5d18 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b5e86:	f3bf 8f5b 	dmb	ish
   b5e8a:	2301      	movs	r3, #1
   b5e8c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5e8e:	2000      	movs	r0, #0
   b5e90:	f104 0308 	add.w	r3, r4, #8
   b5e94:	f3bf 8f5b 	dmb	ish
   b5e98:	e853 6f00 	ldrex	r6, [r3]
   b5e9c:	e843 0200 	strex	r2, r0, [r3]
   b5ea0:	2a00      	cmp	r2, #0
   b5ea2:	d1f9      	bne.n	b5e98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b5ea4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5ea8:	b16e      	cbz	r6, b5ec6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b5eaa:	f7ff f9cb 	bl	b5244 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5eae:	b178      	cbz	r0, b5ed0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5eb0:	4629      	mov	r1, r5
   b5eb2:	4630      	mov	r0, r6
   b5eb4:	f7ff ff8b 	bl	b5dce <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b5eb8:	4630      	mov	r0, r6
   b5eba:	f7ff fd3a 	bl	b5932 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5ebe:	2110      	movs	r1, #16
   b5ec0:	4630      	mov	r0, r6
   b5ec2:	f7fe f8ea 	bl	b409a <_ZdlPvj>
        p_->setError(std::move(error));
   b5ec6:	4668      	mov	r0, sp
   b5ec8:	f7ff ff33 	bl	b5d32 <_ZN8particle5ErrorD1Ev>
    }
   b5ecc:	b009      	add	sp, #36	; 0x24
   b5ece:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5ed0:	4631      	mov	r1, r6
   b5ed2:	a802      	add	r0, sp, #8
   b5ed4:	f7ff ffb0 	bl	b5e38 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5ed8:	68e0      	ldr	r0, [r4, #12]
   b5eda:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5ede:	b108      	cbz	r0, b5ee4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b5ee0:	f001 fbd4 	bl	b768c <strdup>
        type_(type) {
   b5ee4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5ee6:	2010      	movs	r0, #16
   b5ee8:	f8ad 501c 	strh.w	r5, [sp, #28]
   b5eec:	f7fe f8d1 	bl	b4092 <_Znwj>
   b5ef0:	4605      	mov	r5, r0
   b5ef2:	b1e8      	cbz	r0, b5f30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b5ef4:	2700      	movs	r7, #0
   b5ef6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5ef8:	2018      	movs	r0, #24
   b5efa:	f7fe f8ca 	bl	b4092 <_Znwj>
   b5efe:	4604      	mov	r4, r0
   b5f00:	b188      	cbz	r0, b5f26 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b5f02:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b5f04:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5f06:	a802      	add	r0, sp, #8
   b5f08:	f7ff fd1c 	bl	b5944 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5f0c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5f0e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5f10:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5f12:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5f14:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5f16:	a906      	add	r1, sp, #24
   b5f18:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5f1a:	60e3      	str	r3, [r4, #12]
   b5f1c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b5f20:	9205      	str	r2, [sp, #20]
   b5f22:	f7ff fef9 	bl	b5d18 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b5f26:	4b08      	ldr	r3, [pc, #32]	; (b5f48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b5f28:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5f2a:	4b08      	ldr	r3, [pc, #32]	; (b5f4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5f2c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5f2e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b5f30:	a806      	add	r0, sp, #24
   b5f32:	f7ff fefe 	bl	b5d32 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b5f36:	a802      	add	r0, sp, #8
   b5f38:	f7ff fcfb 	bl	b5932 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5f3c:	2200      	movs	r2, #0
   b5f3e:	4629      	mov	r1, r5
   b5f40:	4803      	ldr	r0, [pc, #12]	; (b5f50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b5f42:	f7ff f987 	bl	b5254 <application_thread_invoke>
   b5f46:	e7b7      	b.n	b5eb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b5f48:	000b5de1 	.word	0x000b5de1
   b5f4c:	000b6065 	.word	0x000b6065
   b5f50:	000b64c9 	.word	0x000b64c9

000b5f54 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b5f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5f58:	b08b      	sub	sp, #44	; 0x2c
   b5f5a:	4605      	mov	r5, r0
   b5f5c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b5f60:	460f      	mov	r7, r1
   b5f62:	4690      	mov	r8, r2
   b5f64:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5f66:	f7ff fa01 	bl	b536c <spark_cloud_flag_connected>
   b5f6a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b5f6c:	4683      	mov	fp, r0
   b5f6e:	bb38      	cbnz	r0, b5fc0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b5f70:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b5f74:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5f76:	a905      	add	r1, sp, #20
   b5f78:	4630      	mov	r0, r6
   b5f7a:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5f7e:	f7ff fecb 	bl	b5d18 <_ZN8particle5ErrorC1EOS0_>
   b5f82:	2014      	movs	r0, #20
   b5f84:	f7fe f885 	bl	b4092 <_Znwj>
   b5f88:	4604      	mov	r4, r0
   b5f8a:	b148      	cbz	r0, b5fa0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b5f8c:	2302      	movs	r3, #2
   b5f8e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5f90:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5f92:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5f96:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b5f98:	4631      	mov	r1, r6
   b5f9a:	300c      	adds	r0, #12
   b5f9c:	f7ff febc 	bl	b5d18 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5fa0:	4628      	mov	r0, r5
	: __shared_count(__p)
   b5fa2:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5fa4:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b5fa8:	f7ff ff32 	bl	b5e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5fac:	4630      	mov	r0, r6
   b5fae:	f7ff fec0 	bl	b5d32 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b5fb2:	a805      	add	r0, sp, #20
   b5fb4:	f7ff febd 	bl	b5d32 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b5fb8:	4628      	mov	r0, r5
   b5fba:	b00b      	add	sp, #44	; 0x2c
   b5fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b5fc0:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b5fc2:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b5fc4:	2014      	movs	r0, #20
   b5fc6:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b5fca:	9307      	str	r3, [sp, #28]
   b5fcc:	f7fe f861 	bl	b4092 <_Znwj>
   b5fd0:	4601      	mov	r1, r0
   b5fd2:	b118      	cbz	r0, b5fdc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5fd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b5fd8:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5fda:	7044      	strb	r4, [r0, #1]
   b5fdc:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5fde:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b5fe0:	f7ff ff16 	bl	b5e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b5fe4:	4b1e      	ldr	r3, [pc, #120]	; (b6060 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b5fe6:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b5fe8:	2008      	movs	r0, #8
   b5fea:	f7fe f852 	bl	b4092 <_Znwj>
   b5fee:	4604      	mov	r4, r0
   b5ff0:	b110      	cbz	r0, b5ff8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b5ff2:	a903      	add	r1, sp, #12
   b5ff4:	f7ff fec7 	bl	b5d86 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5ff8:	9600      	str	r6, [sp, #0]
   b5ffa:	fa5f f38a 	uxtb.w	r3, sl
   b5ffe:	464a      	mov	r2, r9
   b6000:	4641      	mov	r1, r8
   b6002:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b6004:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6006:	f7ff f9b9 	bl	b537c <spark_send_event>
   b600a:	b9b8      	cbnz	r0, b603c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b600c:	9b03      	ldr	r3, [sp, #12]
   b600e:	785b      	ldrb	r3, [r3, #1]
   b6010:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b6014:	b993      	cbnz	r3, b603c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b6016:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b601a:	a905      	add	r1, sp, #20
   b601c:	a803      	add	r0, sp, #12
   b601e:	9205      	str	r2, [sp, #20]
   b6020:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6024:	f7ff ff18 	bl	b5e58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6028:	a805      	add	r0, sp, #20
   b602a:	f7ff fe82 	bl	b5d32 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b602e:	a805      	add	r0, sp, #20
   b6030:	9909      	ldr	r1, [sp, #36]	; 0x24
   b6032:	f7ff feb1 	bl	b5d98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b6036:	a806      	add	r0, sp, #24
   b6038:	f7fe f95e 	bl	b42f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b603c:	a903      	add	r1, sp, #12
   b603e:	a805      	add	r0, sp, #20
   b6040:	f7ff fea1 	bl	b5d86 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6044:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6046:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6048:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b604a:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b604c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b604e:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b6050:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b6052:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b6054:	f7fe f950 	bl	b42f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6058:	a804      	add	r0, sp, #16
   b605a:	f7fe f94d 	bl	b42f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b605e:	e7ab      	b.n	b5fb8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b6060:	000b60e1 	.word	0x000b60e1

000b6064 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b6064:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6068:	4605      	mov	r5, r0
	switch (__op)
   b606a:	d103      	bne.n	b6074 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b606c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b606e:	6003      	str	r3, [r0, #0]
      }
   b6070:	2000      	movs	r0, #0
   b6072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b6074:	2a02      	cmp	r2, #2
   b6076:	d010      	beq.n	b609a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b6078:	2a03      	cmp	r2, #3
   b607a:	d1f9      	bne.n	b6070 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b607c:	6804      	ldr	r4, [r0, #0]
   b607e:	2c00      	cmp	r4, #0
   b6080:	d0f6      	beq.n	b6070 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b6082:	f104 0010 	add.w	r0, r4, #16
   b6086:	f7ff fe54 	bl	b5d32 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b608a:	4620      	mov	r0, r4
   b608c:	f7ff fc51 	bl	b5932 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6090:	2118      	movs	r1, #24
   b6092:	4620      	mov	r0, r4
   b6094:	f7fe f801 	bl	b409a <_ZdlPvj>
   b6098:	e7ea      	b.n	b6070 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b609a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b609c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b609e:	f7fd fff8 	bl	b4092 <_Znwj>
   b60a2:	4604      	mov	r4, r0
   b60a4:	b150      	cbz	r0, b60bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b60a6:	4631      	mov	r1, r6
   b60a8:	f7ff fec6 	bl	b5e38 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b60ac:	6930      	ldr	r0, [r6, #16]
   b60ae:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b60b2:	b108      	cbz	r0, b60b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b60b4:	f001 faea 	bl	b768c <strdup>
        type_(type) {
   b60b8:	6120      	str	r0, [r4, #16]
   b60ba:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b60bc:	602c      	str	r4, [r5, #0]
	}
   b60be:	e7d7      	b.n	b6070 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b60c0 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b60c0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b60c2:	2300      	movs	r3, #0
   b60c4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b60c6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b60c8:	4604      	mov	r4, r0
   b60ca:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b60cc:	b12b      	cbz	r3, b60da <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b60ce:	2202      	movs	r2, #2
   b60d0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b60d2:	68eb      	ldr	r3, [r5, #12]
   b60d4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b60d6:	68ab      	ldr	r3, [r5, #8]
   b60d8:	60a3      	str	r3, [r4, #8]
    }
   b60da:	4620      	mov	r0, r4
   b60dc:	bd38      	pop	{r3, r4, r5, pc}
	...

000b60e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b60e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b60e2:	b089      	sub	sp, #36	; 0x24
   b60e4:	4604      	mov	r4, r0
   b60e6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b60e8:	a801      	add	r0, sp, #4
   b60ea:	4611      	mov	r1, r2
   b60ec:	f7ff fe54 	bl	b5d98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b60f0:	b1a4      	cbz	r4, b611c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b60f2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b60f4:	b11d      	cbz	r5, b60fe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b60f6:	4628      	mov	r0, r5
   b60f8:	f001 fac8 	bl	b768c <strdup>
   b60fc:	4605      	mov	r5, r0
   b60fe:	a801      	add	r0, sp, #4
   b6100:	a903      	add	r1, sp, #12
        type_(type) {
   b6102:	9503      	str	r5, [sp, #12]
   b6104:	f8ad 4010 	strh.w	r4, [sp, #16]
   b6108:	f7ff fea6 	bl	b5e58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b610c:	a803      	add	r0, sp, #12
   b610e:	f7ff fe10 	bl	b5d32 <_ZN8particle5ErrorD1Ev>
   b6112:	a802      	add	r0, sp, #8
   b6114:	f7fe f8f0 	bl	b42f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6118:	b009      	add	sp, #36	; 0x24
   b611a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b611c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b611e:	2301      	movs	r3, #1
   b6120:	e8d5 2f4f 	ldrexb	r2, [r5]
   b6124:	2a00      	cmp	r2, #0
   b6126:	d103      	bne.n	b6130 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b6128:	e8c5 3f41 	strexb	r1, r3, [r5]
   b612c:	2900      	cmp	r1, #0
   b612e:	d1f7      	bne.n	b6120 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b6130:	d1ef      	bne.n	b6112 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b6132:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b6134:	f3bf 8f5b 	dmb	ish
   b6138:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b613a:	1d2b      	adds	r3, r5, #4
   b613c:	f3bf 8f5b 	dmb	ish
   b6140:	e853 6f00 	ldrex	r6, [r3]
   b6144:	e843 4200 	strex	r2, r4, [r3]
   b6148:	2a00      	cmp	r2, #0
   b614a:	d1f9      	bne.n	b6140 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b614c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6150:	2e00      	cmp	r6, #0
   b6152:	d0de      	beq.n	b6112 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b6154:	4620      	mov	r0, r4
   b6156:	f7ff f875 	bl	b5244 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b615a:	4607      	mov	r7, r0
   b615c:	b160      	cbz	r0, b6178 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b615e:	f105 010c 	add.w	r1, r5, #12
   b6162:	4630      	mov	r0, r6
   b6164:	f7ff fe43 	bl	b5dee <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b6168:	4630      	mov	r0, r6
   b616a:	f7ff fbe2 	bl	b5932 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b616e:	2110      	movs	r1, #16
   b6170:	4630      	mov	r0, r6
   b6172:	f7fd ff92 	bl	b409a <_ZdlPvj>
   b6176:	e7cc      	b.n	b6112 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6178:	4631      	mov	r1, r6
   b617a:	a803      	add	r0, sp, #12
   b617c:	f7ff ffa0 	bl	b60c0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6180:	7b2b      	ldrb	r3, [r5, #12]
   b6182:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b6186:	2010      	movs	r0, #16
   b6188:	f7fd ff83 	bl	b4092 <_Znwj>
   b618c:	4605      	mov	r5, r0
   b618e:	b1d0      	cbz	r0, b61c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b6190:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6192:	2014      	movs	r0, #20
   b6194:	f7fd ff7d 	bl	b4092 <_Znwj>
   b6198:	4604      	mov	r4, r0
   b619a:	b178      	cbz	r0, b61bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b619c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b619e:	4601      	mov	r1, r0
   b61a0:	a803      	add	r0, sp, #12
   b61a2:	f7ff fbcf 	bl	b5944 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b61a6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b61a8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b61aa:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b61ac:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b61ae:	9205      	str	r2, [sp, #20]
   b61b0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b61b2:	60e3      	str	r3, [r4, #12]
   b61b4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b61b8:	9206      	str	r2, [sp, #24]
   b61ba:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b61bc:	4b06      	ldr	r3, [pc, #24]	; (b61d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b61be:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b61c0:	4b06      	ldr	r3, [pc, #24]	; (b61dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b61c2:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b61c4:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b61c6:	a803      	add	r0, sp, #12
   b61c8:	f7ff fbb3 	bl	b5932 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b61cc:	2200      	movs	r2, #0
   b61ce:	4629      	mov	r1, r5
   b61d0:	4803      	ldr	r0, [pc, #12]	; (b61e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b61d2:	f7ff f83f 	bl	b5254 <application_thread_invoke>
   b61d6:	e7c7      	b.n	b6168 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b61d8:	000b5e01 	.word	0x000b5e01
   b61dc:	000b61e5 	.word	0x000b61e5
   b61e0:	000b64c9 	.word	0x000b64c9

000b61e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b61e4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b61e6:	b570      	push	{r4, r5, r6, lr}
   b61e8:	4604      	mov	r4, r0
	switch (__op)
   b61ea:	d103      	bne.n	b61f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b61ec:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b61ee:	6003      	str	r3, [r0, #0]
      }
   b61f0:	2000      	movs	r0, #0
   b61f2:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b61f4:	2a02      	cmp	r2, #2
   b61f6:	d00c      	beq.n	b6212 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b61f8:	2a03      	cmp	r2, #3
   b61fa:	d1f9      	bne.n	b61f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b61fc:	6804      	ldr	r4, [r0, #0]
   b61fe:	2c00      	cmp	r4, #0
   b6200:	d0f6      	beq.n	b61f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b6202:	4620      	mov	r0, r4
   b6204:	f7ff fb95 	bl	b5932 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6208:	2114      	movs	r1, #20
   b620a:	4620      	mov	r0, r4
   b620c:	f7fd ff45 	bl	b409a <_ZdlPvj>
   b6210:	e7ee      	b.n	b61f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6212:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b6214:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6216:	f7fd ff3c 	bl	b4092 <_Znwj>
   b621a:	4605      	mov	r5, r0
   b621c:	b120      	cbz	r0, b6228 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b621e:	4631      	mov	r1, r6
   b6220:	f7ff ff4e 	bl	b60c0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b6224:	7c33      	ldrb	r3, [r6, #16]
   b6226:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b6228:	6025      	str	r5, [r4, #0]
	}
   b622a:	e7e1      	b.n	b61f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b622c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b622c:	4770      	bx	lr

000b622e <_ZN9IPAddressD0Ev>:
   b622e:	b510      	push	{r4, lr}
   b6230:	2118      	movs	r1, #24
   b6232:	4604      	mov	r4, r0
   b6234:	f7fd ff31 	bl	b409a <_ZdlPvj>
   b6238:	4620      	mov	r0, r4
   b623a:	bd10      	pop	{r4, pc}

000b623c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b623c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b623e:	7d03      	ldrb	r3, [r0, #20]
   b6240:	2b06      	cmp	r3, #6
{
   b6242:	b08d      	sub	sp, #52	; 0x34
   b6244:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6246:	f100 0704 	add.w	r7, r0, #4
   b624a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b624e:	d012      	beq.n	b6276 <_ZNK9IPAddress7printToER5Print+0x3a>
   b6250:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6254:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6258:	220a      	movs	r2, #10
   b625a:	4630      	mov	r0, r6
   b625c:	f7ff fbcd 	bl	b59fa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6260:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6262:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6264:	d019      	beq.n	b629a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6266:	2c00      	cmp	r4, #0
   b6268:	d0f4      	beq.n	b6254 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b626a:	212e      	movs	r1, #46	; 0x2e
   b626c:	4630      	mov	r0, r6
   b626e:	f7ff fbab 	bl	b59c8 <_ZN5Print5printEc>
   b6272:	4404      	add	r4, r0
   b6274:	e7ee      	b.n	b6254 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6276:	232f      	movs	r3, #47	; 0x2f
   b6278:	466a      	mov	r2, sp
   b627a:	4639      	mov	r1, r7
   b627c:	200a      	movs	r0, #10
		buf[0] = 0;
   b627e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6282:	f7fe fed7 	bl	b5034 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6286:	4668      	mov	r0, sp
   b6288:	f001 fa1d 	bl	b76c6 <strlen>
   b628c:	6833      	ldr	r3, [r6, #0]
   b628e:	4602      	mov	r2, r0
   b6290:	68db      	ldr	r3, [r3, #12]
   b6292:	4669      	mov	r1, sp
   b6294:	4630      	mov	r0, r6
   b6296:	4798      	blx	r3
   b6298:	4604      	mov	r4, r0
    }
    return n;
}
   b629a:	4620      	mov	r0, r4
   b629c:	b00d      	add	sp, #52	; 0x34
   b629e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b62a0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b62a0:	b510      	push	{r4, lr}
   b62a2:	4b05      	ldr	r3, [pc, #20]	; (b62b8 <_ZN9IPAddressC1Ev+0x18>)
   b62a4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b62a6:	2211      	movs	r2, #17
   b62a8:	f840 3b04 	str.w	r3, [r0], #4
   b62ac:	2100      	movs	r1, #0
   b62ae:	f001 f9af 	bl	b7610 <memset>
}
   b62b2:	4620      	mov	r0, r4
   b62b4:	bd10      	pop	{r4, pc}
   b62b6:	bf00      	nop
   b62b8:	000b7c3c 	.word	0x000b7c3c

000b62bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b62bc:	4603      	mov	r3, r0
   b62be:	4a07      	ldr	r2, [pc, #28]	; (b62dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b62c0:	b510      	push	{r4, lr}
   b62c2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b62c6:	f101 0210 	add.w	r2, r1, #16
   b62ca:	f851 4b04 	ldr.w	r4, [r1], #4
   b62ce:	f843 4b04 	str.w	r4, [r3], #4
   b62d2:	4291      	cmp	r1, r2
   b62d4:	d1f9      	bne.n	b62ca <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b62d6:	780a      	ldrb	r2, [r1, #0]
   b62d8:	701a      	strb	r2, [r3, #0]
}
   b62da:	bd10      	pop	{r4, pc}
   b62dc:	000b7c3c 	.word	0x000b7c3c

000b62e0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b62e0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b62e2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b62e6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b62ea:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b62ee:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b62f2:	2304      	movs	r3, #4
   b62f4:	6041      	str	r1, [r0, #4]
   b62f6:	7503      	strb	r3, [r0, #20]
}
   b62f8:	bd10      	pop	{r4, pc}
	...

000b62fc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b62fc:	b507      	push	{r0, r1, r2, lr}
   b62fe:	4b06      	ldr	r3, [pc, #24]	; (b6318 <_ZN9IPAddressC1EPKh+0x1c>)
   b6300:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6302:	78cb      	ldrb	r3, [r1, #3]
   b6304:	9300      	str	r3, [sp, #0]
   b6306:	788b      	ldrb	r3, [r1, #2]
   b6308:	784a      	ldrb	r2, [r1, #1]
   b630a:	7809      	ldrb	r1, [r1, #0]
   b630c:	f7ff ffe8 	bl	b62e0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6310:	b003      	add	sp, #12
   b6312:	f85d fb04 	ldr.w	pc, [sp], #4
   b6316:	bf00      	nop
   b6318:	000b7c3c 	.word	0x000b7c3c

000b631c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b631c:	7441      	strb	r1, [r0, #17]
}
   b631e:	4770      	bx	lr

000b6320 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6320:	4770      	bx	lr

000b6322 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6322:	4770      	bx	lr

000b6324 <_ZN9USBSerial4readEv>:
{
   b6324:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6326:	2100      	movs	r1, #0
   b6328:	7c00      	ldrb	r0, [r0, #16]
   b632a:	f7fe ff33 	bl	b5194 <HAL_USB_USART_Receive_Data>
}
   b632e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6332:	bd08      	pop	{r3, pc}

000b6334 <_ZN9USBSerial4peekEv>:
{
   b6334:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6336:	2101      	movs	r1, #1
   b6338:	7c00      	ldrb	r0, [r0, #16]
   b633a:	f7fe ff2b 	bl	b5194 <HAL_USB_USART_Receive_Data>
}
   b633e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6342:	bd08      	pop	{r3, pc}

000b6344 <_ZN9USBSerial17availableForWriteEv>:
{
   b6344:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6346:	7c00      	ldrb	r0, [r0, #16]
   b6348:	f7fe ff1c 	bl	b5184 <HAL_USB_USART_Available_Data_For_Write>
}
   b634c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6350:	bd08      	pop	{r3, pc}

000b6352 <_ZN9USBSerial9availableEv>:
{
   b6352:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6354:	7c00      	ldrb	r0, [r0, #16]
   b6356:	f7fe ff0d 	bl	b5174 <HAL_USB_USART_Available_Data>
}
   b635a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b635e:	bd08      	pop	{r3, pc}

000b6360 <_ZN9USBSerial5writeEh>:
{
   b6360:	b513      	push	{r0, r1, r4, lr}
   b6362:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6364:	7c00      	ldrb	r0, [r0, #16]
{
   b6366:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6368:	f7fe ff0c 	bl	b5184 <HAL_USB_USART_Available_Data_For_Write>
   b636c:	2800      	cmp	r0, #0
   b636e:	9901      	ldr	r1, [sp, #4]
   b6370:	dc01      	bgt.n	b6376 <_ZN9USBSerial5writeEh+0x16>
   b6372:	7c60      	ldrb	r0, [r4, #17]
   b6374:	b120      	cbz	r0, b6380 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6376:	7c20      	ldrb	r0, [r4, #16]
   b6378:	f7fe ff14 	bl	b51a4 <HAL_USB_USART_Send_Data>
   b637c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6380:	b002      	add	sp, #8
   b6382:	bd10      	pop	{r4, pc}

000b6384 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6384:	7c00      	ldrb	r0, [r0, #16]
   b6386:	f7fe bf15 	b.w	b51b4 <HAL_USB_USART_Flush_Data>

000b638a <_ZN9USBSerialD0Ev>:
   b638a:	b510      	push	{r4, lr}
   b638c:	2114      	movs	r1, #20
   b638e:	4604      	mov	r4, r0
   b6390:	f7fd fe83 	bl	b409a <_ZdlPvj>
   b6394:	4620      	mov	r0, r4
   b6396:	bd10      	pop	{r4, pc}

000b6398 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6398:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b639a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b639e:	4604      	mov	r4, r0
   b63a0:	4608      	mov	r0, r1
   b63a2:	2100      	movs	r1, #0
   b63a4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b63a8:	4b04      	ldr	r3, [pc, #16]	; (b63bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b63aa:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b63ac:	2301      	movs	r3, #1
  _serial = serial;
   b63ae:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b63b0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b63b2:	4611      	mov	r1, r2
   b63b4:	f7fe fece 	bl	b5154 <HAL_USB_USART_Init>
}
   b63b8:	4620      	mov	r0, r4
   b63ba:	bd10      	pop	{r4, pc}
   b63bc:	000b7c50 	.word	0x000b7c50

000b63c0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b63c0:	7c00      	ldrb	r0, [r0, #16]
   b63c2:	2200      	movs	r2, #0
   b63c4:	f7fe bece 	b.w	b5164 <HAL_USB_USART_Begin>

000b63c8 <_Z19acquireSerialBufferv>:
{
   b63c8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b63ca:	2214      	movs	r2, #20
{
   b63cc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b63ce:	2100      	movs	r1, #0
   b63d0:	f001 f91e 	bl	b7610 <memset>
}
   b63d4:	4620      	mov	r0, r4
   b63d6:	bd10      	pop	{r4, pc}

000b63d8 <_Z16_fetch_usbserialv>:
{
   b63d8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b63da:	4c0f      	ldr	r4, [pc, #60]	; (b6418 <_Z16_fetch_usbserialv+0x40>)
{
   b63dc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b63de:	a803      	add	r0, sp, #12
   b63e0:	f7ff fff2 	bl	b63c8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b63e4:	7821      	ldrb	r1, [r4, #0]
   b63e6:	f3bf 8f5b 	dmb	ish
   b63ea:	f011 0101 	ands.w	r1, r1, #1
   b63ee:	d10f      	bne.n	b6410 <_Z16_fetch_usbserialv+0x38>
   b63f0:	4620      	mov	r0, r4
   b63f2:	9101      	str	r1, [sp, #4]
   b63f4:	f7fd fe53 	bl	b409e <__cxa_guard_acquire>
   b63f8:	9901      	ldr	r1, [sp, #4]
   b63fa:	b148      	cbz	r0, b6410 <_Z16_fetch_usbserialv+0x38>
   b63fc:	aa03      	add	r2, sp, #12
   b63fe:	4807      	ldr	r0, [pc, #28]	; (b641c <_Z16_fetch_usbserialv+0x44>)
   b6400:	f7ff ffca 	bl	b6398 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6404:	4620      	mov	r0, r4
   b6406:	f7fd fe4f 	bl	b40a8 <__cxa_guard_release>
   b640a:	4805      	ldr	r0, [pc, #20]	; (b6420 <_Z16_fetch_usbserialv+0x48>)
   b640c:	f001 f8d4 	bl	b75b8 <atexit>
	return _usbserial;
}
   b6410:	4802      	ldr	r0, [pc, #8]	; (b641c <_Z16_fetch_usbserialv+0x44>)
   b6412:	b008      	add	sp, #32
   b6414:	bd10      	pop	{r4, pc}
   b6416:	bf00      	nop
   b6418:	2003e700 	.word	0x2003e700
   b641c:	2003e704 	.word	0x2003e704
   b6420:	000b6321 	.word	0x000b6321

000b6424 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6424:	4770      	bx	lr

000b6426 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6426:	7441      	strb	r1, [r0, #17]
}
   b6428:	4770      	bx	lr

000b642a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b642a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b642c:	7c00      	ldrb	r0, [r0, #16]
   b642e:	f7fe fe31 	bl	b5094 <hal_usart_available_data_for_write>
}
   b6432:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6436:	bd08      	pop	{r3, pc}

000b6438 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6438:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b643a:	7c00      	ldrb	r0, [r0, #16]
   b643c:	f7fe fe0a 	bl	b5054 <hal_usart_available>
}
   b6440:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6444:	bd08      	pop	{r3, pc}

000b6446 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6446:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6448:	7c00      	ldrb	r0, [r0, #16]
   b644a:	f7fe fe13 	bl	b5074 <hal_usart_peek>
}
   b644e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6452:	bd08      	pop	{r3, pc}

000b6454 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6454:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6456:	7c00      	ldrb	r0, [r0, #16]
   b6458:	f7fe fe04 	bl	b5064 <hal_usart_read>
}
   b645c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6460:	bd08      	pop	{r3, pc}

000b6462 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6462:	7c00      	ldrb	r0, [r0, #16]
   b6464:	f7fe be0e 	b.w	b5084 <hal_usart_flush>

000b6468 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6468:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b646a:	7c45      	ldrb	r5, [r0, #17]
{
   b646c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b646e:	b12d      	cbz	r5, b647c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6470:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6472:	b003      	add	sp, #12
   b6474:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6478:	f7fe bde4 	b.w	b5044 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b647c:	7c00      	ldrb	r0, [r0, #16]
   b647e:	9101      	str	r1, [sp, #4]
   b6480:	f7fe fe08 	bl	b5094 <hal_usart_available_data_for_write>
   b6484:	2800      	cmp	r0, #0
   b6486:	9901      	ldr	r1, [sp, #4]
   b6488:	dcf2      	bgt.n	b6470 <_ZN11USARTSerial5writeEh+0x8>
}
   b648a:	4628      	mov	r0, r5
   b648c:	b003      	add	sp, #12
   b648e:	bd30      	pop	{r4, r5, pc}

000b6490 <_ZN11USARTSerialD0Ev>:
   b6490:	b510      	push	{r4, lr}
   b6492:	2114      	movs	r1, #20
   b6494:	4604      	mov	r4, r0
   b6496:	f7fd fe00 	bl	b409a <_ZdlPvj>
   b649a:	4620      	mov	r0, r4
   b649c:	bd10      	pop	{r4, pc}
	...

000b64a0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b64a0:	b510      	push	{r4, lr}
   b64a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b64a6:	4604      	mov	r4, r0
   b64a8:	4608      	mov	r0, r1
   b64aa:	4611      	mov	r1, r2
   b64ac:	2200      	movs	r2, #0
   b64ae:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b64b2:	4b04      	ldr	r3, [pc, #16]	; (b64c4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b64b4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b64b6:	2301      	movs	r3, #1
  _serial = serial;
   b64b8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b64ba:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b64bc:	f7fe fdf2 	bl	b50a4 <hal_usart_init_ex>
}
   b64c0:	4620      	mov	r0, r4
   b64c2:	bd10      	pop	{r4, pc}
   b64c4:	000b7c80 	.word	0x000b7c80

000b64c8 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b64c8:	b510      	push	{r4, lr}
      if (_M_empty())
   b64ca:	6883      	ldr	r3, [r0, #8]
   b64cc:	4604      	mov	r4, r0
   b64ce:	b90b      	cbnz	r3, b64d4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b64d0:	f000 fa08 	bl	b68e4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b64d4:	68c3      	ldr	r3, [r0, #12]
   b64d6:	4798      	blx	r3
      if (_M_manager)
   b64d8:	68a3      	ldr	r3, [r4, #8]
   b64da:	b11b      	cbz	r3, b64e4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b64dc:	2203      	movs	r2, #3
   b64de:	4621      	mov	r1, r4
   b64e0:	4620      	mov	r0, r4
   b64e2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b64e4:	4620      	mov	r0, r4
   b64e6:	2110      	movs	r1, #16
}
   b64e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b64ec:	f7fd bdd5 	b.w	b409a <_ZdlPvj>

000b64f0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b64f0:	4770      	bx	lr

000b64f2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b64f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b64f4:	4606      	mov	r6, r0
   b64f6:	4615      	mov	r5, r2
   b64f8:	460c      	mov	r4, r1
   b64fa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b64fc:	42bc      	cmp	r4, r7
   b64fe:	d006      	beq.n	b650e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6500:	6833      	ldr	r3, [r6, #0]
   b6502:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6506:	689b      	ldr	r3, [r3, #8]
   b6508:	4630      	mov	r0, r6
   b650a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b650c:	e7f6      	b.n	b64fc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b650e:	4628      	mov	r0, r5
   b6510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6512 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6512:	7c00      	ldrb	r0, [r0, #16]
   b6514:	2200      	movs	r2, #0
   b6516:	f7fe bde5 	b.w	b50e4 <hal_i2c_write>

000b651a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b651a:	7c00      	ldrb	r0, [r0, #16]
   b651c:	2100      	movs	r1, #0
   b651e:	f7fe bde9 	b.w	b50f4 <hal_i2c_available>

000b6522 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6522:	7c00      	ldrb	r0, [r0, #16]
   b6524:	2100      	movs	r1, #0
   b6526:	f7fe bded 	b.w	b5104 <hal_i2c_read>

000b652a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b652a:	7c00      	ldrb	r0, [r0, #16]
   b652c:	2100      	movs	r1, #0
   b652e:	f7fe bdf1 	b.w	b5114 <hal_i2c_peek>

000b6532 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6532:	7c00      	ldrb	r0, [r0, #16]
   b6534:	2100      	movs	r1, #0
   b6536:	f7fe bdf5 	b.w	b5124 <hal_i2c_flush>

000b653a <_ZN7TwoWireD0Ev>:
   b653a:	b510      	push	{r4, lr}
   b653c:	2114      	movs	r1, #20
   b653e:	4604      	mov	r4, r0
   b6540:	f7fd fdab 	bl	b409a <_ZdlPvj>
   b6544:	4620      	mov	r0, r4
   b6546:	bd10      	pop	{r4, pc}

000b6548 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6548:	b538      	push	{r3, r4, r5, lr}
   b654a:	4604      	mov	r4, r0
   b654c:	4615      	mov	r5, r2
   b654e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6552:	2200      	movs	r2, #0
   b6554:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6558:	4b09      	ldr	r3, [pc, #36]	; (b6580 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b655a:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b655c:	4608      	mov	r0, r1
   b655e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6560:	4629      	mov	r1, r5
   b6562:	f7fe fde7 	bl	b5134 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6566:	30bf      	adds	r0, #191	; 0xbf
   b6568:	d108      	bne.n	b657c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b656a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b656c:	07db      	lsls	r3, r3, #31
   b656e:	d505      	bpl.n	b657c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6570:	6868      	ldr	r0, [r5, #4]
   b6572:	f7fe ff2b 	bl	b53cc <free>
    free(conf.tx_buffer);
   b6576:	68e8      	ldr	r0, [r5, #12]
   b6578:	f7fe ff28 	bl	b53cc <free>
}
   b657c:	4620      	mov	r0, r4
   b657e:	bd38      	pop	{r3, r4, r5, pc}
   b6580:	000b7cb0 	.word	0x000b7cb0

000b6584 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6584:	2300      	movs	r3, #0
   b6586:	7c00      	ldrb	r0, [r0, #16]
   b6588:	461a      	mov	r2, r3
   b658a:	4619      	mov	r1, r3
   b658c:	f7fe bd92 	b.w	b50b4 <hal_i2c_begin>

000b6590 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6590:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6592:	2200      	movs	r2, #0
   b6594:	2314      	movs	r3, #20
   b6596:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b659a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b659e:	780b      	ldrb	r3, [r1, #0]
   b65a0:	f88d 3008 	strb.w	r3, [sp, #8]
   b65a4:	684b      	ldr	r3, [r1, #4]
   b65a6:	9303      	str	r3, [sp, #12]
   b65a8:	68cb      	ldr	r3, [r1, #12]
   b65aa:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b65ac:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b65ae:	7a0b      	ldrb	r3, [r1, #8]
   b65b0:	9305      	str	r3, [sp, #20]
   b65b2:	a901      	add	r1, sp, #4
   b65b4:	f7fe fdc6 	bl	b5144 <hal_i2c_request_ex>
}
   b65b8:	b007      	add	sp, #28
   b65ba:	f85d fb04 	ldr.w	pc, [sp], #4

000b65be <_ZN7TwoWire11requestFromEhjh>:
{
   b65be:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b65c0:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b65c2:	f88d 1000 	strb.w	r1, [sp]
   b65c6:	f04f 0164 	mov.w	r1, #100	; 0x64
   b65ca:	9103      	str	r1, [sp, #12]
   b65cc:	bf18      	it	ne
   b65ce:	2301      	movne	r3, #1
   b65d0:	4669      	mov	r1, sp
    size_ = size;
   b65d2:	9201      	str	r2, [sp, #4]
   b65d4:	f88d 3008 	strb.w	r3, [sp, #8]
   b65d8:	f7ff ffda 	bl	b6590 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b65dc:	b005      	add	sp, #20
   b65de:	f85d fb04 	ldr.w	pc, [sp], #4

000b65e2 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b65e2:	2301      	movs	r3, #1
   b65e4:	f7ff bfeb 	b.w	b65be <_ZN7TwoWire11requestFromEhjh>

000b65e8 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b65e8:	7c00      	ldrb	r0, [r0, #16]
   b65ea:	2200      	movs	r2, #0
   b65ec:	f7fe bd6a 	b.w	b50c4 <hal_i2c_begin_transmission>

000b65f0 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b65f0:	7c00      	ldrb	r0, [r0, #16]
   b65f2:	2200      	movs	r2, #0
   b65f4:	f7fe bd6e 	b.w	b50d4 <hal_i2c_end_transmission>

000b65f8 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b65f8:	2101      	movs	r1, #1
   b65fa:	f7ff bff9 	b.w	b65f0 <_ZN7TwoWire15endTransmissionEh>

000b65fe <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b65fe:	2200      	movs	r2, #0
   b6600:	6840      	ldr	r0, [r0, #4]
   b6602:	4611      	mov	r1, r2
   b6604:	f7fe be62 	b.w	b52cc <network_ready>

000b6608 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6608:	2200      	movs	r2, #0
   b660a:	6840      	ldr	r0, [r0, #4]
   b660c:	4611      	mov	r1, r2
   b660e:	f7fe be7d 	b.w	b530c <network_listening>

000b6612 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6612:	2200      	movs	r2, #0
   b6614:	6840      	ldr	r0, [r0, #4]
   b6616:	4611      	mov	r1, r2
   b6618:	f7fe be88 	b.w	b532c <network_get_listen_timeout>

000b661c <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b661c:	6840      	ldr	r0, [r0, #4]
   b661e:	2200      	movs	r2, #0
   b6620:	f7fe be7c 	b.w	b531c <network_set_listen_timeout>

000b6624 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6624:	6840      	ldr	r0, [r0, #4]
   b6626:	2200      	movs	r2, #0
   b6628:	f081 0101 	eor.w	r1, r1, #1
   b662c:	f7fe be66 	b.w	b52fc <network_listen>

000b6630 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6630:	2300      	movs	r3, #0
   b6632:	6840      	ldr	r0, [r0, #4]
   b6634:	461a      	mov	r2, r3
   b6636:	4619      	mov	r1, r3
   b6638:	f7fe be58 	b.w	b52ec <network_off>

000b663c <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b663c:	2300      	movs	r3, #0
   b663e:	6840      	ldr	r0, [r0, #4]
   b6640:	461a      	mov	r2, r3
   b6642:	4619      	mov	r1, r3
   b6644:	f7fe be4a 	b.w	b52dc <network_on>

000b6648 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6648:	2200      	movs	r2, #0
   b664a:	6840      	ldr	r0, [r0, #4]
   b664c:	4611      	mov	r1, r2
   b664e:	f7fe be2d 	b.w	b52ac <network_connecting>

000b6652 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6652:	6840      	ldr	r0, [r0, #4]
   b6654:	2200      	movs	r2, #0
   b6656:	2102      	movs	r1, #2
   b6658:	f7fe be30 	b.w	b52bc <network_disconnect>

000b665c <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b665c:	2300      	movs	r3, #0
   b665e:	6840      	ldr	r0, [r0, #4]
   b6660:	461a      	mov	r2, r3
   b6662:	f7fe be1b 	b.w	b529c <network_connect>
	...

000b6668 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6668:	4b02      	ldr	r3, [pc, #8]	; (b6674 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b666a:	2204      	movs	r2, #4
   b666c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b666e:	4a02      	ldr	r2, [pc, #8]	; (b6678 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6670:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6672:	4770      	bx	lr
   b6674:	2003e718 	.word	0x2003e718
   b6678:	000b7cd8 	.word	0x000b7cd8

000b667c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b667c:	2300      	movs	r3, #0
   b667e:	6840      	ldr	r0, [r0, #4]
   b6680:	461a      	mov	r2, r3
   b6682:	f7fe be0b 	b.w	b529c <network_connect>

000b6686 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6686:	6840      	ldr	r0, [r0, #4]
   b6688:	2200      	movs	r2, #0
   b668a:	2102      	movs	r1, #2
   b668c:	f7fe be16 	b.w	b52bc <network_disconnect>

000b6690 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6690:	2200      	movs	r2, #0
   b6692:	6840      	ldr	r0, [r0, #4]
   b6694:	4611      	mov	r1, r2
   b6696:	f7fe be09 	b.w	b52ac <network_connecting>

000b669a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b669a:	2200      	movs	r2, #0
   b669c:	6840      	ldr	r0, [r0, #4]
   b669e:	4611      	mov	r1, r2
   b66a0:	f7fe be14 	b.w	b52cc <network_ready>

000b66a4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b66a4:	2300      	movs	r3, #0
   b66a6:	6840      	ldr	r0, [r0, #4]
   b66a8:	461a      	mov	r2, r3
   b66aa:	4619      	mov	r1, r3
   b66ac:	f7fe be16 	b.w	b52dc <network_on>

000b66b0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b66b0:	2300      	movs	r3, #0
   b66b2:	6840      	ldr	r0, [r0, #4]
   b66b4:	461a      	mov	r2, r3
   b66b6:	4619      	mov	r1, r3
   b66b8:	f7fe be18 	b.w	b52ec <network_off>

000b66bc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b66bc:	6840      	ldr	r0, [r0, #4]
   b66be:	2100      	movs	r1, #0
   b66c0:	f7fe be3c 	b.w	b533c <network_is_on>

000b66c4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b66c4:	6840      	ldr	r0, [r0, #4]
   b66c6:	2100      	movs	r1, #0
   b66c8:	f7fe be40 	b.w	b534c <network_is_off>

000b66cc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b66cc:	6840      	ldr	r0, [r0, #4]
   b66ce:	2200      	movs	r2, #0
   b66d0:	f081 0101 	eor.w	r1, r1, #1
   b66d4:	f7fe be12 	b.w	b52fc <network_listen>

000b66d8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b66d8:	6840      	ldr	r0, [r0, #4]
   b66da:	2200      	movs	r2, #0
   b66dc:	f7fe be1e 	b.w	b531c <network_set_listen_timeout>

000b66e0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b66e0:	2200      	movs	r2, #0
   b66e2:	6840      	ldr	r0, [r0, #4]
   b66e4:	4611      	mov	r1, r2
   b66e6:	f7fe be21 	b.w	b532c <network_get_listen_timeout>

000b66ea <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b66ea:	2200      	movs	r2, #0
   b66ec:	6840      	ldr	r0, [r0, #4]
   b66ee:	4611      	mov	r1, r2
   b66f0:	f7fe be0c 	b.w	b530c <network_listening>

000b66f4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b66f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b66f8:	b095      	sub	sp, #84	; 0x54
   b66fa:	4614      	mov	r4, r2
   b66fc:	460d      	mov	r5, r1
   b66fe:	4607      	mov	r7, r0
    IPAddress addr;
   b6700:	f7ff fdce 	bl	b62a0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6704:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6706:	221c      	movs	r2, #28
   b6708:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b670a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b670c:	f000 ff80 	bl	b7610 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6710:	2340      	movs	r3, #64	; 0x40
   b6712:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6714:	4620      	mov	r0, r4
   b6716:	466b      	mov	r3, sp
   b6718:	aa0c      	add	r2, sp, #48	; 0x30
   b671a:	2100      	movs	r1, #0
   b671c:	f7fe fc5a 	bl	b4fd4 <netdb_getaddrinfo>
    if (!r) {
   b6720:	4604      	mov	r4, r0
   b6722:	2800      	cmp	r0, #0
   b6724:	d14b      	bne.n	b67be <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6726:	4602      	mov	r2, r0
   b6728:	2101      	movs	r1, #1
   b672a:	6868      	ldr	r0, [r5, #4]
   b672c:	f7fe fdce 	bl	b52cc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6730:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6732:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6734:	4622      	mov	r2, r4
   b6736:	6868      	ldr	r0, [r5, #4]
   b6738:	f7fe fdc8 	bl	b52cc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b673c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b673e:	4681      	mov	r9, r0
        bool ok = false;
   b6740:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6742:	2e00      	cmp	r6, #0
   b6744:	d03b      	beq.n	b67be <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6746:	2900      	cmp	r1, #0
   b6748:	d139      	bne.n	b67be <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b674a:	6873      	ldr	r3, [r6, #4]
   b674c:	2b02      	cmp	r3, #2
   b674e:	d003      	beq.n	b6758 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6750:	2b0a      	cmp	r3, #10
   b6752:	d011      	beq.n	b6778 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6754:	69f6      	ldr	r6, [r6, #28]
   b6756:	e7f4      	b.n	b6742 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6758:	f1b8 0f00 	cmp.w	r8, #0
   b675c:	d0fa      	beq.n	b6754 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b675e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6760:	a806      	add	r0, sp, #24
   b6762:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6764:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6766:	f7ff fdc9 	bl	b62fc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b676a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b676c:	1d3c      	adds	r4, r7, #4
   b676e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6770:	682b      	ldr	r3, [r5, #0]
   b6772:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6774:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6776:	e7ed      	b.n	b6754 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6778:	f1b9 0f00 	cmp.w	r9, #0
   b677c:	d0ea      	beq.n	b6754 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b677e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6780:	2210      	movs	r2, #16
   b6782:	a801      	add	r0, sp, #4
   b6784:	f000 ff44 	bl	b7610 <memset>
                    a.v = 6;
   b6788:	2306      	movs	r3, #6
   b678a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b678e:	ad01      	add	r5, sp, #4
   b6790:	f104 0308 	add.w	r3, r4, #8
   b6794:	3418      	adds	r4, #24
   b6796:	6818      	ldr	r0, [r3, #0]
   b6798:	6859      	ldr	r1, [r3, #4]
   b679a:	462a      	mov	r2, r5
   b679c:	c203      	stmia	r2!, {r0, r1}
   b679e:	3308      	adds	r3, #8
   b67a0:	42a3      	cmp	r3, r4
   b67a2:	4615      	mov	r5, r2
   b67a4:	d1f7      	bne.n	b6796 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b67a6:	a901      	add	r1, sp, #4
   b67a8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b67aa:	ad07      	add	r5, sp, #28
   b67ac:	f7ff fd86 	bl	b62bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b67b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b67b2:	1d3c      	adds	r4, r7, #4
   b67b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b67b6:	682b      	ldr	r3, [r5, #0]
   b67b8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b67ba:	4649      	mov	r1, r9
   b67bc:	e7ca      	b.n	b6754 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b67be:	9800      	ldr	r0, [sp, #0]
   b67c0:	f7fe fc00 	bl	b4fc4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b67c4:	4638      	mov	r0, r7
   b67c6:	b015      	add	sp, #84	; 0x54
   b67c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b67cc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b67cc:	4b02      	ldr	r3, [pc, #8]	; (b67d8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b67ce:	4a03      	ldr	r2, [pc, #12]	; (b67dc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b67d0:	601a      	str	r2, [r3, #0]
   b67d2:	2200      	movs	r2, #0
   b67d4:	605a      	str	r2, [r3, #4]

} // spark
   b67d6:	4770      	bx	lr
   b67d8:	2003e720 	.word	0x2003e720
   b67dc:	000b7d14 	.word	0x000b7d14

000b67e0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b67e0:	4770      	bx	lr
	...

000b67e4 <_Z20acquireSerial1Bufferv>:
{
   b67e4:	b538      	push	{r3, r4, r5, lr}
   b67e6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b67e8:	2514      	movs	r5, #20
   b67ea:	462a      	mov	r2, r5
   b67ec:	2100      	movs	r1, #0
   b67ee:	f000 ff0f 	bl	b7610 <memset>
   b67f2:	8025      	strh	r5, [r4, #0]
   b67f4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b67f6:	4907      	ldr	r1, [pc, #28]	; (b6814 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b67f8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b67fa:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b67fc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b67fe:	f000 f86f 	bl	b68e0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6802:	4904      	ldr	r1, [pc, #16]	; (b6814 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6804:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6806:	4628      	mov	r0, r5
   b6808:	f000 f86a 	bl	b68e0 <_ZnajRKSt9nothrow_t>
    };
   b680c:	60e0      	str	r0, [r4, #12]
}
   b680e:	4620      	mov	r0, r4
   b6810:	bd38      	pop	{r3, r4, r5, pc}
   b6812:	bf00      	nop
   b6814:	000b7d48 	.word	0x000b7d48

000b6818 <_Z22__fetch_global_Serial1v>:
{
   b6818:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b681a:	4d0e      	ldr	r5, [pc, #56]	; (b6854 <_Z22__fetch_global_Serial1v+0x3c>)
   b681c:	7829      	ldrb	r1, [r5, #0]
   b681e:	f3bf 8f5b 	dmb	ish
   b6822:	f011 0401 	ands.w	r4, r1, #1
{
   b6826:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6828:	d111      	bne.n	b684e <_Z22__fetch_global_Serial1v+0x36>
   b682a:	4628      	mov	r0, r5
   b682c:	f7fd fc37 	bl	b409e <__cxa_guard_acquire>
   b6830:	b168      	cbz	r0, b684e <_Z22__fetch_global_Serial1v+0x36>
   b6832:	a801      	add	r0, sp, #4
   b6834:	f7ff ffd6 	bl	b67e4 <_Z20acquireSerial1Bufferv>
   b6838:	aa01      	add	r2, sp, #4
   b683a:	4621      	mov	r1, r4
   b683c:	4806      	ldr	r0, [pc, #24]	; (b6858 <_Z22__fetch_global_Serial1v+0x40>)
   b683e:	f7ff fe2f 	bl	b64a0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6842:	4628      	mov	r0, r5
   b6844:	f7fd fc30 	bl	b40a8 <__cxa_guard_release>
   b6848:	4804      	ldr	r0, [pc, #16]	; (b685c <_Z22__fetch_global_Serial1v+0x44>)
   b684a:	f000 feb5 	bl	b75b8 <atexit>
    return serial1;
}
   b684e:	4802      	ldr	r0, [pc, #8]	; (b6858 <_Z22__fetch_global_Serial1v+0x40>)
   b6850:	b007      	add	sp, #28
   b6852:	bd30      	pop	{r4, r5, pc}
   b6854:	2003e728 	.word	0x2003e728
   b6858:	2003e72c 	.word	0x2003e72c
   b685c:	000b67e1 	.word	0x000b67e1

000b6860 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6860:	4770      	bx	lr
	...

000b6864 <_Z17acquireWireBufferv>:
{
   b6864:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b6866:	4b0a      	ldr	r3, [pc, #40]	; (b6890 <_Z17acquireWireBufferv+0x2c>)
   b6868:	6003      	str	r3, [r0, #0]
   b686a:	2301      	movs	r3, #1
{
   b686c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b686e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6870:	4908      	ldr	r1, [pc, #32]	; (b6894 <_Z17acquireWireBufferv+0x30>)
   b6872:	2020      	movs	r0, #32
   b6874:	f000 f834 	bl	b68e0 <_ZnajRKSt9nothrow_t>
	};
   b6878:	2520      	movs	r5, #32
   b687a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b687c:	4905      	ldr	r1, [pc, #20]	; (b6894 <_Z17acquireWireBufferv+0x30>)
	};
   b687e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6880:	4628      	mov	r0, r5
   b6882:	f000 f82d 	bl	b68e0 <_ZnajRKSt9nothrow_t>
	};
   b6886:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b688a:	4620      	mov	r0, r4
   b688c:	bd38      	pop	{r3, r4, r5, pc}
   b688e:	bf00      	nop
   b6890:	00010018 	.word	0x00010018
   b6894:	000b7d48 	.word	0x000b7d48

000b6898 <_Z19__fetch_global_Wirev>:
{
   b6898:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b689a:	4d0e      	ldr	r5, [pc, #56]	; (b68d4 <_Z19__fetch_global_Wirev+0x3c>)
   b689c:	7829      	ldrb	r1, [r5, #0]
   b689e:	f3bf 8f5b 	dmb	ish
   b68a2:	f011 0401 	ands.w	r4, r1, #1
{
   b68a6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b68a8:	d111      	bne.n	b68ce <_Z19__fetch_global_Wirev+0x36>
   b68aa:	4628      	mov	r0, r5
   b68ac:	f7fd fbf7 	bl	b409e <__cxa_guard_acquire>
   b68b0:	b168      	cbz	r0, b68ce <_Z19__fetch_global_Wirev+0x36>
   b68b2:	4668      	mov	r0, sp
   b68b4:	f7ff ffd6 	bl	b6864 <_Z17acquireWireBufferv>
   b68b8:	466a      	mov	r2, sp
   b68ba:	4621      	mov	r1, r4
   b68bc:	4806      	ldr	r0, [pc, #24]	; (b68d8 <_Z19__fetch_global_Wirev+0x40>)
   b68be:	f7ff fe43 	bl	b6548 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b68c2:	4628      	mov	r0, r5
   b68c4:	f7fd fbf0 	bl	b40a8 <__cxa_guard_release>
   b68c8:	4804      	ldr	r0, [pc, #16]	; (b68dc <_Z19__fetch_global_Wirev+0x44>)
   b68ca:	f000 fe75 	bl	b75b8 <atexit>
	return wire;
}
   b68ce:	4802      	ldr	r0, [pc, #8]	; (b68d8 <_Z19__fetch_global_Wirev+0x40>)
   b68d0:	b007      	add	sp, #28
   b68d2:	bd30      	pop	{r4, r5, pc}
   b68d4:	2003e744 	.word	0x2003e744
   b68d8:	2003e748 	.word	0x2003e748
   b68dc:	000b6861 	.word	0x000b6861

000b68e0 <_ZnajRKSt9nothrow_t>:
   b68e0:	f7fd bbd9 	b.w	b4096 <_Znaj>

000b68e4 <_ZSt25__throw_bad_function_callv>:
   b68e4:	b508      	push	{r3, lr}
   b68e6:	f7fe fd81 	bl	b53ec <abort>
	...

000b68ec <__aeabi_drsub>:
   b68ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b68f0:	e002      	b.n	b68f8 <__adddf3>
   b68f2:	bf00      	nop

000b68f4 <__aeabi_dsub>:
   b68f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b68f8 <__adddf3>:
   b68f8:	b530      	push	{r4, r5, lr}
   b68fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b68fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b6902:	ea94 0f05 	teq	r4, r5
   b6906:	bf08      	it	eq
   b6908:	ea90 0f02 	teqeq	r0, r2
   b690c:	bf1f      	itttt	ne
   b690e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b6912:	ea55 0c02 	orrsne.w	ip, r5, r2
   b6916:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b691a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b691e:	f000 80e2 	beq.w	b6ae6 <__adddf3+0x1ee>
   b6922:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b6926:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b692a:	bfb8      	it	lt
   b692c:	426d      	neglt	r5, r5
   b692e:	dd0c      	ble.n	b694a <__adddf3+0x52>
   b6930:	442c      	add	r4, r5
   b6932:	ea80 0202 	eor.w	r2, r0, r2
   b6936:	ea81 0303 	eor.w	r3, r1, r3
   b693a:	ea82 0000 	eor.w	r0, r2, r0
   b693e:	ea83 0101 	eor.w	r1, r3, r1
   b6942:	ea80 0202 	eor.w	r2, r0, r2
   b6946:	ea81 0303 	eor.w	r3, r1, r3
   b694a:	2d36      	cmp	r5, #54	; 0x36
   b694c:	bf88      	it	hi
   b694e:	bd30      	pophi	{r4, r5, pc}
   b6950:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b6954:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6958:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b695c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b6960:	d002      	beq.n	b6968 <__adddf3+0x70>
   b6962:	4240      	negs	r0, r0
   b6964:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6968:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b696c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6970:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b6974:	d002      	beq.n	b697c <__adddf3+0x84>
   b6976:	4252      	negs	r2, r2
   b6978:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b697c:	ea94 0f05 	teq	r4, r5
   b6980:	f000 80a7 	beq.w	b6ad2 <__adddf3+0x1da>
   b6984:	f1a4 0401 	sub.w	r4, r4, #1
   b6988:	f1d5 0e20 	rsbs	lr, r5, #32
   b698c:	db0d      	blt.n	b69aa <__adddf3+0xb2>
   b698e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b6992:	fa22 f205 	lsr.w	r2, r2, r5
   b6996:	1880      	adds	r0, r0, r2
   b6998:	f141 0100 	adc.w	r1, r1, #0
   b699c:	fa03 f20e 	lsl.w	r2, r3, lr
   b69a0:	1880      	adds	r0, r0, r2
   b69a2:	fa43 f305 	asr.w	r3, r3, r5
   b69a6:	4159      	adcs	r1, r3
   b69a8:	e00e      	b.n	b69c8 <__adddf3+0xd0>
   b69aa:	f1a5 0520 	sub.w	r5, r5, #32
   b69ae:	f10e 0e20 	add.w	lr, lr, #32
   b69b2:	2a01      	cmp	r2, #1
   b69b4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b69b8:	bf28      	it	cs
   b69ba:	f04c 0c02 	orrcs.w	ip, ip, #2
   b69be:	fa43 f305 	asr.w	r3, r3, r5
   b69c2:	18c0      	adds	r0, r0, r3
   b69c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b69c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b69cc:	d507      	bpl.n	b69de <__adddf3+0xe6>
   b69ce:	f04f 0e00 	mov.w	lr, #0
   b69d2:	f1dc 0c00 	rsbs	ip, ip, #0
   b69d6:	eb7e 0000 	sbcs.w	r0, lr, r0
   b69da:	eb6e 0101 	sbc.w	r1, lr, r1
   b69de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b69e2:	d31b      	bcc.n	b6a1c <__adddf3+0x124>
   b69e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b69e8:	d30c      	bcc.n	b6a04 <__adddf3+0x10c>
   b69ea:	0849      	lsrs	r1, r1, #1
   b69ec:	ea5f 0030 	movs.w	r0, r0, rrx
   b69f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b69f4:	f104 0401 	add.w	r4, r4, #1
   b69f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b69fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b6a00:	f080 809a 	bcs.w	b6b38 <__adddf3+0x240>
   b6a04:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b6a08:	bf08      	it	eq
   b6a0a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6a0e:	f150 0000 	adcs.w	r0, r0, #0
   b6a12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6a16:	ea41 0105 	orr.w	r1, r1, r5
   b6a1a:	bd30      	pop	{r4, r5, pc}
   b6a1c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b6a20:	4140      	adcs	r0, r0
   b6a22:	eb41 0101 	adc.w	r1, r1, r1
   b6a26:	3c01      	subs	r4, #1
   b6a28:	bf28      	it	cs
   b6a2a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b6a2e:	d2e9      	bcs.n	b6a04 <__adddf3+0x10c>
   b6a30:	f091 0f00 	teq	r1, #0
   b6a34:	bf04      	itt	eq
   b6a36:	4601      	moveq	r1, r0
   b6a38:	2000      	moveq	r0, #0
   b6a3a:	fab1 f381 	clz	r3, r1
   b6a3e:	bf08      	it	eq
   b6a40:	3320      	addeq	r3, #32
   b6a42:	f1a3 030b 	sub.w	r3, r3, #11
   b6a46:	f1b3 0220 	subs.w	r2, r3, #32
   b6a4a:	da0c      	bge.n	b6a66 <__adddf3+0x16e>
   b6a4c:	320c      	adds	r2, #12
   b6a4e:	dd08      	ble.n	b6a62 <__adddf3+0x16a>
   b6a50:	f102 0c14 	add.w	ip, r2, #20
   b6a54:	f1c2 020c 	rsb	r2, r2, #12
   b6a58:	fa01 f00c 	lsl.w	r0, r1, ip
   b6a5c:	fa21 f102 	lsr.w	r1, r1, r2
   b6a60:	e00c      	b.n	b6a7c <__adddf3+0x184>
   b6a62:	f102 0214 	add.w	r2, r2, #20
   b6a66:	bfd8      	it	le
   b6a68:	f1c2 0c20 	rsble	ip, r2, #32
   b6a6c:	fa01 f102 	lsl.w	r1, r1, r2
   b6a70:	fa20 fc0c 	lsr.w	ip, r0, ip
   b6a74:	bfdc      	itt	le
   b6a76:	ea41 010c 	orrle.w	r1, r1, ip
   b6a7a:	4090      	lslle	r0, r2
   b6a7c:	1ae4      	subs	r4, r4, r3
   b6a7e:	bfa2      	ittt	ge
   b6a80:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b6a84:	4329      	orrge	r1, r5
   b6a86:	bd30      	popge	{r4, r5, pc}
   b6a88:	ea6f 0404 	mvn.w	r4, r4
   b6a8c:	3c1f      	subs	r4, #31
   b6a8e:	da1c      	bge.n	b6aca <__adddf3+0x1d2>
   b6a90:	340c      	adds	r4, #12
   b6a92:	dc0e      	bgt.n	b6ab2 <__adddf3+0x1ba>
   b6a94:	f104 0414 	add.w	r4, r4, #20
   b6a98:	f1c4 0220 	rsb	r2, r4, #32
   b6a9c:	fa20 f004 	lsr.w	r0, r0, r4
   b6aa0:	fa01 f302 	lsl.w	r3, r1, r2
   b6aa4:	ea40 0003 	orr.w	r0, r0, r3
   b6aa8:	fa21 f304 	lsr.w	r3, r1, r4
   b6aac:	ea45 0103 	orr.w	r1, r5, r3
   b6ab0:	bd30      	pop	{r4, r5, pc}
   b6ab2:	f1c4 040c 	rsb	r4, r4, #12
   b6ab6:	f1c4 0220 	rsb	r2, r4, #32
   b6aba:	fa20 f002 	lsr.w	r0, r0, r2
   b6abe:	fa01 f304 	lsl.w	r3, r1, r4
   b6ac2:	ea40 0003 	orr.w	r0, r0, r3
   b6ac6:	4629      	mov	r1, r5
   b6ac8:	bd30      	pop	{r4, r5, pc}
   b6aca:	fa21 f004 	lsr.w	r0, r1, r4
   b6ace:	4629      	mov	r1, r5
   b6ad0:	bd30      	pop	{r4, r5, pc}
   b6ad2:	f094 0f00 	teq	r4, #0
   b6ad6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b6ada:	bf06      	itte	eq
   b6adc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b6ae0:	3401      	addeq	r4, #1
   b6ae2:	3d01      	subne	r5, #1
   b6ae4:	e74e      	b.n	b6984 <__adddf3+0x8c>
   b6ae6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6aea:	bf18      	it	ne
   b6aec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6af0:	d029      	beq.n	b6b46 <__adddf3+0x24e>
   b6af2:	ea94 0f05 	teq	r4, r5
   b6af6:	bf08      	it	eq
   b6af8:	ea90 0f02 	teqeq	r0, r2
   b6afc:	d005      	beq.n	b6b0a <__adddf3+0x212>
   b6afe:	ea54 0c00 	orrs.w	ip, r4, r0
   b6b02:	bf04      	itt	eq
   b6b04:	4619      	moveq	r1, r3
   b6b06:	4610      	moveq	r0, r2
   b6b08:	bd30      	pop	{r4, r5, pc}
   b6b0a:	ea91 0f03 	teq	r1, r3
   b6b0e:	bf1e      	ittt	ne
   b6b10:	2100      	movne	r1, #0
   b6b12:	2000      	movne	r0, #0
   b6b14:	bd30      	popne	{r4, r5, pc}
   b6b16:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b6b1a:	d105      	bne.n	b6b28 <__adddf3+0x230>
   b6b1c:	0040      	lsls	r0, r0, #1
   b6b1e:	4149      	adcs	r1, r1
   b6b20:	bf28      	it	cs
   b6b22:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b6b26:	bd30      	pop	{r4, r5, pc}
   b6b28:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b6b2c:	bf3c      	itt	cc
   b6b2e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b6b32:	bd30      	popcc	{r4, r5, pc}
   b6b34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6b38:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b6b3c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6b40:	f04f 0000 	mov.w	r0, #0
   b6b44:	bd30      	pop	{r4, r5, pc}
   b6b46:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6b4a:	bf1a      	itte	ne
   b6b4c:	4619      	movne	r1, r3
   b6b4e:	4610      	movne	r0, r2
   b6b50:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b6b54:	bf1c      	itt	ne
   b6b56:	460b      	movne	r3, r1
   b6b58:	4602      	movne	r2, r0
   b6b5a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6b5e:	bf06      	itte	eq
   b6b60:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b6b64:	ea91 0f03 	teqeq	r1, r3
   b6b68:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b6b6c:	bd30      	pop	{r4, r5, pc}
   b6b6e:	bf00      	nop

000b6b70 <__aeabi_ui2d>:
   b6b70:	f090 0f00 	teq	r0, #0
   b6b74:	bf04      	itt	eq
   b6b76:	2100      	moveq	r1, #0
   b6b78:	4770      	bxeq	lr
   b6b7a:	b530      	push	{r4, r5, lr}
   b6b7c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6b80:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6b84:	f04f 0500 	mov.w	r5, #0
   b6b88:	f04f 0100 	mov.w	r1, #0
   b6b8c:	e750      	b.n	b6a30 <__adddf3+0x138>
   b6b8e:	bf00      	nop

000b6b90 <__aeabi_i2d>:
   b6b90:	f090 0f00 	teq	r0, #0
   b6b94:	bf04      	itt	eq
   b6b96:	2100      	moveq	r1, #0
   b6b98:	4770      	bxeq	lr
   b6b9a:	b530      	push	{r4, r5, lr}
   b6b9c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6ba0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6ba4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b6ba8:	bf48      	it	mi
   b6baa:	4240      	negmi	r0, r0
   b6bac:	f04f 0100 	mov.w	r1, #0
   b6bb0:	e73e      	b.n	b6a30 <__adddf3+0x138>
   b6bb2:	bf00      	nop

000b6bb4 <__aeabi_f2d>:
   b6bb4:	0042      	lsls	r2, r0, #1
   b6bb6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b6bba:	ea4f 0131 	mov.w	r1, r1, rrx
   b6bbe:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b6bc2:	bf1f      	itttt	ne
   b6bc4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b6bc8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b6bcc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b6bd0:	4770      	bxne	lr
   b6bd2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b6bd6:	bf08      	it	eq
   b6bd8:	4770      	bxeq	lr
   b6bda:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b6bde:	bf04      	itt	eq
   b6be0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b6be4:	4770      	bxeq	lr
   b6be6:	b530      	push	{r4, r5, lr}
   b6be8:	f44f 7460 	mov.w	r4, #896	; 0x380
   b6bec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6bf0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6bf4:	e71c      	b.n	b6a30 <__adddf3+0x138>
   b6bf6:	bf00      	nop

000b6bf8 <__aeabi_ul2d>:
   b6bf8:	ea50 0201 	orrs.w	r2, r0, r1
   b6bfc:	bf08      	it	eq
   b6bfe:	4770      	bxeq	lr
   b6c00:	b530      	push	{r4, r5, lr}
   b6c02:	f04f 0500 	mov.w	r5, #0
   b6c06:	e00a      	b.n	b6c1e <__aeabi_l2d+0x16>

000b6c08 <__aeabi_l2d>:
   b6c08:	ea50 0201 	orrs.w	r2, r0, r1
   b6c0c:	bf08      	it	eq
   b6c0e:	4770      	bxeq	lr
   b6c10:	b530      	push	{r4, r5, lr}
   b6c12:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b6c16:	d502      	bpl.n	b6c1e <__aeabi_l2d+0x16>
   b6c18:	4240      	negs	r0, r0
   b6c1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6c1e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6c22:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6c26:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b6c2a:	f43f aed8 	beq.w	b69de <__adddf3+0xe6>
   b6c2e:	f04f 0203 	mov.w	r2, #3
   b6c32:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6c36:	bf18      	it	ne
   b6c38:	3203      	addne	r2, #3
   b6c3a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6c3e:	bf18      	it	ne
   b6c40:	3203      	addne	r2, #3
   b6c42:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b6c46:	f1c2 0320 	rsb	r3, r2, #32
   b6c4a:	fa00 fc03 	lsl.w	ip, r0, r3
   b6c4e:	fa20 f002 	lsr.w	r0, r0, r2
   b6c52:	fa01 fe03 	lsl.w	lr, r1, r3
   b6c56:	ea40 000e 	orr.w	r0, r0, lr
   b6c5a:	fa21 f102 	lsr.w	r1, r1, r2
   b6c5e:	4414      	add	r4, r2
   b6c60:	e6bd      	b.n	b69de <__adddf3+0xe6>
   b6c62:	bf00      	nop

000b6c64 <__aeabi_dmul>:
   b6c64:	b570      	push	{r4, r5, r6, lr}
   b6c66:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6c6a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6c6e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6c72:	bf1d      	ittte	ne
   b6c74:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6c78:	ea94 0f0c 	teqne	r4, ip
   b6c7c:	ea95 0f0c 	teqne	r5, ip
   b6c80:	f000 f8de 	bleq	b6e40 <__aeabi_dmul+0x1dc>
   b6c84:	442c      	add	r4, r5
   b6c86:	ea81 0603 	eor.w	r6, r1, r3
   b6c8a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b6c8e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b6c92:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b6c96:	bf18      	it	ne
   b6c98:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b6c9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6ca0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6ca4:	d038      	beq.n	b6d18 <__aeabi_dmul+0xb4>
   b6ca6:	fba0 ce02 	umull	ip, lr, r0, r2
   b6caa:	f04f 0500 	mov.w	r5, #0
   b6cae:	fbe1 e502 	umlal	lr, r5, r1, r2
   b6cb2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b6cb6:	fbe0 e503 	umlal	lr, r5, r0, r3
   b6cba:	f04f 0600 	mov.w	r6, #0
   b6cbe:	fbe1 5603 	umlal	r5, r6, r1, r3
   b6cc2:	f09c 0f00 	teq	ip, #0
   b6cc6:	bf18      	it	ne
   b6cc8:	f04e 0e01 	orrne.w	lr, lr, #1
   b6ccc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b6cd0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6cd4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b6cd8:	d204      	bcs.n	b6ce4 <__aeabi_dmul+0x80>
   b6cda:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b6cde:	416d      	adcs	r5, r5
   b6ce0:	eb46 0606 	adc.w	r6, r6, r6
   b6ce4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b6ce8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b6cec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b6cf0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b6cf4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b6cf8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6cfc:	bf88      	it	hi
   b6cfe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6d02:	d81e      	bhi.n	b6d42 <__aeabi_dmul+0xde>
   b6d04:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b6d08:	bf08      	it	eq
   b6d0a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b6d0e:	f150 0000 	adcs.w	r0, r0, #0
   b6d12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6d16:	bd70      	pop	{r4, r5, r6, pc}
   b6d18:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b6d1c:	ea46 0101 	orr.w	r1, r6, r1
   b6d20:	ea40 0002 	orr.w	r0, r0, r2
   b6d24:	ea81 0103 	eor.w	r1, r1, r3
   b6d28:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b6d2c:	bfc2      	ittt	gt
   b6d2e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6d32:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6d36:	bd70      	popgt	{r4, r5, r6, pc}
   b6d38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6d3c:	f04f 0e00 	mov.w	lr, #0
   b6d40:	3c01      	subs	r4, #1
   b6d42:	f300 80ab 	bgt.w	b6e9c <__aeabi_dmul+0x238>
   b6d46:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b6d4a:	bfde      	ittt	le
   b6d4c:	2000      	movle	r0, #0
   b6d4e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b6d52:	bd70      	pople	{r4, r5, r6, pc}
   b6d54:	f1c4 0400 	rsb	r4, r4, #0
   b6d58:	3c20      	subs	r4, #32
   b6d5a:	da35      	bge.n	b6dc8 <__aeabi_dmul+0x164>
   b6d5c:	340c      	adds	r4, #12
   b6d5e:	dc1b      	bgt.n	b6d98 <__aeabi_dmul+0x134>
   b6d60:	f104 0414 	add.w	r4, r4, #20
   b6d64:	f1c4 0520 	rsb	r5, r4, #32
   b6d68:	fa00 f305 	lsl.w	r3, r0, r5
   b6d6c:	fa20 f004 	lsr.w	r0, r0, r4
   b6d70:	fa01 f205 	lsl.w	r2, r1, r5
   b6d74:	ea40 0002 	orr.w	r0, r0, r2
   b6d78:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b6d7c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6d80:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6d84:	fa21 f604 	lsr.w	r6, r1, r4
   b6d88:	eb42 0106 	adc.w	r1, r2, r6
   b6d8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6d90:	bf08      	it	eq
   b6d92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6d96:	bd70      	pop	{r4, r5, r6, pc}
   b6d98:	f1c4 040c 	rsb	r4, r4, #12
   b6d9c:	f1c4 0520 	rsb	r5, r4, #32
   b6da0:	fa00 f304 	lsl.w	r3, r0, r4
   b6da4:	fa20 f005 	lsr.w	r0, r0, r5
   b6da8:	fa01 f204 	lsl.w	r2, r1, r4
   b6dac:	ea40 0002 	orr.w	r0, r0, r2
   b6db0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6db4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6db8:	f141 0100 	adc.w	r1, r1, #0
   b6dbc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6dc0:	bf08      	it	eq
   b6dc2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6dc6:	bd70      	pop	{r4, r5, r6, pc}
   b6dc8:	f1c4 0520 	rsb	r5, r4, #32
   b6dcc:	fa00 f205 	lsl.w	r2, r0, r5
   b6dd0:	ea4e 0e02 	orr.w	lr, lr, r2
   b6dd4:	fa20 f304 	lsr.w	r3, r0, r4
   b6dd8:	fa01 f205 	lsl.w	r2, r1, r5
   b6ddc:	ea43 0302 	orr.w	r3, r3, r2
   b6de0:	fa21 f004 	lsr.w	r0, r1, r4
   b6de4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6de8:	fa21 f204 	lsr.w	r2, r1, r4
   b6dec:	ea20 0002 	bic.w	r0, r0, r2
   b6df0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b6df4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6df8:	bf08      	it	eq
   b6dfa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6dfe:	bd70      	pop	{r4, r5, r6, pc}
   b6e00:	f094 0f00 	teq	r4, #0
   b6e04:	d10f      	bne.n	b6e26 <__aeabi_dmul+0x1c2>
   b6e06:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b6e0a:	0040      	lsls	r0, r0, #1
   b6e0c:	eb41 0101 	adc.w	r1, r1, r1
   b6e10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6e14:	bf08      	it	eq
   b6e16:	3c01      	subeq	r4, #1
   b6e18:	d0f7      	beq.n	b6e0a <__aeabi_dmul+0x1a6>
   b6e1a:	ea41 0106 	orr.w	r1, r1, r6
   b6e1e:	f095 0f00 	teq	r5, #0
   b6e22:	bf18      	it	ne
   b6e24:	4770      	bxne	lr
   b6e26:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b6e2a:	0052      	lsls	r2, r2, #1
   b6e2c:	eb43 0303 	adc.w	r3, r3, r3
   b6e30:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b6e34:	bf08      	it	eq
   b6e36:	3d01      	subeq	r5, #1
   b6e38:	d0f7      	beq.n	b6e2a <__aeabi_dmul+0x1c6>
   b6e3a:	ea43 0306 	orr.w	r3, r3, r6
   b6e3e:	4770      	bx	lr
   b6e40:	ea94 0f0c 	teq	r4, ip
   b6e44:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6e48:	bf18      	it	ne
   b6e4a:	ea95 0f0c 	teqne	r5, ip
   b6e4e:	d00c      	beq.n	b6e6a <__aeabi_dmul+0x206>
   b6e50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6e54:	bf18      	it	ne
   b6e56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6e5a:	d1d1      	bne.n	b6e00 <__aeabi_dmul+0x19c>
   b6e5c:	ea81 0103 	eor.w	r1, r1, r3
   b6e60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6e64:	f04f 0000 	mov.w	r0, #0
   b6e68:	bd70      	pop	{r4, r5, r6, pc}
   b6e6a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6e6e:	bf06      	itte	eq
   b6e70:	4610      	moveq	r0, r2
   b6e72:	4619      	moveq	r1, r3
   b6e74:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6e78:	d019      	beq.n	b6eae <__aeabi_dmul+0x24a>
   b6e7a:	ea94 0f0c 	teq	r4, ip
   b6e7e:	d102      	bne.n	b6e86 <__aeabi_dmul+0x222>
   b6e80:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b6e84:	d113      	bne.n	b6eae <__aeabi_dmul+0x24a>
   b6e86:	ea95 0f0c 	teq	r5, ip
   b6e8a:	d105      	bne.n	b6e98 <__aeabi_dmul+0x234>
   b6e8c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b6e90:	bf1c      	itt	ne
   b6e92:	4610      	movne	r0, r2
   b6e94:	4619      	movne	r1, r3
   b6e96:	d10a      	bne.n	b6eae <__aeabi_dmul+0x24a>
   b6e98:	ea81 0103 	eor.w	r1, r1, r3
   b6e9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6ea0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6ea4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6ea8:	f04f 0000 	mov.w	r0, #0
   b6eac:	bd70      	pop	{r4, r5, r6, pc}
   b6eae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6eb2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b6eb6:	bd70      	pop	{r4, r5, r6, pc}

000b6eb8 <__aeabi_ddiv>:
   b6eb8:	b570      	push	{r4, r5, r6, lr}
   b6eba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6ebe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6ec2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6ec6:	bf1d      	ittte	ne
   b6ec8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6ecc:	ea94 0f0c 	teqne	r4, ip
   b6ed0:	ea95 0f0c 	teqne	r5, ip
   b6ed4:	f000 f8a7 	bleq	b7026 <__aeabi_ddiv+0x16e>
   b6ed8:	eba4 0405 	sub.w	r4, r4, r5
   b6edc:	ea81 0e03 	eor.w	lr, r1, r3
   b6ee0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6ee4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6ee8:	f000 8088 	beq.w	b6ffc <__aeabi_ddiv+0x144>
   b6eec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6ef0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b6ef4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b6ef8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b6efc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b6f00:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b6f04:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b6f08:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b6f0c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b6f10:	429d      	cmp	r5, r3
   b6f12:	bf08      	it	eq
   b6f14:	4296      	cmpeq	r6, r2
   b6f16:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b6f1a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b6f1e:	d202      	bcs.n	b6f26 <__aeabi_ddiv+0x6e>
   b6f20:	085b      	lsrs	r3, r3, #1
   b6f22:	ea4f 0232 	mov.w	r2, r2, rrx
   b6f26:	1ab6      	subs	r6, r6, r2
   b6f28:	eb65 0503 	sbc.w	r5, r5, r3
   b6f2c:	085b      	lsrs	r3, r3, #1
   b6f2e:	ea4f 0232 	mov.w	r2, r2, rrx
   b6f32:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b6f36:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b6f3a:	ebb6 0e02 	subs.w	lr, r6, r2
   b6f3e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6f42:	bf22      	ittt	cs
   b6f44:	1ab6      	subcs	r6, r6, r2
   b6f46:	4675      	movcs	r5, lr
   b6f48:	ea40 000c 	orrcs.w	r0, r0, ip
   b6f4c:	085b      	lsrs	r3, r3, #1
   b6f4e:	ea4f 0232 	mov.w	r2, r2, rrx
   b6f52:	ebb6 0e02 	subs.w	lr, r6, r2
   b6f56:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6f5a:	bf22      	ittt	cs
   b6f5c:	1ab6      	subcs	r6, r6, r2
   b6f5e:	4675      	movcs	r5, lr
   b6f60:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b6f64:	085b      	lsrs	r3, r3, #1
   b6f66:	ea4f 0232 	mov.w	r2, r2, rrx
   b6f6a:	ebb6 0e02 	subs.w	lr, r6, r2
   b6f6e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6f72:	bf22      	ittt	cs
   b6f74:	1ab6      	subcs	r6, r6, r2
   b6f76:	4675      	movcs	r5, lr
   b6f78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b6f7c:	085b      	lsrs	r3, r3, #1
   b6f7e:	ea4f 0232 	mov.w	r2, r2, rrx
   b6f82:	ebb6 0e02 	subs.w	lr, r6, r2
   b6f86:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6f8a:	bf22      	ittt	cs
   b6f8c:	1ab6      	subcs	r6, r6, r2
   b6f8e:	4675      	movcs	r5, lr
   b6f90:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b6f94:	ea55 0e06 	orrs.w	lr, r5, r6
   b6f98:	d018      	beq.n	b6fcc <__aeabi_ddiv+0x114>
   b6f9a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b6f9e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b6fa2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b6fa6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b6faa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b6fae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b6fb2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b6fb6:	d1c0      	bne.n	b6f3a <__aeabi_ddiv+0x82>
   b6fb8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6fbc:	d10b      	bne.n	b6fd6 <__aeabi_ddiv+0x11e>
   b6fbe:	ea41 0100 	orr.w	r1, r1, r0
   b6fc2:	f04f 0000 	mov.w	r0, #0
   b6fc6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b6fca:	e7b6      	b.n	b6f3a <__aeabi_ddiv+0x82>
   b6fcc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6fd0:	bf04      	itt	eq
   b6fd2:	4301      	orreq	r1, r0
   b6fd4:	2000      	moveq	r0, #0
   b6fd6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6fda:	bf88      	it	hi
   b6fdc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6fe0:	f63f aeaf 	bhi.w	b6d42 <__aeabi_dmul+0xde>
   b6fe4:	ebb5 0c03 	subs.w	ip, r5, r3
   b6fe8:	bf04      	itt	eq
   b6fea:	ebb6 0c02 	subseq.w	ip, r6, r2
   b6fee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6ff2:	f150 0000 	adcs.w	r0, r0, #0
   b6ff6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6ffa:	bd70      	pop	{r4, r5, r6, pc}
   b6ffc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b7000:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b7004:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b7008:	bfc2      	ittt	gt
   b700a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b700e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7012:	bd70      	popgt	{r4, r5, r6, pc}
   b7014:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7018:	f04f 0e00 	mov.w	lr, #0
   b701c:	3c01      	subs	r4, #1
   b701e:	e690      	b.n	b6d42 <__aeabi_dmul+0xde>
   b7020:	ea45 0e06 	orr.w	lr, r5, r6
   b7024:	e68d      	b.n	b6d42 <__aeabi_dmul+0xde>
   b7026:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b702a:	ea94 0f0c 	teq	r4, ip
   b702e:	bf08      	it	eq
   b7030:	ea95 0f0c 	teqeq	r5, ip
   b7034:	f43f af3b 	beq.w	b6eae <__aeabi_dmul+0x24a>
   b7038:	ea94 0f0c 	teq	r4, ip
   b703c:	d10a      	bne.n	b7054 <__aeabi_ddiv+0x19c>
   b703e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7042:	f47f af34 	bne.w	b6eae <__aeabi_dmul+0x24a>
   b7046:	ea95 0f0c 	teq	r5, ip
   b704a:	f47f af25 	bne.w	b6e98 <__aeabi_dmul+0x234>
   b704e:	4610      	mov	r0, r2
   b7050:	4619      	mov	r1, r3
   b7052:	e72c      	b.n	b6eae <__aeabi_dmul+0x24a>
   b7054:	ea95 0f0c 	teq	r5, ip
   b7058:	d106      	bne.n	b7068 <__aeabi_ddiv+0x1b0>
   b705a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b705e:	f43f aefd 	beq.w	b6e5c <__aeabi_dmul+0x1f8>
   b7062:	4610      	mov	r0, r2
   b7064:	4619      	mov	r1, r3
   b7066:	e722      	b.n	b6eae <__aeabi_dmul+0x24a>
   b7068:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b706c:	bf18      	it	ne
   b706e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7072:	f47f aec5 	bne.w	b6e00 <__aeabi_dmul+0x19c>
   b7076:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b707a:	f47f af0d 	bne.w	b6e98 <__aeabi_dmul+0x234>
   b707e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b7082:	f47f aeeb 	bne.w	b6e5c <__aeabi_dmul+0x1f8>
   b7086:	e712      	b.n	b6eae <__aeabi_dmul+0x24a>

000b7088 <__gedf2>:
   b7088:	f04f 3cff 	mov.w	ip, #4294967295
   b708c:	e006      	b.n	b709c <__cmpdf2+0x4>
   b708e:	bf00      	nop

000b7090 <__ledf2>:
   b7090:	f04f 0c01 	mov.w	ip, #1
   b7094:	e002      	b.n	b709c <__cmpdf2+0x4>
   b7096:	bf00      	nop

000b7098 <__cmpdf2>:
   b7098:	f04f 0c01 	mov.w	ip, #1
   b709c:	f84d cd04 	str.w	ip, [sp, #-4]!
   b70a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b70a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b70a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b70ac:	bf18      	it	ne
   b70ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b70b2:	d01b      	beq.n	b70ec <__cmpdf2+0x54>
   b70b4:	b001      	add	sp, #4
   b70b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b70ba:	bf0c      	ite	eq
   b70bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b70c0:	ea91 0f03 	teqne	r1, r3
   b70c4:	bf02      	ittt	eq
   b70c6:	ea90 0f02 	teqeq	r0, r2
   b70ca:	2000      	moveq	r0, #0
   b70cc:	4770      	bxeq	lr
   b70ce:	f110 0f00 	cmn.w	r0, #0
   b70d2:	ea91 0f03 	teq	r1, r3
   b70d6:	bf58      	it	pl
   b70d8:	4299      	cmppl	r1, r3
   b70da:	bf08      	it	eq
   b70dc:	4290      	cmpeq	r0, r2
   b70de:	bf2c      	ite	cs
   b70e0:	17d8      	asrcs	r0, r3, #31
   b70e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b70e6:	f040 0001 	orr.w	r0, r0, #1
   b70ea:	4770      	bx	lr
   b70ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b70f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b70f4:	d102      	bne.n	b70fc <__cmpdf2+0x64>
   b70f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b70fa:	d107      	bne.n	b710c <__cmpdf2+0x74>
   b70fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7100:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7104:	d1d6      	bne.n	b70b4 <__cmpdf2+0x1c>
   b7106:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b710a:	d0d3      	beq.n	b70b4 <__cmpdf2+0x1c>
   b710c:	f85d 0b04 	ldr.w	r0, [sp], #4
   b7110:	4770      	bx	lr
   b7112:	bf00      	nop

000b7114 <__aeabi_cdrcmple>:
   b7114:	4684      	mov	ip, r0
   b7116:	4610      	mov	r0, r2
   b7118:	4662      	mov	r2, ip
   b711a:	468c      	mov	ip, r1
   b711c:	4619      	mov	r1, r3
   b711e:	4663      	mov	r3, ip
   b7120:	e000      	b.n	b7124 <__aeabi_cdcmpeq>
   b7122:	bf00      	nop

000b7124 <__aeabi_cdcmpeq>:
   b7124:	b501      	push	{r0, lr}
   b7126:	f7ff ffb7 	bl	b7098 <__cmpdf2>
   b712a:	2800      	cmp	r0, #0
   b712c:	bf48      	it	mi
   b712e:	f110 0f00 	cmnmi.w	r0, #0
   b7132:	bd01      	pop	{r0, pc}

000b7134 <__aeabi_dcmpeq>:
   b7134:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7138:	f7ff fff4 	bl	b7124 <__aeabi_cdcmpeq>
   b713c:	bf0c      	ite	eq
   b713e:	2001      	moveq	r0, #1
   b7140:	2000      	movne	r0, #0
   b7142:	f85d fb08 	ldr.w	pc, [sp], #8
   b7146:	bf00      	nop

000b7148 <__aeabi_dcmplt>:
   b7148:	f84d ed08 	str.w	lr, [sp, #-8]!
   b714c:	f7ff ffea 	bl	b7124 <__aeabi_cdcmpeq>
   b7150:	bf34      	ite	cc
   b7152:	2001      	movcc	r0, #1
   b7154:	2000      	movcs	r0, #0
   b7156:	f85d fb08 	ldr.w	pc, [sp], #8
   b715a:	bf00      	nop

000b715c <__aeabi_dcmple>:
   b715c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7160:	f7ff ffe0 	bl	b7124 <__aeabi_cdcmpeq>
   b7164:	bf94      	ite	ls
   b7166:	2001      	movls	r0, #1
   b7168:	2000      	movhi	r0, #0
   b716a:	f85d fb08 	ldr.w	pc, [sp], #8
   b716e:	bf00      	nop

000b7170 <__aeabi_dcmpge>:
   b7170:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7174:	f7ff ffce 	bl	b7114 <__aeabi_cdrcmple>
   b7178:	bf94      	ite	ls
   b717a:	2001      	movls	r0, #1
   b717c:	2000      	movhi	r0, #0
   b717e:	f85d fb08 	ldr.w	pc, [sp], #8
   b7182:	bf00      	nop

000b7184 <__aeabi_dcmpgt>:
   b7184:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7188:	f7ff ffc4 	bl	b7114 <__aeabi_cdrcmple>
   b718c:	bf34      	ite	cc
   b718e:	2001      	movcc	r0, #1
   b7190:	2000      	movcs	r0, #0
   b7192:	f85d fb08 	ldr.w	pc, [sp], #8
   b7196:	bf00      	nop

000b7198 <__aeabi_d2uiz>:
   b7198:	004a      	lsls	r2, r1, #1
   b719a:	d211      	bcs.n	b71c0 <__aeabi_d2uiz+0x28>
   b719c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b71a0:	d211      	bcs.n	b71c6 <__aeabi_d2uiz+0x2e>
   b71a2:	d50d      	bpl.n	b71c0 <__aeabi_d2uiz+0x28>
   b71a4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b71a8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b71ac:	d40e      	bmi.n	b71cc <__aeabi_d2uiz+0x34>
   b71ae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b71b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b71b6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b71ba:	fa23 f002 	lsr.w	r0, r3, r2
   b71be:	4770      	bx	lr
   b71c0:	f04f 0000 	mov.w	r0, #0
   b71c4:	4770      	bx	lr
   b71c6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b71ca:	d102      	bne.n	b71d2 <__aeabi_d2uiz+0x3a>
   b71cc:	f04f 30ff 	mov.w	r0, #4294967295
   b71d0:	4770      	bx	lr
   b71d2:	f04f 0000 	mov.w	r0, #0
   b71d6:	4770      	bx	lr

000b71d8 <__aeabi_d2f>:
   b71d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b71dc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b71e0:	bf24      	itt	cs
   b71e2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b71e6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b71ea:	d90d      	bls.n	b7208 <__aeabi_d2f+0x30>
   b71ec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b71f0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b71f4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b71f8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b71fc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b7200:	bf08      	it	eq
   b7202:	f020 0001 	biceq.w	r0, r0, #1
   b7206:	4770      	bx	lr
   b7208:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b720c:	d121      	bne.n	b7252 <__aeabi_d2f+0x7a>
   b720e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b7212:	bfbc      	itt	lt
   b7214:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b7218:	4770      	bxlt	lr
   b721a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b721e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b7222:	f1c2 0218 	rsb	r2, r2, #24
   b7226:	f1c2 0c20 	rsb	ip, r2, #32
   b722a:	fa10 f30c 	lsls.w	r3, r0, ip
   b722e:	fa20 f002 	lsr.w	r0, r0, r2
   b7232:	bf18      	it	ne
   b7234:	f040 0001 	orrne.w	r0, r0, #1
   b7238:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b723c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b7240:	fa03 fc0c 	lsl.w	ip, r3, ip
   b7244:	ea40 000c 	orr.w	r0, r0, ip
   b7248:	fa23 f302 	lsr.w	r3, r3, r2
   b724c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b7250:	e7cc      	b.n	b71ec <__aeabi_d2f+0x14>
   b7252:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b7256:	d107      	bne.n	b7268 <__aeabi_d2f+0x90>
   b7258:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b725c:	bf1e      	ittt	ne
   b725e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b7262:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b7266:	4770      	bxne	lr
   b7268:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b726c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b7270:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7274:	4770      	bx	lr
   b7276:	bf00      	nop

000b7278 <__aeabi_uldivmod>:
   b7278:	b953      	cbnz	r3, b7290 <__aeabi_uldivmod+0x18>
   b727a:	b94a      	cbnz	r2, b7290 <__aeabi_uldivmod+0x18>
   b727c:	2900      	cmp	r1, #0
   b727e:	bf08      	it	eq
   b7280:	2800      	cmpeq	r0, #0
   b7282:	bf1c      	itt	ne
   b7284:	f04f 31ff 	movne.w	r1, #4294967295
   b7288:	f04f 30ff 	movne.w	r0, #4294967295
   b728c:	f000 b992 	b.w	b75b4 <__aeabi_idiv0>
   b7290:	f1ad 0c08 	sub.w	ip, sp, #8
   b7294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b7298:	f000 f824 	bl	b72e4 <__udivmoddi4>
   b729c:	f8dd e004 	ldr.w	lr, [sp, #4]
   b72a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b72a4:	b004      	add	sp, #16
   b72a6:	4770      	bx	lr

000b72a8 <__aeabi_d2ulz>:
   b72a8:	b5d0      	push	{r4, r6, r7, lr}
   b72aa:	4b0c      	ldr	r3, [pc, #48]	; (b72dc <__aeabi_d2ulz+0x34>)
   b72ac:	2200      	movs	r2, #0
   b72ae:	4606      	mov	r6, r0
   b72b0:	460f      	mov	r7, r1
   b72b2:	f7ff fcd7 	bl	b6c64 <__aeabi_dmul>
   b72b6:	f7ff ff6f 	bl	b7198 <__aeabi_d2uiz>
   b72ba:	4604      	mov	r4, r0
   b72bc:	f7ff fc58 	bl	b6b70 <__aeabi_ui2d>
   b72c0:	4b07      	ldr	r3, [pc, #28]	; (b72e0 <__aeabi_d2ulz+0x38>)
   b72c2:	2200      	movs	r2, #0
   b72c4:	f7ff fcce 	bl	b6c64 <__aeabi_dmul>
   b72c8:	4602      	mov	r2, r0
   b72ca:	460b      	mov	r3, r1
   b72cc:	4630      	mov	r0, r6
   b72ce:	4639      	mov	r1, r7
   b72d0:	f7ff fb10 	bl	b68f4 <__aeabi_dsub>
   b72d4:	f7ff ff60 	bl	b7198 <__aeabi_d2uiz>
   b72d8:	4621      	mov	r1, r4
   b72da:	bdd0      	pop	{r4, r6, r7, pc}
   b72dc:	3df00000 	.word	0x3df00000
   b72e0:	41f00000 	.word	0x41f00000

000b72e4 <__udivmoddi4>:
   b72e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b72e8:	9d08      	ldr	r5, [sp, #32]
   b72ea:	4604      	mov	r4, r0
   b72ec:	468e      	mov	lr, r1
   b72ee:	2b00      	cmp	r3, #0
   b72f0:	d14d      	bne.n	b738e <__udivmoddi4+0xaa>
   b72f2:	428a      	cmp	r2, r1
   b72f4:	4694      	mov	ip, r2
   b72f6:	d969      	bls.n	b73cc <__udivmoddi4+0xe8>
   b72f8:	fab2 f282 	clz	r2, r2
   b72fc:	b152      	cbz	r2, b7314 <__udivmoddi4+0x30>
   b72fe:	fa01 f302 	lsl.w	r3, r1, r2
   b7302:	f1c2 0120 	rsb	r1, r2, #32
   b7306:	fa20 f101 	lsr.w	r1, r0, r1
   b730a:	fa0c fc02 	lsl.w	ip, ip, r2
   b730e:	ea41 0e03 	orr.w	lr, r1, r3
   b7312:	4094      	lsls	r4, r2
   b7314:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b7318:	0c21      	lsrs	r1, r4, #16
   b731a:	fbbe f6f8 	udiv	r6, lr, r8
   b731e:	fa1f f78c 	uxth.w	r7, ip
   b7322:	fb08 e316 	mls	r3, r8, r6, lr
   b7326:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b732a:	fb06 f107 	mul.w	r1, r6, r7
   b732e:	4299      	cmp	r1, r3
   b7330:	d90a      	bls.n	b7348 <__udivmoddi4+0x64>
   b7332:	eb1c 0303 	adds.w	r3, ip, r3
   b7336:	f106 30ff 	add.w	r0, r6, #4294967295
   b733a:	f080 811f 	bcs.w	b757c <__udivmoddi4+0x298>
   b733e:	4299      	cmp	r1, r3
   b7340:	f240 811c 	bls.w	b757c <__udivmoddi4+0x298>
   b7344:	3e02      	subs	r6, #2
   b7346:	4463      	add	r3, ip
   b7348:	1a5b      	subs	r3, r3, r1
   b734a:	b2a4      	uxth	r4, r4
   b734c:	fbb3 f0f8 	udiv	r0, r3, r8
   b7350:	fb08 3310 	mls	r3, r8, r0, r3
   b7354:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b7358:	fb00 f707 	mul.w	r7, r0, r7
   b735c:	42a7      	cmp	r7, r4
   b735e:	d90a      	bls.n	b7376 <__udivmoddi4+0x92>
   b7360:	eb1c 0404 	adds.w	r4, ip, r4
   b7364:	f100 33ff 	add.w	r3, r0, #4294967295
   b7368:	f080 810a 	bcs.w	b7580 <__udivmoddi4+0x29c>
   b736c:	42a7      	cmp	r7, r4
   b736e:	f240 8107 	bls.w	b7580 <__udivmoddi4+0x29c>
   b7372:	4464      	add	r4, ip
   b7374:	3802      	subs	r0, #2
   b7376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b737a:	1be4      	subs	r4, r4, r7
   b737c:	2600      	movs	r6, #0
   b737e:	b11d      	cbz	r5, b7388 <__udivmoddi4+0xa4>
   b7380:	40d4      	lsrs	r4, r2
   b7382:	2300      	movs	r3, #0
   b7384:	e9c5 4300 	strd	r4, r3, [r5]
   b7388:	4631      	mov	r1, r6
   b738a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b738e:	428b      	cmp	r3, r1
   b7390:	d909      	bls.n	b73a6 <__udivmoddi4+0xc2>
   b7392:	2d00      	cmp	r5, #0
   b7394:	f000 80ef 	beq.w	b7576 <__udivmoddi4+0x292>
   b7398:	2600      	movs	r6, #0
   b739a:	e9c5 0100 	strd	r0, r1, [r5]
   b739e:	4630      	mov	r0, r6
   b73a0:	4631      	mov	r1, r6
   b73a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b73a6:	fab3 f683 	clz	r6, r3
   b73aa:	2e00      	cmp	r6, #0
   b73ac:	d14a      	bne.n	b7444 <__udivmoddi4+0x160>
   b73ae:	428b      	cmp	r3, r1
   b73b0:	d302      	bcc.n	b73b8 <__udivmoddi4+0xd4>
   b73b2:	4282      	cmp	r2, r0
   b73b4:	f200 80f9 	bhi.w	b75aa <__udivmoddi4+0x2c6>
   b73b8:	1a84      	subs	r4, r0, r2
   b73ba:	eb61 0303 	sbc.w	r3, r1, r3
   b73be:	2001      	movs	r0, #1
   b73c0:	469e      	mov	lr, r3
   b73c2:	2d00      	cmp	r5, #0
   b73c4:	d0e0      	beq.n	b7388 <__udivmoddi4+0xa4>
   b73c6:	e9c5 4e00 	strd	r4, lr, [r5]
   b73ca:	e7dd      	b.n	b7388 <__udivmoddi4+0xa4>
   b73cc:	b902      	cbnz	r2, b73d0 <__udivmoddi4+0xec>
   b73ce:	deff      	udf	#255	; 0xff
   b73d0:	fab2 f282 	clz	r2, r2
   b73d4:	2a00      	cmp	r2, #0
   b73d6:	f040 8092 	bne.w	b74fe <__udivmoddi4+0x21a>
   b73da:	eba1 010c 	sub.w	r1, r1, ip
   b73de:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b73e2:	fa1f fe8c 	uxth.w	lr, ip
   b73e6:	2601      	movs	r6, #1
   b73e8:	0c20      	lsrs	r0, r4, #16
   b73ea:	fbb1 f3f7 	udiv	r3, r1, r7
   b73ee:	fb07 1113 	mls	r1, r7, r3, r1
   b73f2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b73f6:	fb0e f003 	mul.w	r0, lr, r3
   b73fa:	4288      	cmp	r0, r1
   b73fc:	d908      	bls.n	b7410 <__udivmoddi4+0x12c>
   b73fe:	eb1c 0101 	adds.w	r1, ip, r1
   b7402:	f103 38ff 	add.w	r8, r3, #4294967295
   b7406:	d202      	bcs.n	b740e <__udivmoddi4+0x12a>
   b7408:	4288      	cmp	r0, r1
   b740a:	f200 80cb 	bhi.w	b75a4 <__udivmoddi4+0x2c0>
   b740e:	4643      	mov	r3, r8
   b7410:	1a09      	subs	r1, r1, r0
   b7412:	b2a4      	uxth	r4, r4
   b7414:	fbb1 f0f7 	udiv	r0, r1, r7
   b7418:	fb07 1110 	mls	r1, r7, r0, r1
   b741c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b7420:	fb0e fe00 	mul.w	lr, lr, r0
   b7424:	45a6      	cmp	lr, r4
   b7426:	d908      	bls.n	b743a <__udivmoddi4+0x156>
   b7428:	eb1c 0404 	adds.w	r4, ip, r4
   b742c:	f100 31ff 	add.w	r1, r0, #4294967295
   b7430:	d202      	bcs.n	b7438 <__udivmoddi4+0x154>
   b7432:	45a6      	cmp	lr, r4
   b7434:	f200 80bb 	bhi.w	b75ae <__udivmoddi4+0x2ca>
   b7438:	4608      	mov	r0, r1
   b743a:	eba4 040e 	sub.w	r4, r4, lr
   b743e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b7442:	e79c      	b.n	b737e <__udivmoddi4+0x9a>
   b7444:	f1c6 0720 	rsb	r7, r6, #32
   b7448:	40b3      	lsls	r3, r6
   b744a:	fa22 fc07 	lsr.w	ip, r2, r7
   b744e:	ea4c 0c03 	orr.w	ip, ip, r3
   b7452:	fa20 f407 	lsr.w	r4, r0, r7
   b7456:	fa01 f306 	lsl.w	r3, r1, r6
   b745a:	431c      	orrs	r4, r3
   b745c:	40f9      	lsrs	r1, r7
   b745e:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b7462:	fa00 f306 	lsl.w	r3, r0, r6
   b7466:	fbb1 f8f9 	udiv	r8, r1, r9
   b746a:	0c20      	lsrs	r0, r4, #16
   b746c:	fa1f fe8c 	uxth.w	lr, ip
   b7470:	fb09 1118 	mls	r1, r9, r8, r1
   b7474:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b7478:	fb08 f00e 	mul.w	r0, r8, lr
   b747c:	4288      	cmp	r0, r1
   b747e:	fa02 f206 	lsl.w	r2, r2, r6
   b7482:	d90b      	bls.n	b749c <__udivmoddi4+0x1b8>
   b7484:	eb1c 0101 	adds.w	r1, ip, r1
   b7488:	f108 3aff 	add.w	sl, r8, #4294967295
   b748c:	f080 8088 	bcs.w	b75a0 <__udivmoddi4+0x2bc>
   b7490:	4288      	cmp	r0, r1
   b7492:	f240 8085 	bls.w	b75a0 <__udivmoddi4+0x2bc>
   b7496:	f1a8 0802 	sub.w	r8, r8, #2
   b749a:	4461      	add	r1, ip
   b749c:	1a09      	subs	r1, r1, r0
   b749e:	b2a4      	uxth	r4, r4
   b74a0:	fbb1 f0f9 	udiv	r0, r1, r9
   b74a4:	fb09 1110 	mls	r1, r9, r0, r1
   b74a8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b74ac:	fb00 fe0e 	mul.w	lr, r0, lr
   b74b0:	458e      	cmp	lr, r1
   b74b2:	d908      	bls.n	b74c6 <__udivmoddi4+0x1e2>
   b74b4:	eb1c 0101 	adds.w	r1, ip, r1
   b74b8:	f100 34ff 	add.w	r4, r0, #4294967295
   b74bc:	d26c      	bcs.n	b7598 <__udivmoddi4+0x2b4>
   b74be:	458e      	cmp	lr, r1
   b74c0:	d96a      	bls.n	b7598 <__udivmoddi4+0x2b4>
   b74c2:	3802      	subs	r0, #2
   b74c4:	4461      	add	r1, ip
   b74c6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b74ca:	fba0 9402 	umull	r9, r4, r0, r2
   b74ce:	eba1 010e 	sub.w	r1, r1, lr
   b74d2:	42a1      	cmp	r1, r4
   b74d4:	46c8      	mov	r8, r9
   b74d6:	46a6      	mov	lr, r4
   b74d8:	d356      	bcc.n	b7588 <__udivmoddi4+0x2a4>
   b74da:	d053      	beq.n	b7584 <__udivmoddi4+0x2a0>
   b74dc:	b15d      	cbz	r5, b74f6 <__udivmoddi4+0x212>
   b74de:	ebb3 0208 	subs.w	r2, r3, r8
   b74e2:	eb61 010e 	sbc.w	r1, r1, lr
   b74e6:	fa01 f707 	lsl.w	r7, r1, r7
   b74ea:	fa22 f306 	lsr.w	r3, r2, r6
   b74ee:	40f1      	lsrs	r1, r6
   b74f0:	431f      	orrs	r7, r3
   b74f2:	e9c5 7100 	strd	r7, r1, [r5]
   b74f6:	2600      	movs	r6, #0
   b74f8:	4631      	mov	r1, r6
   b74fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b74fe:	f1c2 0320 	rsb	r3, r2, #32
   b7502:	40d8      	lsrs	r0, r3
   b7504:	fa0c fc02 	lsl.w	ip, ip, r2
   b7508:	fa21 f303 	lsr.w	r3, r1, r3
   b750c:	4091      	lsls	r1, r2
   b750e:	4301      	orrs	r1, r0
   b7510:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b7514:	fa1f fe8c 	uxth.w	lr, ip
   b7518:	fbb3 f0f7 	udiv	r0, r3, r7
   b751c:	fb07 3610 	mls	r6, r7, r0, r3
   b7520:	0c0b      	lsrs	r3, r1, #16
   b7522:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b7526:	fb00 f60e 	mul.w	r6, r0, lr
   b752a:	429e      	cmp	r6, r3
   b752c:	fa04 f402 	lsl.w	r4, r4, r2
   b7530:	d908      	bls.n	b7544 <__udivmoddi4+0x260>
   b7532:	eb1c 0303 	adds.w	r3, ip, r3
   b7536:	f100 38ff 	add.w	r8, r0, #4294967295
   b753a:	d22f      	bcs.n	b759c <__udivmoddi4+0x2b8>
   b753c:	429e      	cmp	r6, r3
   b753e:	d92d      	bls.n	b759c <__udivmoddi4+0x2b8>
   b7540:	3802      	subs	r0, #2
   b7542:	4463      	add	r3, ip
   b7544:	1b9b      	subs	r3, r3, r6
   b7546:	b289      	uxth	r1, r1
   b7548:	fbb3 f6f7 	udiv	r6, r3, r7
   b754c:	fb07 3316 	mls	r3, r7, r6, r3
   b7550:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b7554:	fb06 f30e 	mul.w	r3, r6, lr
   b7558:	428b      	cmp	r3, r1
   b755a:	d908      	bls.n	b756e <__udivmoddi4+0x28a>
   b755c:	eb1c 0101 	adds.w	r1, ip, r1
   b7560:	f106 38ff 	add.w	r8, r6, #4294967295
   b7564:	d216      	bcs.n	b7594 <__udivmoddi4+0x2b0>
   b7566:	428b      	cmp	r3, r1
   b7568:	d914      	bls.n	b7594 <__udivmoddi4+0x2b0>
   b756a:	3e02      	subs	r6, #2
   b756c:	4461      	add	r1, ip
   b756e:	1ac9      	subs	r1, r1, r3
   b7570:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b7574:	e738      	b.n	b73e8 <__udivmoddi4+0x104>
   b7576:	462e      	mov	r6, r5
   b7578:	4628      	mov	r0, r5
   b757a:	e705      	b.n	b7388 <__udivmoddi4+0xa4>
   b757c:	4606      	mov	r6, r0
   b757e:	e6e3      	b.n	b7348 <__udivmoddi4+0x64>
   b7580:	4618      	mov	r0, r3
   b7582:	e6f8      	b.n	b7376 <__udivmoddi4+0x92>
   b7584:	454b      	cmp	r3, r9
   b7586:	d2a9      	bcs.n	b74dc <__udivmoddi4+0x1f8>
   b7588:	ebb9 0802 	subs.w	r8, r9, r2
   b758c:	eb64 0e0c 	sbc.w	lr, r4, ip
   b7590:	3801      	subs	r0, #1
   b7592:	e7a3      	b.n	b74dc <__udivmoddi4+0x1f8>
   b7594:	4646      	mov	r6, r8
   b7596:	e7ea      	b.n	b756e <__udivmoddi4+0x28a>
   b7598:	4620      	mov	r0, r4
   b759a:	e794      	b.n	b74c6 <__udivmoddi4+0x1e2>
   b759c:	4640      	mov	r0, r8
   b759e:	e7d1      	b.n	b7544 <__udivmoddi4+0x260>
   b75a0:	46d0      	mov	r8, sl
   b75a2:	e77b      	b.n	b749c <__udivmoddi4+0x1b8>
   b75a4:	3b02      	subs	r3, #2
   b75a6:	4461      	add	r1, ip
   b75a8:	e732      	b.n	b7410 <__udivmoddi4+0x12c>
   b75aa:	4630      	mov	r0, r6
   b75ac:	e709      	b.n	b73c2 <__udivmoddi4+0xde>
   b75ae:	4464      	add	r4, ip
   b75b0:	3802      	subs	r0, #2
   b75b2:	e742      	b.n	b743a <__udivmoddi4+0x156>

000b75b4 <__aeabi_idiv0>:
   b75b4:	4770      	bx	lr
   b75b6:	bf00      	nop

000b75b8 <atexit>:
   b75b8:	2300      	movs	r3, #0
   b75ba:	4601      	mov	r1, r0
   b75bc:	461a      	mov	r2, r3
   b75be:	4618      	mov	r0, r3
   b75c0:	f000 b916 	b.w	b77f0 <__register_exitproc>

000b75c4 <atol>:
   b75c4:	220a      	movs	r2, #10
   b75c6:	2100      	movs	r1, #0
   b75c8:	f000 b908 	b.w	b77dc <strtol>

000b75cc <ldiv>:
   b75cc:	2900      	cmp	r1, #0
   b75ce:	b510      	push	{r4, lr}
   b75d0:	fb91 f4f2 	sdiv	r4, r1, r2
   b75d4:	fb02 1314 	mls	r3, r2, r4, r1
   b75d8:	db06      	blt.n	b75e8 <ldiv+0x1c>
   b75da:	2b00      	cmp	r3, #0
   b75dc:	da01      	bge.n	b75e2 <ldiv+0x16>
   b75de:	3401      	adds	r4, #1
   b75e0:	1a9b      	subs	r3, r3, r2
   b75e2:	e9c0 4300 	strd	r4, r3, [r0]
   b75e6:	bd10      	pop	{r4, pc}
   b75e8:	2b00      	cmp	r3, #0
   b75ea:	bfc4      	itt	gt
   b75ec:	f104 34ff 	addgt.w	r4, r4, #4294967295
   b75f0:	189b      	addgt	r3, r3, r2
   b75f2:	e7f6      	b.n	b75e2 <ldiv+0x16>

000b75f4 <memcpy>:
   b75f4:	440a      	add	r2, r1
   b75f6:	4291      	cmp	r1, r2
   b75f8:	f100 33ff 	add.w	r3, r0, #4294967295
   b75fc:	d100      	bne.n	b7600 <memcpy+0xc>
   b75fe:	4770      	bx	lr
   b7600:	b510      	push	{r4, lr}
   b7602:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7606:	f803 4f01 	strb.w	r4, [r3, #1]!
   b760a:	4291      	cmp	r1, r2
   b760c:	d1f9      	bne.n	b7602 <memcpy+0xe>
   b760e:	bd10      	pop	{r4, pc}

000b7610 <memset>:
   b7610:	4402      	add	r2, r0
   b7612:	4603      	mov	r3, r0
   b7614:	4293      	cmp	r3, r2
   b7616:	d100      	bne.n	b761a <memset+0xa>
   b7618:	4770      	bx	lr
   b761a:	f803 1b01 	strb.w	r1, [r3], #1
   b761e:	e7f9      	b.n	b7614 <memset+0x4>

000b7620 <srand>:
   b7620:	b538      	push	{r3, r4, r5, lr}
   b7622:	4b10      	ldr	r3, [pc, #64]	; (b7664 <srand+0x44>)
   b7624:	681d      	ldr	r5, [r3, #0]
   b7626:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7628:	4604      	mov	r4, r0
   b762a:	b9b3      	cbnz	r3, b765a <srand+0x3a>
   b762c:	2018      	movs	r0, #24
   b762e:	f7fd fec5 	bl	b53bc <malloc>
   b7632:	4602      	mov	r2, r0
   b7634:	63a8      	str	r0, [r5, #56]	; 0x38
   b7636:	b920      	cbnz	r0, b7642 <srand+0x22>
   b7638:	4b0b      	ldr	r3, [pc, #44]	; (b7668 <srand+0x48>)
   b763a:	480c      	ldr	r0, [pc, #48]	; (b766c <srand+0x4c>)
   b763c:	2142      	movs	r1, #66	; 0x42
   b763e:	f7fd feed 	bl	b541c <__assert_func>
   b7642:	490b      	ldr	r1, [pc, #44]	; (b7670 <srand+0x50>)
   b7644:	4b0b      	ldr	r3, [pc, #44]	; (b7674 <srand+0x54>)
   b7646:	e9c0 1300 	strd	r1, r3, [r0]
   b764a:	4b0b      	ldr	r3, [pc, #44]	; (b7678 <srand+0x58>)
   b764c:	6083      	str	r3, [r0, #8]
   b764e:	230b      	movs	r3, #11
   b7650:	8183      	strh	r3, [r0, #12]
   b7652:	2100      	movs	r1, #0
   b7654:	2001      	movs	r0, #1
   b7656:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b765a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b765c:	2200      	movs	r2, #0
   b765e:	611c      	str	r4, [r3, #16]
   b7660:	615a      	str	r2, [r3, #20]
   b7662:	bd38      	pop	{r3, r4, r5, pc}
   b7664:	2003e100 	.word	0x2003e100
   b7668:	000b7d49 	.word	0x000b7d49
   b766c:	000b7d60 	.word	0x000b7d60
   b7670:	abcd330e 	.word	0xabcd330e
   b7674:	e66d1234 	.word	0xe66d1234
   b7678:	0005deec 	.word	0x0005deec

000b767c <strcpy>:
   b767c:	4603      	mov	r3, r0
   b767e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7682:	f803 2b01 	strb.w	r2, [r3], #1
   b7686:	2a00      	cmp	r2, #0
   b7688:	d1f9      	bne.n	b767e <strcpy+0x2>
   b768a:	4770      	bx	lr

000b768c <strdup>:
   b768c:	4b02      	ldr	r3, [pc, #8]	; (b7698 <strdup+0xc>)
   b768e:	4601      	mov	r1, r0
   b7690:	6818      	ldr	r0, [r3, #0]
   b7692:	f000 b803 	b.w	b769c <_strdup_r>
   b7696:	bf00      	nop
   b7698:	2003e100 	.word	0x2003e100

000b769c <_strdup_r>:
   b769c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b769e:	4604      	mov	r4, r0
   b76a0:	4608      	mov	r0, r1
   b76a2:	460d      	mov	r5, r1
   b76a4:	f000 f80f 	bl	b76c6 <strlen>
   b76a8:	1c42      	adds	r2, r0, #1
   b76aa:	4611      	mov	r1, r2
   b76ac:	4620      	mov	r0, r4
   b76ae:	9201      	str	r2, [sp, #4]
   b76b0:	f7fd fea4 	bl	b53fc <_malloc_r>
   b76b4:	4604      	mov	r4, r0
   b76b6:	b118      	cbz	r0, b76c0 <_strdup_r+0x24>
   b76b8:	9a01      	ldr	r2, [sp, #4]
   b76ba:	4629      	mov	r1, r5
   b76bc:	f7ff ff9a 	bl	b75f4 <memcpy>
   b76c0:	4620      	mov	r0, r4
   b76c2:	b003      	add	sp, #12
   b76c4:	bd30      	pop	{r4, r5, pc}

000b76c6 <strlen>:
   b76c6:	4603      	mov	r3, r0
   b76c8:	f813 2b01 	ldrb.w	r2, [r3], #1
   b76cc:	2a00      	cmp	r2, #0
   b76ce:	d1fb      	bne.n	b76c8 <strlen+0x2>
   b76d0:	1a18      	subs	r0, r3, r0
   b76d2:	3801      	subs	r0, #1
   b76d4:	4770      	bx	lr
	...

000b76d8 <_strtol_l.constprop.0>:
   b76d8:	2b01      	cmp	r3, #1
   b76da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b76de:	d001      	beq.n	b76e4 <_strtol_l.constprop.0+0xc>
   b76e0:	2b24      	cmp	r3, #36	; 0x24
   b76e2:	d906      	bls.n	b76f2 <_strtol_l.constprop.0+0x1a>
   b76e4:	f7fd fe92 	bl	b540c <__errno>
   b76e8:	2316      	movs	r3, #22
   b76ea:	6003      	str	r3, [r0, #0]
   b76ec:	2000      	movs	r0, #0
   b76ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b76f2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b77d8 <_strtol_l.constprop.0+0x100>
   b76f6:	460d      	mov	r5, r1
   b76f8:	462e      	mov	r6, r5
   b76fa:	f815 4b01 	ldrb.w	r4, [r5], #1
   b76fe:	f814 700c 	ldrb.w	r7, [r4, ip]
   b7702:	f017 0708 	ands.w	r7, r7, #8
   b7706:	d1f7      	bne.n	b76f8 <_strtol_l.constprop.0+0x20>
   b7708:	2c2d      	cmp	r4, #45	; 0x2d
   b770a:	d132      	bne.n	b7772 <_strtol_l.constprop.0+0x9a>
   b770c:	782c      	ldrb	r4, [r5, #0]
   b770e:	2701      	movs	r7, #1
   b7710:	1cb5      	adds	r5, r6, #2
   b7712:	2b00      	cmp	r3, #0
   b7714:	d05b      	beq.n	b77ce <_strtol_l.constprop.0+0xf6>
   b7716:	2b10      	cmp	r3, #16
   b7718:	d109      	bne.n	b772e <_strtol_l.constprop.0+0x56>
   b771a:	2c30      	cmp	r4, #48	; 0x30
   b771c:	d107      	bne.n	b772e <_strtol_l.constprop.0+0x56>
   b771e:	782c      	ldrb	r4, [r5, #0]
   b7720:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b7724:	2c58      	cmp	r4, #88	; 0x58
   b7726:	d14d      	bne.n	b77c4 <_strtol_l.constprop.0+0xec>
   b7728:	786c      	ldrb	r4, [r5, #1]
   b772a:	2310      	movs	r3, #16
   b772c:	3502      	adds	r5, #2
   b772e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b7732:	f108 38ff 	add.w	r8, r8, #4294967295
   b7736:	f04f 0c00 	mov.w	ip, #0
   b773a:	fbb8 f9f3 	udiv	r9, r8, r3
   b773e:	4666      	mov	r6, ip
   b7740:	fb03 8a19 	mls	sl, r3, r9, r8
   b7744:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b7748:	f1be 0f09 	cmp.w	lr, #9
   b774c:	d816      	bhi.n	b777c <_strtol_l.constprop.0+0xa4>
   b774e:	4674      	mov	r4, lr
   b7750:	42a3      	cmp	r3, r4
   b7752:	dd24      	ble.n	b779e <_strtol_l.constprop.0+0xc6>
   b7754:	f1bc 0f00 	cmp.w	ip, #0
   b7758:	db1e      	blt.n	b7798 <_strtol_l.constprop.0+0xc0>
   b775a:	45b1      	cmp	r9, r6
   b775c:	d31c      	bcc.n	b7798 <_strtol_l.constprop.0+0xc0>
   b775e:	d101      	bne.n	b7764 <_strtol_l.constprop.0+0x8c>
   b7760:	45a2      	cmp	sl, r4
   b7762:	db19      	blt.n	b7798 <_strtol_l.constprop.0+0xc0>
   b7764:	fb06 4603 	mla	r6, r6, r3, r4
   b7768:	f04f 0c01 	mov.w	ip, #1
   b776c:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7770:	e7e8      	b.n	b7744 <_strtol_l.constprop.0+0x6c>
   b7772:	2c2b      	cmp	r4, #43	; 0x2b
   b7774:	bf04      	itt	eq
   b7776:	782c      	ldrbeq	r4, [r5, #0]
   b7778:	1cb5      	addeq	r5, r6, #2
   b777a:	e7ca      	b.n	b7712 <_strtol_l.constprop.0+0x3a>
   b777c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b7780:	f1be 0f19 	cmp.w	lr, #25
   b7784:	d801      	bhi.n	b778a <_strtol_l.constprop.0+0xb2>
   b7786:	3c37      	subs	r4, #55	; 0x37
   b7788:	e7e2      	b.n	b7750 <_strtol_l.constprop.0+0x78>
   b778a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b778e:	f1be 0f19 	cmp.w	lr, #25
   b7792:	d804      	bhi.n	b779e <_strtol_l.constprop.0+0xc6>
   b7794:	3c57      	subs	r4, #87	; 0x57
   b7796:	e7db      	b.n	b7750 <_strtol_l.constprop.0+0x78>
   b7798:	f04f 3cff 	mov.w	ip, #4294967295
   b779c:	e7e6      	b.n	b776c <_strtol_l.constprop.0+0x94>
   b779e:	f1bc 0f00 	cmp.w	ip, #0
   b77a2:	da05      	bge.n	b77b0 <_strtol_l.constprop.0+0xd8>
   b77a4:	2322      	movs	r3, #34	; 0x22
   b77a6:	6003      	str	r3, [r0, #0]
   b77a8:	4646      	mov	r6, r8
   b77aa:	b942      	cbnz	r2, b77be <_strtol_l.constprop.0+0xe6>
   b77ac:	4630      	mov	r0, r6
   b77ae:	e79e      	b.n	b76ee <_strtol_l.constprop.0+0x16>
   b77b0:	b107      	cbz	r7, b77b4 <_strtol_l.constprop.0+0xdc>
   b77b2:	4276      	negs	r6, r6
   b77b4:	2a00      	cmp	r2, #0
   b77b6:	d0f9      	beq.n	b77ac <_strtol_l.constprop.0+0xd4>
   b77b8:	f1bc 0f00 	cmp.w	ip, #0
   b77bc:	d000      	beq.n	b77c0 <_strtol_l.constprop.0+0xe8>
   b77be:	1e69      	subs	r1, r5, #1
   b77c0:	6011      	str	r1, [r2, #0]
   b77c2:	e7f3      	b.n	b77ac <_strtol_l.constprop.0+0xd4>
   b77c4:	2430      	movs	r4, #48	; 0x30
   b77c6:	2b00      	cmp	r3, #0
   b77c8:	d1b1      	bne.n	b772e <_strtol_l.constprop.0+0x56>
   b77ca:	2308      	movs	r3, #8
   b77cc:	e7af      	b.n	b772e <_strtol_l.constprop.0+0x56>
   b77ce:	2c30      	cmp	r4, #48	; 0x30
   b77d0:	d0a5      	beq.n	b771e <_strtol_l.constprop.0+0x46>
   b77d2:	230a      	movs	r3, #10
   b77d4:	e7ab      	b.n	b772e <_strtol_l.constprop.0+0x56>
   b77d6:	bf00      	nop
   b77d8:	000b7dde 	.word	0x000b7dde

000b77dc <strtol>:
   b77dc:	4613      	mov	r3, r2
   b77de:	460a      	mov	r2, r1
   b77e0:	4601      	mov	r1, r0
   b77e2:	4802      	ldr	r0, [pc, #8]	; (b77ec <strtol+0x10>)
   b77e4:	6800      	ldr	r0, [r0, #0]
   b77e6:	f7ff bf77 	b.w	b76d8 <_strtol_l.constprop.0>
   b77ea:	bf00      	nop
   b77ec:	2003e100 	.word	0x2003e100

000b77f0 <__register_exitproc>:
   b77f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b77f4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b78b0 <__register_exitproc+0xc0>
   b77f8:	4606      	mov	r6, r0
   b77fa:	f8d8 0000 	ldr.w	r0, [r8]
   b77fe:	461f      	mov	r7, r3
   b7800:	460d      	mov	r5, r1
   b7802:	4691      	mov	r9, r2
   b7804:	f000 f856 	bl	b78b4 <__retarget_lock_acquire_recursive>
   b7808:	4b25      	ldr	r3, [pc, #148]	; (b78a0 <__register_exitproc+0xb0>)
   b780a:	681c      	ldr	r4, [r3, #0]
   b780c:	b934      	cbnz	r4, b781c <__register_exitproc+0x2c>
   b780e:	4c25      	ldr	r4, [pc, #148]	; (b78a4 <__register_exitproc+0xb4>)
   b7810:	601c      	str	r4, [r3, #0]
   b7812:	4b25      	ldr	r3, [pc, #148]	; (b78a8 <__register_exitproc+0xb8>)
   b7814:	b113      	cbz	r3, b781c <__register_exitproc+0x2c>
   b7816:	681b      	ldr	r3, [r3, #0]
   b7818:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b781c:	6863      	ldr	r3, [r4, #4]
   b781e:	2b1f      	cmp	r3, #31
   b7820:	dd07      	ble.n	b7832 <__register_exitproc+0x42>
   b7822:	f8d8 0000 	ldr.w	r0, [r8]
   b7826:	f000 f847 	bl	b78b8 <__retarget_lock_release_recursive>
   b782a:	f04f 30ff 	mov.w	r0, #4294967295
   b782e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7832:	b34e      	cbz	r6, b7888 <__register_exitproc+0x98>
   b7834:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7838:	b988      	cbnz	r0, b785e <__register_exitproc+0x6e>
   b783a:	4b1c      	ldr	r3, [pc, #112]	; (b78ac <__register_exitproc+0xbc>)
   b783c:	b923      	cbnz	r3, b7848 <__register_exitproc+0x58>
   b783e:	f8d8 0000 	ldr.w	r0, [r8]
   b7842:	f000 f838 	bl	b78b6 <__retarget_lock_release>
   b7846:	e7f0      	b.n	b782a <__register_exitproc+0x3a>
   b7848:	f44f 7084 	mov.w	r0, #264	; 0x108
   b784c:	f7fd fdb6 	bl	b53bc <malloc>
   b7850:	2800      	cmp	r0, #0
   b7852:	d0f4      	beq.n	b783e <__register_exitproc+0x4e>
   b7854:	2300      	movs	r3, #0
   b7856:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b785a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b785e:	6863      	ldr	r3, [r4, #4]
   b7860:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7864:	2201      	movs	r2, #1
   b7866:	409a      	lsls	r2, r3
   b7868:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b786c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7870:	4313      	orrs	r3, r2
   b7872:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7876:	2e02      	cmp	r6, #2
   b7878:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b787c:	bf02      	ittt	eq
   b787e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7882:	4313      	orreq	r3, r2
   b7884:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7888:	6863      	ldr	r3, [r4, #4]
   b788a:	f8d8 0000 	ldr.w	r0, [r8]
   b788e:	1c5a      	adds	r2, r3, #1
   b7890:	3302      	adds	r3, #2
   b7892:	6062      	str	r2, [r4, #4]
   b7894:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7898:	f000 f80e 	bl	b78b8 <__retarget_lock_release_recursive>
   b789c:	2000      	movs	r0, #0
   b789e:	e7c6      	b.n	b782e <__register_exitproc+0x3e>
   b78a0:	2003e7e8 	.word	0x2003e7e8
   b78a4:	2003e75c 	.word	0x2003e75c
   b78a8:	00000000 	.word	0x00000000
   b78ac:	000b53bd 	.word	0x000b53bd
   b78b0:	2003e164 	.word	0x2003e164

000b78b4 <__retarget_lock_acquire_recursive>:
   b78b4:	4770      	bx	lr

000b78b6 <__retarget_lock_release>:
   b78b6:	4770      	bx	lr

000b78b8 <__retarget_lock_release_recursive>:
   b78b8:	4770      	bx	lr

000b78ba <link_code_end>:
	...

000b78bc <dynalib_user>:
   b78bc:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b78cc:	0000 0000 7055 6164 6574 2064 6564 616c     ....Updated dela
   b78dc:	2079 6974 656d 7420 3a6f 0020 7055 6164     y time to: .Upda
   b78ec:	6574 2064 7473 7261 2074 6172 676e 2065     ted start range 
   b78fc:	6f74 203a 5500 6470 7461 6465 7220 6e61     to: .Updated ran
   b790c:	6567 6520 646e 7420 3a6f 0020 6e45 6574     ge end to: .Ente
   b791c:	6972 676e 7320 7465 7075 6620 6e75 7463     ring setup funct
   b792c:	6f69 2e6e 5300 7465 7075 6620 6e69 7369     ion..Setup finis
   b793c:	6568 2164 6800 6f6f 2d6b 6572 7073 6e6f     hed!.hook-respon
   b794c:	6573 552f 6470 7461 0065 6f68 6b6f 722d     se/Update.hook-r
   b795c:	7365 6f70 736e 2f65 6552 6461 6e69 0067     esponse/Reading.
   b796c:	6f43 646e 7469 6f69 736e 6d20 7465 202c     Conditions met, 
   b797c:	7270 7065 7261 6e69 2067 6f74 7420 6b61     preparing to tak
   b798c:	2065 2061 656d 7361 7275 6d65 6e65 2174     e a measurement!
   b799c:	5700 6961 6974 676e 6620 726f 6120 6d20     .Waiting for a m
   b79ac:	6165 7573 6572 656d 746e 202c 7562 2074     easurement, but 
   b79bc:	7469 6820 7361 276e 2074 6562 6e65 6c20     it hasn't been l
   b79cc:	6e6f 2067 6e65 756f 6867 7920 7465 002e     ong enough yet..
   b79dc:	7564 6d6d 5f79 6164 6174 5700 6961 6974     dummy_data.Waiti
   b79ec:	676e 6620 726f 6120 6d20 6165 7573 6572     ng for a measure
   b79fc:	656d 746e 202c 7562 2074 7469 7327 6e20     ment, but it's n
   b7a0c:	746f 6920 206e 6874 2065 6361 6563 7470     ot in the accept
   b7a1c:	6261 656c 7420 6d69 2065 7266 6d61 2e65     able time frame.
   b7a2c:	4320 7275 6572 746e 7420 6d69 3a65 0020      Current time: .
   b7a3c:	6552 7571 7365 6974 676e 6120 6d20 6165     Requesting a mea
   b7a4c:	7573 6572 656d 746e 2d20 7020 616c 6563     surement - place
   b7a5c:	6620 6e69 6567 2072 6e6f 7320 6e65 6f73      finger on senso
   b7a6c:	2e72 4600 6e69 6567 2072 6564 6574 7463     r..Finger detect
   b7a7c:	6465 6f20 206e 6573 736e 726f 002e 6e45     ed on sensor..En
   b7a8c:	6574 6972 676e 6d20 6165 7573 6572 656d     tering measureme
   b7a9c:	746e 6c20 6f6f 0070 6156 696c 2064 656d     nt loop.Valid me
   b7aac:	7361 7275 6d65 6e65 2c74 7320 6e65 6964     asurement, sendi
   b7abc:	676e 6420 7461 2e61 4e00 746f 6120 7620     ng data..Not a v
   b7acc:	6c61 6469 6d20 6165 7573 6572 656d 746e     alid measurement
   b7adc:	202e 5248 003a 5320 4f50 3a32 0020 207b     . HR:. SPO2: .{ 
   b7aec:	6222 6165 2274 203a 0022 202c 6f22 2278     "beat": "., "ox"
   b7afc:	203a 7d00                                    : .}.

000b7b01 <_ZL14uch_spo2_table>:
   b7b01:	5f5f 605f 6060 6161 6161 6261 6262 6262     ___```aaaaabbbbb
   b7b11:	6363 6363 6363 6363 6464 6464 6464 6464     ccccccccdddddddd
   b7b21:	6464 6464 6464 6464 6464 6464 6363 6363     ddddddddddddcccc
   b7b31:	6363 6363 6262 6262 6262 6161 6161 6060     ccccbbbbbbaaaa``
   b7b41:	6060 5f5f 5e5f 5e5e 5d5d 5c5d 5c5c 5b5b     ``___^^^]]]\\\[[
   b7b51:	5a5a 5959 5859 5758 5657 5556 5455 5354     ZZYYYXXWWVVUUTTS
   b7b61:	5252 5151 5050 4e4f 4d4e 4c4c 4a4b 494a     RRQQPPONNMLLKJJI
   b7b71:	4848 4647 4545 4344 4242 4041 3e3f 3d3e     HHGFEEDCBBA@?>>=
   b7b81:	3b3c 393a 3838 3637 3435 3233 3031 2e2f     <;:98876543210/.
   b7b91:	2c2d 2a2b 2829 2627 2425 2223 1f21 1d1e     -,+*)('&%$#"!...
   b7ba1:	1b1c 191a 1617 1415 1113 0f10 0c0e 0a0b     ................
   b7bb1:	0709 0506 0203 0001 0000                     ...........

000b7bbc <_ZTVN5spark13EthernetClassE>:
	...
   b7bc4:	54ab 000b 54a1 000b 5497 000b 548d 000b     .T...T...T...T..
   b7bd4:	5481 000b 5475 000b 66bd 000b 66c5 000b     .T..uT...f...f..
   b7be4:	5469 000b 5461 000b 5457 000b 544d 000b     iT..aT..WT..MT..
   b7bf4:	66f5 000b 7061 0070 5925 252d 2d6d 6425     .f..app.%Y-%m-%d
   b7c04:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b7c14:	6d69 0065                                   ime.

000b7c18 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7c20:	5cfd 000b 5d03 000b 5d41 000b 5d11 000b     .\...]..A]...]..
   b7c30:	5cff 000b                                   .\..

000b7c34 <_ZTV9IPAddress>:
	...
   b7c3c:	623d 000b 622d 000b 622f 000b               =b..-b../b..

000b7c48 <_ZTV9USBSerial>:
	...
   b7c50:	6323 000b 638b 000b 6361 000b 5979 000b     #c...c..ac..yY..
   b7c60:	6353 000b 6325 000b 6335 000b 6385 000b     Sc..%c..5c...c..
   b7c70:	6345 000b 631d 000b                         Ec...c..

000b7c78 <_ZTV11USARTSerial>:
	...
   b7c80:	6425 000b 6491 000b 6469 000b 5979 000b     %d...d..id..yY..
   b7c90:	6439 000b 6455 000b 6447 000b 6463 000b     9d..Ud..Gd..cd..
   b7ca0:	6427 000b 642b 000b                         'd..+d..

000b7ca8 <_ZTV7TwoWire>:
	...
   b7cb0:	64f1 000b 653b 000b 6513 000b 64f3 000b     .d..;e...e...d..
   b7cc0:	651b 000b 6523 000b 652b 000b 6533 000b     .e..#e..+e..3e..

000b7cd0 <_ZTVN5spark9WiFiClassE>:
	...
   b7cd8:	665d 000b 6653 000b 6649 000b 65ff 000b     ]f..Sf..If...e..
   b7ce8:	663d 000b 6631 000b 66bd 000b 66c5 000b     =f..1f...f...f..
   b7cf8:	6625 000b 661d 000b 6613 000b 6609 000b     %f...f...f...f..
   b7d08:	66f5 000b                                   .f..

000b7d0c <_ZTVN5spark12NetworkClassE>:
	...
   b7d14:	667d 000b 6687 000b 6691 000b 669b 000b     }f...f...f...f..
   b7d24:	66a5 000b 66b1 000b 66bd 000b 66c5 000b     .f...f...f...f..
   b7d34:	66cd 000b 66d9 000b 66e1 000b 66eb 000b     .f...f...f...f..
   b7d44:	66f5 000b                                   .f..

000b7d48 <_ZSt7nothrow>:
   b7d48:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b7d58:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b7d68:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b7d78:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b7d88:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b7d98:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b7da8:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b7db8:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b7dc8:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b7dd8:	646e 632e                                    nd.c.

000b7ddd <_ctype_>:
   b7ddd:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b7ded:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b7dfd:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b7e0d:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b7e1d:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b7e2d:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b7e3d:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b7e4d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b7e5d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b7ede <link_const_variable_data_end>:
	...

000b7ee0 <link_constructors_location>:
   b7ee0:	000b4695 	.word	0x000b4695
   b7ee4:	000b54b5 	.word	0x000b54b5
   b7ee8:	000b54c9 	.word	0x000b54c9
   b7eec:	000b5969 	.word	0x000b5969
   b7ef0:	000b5a39 	.word	0x000b5a39
   b7ef4:	000b5b59 	.word	0x000b5b59
   b7ef8:	000b5bb9 	.word	0x000b5bb9
   b7efc:	000b6669 	.word	0x000b6669
   b7f00:	000b67cd 	.word	0x000b67cd

000b7f04 <link_constructors_end>:
	...
