
c:/Users/nicky/OneDrive/Documents/GitHub/513_project/Particle/PW_Project/target/4.0.1/argon/PW_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000062e0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000ba300  000ba300  0000a300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000ba324  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001ec  2003dd74  000ba328  0001dd74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000890  2003df60  2003df60  0002df60  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000ba514  000ba514  0002a514  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000ba53c  000ba53c  0002a53c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001152f2  00000000  00000000  0002a540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00012472  00000000  00000000  0013f832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00039963  00000000  00000000  00151ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002aa8  00000000  00000000  0018b607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a460  00000000  00000000  0018e0af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039080  00000000  00000000  0019850f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003d8fd  00000000  00000000  001d158f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001382af  00000000  00000000  0020ee8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00007fec  00000000  00000000  0034713c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f003 fcb0 	bl	b7996 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f003 fcb8 	bl	b79b2 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003dd74 	.word	0x2003dd74
   b404c:	000ba328 	.word	0x000ba328
   b4050:	2003df60 	.word	0x2003df60
   b4054:	2003df60 	.word	0x2003df60
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f002 f8d5 	bl	b6210 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000ba2dc 	.word	0x000ba2dc
   b4080:	000ba300 	.word	0x000ba300

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b8fc 	b.w	b4280 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f993 	bl	b43b4 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f002 b875 	b.w	b6180 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f001 baf1 	b.w	b567c <malloc>

000b409a <_Znaj>:
   b409a:	f001 baef 	b.w	b567c <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f001 baf5 	b.w	b568c <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN8particle9LEDStatus6updateEm>:
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
    // Default implementation does nothing
}
   b40b2:	4770      	bx	lr

000b40b4 <_Z14readingHandlerPKcS0_>:
    }
  }
}

// Web Hook Event Handler
void readingHandler(const char *event, const char *data) {
   b40b4:	b507      	push	{r0, r1, r2, lr}
   b40b6:	9101      	str	r1, [sp, #4]
  // Handle the integration response
  Serial.println(data); 
   b40b8:	f002 fc4a 	bl	b6950 <_Z16_fetch_usbserialv>
   b40bc:	9901      	ldr	r1, [sp, #4]
}
   b40be:	b003      	add	sp, #12
   b40c0:	f85d eb04 	ldr.w	lr, [sp], #4
  Serial.println(data); 
   b40c4:	f001 bd81 	b.w	b5bca <_ZN5Print7printlnEPKc>

000b40c8 <_ZN8particle9LEDStatusD1Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b40c8:	b510      	push	{r4, lr}
   b40ca:	4b05      	ldr	r3, [pc, #20]	; (b40e0 <_ZN8particle9LEDStatusD1Ev+0x18>)
    led_set_status_active(&d_, active, nullptr);
   b40cc:	2200      	movs	r2, #0
inline particle::LEDStatus::~LEDStatus() {
   b40ce:	4604      	mov	r4, r0
    led_set_status_active(&d_, active, nullptr);
   b40d0:	4611      	mov	r1, r2
inline particle::LEDStatus::~LEDStatus() {
   b40d2:	f840 3b04 	str.w	r3, [r0], #4
    led_set_status_active(&d_, active, nullptr);
   b40d6:	f001 f9eb 	bl	b54b0 <led_set_status_active>
}
   b40da:	4620      	mov	r0, r4
   b40dc:	bd10      	pop	{r4, pc}
   b40de:	bf00      	nop
   b40e0:	000b9bfc 	.word	0x000b9bfc

000b40e4 <_ZN8particle9LEDStatusD0Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b40e4:	b510      	push	{r4, lr}
   b40e6:	4604      	mov	r4, r0
}
   b40e8:	f7ff ffee 	bl	b40c8 <_ZN8particle9LEDStatusD1Ev>
   b40ec:	4620      	mov	r0, r4
   b40ee:	2120      	movs	r1, #32
   b40f0:	f7ff ffd5 	bl	b409e <_ZdlPvj>
   b40f4:	4620      	mov	r0, r4
   b40f6:	bd10      	pop	{r4, pc}

000b40f8 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>:
inline void particle::LEDStatus::setSpeed(LEDSpeed speed) {
   b40f8:	b510      	push	{r4, lr}
   b40fa:	4604      	mov	r4, r0
    setPeriod(led_pattern_period(d_.pattern, speed, nullptr));
   b40fc:	2200      	movs	r2, #0
   b40fe:	7c40      	ldrb	r0, [r0, #17]
   b4100:	f001 fa10 	bl	b5524 <led_pattern_period>
    if (d_.pattern != LED_PATTERN_CUSTOM) {
   b4104:	7c63      	ldrb	r3, [r4, #17]
   b4106:	2b0f      	cmp	r3, #15
        d_.period = period;
   b4108:	bf18      	it	ne
   b410a:	8320      	strhne	r0, [r4, #24]
}
   b410c:	bd10      	pop	{r4, pc}

000b410e <_Z13return_stringhhPKcPc>:

// Find string returned in web hook event data
void return_string(uint8_t start, uint8_t end, const char* input, char output[]) {
   b410e:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t index = start + 1;
   b4110:	1c44      	adds	r4, r0, #1
   b4112:	b2e5      	uxtb	r5, r4
   b4114:	fa52 f284 	uxtab	r2, r2, r4
   b4118:	1b2c      	subs	r4, r5, r4
   b411a:	4423      	add	r3, r4
   b411c:	461e      	mov	r6, r3
   b411e:	462c      	mov	r4, r5
  while (index < end) {
   b4120:	428c      	cmp	r4, r1
   b4122:	d206      	bcs.n	b4132 <_Z13return_stringhhPKcPc+0x24>
    output[index - (start + 1)] = input[index];
   b4124:	f812 7b01 	ldrb.w	r7, [r2], #1
   b4128:	f803 7b01 	strb.w	r7, [r3], #1
    index++;
   b412c:	3401      	adds	r4, #1
   b412e:	b2e4      	uxtb	r4, r4
  while (index < end) {
   b4130:	e7f6      	b.n	b4120 <_Z13return_stringhhPKcPc+0x12>
    output[index - (start + 1)] = input[index];
   b4132:	1e4b      	subs	r3, r1, #1
   b4134:	1a18      	subs	r0, r3, r0
   b4136:	b2c0      	uxtb	r0, r0
   b4138:	428d      	cmp	r5, r1
   b413a:	bf88      	it	hi
   b413c:	2000      	movhi	r0, #0
  }
  output[index - (start + 1)] = '\0';
   b413e:	2300      	movs	r3, #0
   b4140:	5433      	strb	r3, [r6, r0]
}
   b4142:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4144 <_Z13updateHandlerPKcS0_>:
void updateHandler(const char *event, const char *data) {
   b4144:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4148:	460c      	mov	r4, r1
  Serial.println(data);
   b414a:	f002 fc01 	bl	b6950 <_Z16_fetch_usbserialv>
   b414e:	4621      	mov	r1, r4
   b4150:	f001 fd3b 	bl	b5bca <_ZN5Print7printlnEPKc>
  if (data) {
   b4154:	2c00      	cmp	r4, #0
   b4156:	d07d      	beq.n	b4254 <_Z13updateHandlerPKcS0_+0x110>
   b4158:	2700      	movs	r7, #0
        return_string(starting_location, i, data, event_data);
   b415a:	4e40      	ldr	r6, [pc, #256]	; (b425c <_Z13updateHandlerPKcS0_+0x118>)
          delay_time = (int)(atof(event_data) * 60.0 * 1000.0);
   b415c:	f8df 9110 	ldr.w	r9, [pc, #272]	; b4270 <_Z13updateHandlerPKcS0_+0x12c>
    uint8_t starting_location = 0;
   b4160:	46ba      	mov	sl, r7
    uint8_t data_part = 0;
   b4162:	463d      	mov	r5, r7
          delay_time = (int)(atof(event_data) * 60.0 * 1000.0);
   b4164:	f04f 0800 	mov.w	r8, #0
   b4168:	b2f9      	uxtb	r1, r7
    while (*(data + i) != '\0') {
   b416a:	5c63      	ldrb	r3, [r4, r1]
   b416c:	2b00      	cmp	r3, #0
   b416e:	d071      	beq.n	b4254 <_Z13updateHandlerPKcS0_+0x110>
      if (*(data + i) == ':') {
   b4170:	2b3a      	cmp	r3, #58	; 0x3a
   b4172:	d06d      	beq.n	b4250 <_Z13updateHandlerPKcS0_+0x10c>
      else if (*(data+i) == ',') {
   b4174:	2b2c      	cmp	r3, #44	; 0x2c
   b4176:	d14c      	bne.n	b4212 <_Z13updateHandlerPKcS0_+0xce>
        if (data_part == 0) {
   b4178:	bb65      	cbnz	r5, b41d4 <_Z13updateHandlerPKcS0_+0x90>
          return_string(starting_location, ending_location, data, event_data);
   b417a:	4633      	mov	r3, r6
   b417c:	4622      	mov	r2, r4
   b417e:	4650      	mov	r0, sl
   b4180:	f7ff ffc5 	bl	b410e <_Z13return_stringhhPKcPc>
          delay_time = (int)(atof(event_data) * 60.0 * 1000.0);
   b4184:	4630      	mov	r0, r6
   b4186:	f003 fbef 	bl	b7968 <atof>
   b418a:	4b35      	ldr	r3, [pc, #212]	; (b4260 <_Z13updateHandlerPKcS0_+0x11c>)
   b418c:	f8df b0e4 	ldr.w	fp, [pc, #228]	; b4274 <_Z13updateHandlerPKcS0_+0x130>
   b4190:	ec51 0b10 	vmov	r0, r1, d0
   b4194:	2200      	movs	r2, #0
   b4196:	f003 f821 	bl	b71dc <__aeabi_dmul>
   b419a:	464b      	mov	r3, r9
   b419c:	4642      	mov	r2, r8
   b419e:	f003 f81d 	bl	b71dc <__aeabi_dmul>
   b41a2:	f003 facb 	bl	b773c <__aeabi_d2iz>
   b41a6:	f8cb 0000 	str.w	r0, [fp]
          Serial.print("Updated delay time to: ");
   b41aa:	f002 fbd1 	bl	b6950 <_Z16_fetch_usbserialv>
   b41ae:	492d      	ldr	r1, [pc, #180]	; (b4264 <_Z13updateHandlerPKcS0_+0x120>)
   b41b0:	f001 fcf8 	bl	b5ba4 <_ZN5Print5printEPKc>
          Serial.println(delay_time);
   b41b4:	f002 fbcc 	bl	b6950 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b41b8:	f8db 1000 	ldr.w	r1, [fp]
   b41bc:	9001      	str	r0, [sp, #4]
   b41be:	220a      	movs	r2, #10
   b41c0:	f001 fd0d 	bl	b5bde <_ZN5Print11printNumberEmh>
        n += println();
   b41c4:	9b01      	ldr	r3, [sp, #4]
   b41c6:	4618      	mov	r0, r3
   b41c8:	f001 fcf3 	bl	b5bb2 <_ZN5Print7printlnEv>
        data_part = data_part + 1;
   b41cc:	3501      	adds	r5, #1
   b41ce:	b2ed      	uxtb	r5, r5
      i++;
   b41d0:	3701      	adds	r7, #1
    while (*(data + i) != '\0') {
   b41d2:	e7c9      	b.n	b4168 <_Z13updateHandlerPKcS0_+0x24>
        if (data_part == 1) {
   b41d4:	2d01      	cmp	r5, #1
   b41d6:	d1f9      	bne.n	b41cc <_Z13updateHandlerPKcS0_+0x88>
          return_string(starting_location, ending_location, data, event_data);
   b41d8:	4633      	mov	r3, r6
   b41da:	4622      	mov	r2, r4
   b41dc:	4650      	mov	r0, sl
   b41de:	f7ff ff96 	bl	b410e <_Z13return_stringhhPKcPc>
          constraint_time_lower = atof(event_data);
   b41e2:	4630      	mov	r0, r6
   b41e4:	f003 fbc0 	bl	b7968 <atof>
   b41e8:	ec51 0b10 	vmov	r0, r1, d0
   b41ec:	f003 faee 	bl	b77cc <__aeabi_d2f>
   b41f0:	f8df b084 	ldr.w	fp, [pc, #132]	; b4278 <_Z13updateHandlerPKcS0_+0x134>
   b41f4:	f8cb 0000 	str.w	r0, [fp]
          Serial.print("Updated start range to: ");
   b41f8:	f002 fbaa 	bl	b6950 <_Z16_fetch_usbserialv>
   b41fc:	491a      	ldr	r1, [pc, #104]	; (b4268 <_Z13updateHandlerPKcS0_+0x124>)
   b41fe:	f001 fcd1 	bl	b5ba4 <_ZN5Print5printEPKc>
          Serial.println(constraint_time_lower);
   b4202:	f002 fba5 	bl	b6950 <_Z16_fetch_usbserialv>
   b4206:	ed9b 0a00 	vldr	s0, [fp]
   b420a:	2102      	movs	r1, #2
   b420c:	f001 fdd9 	bl	b5dc2 <_ZN5Print7printlnEfi>
   b4210:	e7dc      	b.n	b41cc <_Z13updateHandlerPKcS0_+0x88>
      else if (*(data+i) == '}') {
   b4212:	2b7d      	cmp	r3, #125	; 0x7d
   b4214:	d1dc      	bne.n	b41d0 <_Z13updateHandlerPKcS0_+0x8c>
        return_string(starting_location, i, data, event_data);
   b4216:	4633      	mov	r3, r6
   b4218:	4622      	mov	r2, r4
   b421a:	4650      	mov	r0, sl
   b421c:	f7ff ff77 	bl	b410e <_Z13return_stringhhPKcPc>
        constraint_time_upper = atof(event_data);
   b4220:	4630      	mov	r0, r6
   b4222:	f003 fba1 	bl	b7968 <atof>
   b4226:	ec51 0b10 	vmov	r0, r1, d0
   b422a:	f003 facf 	bl	b77cc <__aeabi_d2f>
   b422e:	f8df b04c 	ldr.w	fp, [pc, #76]	; b427c <_Z13updateHandlerPKcS0_+0x138>
   b4232:	f8cb 0000 	str.w	r0, [fp]
        Serial.print("Updated range end to: ");
   b4236:	f002 fb8b 	bl	b6950 <_Z16_fetch_usbserialv>
   b423a:	490c      	ldr	r1, [pc, #48]	; (b426c <_Z13updateHandlerPKcS0_+0x128>)
   b423c:	f001 fcb2 	bl	b5ba4 <_ZN5Print5printEPKc>
        Serial.println(constraint_time_upper);
   b4240:	f002 fb86 	bl	b6950 <_Z16_fetch_usbserialv>
   b4244:	ed9b 0a00 	vldr	s0, [fp]
   b4248:	2102      	movs	r1, #2
   b424a:	f001 fdba 	bl	b5dc2 <_ZN5Print7printlnEfi>
   b424e:	e7bf      	b.n	b41d0 <_Z13updateHandlerPKcS0_+0x8c>
        starting_location = i;
   b4250:	468a      	mov	sl, r1
   b4252:	e7bd      	b.n	b41d0 <_Z13updateHandlerPKcS0_+0x8c>
}
   b4254:	b003      	add	sp, #12
   b4256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b425a:	bf00      	nop
   b425c:	2003df9c 	.word	0x2003df9c
   b4260:	404e0000 	.word	0x404e0000
   b4264:	000b9920 	.word	0x000b9920
   b4268:	000b9938 	.word	0x000b9938
   b426c:	000b9951 	.word	0x000b9951
   b4270:	408f4000 	.word	0x408f4000
   b4274:	2003dd7c 	.word	0x2003dd7c
   b4278:	2003dd74 	.word	0x2003dd74
   b427c:	2003dd78 	.word	0x2003dd78

000b4280 <setup>:
/****************************************************************************************************************************/
// SETUP FUNCTION                                                                                                           //
/****************************************************************************************************************************/

// Setup Function
void setup() {
   b4280:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  Serial.begin(9600);
   b4282:	f002 fb65 	bl	b6950 <_Z16_fetch_usbserialv>
   b4286:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b428a:	f002 fb55 	bl	b6938 <_ZN9USBSerial5beginEl>
  Serial.println("Entering setup function.");
   b428e:	f002 fb5f 	bl	b6950 <_Z16_fetch_usbserialv>
   b4292:	4924      	ldr	r1, [pc, #144]	; (b4324 <setup+0xa4>)
   b4294:	f001 fc99 	bl	b5bca <_ZN5Print7printlnEPKc>
  max30105.begin();
   b4298:	4823      	ldr	r0, [pc, #140]	; (b4328 <setup+0xa8>)
   b429a:	f000 fcbb 	bl	b4c14 <_ZN8MAX301055beginEv>
  max30105.setup(60, 4, 2, 100, 411, 4096);
   b429e:	f240 139b 	movw	r3, #411	; 0x19b
   b42a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   b42a6:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b42aa:	2364      	movs	r3, #100	; 0x64
   b42ac:	2204      	movs	r2, #4
   b42ae:	213c      	movs	r1, #60	; 0x3c
   b42b0:	481d      	ldr	r0, [pc, #116]	; (b4328 <setup+0xa8>)
   b42b2:	9300      	str	r3, [sp, #0]
   b42b4:	2302      	movs	r3, #2
   b42b6:	f000 fd67 	bl	b4d88 <_ZN8MAX301055setupEhhhiii>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b42ba:	2400      	movs	r4, #0
  Serial.println("Setup finished!");
   b42bc:	f002 fb48 	bl	b6950 <_Z16_fetch_usbserialv>
   b42c0:	491a      	ldr	r1, [pc, #104]	; (b432c <setup+0xac>)
   b42c2:	f001 fc82 	bl	b5bca <_ZN5Print7printlnEPKc>
   b42c6:	4623      	mov	r3, r4
   b42c8:	4622      	mov	r2, r4
   b42ca:	e9cd 4400 	strd	r4, r4, [sp]
   b42ce:	4918      	ldr	r1, [pc, #96]	; (b4330 <setup+0xb0>)
   b42d0:	4818      	ldr	r0, [pc, #96]	; (b4334 <setup+0xb4>)
   b42d2:	f001 f9bb 	bl	b564c <spark_subscribe>
   b42d6:	4622      	mov	r2, r4
   b42d8:	4623      	mov	r3, r4
   b42da:	4917      	ldr	r1, [pc, #92]	; (b4338 <setup+0xb8>)
   b42dc:	4817      	ldr	r0, [pc, #92]	; (b433c <setup+0xbc>)
   b42de:	e9cd 4400 	strd	r4, r4, [sp]
    d_.color = color;
   b42e2:	4c17      	ldr	r4, [pc, #92]	; (b4340 <setup+0xc0>)
   b42e4:	f001 f9b2 	bl	b564c <spark_subscribe>
  // Subscribe to the integration response event
  Particle.subscribe("hook-response/Update", updateHandler, MY_DEVICES);
  Particle.subscribe("hook-response/Reading", readingHandler, MY_DEVICES);

  // Timezone
  Time.zone(-7);
   b42e8:	eeb9 0a0c 	vmov.f32	s0, #156	; 0xc0e00000 -7.0
   b42ec:	f001 fdc4 	bl	b5e78 <_ZN9TimeClass4zoneEf>
   b42f0:	f44f 437f 	mov.w	r3, #65280	; 0xff00

   // Update LED
  blinkLED.setColor(RGB_COLOR_GREEN);
  blinkLED.setSpeed(LED_SPEED_SLOW);
   b42f4:	210a      	movs	r1, #10
   b42f6:	4620      	mov	r0, r4
   b42f8:	6163      	str	r3, [r4, #20]
   b42fa:	f7ff fefd 	bl	b40f8 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b42fe:	7c63      	ldrb	r3, [r4, #17]
   b4300:	2b0f      	cmp	r3, #15
        d_.pattern = pattern;
   b4302:	bf1c      	itt	ne
   b4304:	2303      	movne	r3, #3
   b4306:	7463      	strbne	r3, [r4, #17]
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
   b4308:	7ca2      	ldrb	r2, [r4, #18]
  blinkLED.setPattern(LED_PATTERN_FADE);
  if (!blinkLED.isActive()) blinkLED.setActive(true);
   b430a:	f012 0201 	ands.w	r2, r2, #1
   b430e:	d103      	bne.n	b4318 <setup+0x98>
    led_set_status_active(&d_, active, nullptr);
   b4310:	480c      	ldr	r0, [pc, #48]	; (b4344 <setup+0xc4>)
   b4312:	2101      	movs	r1, #1
   b4314:	f001 f8cc 	bl	b54b0 <led_set_status_active>
    d_.flags &= ~LED_STATUS_FLAG_OFF;
   b4318:	7ca3      	ldrb	r3, [r4, #18]
   b431a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   b431e:	74a3      	strb	r3, [r4, #18]
  blinkLED.on();

}
   b4320:	b004      	add	sp, #16
   b4322:	bd10      	pop	{r4, pc}
   b4324:	000b9968 	.word	0x000b9968
   b4328:	2003e06c 	.word	0x2003e06c
   b432c:	000b9981 	.word	0x000b9981
   b4330:	000b4145 	.word	0x000b4145
   b4334:	000b9991 	.word	0x000b9991
   b4338:	000b40b5 	.word	0x000b40b5
   b433c:	000b99a6 	.word	0x000b99a6
   b4340:	2003df64 	.word	0x2003df64
   b4344:	2003df68 	.word	0x2003df68

000b4348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4348:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b434a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b434c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b434e:	b17c      	cbz	r4, b4370 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4350:	6863      	ldr	r3, [r4, #4]
   b4352:	3b01      	subs	r3, #1
   b4354:	6063      	str	r3, [r4, #4]
   b4356:	b95b      	cbnz	r3, b4370 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4358:	6823      	ldr	r3, [r4, #0]
   b435a:	4620      	mov	r0, r4
   b435c:	689b      	ldr	r3, [r3, #8]
   b435e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4360:	68a3      	ldr	r3, [r4, #8]
   b4362:	3b01      	subs	r3, #1
   b4364:	60a3      	str	r3, [r4, #8]
   b4366:	b91b      	cbnz	r3, b4370 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4368:	6823      	ldr	r3, [r4, #0]
   b436a:	4620      	mov	r0, r4
   b436c:	68db      	ldr	r3, [r3, #12]
   b436e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4370:	4628      	mov	r0, r5
   b4372:	bd38      	pop	{r3, r4, r5, pc}

000b4374 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>:
    // Constructs succeeded future
    explicit Future(ResultT result = ResultT()) :
            FutureBase<ResultT, ContextT>(std::make_shared<detail::FutureImpl<ResultT, ContextT>>(std::move(result))) {
    }

    ResultT result() const {
   b4374:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b4376:	6804      	ldr	r4, [r0, #0]
        return (application_thread_current(nullptr) != 0);
   b4378:	2000      	movs	r0, #0
   b437a:	f001 f8bb 	bl	b54f4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b437e:	b120      	cbz	r0, b438a <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x16>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b4380:	7863      	ldrb	r3, [r4, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b4382:	b913      	cbnz	r3, b438a <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x16>
        spark_process();
   b4384:	f001 f94a 	bl	b561c <spark_process>
    }
   b4388:	e7fa      	b.n	b4380 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0xc>
   b438a:	7863      	ldrb	r3, [r4, #1]
   b438c:	f3bf 8f5b 	dmb	ish
   b4390:	1c65      	adds	r5, r4, #1
        if (this->acquireDone() && this->isSucceeded()) {
   b4392:	b90b      	cbnz	r3, b4398 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x24>
        return std::move(defaultValue);
   b4394:	2000      	movs	r0, #0
        return this->p_->result();
    }
   b4396:	bd38      	pop	{r3, r4, r5, pc}
        return (application_thread_current(nullptr) != 0);
   b4398:	2000      	movs	r0, #0
   b439a:	f001 f8ab 	bl	b54f4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b439e:	b120      	cbz	r0, b43aa <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x36>
   b43a0:	782b      	ldrb	r3, [r5, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b43a2:	b913      	cbnz	r3, b43aa <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x36>
        spark_process();
   b43a4:	f001 f93a 	bl	b561c <spark_process>
    }
   b43a8:	e7fa      	b.n	b43a0 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x2c>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b43aa:	7823      	ldrb	r3, [r4, #0]
        if (this->acquireDone() && this->isSucceeded()) {
   b43ac:	2b01      	cmp	r3, #1
   b43ae:	d1f1      	bne.n	b4394 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x20>
            return result_;
   b43b0:	7b20      	ldrb	r0, [r4, #12]
   b43b2:	e7f0      	b.n	b4396 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x22>

000b43b4 <loop>:
/****************************************************************************************************************************/
// LOOP FUNCTION                                                                                                            //
/****************************************************************************************************************************/

// Loop Function
void loop() {
   b43b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b43b8:	ed2d 8b02 	vpush	{d8}

  // If we are waiting to take a measurement
  if (state == 0) {
   b43bc:	4e6b      	ldr	r6, [pc, #428]	; (b456c <loop+0x1b8>)
   b43be:	7833      	ldrb	r3, [r6, #0]
void loop() {
   b43c0:	b09d      	sub	sp, #116	; 0x74
  if (state == 0) {
   b43c2:	2b00      	cmp	r3, #0
   b43c4:	d165      	bne.n	b4492 <loop+0xde>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b43c6:	4b6a      	ldr	r3, [pc, #424]	; (b4570 <loop+0x1bc>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b43c8:	4a6a      	ldr	r2, [pc, #424]	; (b4574 <loop+0x1c0>)
   b43ca:	781b      	ldrb	r3, [r3, #0]
   b43cc:	496a      	ldr	r1, [pc, #424]	; (b4578 <loop+0x1c4>)
   b43ce:	f88d 3000 	strb.w	r3, [sp]
   b43d2:	a818      	add	r0, sp, #96	; 0x60
   b43d4:	233c      	movs	r3, #60	; 0x3c
   b43d6:	f002 f879 	bl	b64cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      ~__shared_ptr() = default;
   b43da:	a819      	add	r0, sp, #100	; 0x64
   b43dc:	f7ff ffb4 	bl	b4348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    // Retrieve newest parameters from cloud
    Particle.publish("Update", "dummy_data", PRIVATE);

    // Update current time
    current_time = float(Time.hour()) + float(Time.minute()) / 60.00;
   b43e0:	f001 fe80 	bl	b60e4 <_ZN9TimeClass4hourEv>
   b43e4:	ee08 0a10 	vmov	s16, r0
   b43e8:	f001 fe88 	bl	b60fc <_ZN9TimeClass6minuteEv>
   b43ec:	ee07 0a90 	vmov	s15, r0
   b43f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b43f4:	ee17 0a90 	vmov	r0, s15
   b43f8:	f002 fe98 	bl	b712c <__aeabi_f2d>
   b43fc:	4b5f      	ldr	r3, [pc, #380]	; (b457c <loop+0x1c8>)
   b43fe:	2200      	movs	r2, #0
   b4400:	f003 f816 	bl	b7430 <__aeabi_ddiv>
   b4404:	eef8 7ac8 	vcvt.f32.s32	s15, s16
   b4408:	4604      	mov	r4, r0
   b440a:	ee17 0a90 	vmov	r0, s15
   b440e:	460d      	mov	r5, r1
   b4410:	f002 fe8c 	bl	b712c <__aeabi_f2d>
   b4414:	460b      	mov	r3, r1
   b4416:	4602      	mov	r2, r0
   b4418:	4629      	mov	r1, r5
   b441a:	4620      	mov	r0, r4
   b441c:	f002 fd28 	bl	b6e70 <__adddf3>
   b4420:	f003 f9d4 	bl	b77cc <__aeabi_d2f>
   b4424:	ee07 0a90 	vmov	s15, r0
    if(current_time < 0) {
   b4428:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b442c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      current_time += 24.0;
   b4430:	bf44      	itt	mi
   b4432:	eeb3 7a08 	vmovmi.f32	s14, #56	; 0x41c00000  24.0
   b4436:	ee77 7a87 	vaddmi.f32	s15, s15, s14
   b443a:	4c51      	ldr	r4, [pc, #324]	; (b4580 <loop+0x1cc>)
    }

    // If we are in the acceptable time frame
    if (current_time > constraint_time_lower && current_time < constraint_time_upper) {
   b443c:	4b51      	ldr	r3, [pc, #324]	; (b4584 <loop+0x1d0>)
      current_time += 24.0;
   b443e:	edc4 7a00 	vstr	s15, [r4]
    if (current_time > constraint_time_lower && current_time < constraint_time_upper) {
   b4442:	edd4 7a00 	vldr	s15, [r4]
   b4446:	ed93 7a00 	vldr	s14, [r3]
   b444a:	eef4 7ac7 	vcmpe.f32	s15, s14
   b444e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4452:	dd68      	ble.n	b4526 <loop+0x172>
   b4454:	4b4c      	ldr	r3, [pc, #304]	; (b4588 <loop+0x1d4>)
   b4456:	ed93 7a00 	vldr	s14, [r3]
   b445a:	eef4 7ac7 	vcmpe.f32	s15, s14
   b445e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4462:	d560      	bpl.n	b4526 <loop+0x172>

      // If we've waited enough between measurements
      if (millis() - previous_request >= delay_time) {
   b4464:	4c49      	ldr	r4, [pc, #292]	; (b458c <loop+0x1d8>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4466:	f000 ff3b 	bl	b52e0 <HAL_Timer_Get_Milli_Seconds>
   b446a:	6823      	ldr	r3, [r4, #0]
   b446c:	1ac0      	subs	r0, r0, r3
   b446e:	4b48      	ldr	r3, [pc, #288]	; (b4590 <loop+0x1dc>)
   b4470:	681b      	ldr	r3, [r3, #0]
   b4472:	4298      	cmp	r0, r3
   b4474:	d353      	bcc.n	b451e <loop+0x16a>

        // Transition to measurement state
        state = 1;
   b4476:	2301      	movs	r3, #1
   b4478:	7033      	strb	r3, [r6, #0]
   b447a:	f000 ff31 	bl	b52e0 <HAL_Timer_Get_Milli_Seconds>
        previous_request = millis();
   b447e:	6020      	str	r0, [r4, #0]
        Serial.println("Conditions met, preparing to take a measurement!");
   b4480:	f002 fa66 	bl	b6950 <_Z16_fetch_usbserialv>
   b4484:	4943      	ldr	r1, [pc, #268]	; (b4594 <loop+0x1e0>)
      }
      else {
        Serial.println("Waiting for a measurement, but it hasn't been long enough yet.");
   b4486:	f001 fba0 	bl	b5bca <_ZN5Print7printlnEPKc>
      Serial.println(current_time);
      // Check for updates from Particle cloud
      // Particle.publish("Update", String("dummy_data"), PRIVATE);
    }

    delay(2000);
   b448a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b448e:	f001 fe4b 	bl	b6128 <delay>
  }

  // If we are requesting a measurement
  if (state == 1) {
   b4492:	7833      	ldrb	r3, [r6, #0]
   b4494:	2b01      	cmp	r3, #1
   b4496:	d153      	bne.n	b4540 <loop+0x18c>

    Serial.println("Requesting a measurement - place finger on sensor.");
   b4498:	f002 fa5a 	bl	b6950 <_Z16_fetch_usbserialv>
    d_.color = color;
   b449c:	4c3e      	ldr	r4, [pc, #248]	; (b4598 <loop+0x1e4>)
   b449e:	493f      	ldr	r1, [pc, #252]	; (b459c <loop+0x1e8>)
   b44a0:	f001 fb93 	bl	b5bca <_ZN5Print7printlnEPKc>
   b44a4:	23ff      	movs	r3, #255	; 0xff
   b44a6:	6163      	str	r3, [r4, #20]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b44a8:	7c63      	ldrb	r3, [r4, #17]

    // Enable LED
    blinkLED.setColor(RGB_COLOR_BLUE);
    blinkLED.setPattern(LED_PATTERN_BLINK);
    blinkLED.setSpeed(LED_SPEED_FAST);
   b44aa:	483b      	ldr	r0, [pc, #236]	; (b4598 <loop+0x1e4>)
   b44ac:	2b0f      	cmp	r3, #15
        d_.pattern = pattern;
   b44ae:	bf18      	it	ne
   b44b0:	2302      	movne	r3, #2
   b44b2:	f04f 011e 	mov.w	r1, #30
   b44b6:	bf18      	it	ne
   b44b8:	7463      	strbne	r3, [r4, #17]
   b44ba:	f7ff fe1d 	bl	b40f8 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
   b44be:	7ca2      	ldrb	r2, [r4, #18]
    if (!blinkLED.isActive()) blinkLED.setActive(true);
   b44c0:	f012 0201 	ands.w	r2, r2, #1
   b44c4:	d103      	bne.n	b44ce <loop+0x11a>
    led_set_status_active(&d_, active, nullptr);
   b44c6:	4836      	ldr	r0, [pc, #216]	; (b45a0 <loop+0x1ec>)
   b44c8:	2101      	movs	r1, #1
   b44ca:	f000 fff1 	bl	b54b0 <led_set_status_active>
    d_.flags &= ~LED_STATUS_FLAG_OFF;
   b44ce:	7ca3      	ldrb	r3, [r4, #18]
   b44d0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   b44d4:	74a3      	strb	r3, [r4, #18]
    blinkLED.on();

    // If the user places their finger on the sensor
    if (1) {

      Serial.println("Finger detected on sensor."); 
   b44d6:	f002 fa3b 	bl	b6950 <_Z16_fetch_usbserialv>
   b44da:	4932      	ldr	r1, [pc, #200]	; (b45a4 <loop+0x1f0>)
   b44dc:	f001 fb75 	bl	b5bca <_ZN5Print7printlnEPKc>
      // Transition to measurement state
      state = 2;
   b44e0:	2302      	movs	r3, #2
   b44e2:	7033      	strb	r3, [r6, #0]
  }

  // If we are taking a measurement:
  if (state == 2) {

    bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
   b44e4:	f8df 80d8 	ldr.w	r8, [pc, #216]	; b45c0 <loop+0x20c>
  
    //read the first 300 samples, and determine the signal range
    Serial.println("Entering measurement loop");
    for (byte i = 0 ; i < bufferLength ; i++) {
      while (max30105.available() == false) //do we have new data?
   b44e8:	4c2f      	ldr	r4, [pc, #188]	; (b45a8 <loop+0x1f4>)
      max30105.check(); //Check the sensor for new data

      redBuffer[i] = max30105.getRed();
   b44ea:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b45b8 <loop+0x204>
      irBuffer[i] = max30105.getIR();
   b44ee:	f8df 90cc 	ldr.w	r9, [pc, #204]	; b45bc <loop+0x208>
    bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
   b44f2:	2364      	movs	r3, #100	; 0x64
   b44f4:	f8c8 3000 	str.w	r3, [r8]
    Serial.println("Entering measurement loop");
   b44f8:	f002 fa2a 	bl	b6950 <_Z16_fetch_usbserialv>
   b44fc:	492b      	ldr	r1, [pc, #172]	; (b45ac <loop+0x1f8>)
   b44fe:	f001 fb64 	bl	b5bca <_ZN5Print7printlnEPKc>
   b4502:	2500      	movs	r5, #0
    for (byte i = 0 ; i < bufferLength ; i++) {
   b4504:	f8d8 1000 	ldr.w	r1, [r8]
   b4508:	b2ef      	uxtb	r7, r5
   b450a:	428f      	cmp	r7, r1
   b450c:	da5a      	bge.n	b45c4 <loop+0x210>
      while (max30105.available() == false) //do we have new data?
   b450e:	4620      	mov	r0, r4
   b4510:	f000 fa4c 	bl	b49ac <_ZN8MAX301059availableEv>
   b4514:	b9d0      	cbnz	r0, b454c <loop+0x198>
      max30105.check(); //Check the sensor for new data
   b4516:	4620      	mov	r0, r4
   b4518:	f000 fa90 	bl	b4a3c <_ZN8MAX301055checkEv>
      while (max30105.available() == false) //do we have new data?
   b451c:	e7f7      	b.n	b450e <loop+0x15a>
        Serial.println("Waiting for a measurement, but it hasn't been long enough yet.");
   b451e:	f002 fa17 	bl	b6950 <_Z16_fetch_usbserialv>
   b4522:	4923      	ldr	r1, [pc, #140]	; (b45b0 <loop+0x1fc>)
   b4524:	e7af      	b.n	b4486 <loop+0xd2>
      Serial.print("Waiting for a measurement, but it's not in the acceptable time frame. Current time: ");
   b4526:	f002 fa13 	bl	b6950 <_Z16_fetch_usbserialv>
   b452a:	4922      	ldr	r1, [pc, #136]	; (b45b4 <loop+0x200>)
   b452c:	f001 fb3a 	bl	b5ba4 <_ZN5Print5printEPKc>
      Serial.println(current_time);
   b4530:	f002 fa0e 	bl	b6950 <_Z16_fetch_usbserialv>
   b4534:	ed94 0a00 	vldr	s0, [r4]
   b4538:	2102      	movs	r1, #2
   b453a:	f001 fc42 	bl	b5dc2 <_ZN5Print7printlnEfi>
   b453e:	e7a4      	b.n	b448a <loop+0xd6>
  if (state == 2) {
   b4540:	2b02      	cmp	r3, #2
   b4542:	d0cf      	beq.n	b44e4 <loop+0x130>
    }

  }

  // If we are posting data to the server
  if (state == 3) {
   b4544:	2b03      	cmp	r3, #3
   b4546:	f040 813c 	bne.w	b47c2 <loop+0x40e>
   b454a:	e059      	b.n	b4600 <loop+0x24c>
      redBuffer[i] = max30105.getRed();
   b454c:	4620      	mov	r0, r4
   b454e:	f000 fb39 	bl	b4bc4 <_ZN8MAX301056getRedEv>
   b4552:	f82a 0017 	strh.w	r0, [sl, r7, lsl #1]
      irBuffer[i] = max30105.getIR();
   b4556:	4620      	mov	r0, r4
   b4558:	f000 fb42 	bl	b4be0 <_ZN8MAX301055getIREv>
   b455c:	f829 0017 	strh.w	r0, [r9, r7, lsl #1]
      max30105.nextSample(); //We're finished with this sample so move to next sample
   b4560:	4620      	mov	r0, r4
   b4562:	f000 fa2d 	bl	b49c0 <_ZN8MAX3010510nextSampleEv>
    for (byte i = 0 ; i < bufferLength ; i++) {
   b4566:	3501      	adds	r5, #1
   b4568:	e7cc      	b.n	b4504 <loop+0x150>
   b456a:	bf00      	nop
   b456c:	2003e144 	.word	0x2003e144
   b4570:	2003df61 	.word	0x2003df61
   b4574:	000b99bc 	.word	0x000b99bc
   b4578:	000b999f 	.word	0x000b999f
   b457c:	404e0000 	.word	0x404e0000
   b4580:	2003df88 	.word	0x2003df88
   b4584:	2003dd74 	.word	0x2003dd74
   b4588:	2003dd78 	.word	0x2003dd78
   b458c:	2003e074 	.word	0x2003e074
   b4590:	2003dd7c 	.word	0x2003dd7c
   b4594:	000b99c7 	.word	0x000b99c7
   b4598:	2003df64 	.word	0x2003df64
   b459c:	000b9a8c 	.word	0x000b9a8c
   b45a0:	2003df68 	.word	0x2003df68
   b45a4:	000b9abf 	.word	0x000b9abf
   b45a8:	2003e06c 	.word	0x2003e06c
   b45ac:	000b9ada 	.word	0x000b9ada
   b45b0:	000b99f8 	.word	0x000b99f8
   b45b4:	000b9a37 	.word	0x000b9a37
   b45b8:	2003e078 	.word	0x2003e078
   b45bc:	2003dfa4 	.word	0x2003dfa4
   b45c0:	2003df84 	.word	0x2003df84
    maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
   b45c4:	4fbd      	ldr	r7, [pc, #756]	; (b48bc <loop+0x508>)
   b45c6:	4bbe      	ldr	r3, [pc, #760]	; (b48c0 <loop+0x50c>)
   b45c8:	9302      	str	r3, [sp, #8]
   b45ca:	4cbe      	ldr	r4, [pc, #760]	; (b48c4 <loop+0x510>)
   b45cc:	4bbe      	ldr	r3, [pc, #760]	; (b48c8 <loop+0x514>)
   b45ce:	9300      	str	r3, [sp, #0]
   b45d0:	4abe      	ldr	r2, [pc, #760]	; (b48cc <loop+0x518>)
   b45d2:	48bf      	ldr	r0, [pc, #764]	; (b48d0 <loop+0x51c>)
   b45d4:	9401      	str	r4, [sp, #4]
   b45d6:	463b      	mov	r3, r7
   b45d8:	f000 fd34 	bl	b5044 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_>
    if ((50 < spo2) && (spo2 < 101) && (30 < heartRate) && (heartRate < 300)) {
   b45dc:	683b      	ldr	r3, [r7, #0]
   b45de:	3b33      	subs	r3, #51	; 0x33
   b45e0:	2b31      	cmp	r3, #49	; 0x31
   b45e2:	f200 80d7 	bhi.w	b4794 <loop+0x3e0>
   b45e6:	6823      	ldr	r3, [r4, #0]
   b45e8:	3b1f      	subs	r3, #31
   b45ea:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
   b45ee:	f200 80d1 	bhi.w	b4794 <loop+0x3e0>
      Serial.println("Valid measurement, sending data.");
   b45f2:	f002 f9ad 	bl	b6950 <_Z16_fetch_usbserialv>
   b45f6:	49b7      	ldr	r1, [pc, #732]	; (b48d4 <loop+0x520>)
   b45f8:	f001 fae7 	bl	b5bca <_ZN5Print7printlnEPKc>
      state = 3;
   b45fc:	2303      	movs	r3, #3
   b45fe:	7033      	strb	r3, [r6, #0]

      String send_data = String("{ \"beat\": \"") + String(heartRate) + "\"" + ", \"ox\": \"" + String(spo2) + "\"" + ", \"time\": \"" + String(Time.format(Time.now(), TIME_FORMAT_ISO8601_FULL)) + "\"}";
   b4600:	49b5      	ldr	r1, [pc, #724]	; (b48d8 <loop+0x524>)
   b4602:	4fb6      	ldr	r7, [pc, #728]	; (b48dc <loop+0x528>)
   b4604:	a808      	add	r0, sp, #32
   b4606:	f001 f9e4 	bl	b59d2 <_ZN6StringC1EPK19__FlashStringHelper>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b460a:	a908      	add	r1, sp, #32
   b460c:	a810      	add	r0, sp, #64	; 0x40
   b460e:	f001 fa03 	bl	b5a18 <_ZN6StringC1ERKS_>
   b4612:	4bac      	ldr	r3, [pc, #688]	; (b48c4 <loop+0x510>)
   b4614:	220a      	movs	r2, #10
   b4616:	6819      	ldr	r1, [r3, #0]
   b4618:	a80c      	add	r0, sp, #48	; 0x30
   b461a:	f001 fa2d 	bl	b5a78 <_ZN6StringC1Elh>
   b461e:	a90c      	add	r1, sp, #48	; 0x30
   b4620:	a810      	add	r0, sp, #64	; 0x40
   b4622:	f001 fa53 	bl	b5acc <_ZplRK15StringSumHelperRK6String>
   b4626:	49ae      	ldr	r1, [pc, #696]	; (b48e0 <loop+0x52c>)
   b4628:	f001 fa5c 	bl	b5ae4 <_ZplRK15StringSumHelperPKc>
   b462c:	49ad      	ldr	r1, [pc, #692]	; (b48e4 <loop+0x530>)
   b462e:	f001 fa59 	bl	b5ae4 <_ZplRK15StringSumHelperPKc>
   b4632:	4ba2      	ldr	r3, [pc, #648]	; (b48bc <loop+0x508>)
   b4634:	220a      	movs	r2, #10
   b4636:	6819      	ldr	r1, [r3, #0]
   b4638:	4604      	mov	r4, r0
   b463a:	a814      	add	r0, sp, #80	; 0x50
   b463c:	f001 fa1c 	bl	b5a78 <_ZN6StringC1Elh>
   b4640:	a914      	add	r1, sp, #80	; 0x50
   b4642:	4620      	mov	r0, r4
   b4644:	f001 fa42 	bl	b5acc <_ZplRK15StringSumHelperRK6String>
   b4648:	49a5      	ldr	r1, [pc, #660]	; (b48e0 <loop+0x52c>)
   b464a:	f001 fa4b 	bl	b5ae4 <_ZplRK15StringSumHelperPKc>
   b464e:	49a6      	ldr	r1, [pc, #664]	; (b48e8 <loop+0x534>)
   b4650:	f001 fa48 	bl	b5ae4 <_ZplRK15StringSumHelperPKc>
   b4654:	4604      	mov	r4, r0
   b4656:	f001 fd34 	bl	b60c2 <_ZN9TimeClass3nowEv>
   b465a:	4ba4      	ldr	r3, [pc, #656]	; (b48ec <loop+0x538>)
   b465c:	49a4      	ldr	r1, [pc, #656]	; (b48f0 <loop+0x53c>)
   b465e:	681b      	ldr	r3, [r3, #0]
   b4660:	9300      	str	r3, [sp, #0]
   b4662:	4602      	mov	r2, r0
   b4664:	17c3      	asrs	r3, r0, #31
   b4666:	a818      	add	r0, sp, #96	; 0x60
   b4668:	f001 fccc 	bl	b6004 <_ZN9TimeClass6formatExPKc>
   b466c:	a918      	add	r1, sp, #96	; 0x60
   b466e:	4620      	mov	r0, r4
   b4670:	f001 fa2c 	bl	b5acc <_ZplRK15StringSumHelperRK6String>
   b4674:	499f      	ldr	r1, [pc, #636]	; (b48f4 <loop+0x540>)
   b4676:	4ca0      	ldr	r4, [pc, #640]	; (b48f8 <loop+0x544>)
   b4678:	f001 fa34 	bl	b5ae4 <_ZplRK15StringSumHelperPKc>
   b467c:	4601      	mov	r1, r0
   b467e:	a804      	add	r0, sp, #16
   b4680:	f001 f9ca 	bl	b5a18 <_ZN6StringC1ERKS_>
   b4684:	a818      	add	r0, sp, #96	; 0x60
   b4686:	f001 f959 	bl	b593c <_ZN6StringD1Ev>
   b468a:	a814      	add	r0, sp, #80	; 0x50
   b468c:	f001 f956 	bl	b593c <_ZN6StringD1Ev>
   b4690:	a80c      	add	r0, sp, #48	; 0x30
   b4692:	f001 f953 	bl	b593c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4696:	a810      	add	r0, sp, #64	; 0x40
   b4698:	f001 f950 	bl	b593c <_ZN6StringD1Ev>
   b469c:	a808      	add	r0, sp, #32
   b469e:	f001 f94d 	bl	b593c <_ZN6StringD1Ev>
      bool success = Particle.publish("Reading", String(send_data), PRIVATE);
   b46a2:	a904      	add	r1, sp, #16
   b46a4:	a818      	add	r0, sp, #96	; 0x60
   b46a6:	f001 f9b7 	bl	b5a18 <_ZN6StringC1ERKS_>
   b46aa:	4b94      	ldr	r3, [pc, #592]	; (b48fc <loop+0x548>)
   b46ac:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b46ae:	781b      	ldrb	r3, [r3, #0]
   b46b0:	4993      	ldr	r1, [pc, #588]	; (b4900 <loop+0x54c>)
   b46b2:	f88d 3000 	strb.w	r3, [sp]
   b46b6:	a814      	add	r0, sp, #80	; 0x50
   b46b8:	233c      	movs	r3, #60	; 0x3c
   b46ba:	f001 ff07 	bl	b64cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    ResultT result(ResultT defaultValue) const {
        return this->p_->result(std::move(defaultValue));
    }

    operator ResultT() const {
        return result();
   b46be:	a814      	add	r0, sp, #80	; 0x50
   b46c0:	f7ff fe58 	bl	b4374 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>
   b46c4:	4605      	mov	r5, r0
   b46c6:	a815      	add	r0, sp, #84	; 0x54
   b46c8:	f7ff fe3e 	bl	b4348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b46cc:	a818      	add	r0, sp, #96	; 0x60
   b46ce:	f001 f935 	bl	b593c <_ZN6StringD1Ev>
      Serial.println(send_data);
   b46d2:	f002 f93d 	bl	b6950 <_Z16_fetch_usbserialv>
   b46d6:	9904      	ldr	r1, [sp, #16]
   b46d8:	f001 fa77 	bl	b5bca <_ZN5Print7printlnEPKc>

      if (success) {
   b46dc:	2d00      	cmp	r5, #0
   b46de:	f000 80b5 	beq.w	b484c <loop+0x498>
        // Transition to wait state
        state = 0;
   b46e2:	2300      	movs	r3, #0
   b46e4:	7033      	strb	r3, [r6, #0]

        // Update LED
        blinkLED.setColor(RGB_COLOR_GREEN);
        blinkLED.setSpeed(LED_SPEED_FAST);
   b46e6:	211e      	movs	r1, #30
    d_.color = color;
   b46e8:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   b46ec:	4620      	mov	r0, r4
   b46ee:	6163      	str	r3, [r4, #20]
   b46f0:	f7ff fd02 	bl	b40f8 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b46f4:	7c63      	ldrb	r3, [r4, #17]
        // Try to send backed up data
        uint8_t temp_storage = stored_data.number_stored;
        for (uint8_t i = 0; i < temp_storage; i++) {

          // If data is less than 24 hours old
          if ((millis() - stored_data.when_stored[i]) < 24*60*60*1000) {
   b46f6:	f8df 9230 	ldr.w	r9, [pc, #560]	; b4928 <loop+0x574>
              Serial.print("Sent stored point: ");
              Serial.println(stored_data.buffer[i]);
            }
          }
          else {
            Serial.println("Stored data point too old - not sent.");
   b46fa:	f8df a230 	ldr.w	sl, [pc, #560]	; b492c <loop+0x578>
   b46fe:	f8df b230 	ldr.w	fp, [pc, #560]	; b4930 <loop+0x57c>
   b4702:	2b0f      	cmp	r3, #15
        d_.pattern = pattern;
   b4704:	bf18      	it	ne
   b4706:	2302      	movne	r3, #2
        delay(2000);
   b4708:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b470c:	bf18      	it	ne
   b470e:	7463      	strbne	r3, [r4, #17]
   b4710:	f001 fd0a 	bl	b6128 <delay>
    d_.color = color;
   b4714:	f44f 437f 	mov.w	r3, #65280	; 0xff00
        blinkLED.setSpeed(LED_SPEED_SLOW);
   b4718:	210a      	movs	r1, #10
   b471a:	4877      	ldr	r0, [pc, #476]	; (b48f8 <loop+0x544>)
   b471c:	6163      	str	r3, [r4, #20]
   b471e:	f7ff fceb 	bl	b40f8 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4722:	7c63      	ldrb	r3, [r4, #17]
   b4724:	2b0f      	cmp	r3, #15
        d_.pattern = pattern;
   b4726:	bf1c      	itt	ne
   b4728:	2303      	movne	r3, #3
   b472a:	7463      	strbne	r3, [r4, #17]
        Serial.println("Data successfully sent.");
   b472c:	f002 f910 	bl	b6950 <_Z16_fetch_usbserialv>
   b4730:	4974      	ldr	r1, [pc, #464]	; (b4904 <loop+0x550>)
   b4732:	4c6a      	ldr	r4, [pc, #424]	; (b48dc <loop+0x528>)
   b4734:	f001 fa49 	bl	b5bca <_ZN5Print7printlnEPKc>
        for (uint8_t i = 0; i < temp_storage; i++) {
   b4738:	f897 61e0 	ldrb.w	r6, [r7, #480]	; 0x1e0
   b473c:	f504 78c0 	add.w	r8, r4, #384	; 0x180
   b4740:	eb07 1606 	add.w	r6, r7, r6, lsl #4
   b4744:	42b4      	cmp	r4, r6
   b4746:	d074      	beq.n	b4832 <loop+0x47e>
   b4748:	f000 fdca 	bl	b52e0 <HAL_Timer_Get_Milli_Seconds>
          if ((millis() - stored_data.when_stored[i]) < 24*60*60*1000) {
   b474c:	f858 3b04 	ldr.w	r3, [r8], #4
   b4750:	1ac0      	subs	r0, r0, r3
   b4752:	4548      	cmp	r0, r9
   b4754:	d869      	bhi.n	b482a <loop+0x476>
            success = success && Particle.publish("Reading", stored_data.buffer[i]);
   b4756:	b1dd      	cbz	r5, b4790 <loop+0x3dc>
   b4758:	f89b 3000 	ldrb.w	r3, [fp]
   b475c:	f88d 3000 	strb.w	r3, [sp]
   b4760:	6822      	ldr	r2, [r4, #0]
   b4762:	4967      	ldr	r1, [pc, #412]	; (b4900 <loop+0x54c>)
   b4764:	233c      	movs	r3, #60	; 0x3c
   b4766:	a818      	add	r0, sp, #96	; 0x60
   b4768:	f001 feb0 	bl	b64cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b476c:	a818      	add	r0, sp, #96	; 0x60
   b476e:	f7ff fe01 	bl	b4374 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>
   b4772:	4605      	mov	r5, r0
   b4774:	a819      	add	r0, sp, #100	; 0x64
   b4776:	f7ff fde7 	bl	b4348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            if (success) {
   b477a:	b14d      	cbz	r5, b4790 <loop+0x3dc>
              Serial.print("Sent stored point: ");
   b477c:	f002 f8e8 	bl	b6950 <_Z16_fetch_usbserialv>
   b4780:	4961      	ldr	r1, [pc, #388]	; (b4908 <loop+0x554>)
   b4782:	f001 fa0f 	bl	b5ba4 <_ZN5Print5printEPKc>
              Serial.println(stored_data.buffer[i]);
   b4786:	f002 f8e3 	bl	b6950 <_Z16_fetch_usbserialv>
   b478a:	6821      	ldr	r1, [r4, #0]
            Serial.println("Stored data point too old - not sent.");
   b478c:	f001 fa1d 	bl	b5bca <_ZN5Print7printlnEPKc>
        for (uint8_t i = 0; i < temp_storage; i++) {
   b4790:	3410      	adds	r4, #16
   b4792:	e7d7      	b.n	b4744 <loop+0x390>
   b4794:	f000 fda4 	bl	b52e0 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - previous_request > 600000) {
   b4798:	4b5c      	ldr	r3, [pc, #368]	; (b490c <loop+0x558>)
   b479a:	681b      	ldr	r3, [r3, #0]
   b479c:	1ac0      	subs	r0, r0, r3
   b479e:	4b5c      	ldr	r3, [pc, #368]	; (b4910 <loop+0x55c>)
   b47a0:	4298      	cmp	r0, r3
   b47a2:	d913      	bls.n	b47cc <loop+0x418>
    d_.color = color;
   b47a4:	4c54      	ldr	r4, [pc, #336]	; (b48f8 <loop+0x544>)
   b47a6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
      blinkLED.setSpeed(LED_SPEED_SLOW);
   b47aa:	210a      	movs	r1, #10
   b47ac:	4620      	mov	r0, r4
   b47ae:	6163      	str	r3, [r4, #20]
   b47b0:	f7ff fca2 	bl	b40f8 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b47b4:	7c63      	ldrb	r3, [r4, #17]
   b47b6:	2b0f      	cmp	r3, #15
        d_.pattern = pattern;
   b47b8:	bf1c      	itt	ne
   b47ba:	2303      	movne	r3, #3
   b47bc:	7463      	strbne	r3, [r4, #17]
      state = 0;
   b47be:	2300      	movs	r3, #0
      state = 2; // Try getting a reading again
   b47c0:	7033      	strb	r3, [r6, #0]
        blinkLED.setPattern(LED_PATTERN_FADE);
      }

  }

   b47c2:	b01d      	add	sp, #116	; 0x74
   b47c4:	ecbd 8b02 	vpop	{d8}
   b47c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      Serial.print("Not a valid measurement. HR: ");
   b47cc:	f002 f8c0 	bl	b6950 <_Z16_fetch_usbserialv>
   b47d0:	4950      	ldr	r1, [pc, #320]	; (b4914 <loop+0x560>)
   b47d2:	f001 f9e7 	bl	b5ba4 <_ZN5Print5printEPKc>
      Serial.print(heartRate);
   b47d6:	f002 f8bb 	bl	b6950 <_Z16_fetch_usbserialv>
   b47da:	6824      	ldr	r4, [r4, #0]
        if (n < 0 && base == 10) {
   b47dc:	2c00      	cmp	r4, #0
   b47de:	4605      	mov	r5, r0
   b47e0:	da1f      	bge.n	b4822 <loop+0x46e>
            t = print('-');
   b47e2:	212d      	movs	r1, #45	; 0x2d
   b47e4:	f001 f9e2 	bl	b5bac <_ZN5Print5printEc>
            val = -n;
   b47e8:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b47ea:	220a      	movs	r2, #10
   b47ec:	4628      	mov	r0, r5
   b47ee:	f001 f9f6 	bl	b5bde <_ZN5Print11printNumberEmh>
      Serial.print(" SPO2: ");
   b47f2:	f002 f8ad 	bl	b6950 <_Z16_fetch_usbserialv>
   b47f6:	4948      	ldr	r1, [pc, #288]	; (b4918 <loop+0x564>)
   b47f8:	f001 f9d4 	bl	b5ba4 <_ZN5Print5printEPKc>
      Serial.println(spo2);
   b47fc:	f002 f8a8 	bl	b6950 <_Z16_fetch_usbserialv>
   b4800:	683c      	ldr	r4, [r7, #0]
        if (n < 0 && base == 10) {
   b4802:	2c00      	cmp	r4, #0
   b4804:	4605      	mov	r5, r0
   b4806:	da0e      	bge.n	b4826 <loop+0x472>
            t = print('-');
   b4808:	212d      	movs	r1, #45	; 0x2d
   b480a:	f001 f9cf 	bl	b5bac <_ZN5Print5printEc>
            val = -n;
   b480e:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b4810:	220a      	movs	r2, #10
   b4812:	4628      	mov	r0, r5
   b4814:	f001 f9e3 	bl	b5bde <_ZN5Print11printNumberEmh>
        n += println();
   b4818:	4628      	mov	r0, r5
   b481a:	f001 f9ca 	bl	b5bb2 <_ZN5Print7printlnEv>
      state = 2; // Try getting a reading again
   b481e:	2302      	movs	r3, #2
   b4820:	e7ce      	b.n	b47c0 <loop+0x40c>
            val = n;
   b4822:	4621      	mov	r1, r4
   b4824:	e7e1      	b.n	b47ea <loop+0x436>
   b4826:	4621      	mov	r1, r4
   b4828:	e7f2      	b.n	b4810 <loop+0x45c>
            Serial.println("Stored data point too old - not sent.");
   b482a:	f002 f891 	bl	b6950 <_Z16_fetch_usbserialv>
   b482e:	4651      	mov	r1, sl
   b4830:	e7ac      	b.n	b478c <loop+0x3d8>
        if (success) {
   b4832:	b13d      	cbz	r5, b4844 <loop+0x490>
          stored_data.number_stored = 0;
   b4834:	2300      	movs	r3, #0
   b4836:	f887 31e0 	strb.w	r3, [r7, #480]	; 0x1e0
          Serial.println("All stored data points sent.");
   b483a:	f002 f889 	bl	b6950 <_Z16_fetch_usbserialv>
   b483e:	4937      	ldr	r1, [pc, #220]	; (b491c <loop+0x568>)
   b4840:	f001 f9c3 	bl	b5bca <_ZN5Print7printlnEPKc>
      String send_data = String("{ \"beat\": \"") + String(heartRate) + "\"" + ", \"ox\": \"" + String(spo2) + "\"" + ", \"time\": \"" + String(Time.format(Time.now(), TIME_FORMAT_ISO8601_FULL)) + "\"}";
   b4844:	a804      	add	r0, sp, #16
   b4846:	f001 f879 	bl	b593c <_ZN6StringD1Ev>
   b484a:	e7ba      	b.n	b47c2 <loop+0x40e>
        Serial.println("No internet - saving data for later.");
   b484c:	f002 f880 	bl	b6950 <_Z16_fetch_usbserialv>
   b4850:	4933      	ldr	r1, [pc, #204]	; (b4920 <loop+0x56c>)
   b4852:	f001 f9ba 	bl	b5bca <_ZN5Print7printlnEPKc>
        stored_data.buffer[stored_data.number_stored] = send_data;
   b4856:	f897 01e0 	ldrb.w	r0, [r7, #480]	; 0x1e0
   b485a:	a904      	add	r1, sp, #16
   b485c:	eb07 1000 	add.w	r0, r7, r0, lsl #4
   b4860:	f001 f8cb 	bl	b59fa <_ZN6StringaSERKS_>
        stored_data.when_stored[stored_data.number_stored] = millis();
   b4864:	f897 81e0 	ldrb.w	r8, [r7, #480]	; 0x1e0
   b4868:	f000 fd3a 	bl	b52e0 <HAL_Timer_Get_Milli_Seconds>
        stored_data.number_stored++;
   b486c:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
        state = 0;
   b4870:	7035      	strb	r5, [r6, #0]
        stored_data.when_stored[stored_data.number_stored] = millis();
   b4872:	f108 0860 	add.w	r8, r8, #96	; 0x60
        stored_data.number_stored++;
   b4876:	3301      	adds	r3, #1
        blinkLED.setSpeed(LED_SPEED_FAST);
   b4878:	211e      	movs	r1, #30
        stored_data.when_stored[stored_data.number_stored] = millis();
   b487a:	f847 0028 	str.w	r0, [r7, r8, lsl #2]
        stored_data.number_stored++;
   b487e:	f887 31e0 	strb.w	r3, [r7, #480]	; 0x1e0
        blinkLED.setSpeed(LED_SPEED_FAST);
   b4882:	4620      	mov	r0, r4
    d_.color = color;
   b4884:	4b27      	ldr	r3, [pc, #156]	; (b4924 <loop+0x570>)
   b4886:	6163      	str	r3, [r4, #20]
   b4888:	f7ff fc36 	bl	b40f8 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b488c:	7c63      	ldrb	r3, [r4, #17]
   b488e:	2b0f      	cmp	r3, #15
        d_.pattern = pattern;
   b4890:	bf18      	it	ne
   b4892:	2302      	movne	r3, #2
        delay(2000);
   b4894:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4898:	bf18      	it	ne
   b489a:	7463      	strbne	r3, [r4, #17]
   b489c:	f001 fc44 	bl	b6128 <delay>
    d_.color = color;
   b48a0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
        blinkLED.setSpeed(LED_SPEED_SLOW);
   b48a4:	4814      	ldr	r0, [pc, #80]	; (b48f8 <loop+0x544>)
   b48a6:	6163      	str	r3, [r4, #20]
   b48a8:	210a      	movs	r1, #10
   b48aa:	f7ff fc25 	bl	b40f8 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b48ae:	7c63      	ldrb	r3, [r4, #17]
   b48b0:	2b0f      	cmp	r3, #15
        d_.pattern = pattern;
   b48b2:	bf1c      	itt	ne
   b48b4:	2303      	movne	r3, #3
   b48b6:	7463      	strbne	r3, [r4, #17]
   b48b8:	e7c4      	b.n	b4844 <loop+0x490>
   b48ba:	bf00      	nop
   b48bc:	2003e140 	.word	0x2003e140
   b48c0:	2003e32c 	.word	0x2003e32c
   b48c4:	2003dfa0 	.word	0x2003dfa0
   b48c8:	2003e32d 	.word	0x2003e32d
   b48cc:	2003e078 	.word	0x2003e078
   b48d0:	2003dfa4 	.word	0x2003dfa4
   b48d4:	000b9af4 	.word	0x000b9af4
   b48d8:	000b9b3b 	.word	0x000b9b3b
   b48dc:	2003e148 	.word	0x2003e148
   b48e0:	000b9b5b 	.word	0x000b9b5b
   b48e4:	000b9b47 	.word	0x000b9b47
   b48e8:	000b9b51 	.word	0x000b9b51
   b48ec:	2003dd84 	.word	0x2003dd84
   b48f0:	2003e6a4 	.word	0x2003e6a4
   b48f4:	000b9b5d 	.word	0x000b9b5d
   b48f8:	2003df64 	.word	0x2003df64
   b48fc:	2003df61 	.word	0x2003df61
   b4900:	000b99b4 	.word	0x000b99b4
   b4904:	000b9b60 	.word	0x000b9b60
   b4908:	000b9b78 	.word	0x000b9b78
   b490c:	2003e074 	.word	0x2003e074
   b4910:	000927c0 	.word	0x000927c0
   b4914:	000b9b15 	.word	0x000b9b15
   b4918:	000b9b33 	.word	0x000b9b33
   b491c:	000b9bb2 	.word	0x000b9bb2
   b4920:	000b9bcf 	.word	0x000b9bcf
   b4924:	00ffff00 	.word	0x00ffff00
   b4928:	05265bff 	.word	0x05265bff
   b492c:	000b9b8c 	.word	0x000b9b8c
   b4930:	2003df60 	.word	0x2003df60

000b4934 <_GLOBAL__sub_I_max30105>:
        val_(val) {
   b4934:	4b15      	ldr	r3, [pc, #84]	; (b498c <_GLOBAL__sub_I_max30105+0x58>)
   b4936:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4938:	2400      	movs	r4, #0
   b493a:	701c      	strb	r4, [r3, #0]
   b493c:	4b14      	ldr	r3, [pc, #80]	; (b4990 <_GLOBAL__sub_I_max30105+0x5c>)
MAX30105 max30105;                    // Sensor object
   b493e:	4815      	ldr	r0, [pc, #84]	; (b4994 <_GLOBAL__sub_I_max30105+0x60>)
struct stored_data {                  // Struct to store buffered data
   b4940:	4d15      	ldr	r5, [pc, #84]	; (b4998 <_GLOBAL__sub_I_max30105+0x64>)
   b4942:	4e16      	ldr	r6, [pc, #88]	; (b499c <_GLOBAL__sub_I_max30105+0x68>)
   b4944:	2201      	movs	r2, #1
   b4946:	701a      	strb	r2, [r3, #0]
MAX30105 max30105;                    // Sensor object
   b4948:	f000 f82e 	bl	b49a8 <_ZN8MAX30105C1Ev>
String data = String(10);             // Data to be sent to server
   b494c:	220a      	movs	r2, #10
   b494e:	4814      	ldr	r0, [pc, #80]	; (b49a0 <_GLOBAL__sub_I_max30105+0x6c>)
   b4950:	4611      	mov	r1, r2
   b4952:	f001 f87e 	bl	b5a52 <_ZN6StringC1Eih>
struct stored_data {                  // Struct to store buffered data
   b4956:	1928      	adds	r0, r5, r4
   b4958:	4631      	mov	r1, r6
   b495a:	3410      	adds	r4, #16
   b495c:	f001 f839 	bl	b59d2 <_ZN6StringC1EPK19__FlashStringHelper>
   b4960:	f5b4 7fc0 	cmp.w	r4, #384	; 0x180
   b4964:	d1f7      	bne.n	b4956 <_GLOBAL__sub_I_max30105+0x22>
   b4966:	2200      	movs	r2, #0
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b4968:	211e      	movs	r1, #30
   b496a:	2002      	movs	r0, #2
   b496c:	f885 21e0 	strb.w	r2, [r5, #480]	; 0x1e0
   b4970:	f000 fdd8 	bl	b5524 <led_pattern_period>
   b4974:	221e      	movs	r2, #30
   b4976:	2101      	movs	r1, #1
   b4978:	e9cd 2100 	strd	r2, r1, [sp]
   b497c:	4603      	mov	r3, r0
   b497e:	2202      	movs	r2, #2
   b4980:	21ff      	movs	r1, #255	; 0xff
   b4982:	4808      	ldr	r0, [pc, #32]	; (b49a4 <_GLOBAL__sub_I_max30105+0x70>)
   b4984:	f000 ff16 	bl	b57b4 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
   b4988:	b002      	add	sp, #8
   b498a:	bd70      	pop	{r4, r5, r6, pc}
   b498c:	2003df60 	.word	0x2003df60
   b4990:	2003df61 	.word	0x2003df61
   b4994:	2003e06c 	.word	0x2003e06c
   b4998:	2003e148 	.word	0x2003e148
   b499c:	000b9e88 	.word	0x000b9e88
   b49a0:	2003df8c 	.word	0x2003df8c
   b49a4:	2003df64 	.word	0x2003df64

000b49a8 <_ZN8MAX30105C1Ev>:
  byte tail;
} sense; //This is our circular buffer of readings from the sensor

MAX30105::MAX30105() {
  // Constructor
}
   b49a8:	4770      	bx	lr
	...

000b49ac <_ZN8MAX301059availableEv>:
//

//Tell caller how many samples are available
uint8_t MAX30105::available(void)
{
  uint8_t numberOfSamples = sense.head - sense.tail;
   b49ac:	4b03      	ldr	r3, [pc, #12]	; (b49bc <_ZN8MAX301059availableEv+0x10>)
   b49ae:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
   b49b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   b49b6:	1ac0      	subs	r0, r0, r3
  if (numberOfSamples < 0) numberOfSamples += STORAGE_SIZE;

  return (numberOfSamples);
}
   b49b8:	b2c0      	uxtb	r0, r0
   b49ba:	4770      	bx	lr
   b49bc:	2003e330 	.word	0x2003e330

000b49c0 <_ZN8MAX3010510nextSampleEv>:
  uint8_t numberOfSamples = sense.head - sense.tail;
   b49c0:	4a06      	ldr	r2, [pc, #24]	; (b49dc <_ZN8MAX3010510nextSampleEv+0x1c>)
   b49c2:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
}

//Advance the tail
void MAX30105::nextSample(void)
{
  if(available()) //Only advance the tail if new data is available
   b49c6:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
   b49ca:	4299      	cmp	r1, r3
  {
    sense.tail++;
   b49cc:	bf1e      	ittt	ne
   b49ce:	3301      	addne	r3, #1
    sense.tail %= STORAGE_SIZE; //Wrap condition
   b49d0:	f003 0303 	andne.w	r3, r3, #3
   b49d4:	f882 3031 	strbne.w	r3, [r2, #49]	; 0x31
  }
}
   b49d8:	4770      	bx	lr
   b49da:	bf00      	nop
   b49dc:	2003e330 	.word	0x2003e330

000b49e0 <_ZN8MAX3010513readRegister8Ehh>:
}

//
// Low-level I2C Communication
//
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
   b49e0:	b538      	push	{r3, r4, r5, lr}
   b49e2:	460c      	mov	r4, r1
   b49e4:	4615      	mov	r5, r2

	Wire.beginTransmission(address);
   b49e6:	f002 fa13 	bl	b6e10 <_Z19__fetch_global_Wirev>
   b49ea:	4621      	mov	r1, r4
   b49ec:	f002 f8b8 	bl	b6b60 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(reg);
   b49f0:	f002 fa0e 	bl	b6e10 <_Z19__fetch_global_Wirev>
   b49f4:	6803      	ldr	r3, [r0, #0]
   b49f6:	4629      	mov	r1, r5
   b49f8:	689b      	ldr	r3, [r3, #8]
   b49fa:	4798      	blx	r3
	Wire.endTransmission();
   b49fc:	f002 fa08 	bl	b6e10 <_Z19__fetch_global_Wirev>
   b4a00:	f002 f8b6 	bl	b6b70 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(address, 1);
   b4a04:	f002 fa04 	bl	b6e10 <_Z19__fetch_global_Wirev>
   b4a08:	2201      	movs	r2, #1
   b4a0a:	4621      	mov	r1, r4
   b4a0c:	f002 f8a5 	bl	b6b5a <_ZN7TwoWire11requestFromEhj>
	while ( Wire.available() ) // slave may send less than requested
   b4a10:	f002 f9fe 	bl	b6e10 <_Z19__fetch_global_Wirev>
   b4a14:	6803      	ldr	r3, [r0, #0]
   b4a16:	691b      	ldr	r3, [r3, #16]
   b4a18:	4798      	blx	r3
   b4a1a:	b128      	cbz	r0, b4a28 <_ZN8MAX3010513readRegister8Ehh+0x48>
	{
		return(Wire.read()); // receive a byte as a proper uint8_t
   b4a1c:	f002 f9f8 	bl	b6e10 <_Z19__fetch_global_Wirev>
   b4a20:	6803      	ldr	r3, [r0, #0]
   b4a22:	695b      	ldr	r3, [r3, #20]
   b4a24:	4798      	blx	r3
   b4a26:	b2c0      	uxtb	r0, r0
	}

}

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
   b4a28:	bd38      	pop	{r3, r4, r5, pc}

000b4a2a <_ZN8MAX3010515getWritePointerEv>:
  return (readRegister8(MAX30105_ADDRESS, MAX30105_FIFOWRITEPTR));
   b4a2a:	2204      	movs	r2, #4
   b4a2c:	2157      	movs	r1, #87	; 0x57
   b4a2e:	f7ff bfd7 	b.w	b49e0 <_ZN8MAX3010513readRegister8Ehh>

000b4a32 <_ZN8MAX3010514getReadPointerEv>:
  return (readRegister8(MAX30105_ADDRESS, MAX30105_FIFOREADPTR));
   b4a32:	2206      	movs	r2, #6
   b4a34:	2157      	movs	r1, #87	; 0x57
   b4a36:	f7ff bfd3 	b.w	b49e0 <_ZN8MAX3010513readRegister8Ehh>
	...

000b4a3c <_ZN8MAX301055checkEv>:
{
   b4a3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b4a40:	4607      	mov	r7, r0
  byte readPointer = getReadPointer();
   b4a42:	f7ff fff6 	bl	b4a32 <_ZN8MAX3010514getReadPointerEv>
   b4a46:	4604      	mov	r4, r0
  byte writePointer = getWritePointer();
   b4a48:	4638      	mov	r0, r7
   b4a4a:	f7ff ffee 	bl	b4a2a <_ZN8MAX3010515getWritePointerEv>
  if (readPointer != writePointer)
   b4a4e:	4284      	cmp	r4, r0
   b4a50:	f000 809b 	beq.w	b4b8a <_ZN8MAX301055checkEv+0x14e>
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
   b4a54:	1b04      	subs	r4, r0, r4
   b4a56:	bf48      	it	mi
   b4a58:	3420      	addmi	r4, #32
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
   b4a5a:	797e      	ldrb	r6, [r7, #5]
        sense.head %= STORAGE_SIZE; //Wrap condition
   b4a5c:	f8df 8134 	ldr.w	r8, [pc, #308]	; b4b94 <_ZN8MAX301055checkEv+0x158>
    Wire.beginTransmission(MAX30105_ADDRESS);
   b4a60:	f002 f9d6 	bl	b6e10 <_Z19__fetch_global_Wirev>
   b4a64:	2157      	movs	r1, #87	; 0x57
   b4a66:	f002 f87b 	bl	b6b60 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write(MAX30105_FIFODATA);
   b4a6a:	f002 f9d1 	bl	b6e10 <_Z19__fetch_global_Wirev>
   b4a6e:	6803      	ldr	r3, [r0, #0]
   b4a70:	2107      	movs	r1, #7
   b4a72:	689b      	ldr	r3, [r3, #8]
   b4a74:	4798      	blx	r3
    Wire.endTransmission();
   b4a76:	f002 f9cb 	bl	b6e10 <_Z19__fetch_global_Wirev>
   b4a7a:	f002 f879 	bl	b6b70 <_ZN7TwoWire15endTransmissionEv>
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
   b4a7e:	4366      	muls	r6, r4
   b4a80:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    while (bytesLeftToRead > 0)
   b4a84:	2e00      	cmp	r6, #0
   b4a86:	f340 8081 	ble.w	b4b8c <_ZN8MAX301055checkEv+0x150>
      if (toGet > I2C_BUFFER_LENGTH)
   b4a8a:	2e20      	cmp	r6, #32
        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   b4a8c:	bfc3      	ittte	gt
   b4a8e:	797d      	ldrbgt	r5, [r7, #5]
   b4a90:	eb05 0345 	addgt.w	r3, r5, r5, lsl #1
   b4a94:	2520      	movgt	r5, #32
   b4a96:	4635      	movle	r5, r6
   b4a98:	bfc4      	itt	gt
   b4a9a:	fbb5 f5f3 	udivgt	r5, r5, r3
   b4a9e:	435d      	mulgt	r5, r3
      Wire.requestFrom(MAX30105_ADDRESS, toGet);
   b4aa0:	f002 f9b6 	bl	b6e10 <_Z19__fetch_global_Wirev>
   b4aa4:	462a      	mov	r2, r5
   b4aa6:	2157      	movs	r1, #87	; 0x57
   b4aa8:	f002 f857 	bl	b6b5a <_ZN7TwoWire11requestFromEhj>
      bytesLeftToRead -= toGet;
   b4aac:	1b76      	subs	r6, r6, r5
        temp[3] = 0;
   b4aae:	f04f 0900 	mov.w	r9, #0
      while (toGet > 0)
   b4ab2:	2d00      	cmp	r5, #0
   b4ab4:	dde6      	ble.n	b4a84 <_ZN8MAX301055checkEv+0x48>
        sense.head++; //Advance the head of the storage struct
   b4ab6:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
        temp[3] = 0;
   b4aba:	f88d 9007 	strb.w	r9, [sp, #7]
        sense.head++; //Advance the head of the storage struct
   b4abe:	3301      	adds	r3, #1
        sense.head %= STORAGE_SIZE; //Wrap condition
   b4ac0:	f003 0303 	and.w	r3, r3, #3
   b4ac4:	f888 3030 	strb.w	r3, [r8, #48]	; 0x30
        temp[2] = Wire.read();
   b4ac8:	f002 f9a2 	bl	b6e10 <_Z19__fetch_global_Wirev>
   b4acc:	6803      	ldr	r3, [r0, #0]
   b4ace:	695b      	ldr	r3, [r3, #20]
   b4ad0:	4798      	blx	r3
   b4ad2:	f88d 0006 	strb.w	r0, [sp, #6]
        temp[1] = Wire.read();
   b4ad6:	f002 f99b 	bl	b6e10 <_Z19__fetch_global_Wirev>
   b4ada:	6803      	ldr	r3, [r0, #0]
   b4adc:	695b      	ldr	r3, [r3, #20]
   b4ade:	4798      	blx	r3
   b4ae0:	f88d 0005 	strb.w	r0, [sp, #5]
        temp[0] = Wire.read();
   b4ae4:	f002 f994 	bl	b6e10 <_Z19__fetch_global_Wirev>
   b4ae8:	6803      	ldr	r3, [r0, #0]
   b4aea:	695b      	ldr	r3, [r3, #20]
   b4aec:	4798      	blx	r3
   b4aee:	f88d 0004 	strb.w	r0, [sp, #4]
		tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b4af2:	9b01      	ldr	r3, [sp, #4]
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   b4af4:	f898 2030 	ldrb.w	r2, [r8, #48]	; 0x30
		tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b4af8:	f3c3 0311 	ubfx	r3, r3, #0, #18
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   b4afc:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
        if (activeLEDs > 1)
   b4b00:	797b      	ldrb	r3, [r7, #5]
   b4b02:	2b01      	cmp	r3, #1
   b4b04:	d91c      	bls.n	b4b40 <_ZN8MAX301055checkEv+0x104>
          temp[2] = Wire.read();
   b4b06:	f002 f983 	bl	b6e10 <_Z19__fetch_global_Wirev>
   b4b0a:	6803      	ldr	r3, [r0, #0]
   b4b0c:	695b      	ldr	r3, [r3, #20]
   b4b0e:	4798      	blx	r3
   b4b10:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = Wire.read();
   b4b14:	f002 f97c 	bl	b6e10 <_Z19__fetch_global_Wirev>
   b4b18:	6803      	ldr	r3, [r0, #0]
   b4b1a:	695b      	ldr	r3, [r3, #20]
   b4b1c:	4798      	blx	r3
   b4b1e:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = Wire.read();
   b4b22:	f002 f975 	bl	b6e10 <_Z19__fetch_global_Wirev>
   b4b26:	6803      	ldr	r3, [r0, #0]
   b4b28:	695b      	ldr	r3, [r3, #20]
   b4b2a:	4798      	blx	r3
		  sense.IR[sense.head] = tempLong;
   b4b2c:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
          temp[0] = Wire.read();
   b4b30:	f88d 0004 	strb.w	r0, [sp, #4]
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b4b34:	9a01      	ldr	r2, [sp, #4]
		  sense.IR[sense.head] = tempLong;
   b4b36:	3304      	adds	r3, #4
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b4b38:	f3c2 0211 	ubfx	r2, r2, #0, #18
		  sense.IR[sense.head] = tempLong;
   b4b3c:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
        if (activeLEDs > 2)
   b4b40:	797b      	ldrb	r3, [r7, #5]
   b4b42:	2b02      	cmp	r3, #2
   b4b44:	d91c      	bls.n	b4b80 <_ZN8MAX301055checkEv+0x144>
          temp[2] = Wire.read();
   b4b46:	f002 f963 	bl	b6e10 <_Z19__fetch_global_Wirev>
   b4b4a:	6803      	ldr	r3, [r0, #0]
   b4b4c:	695b      	ldr	r3, [r3, #20]
   b4b4e:	4798      	blx	r3
   b4b50:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = Wire.read();
   b4b54:	f002 f95c 	bl	b6e10 <_Z19__fetch_global_Wirev>
   b4b58:	6803      	ldr	r3, [r0, #0]
   b4b5a:	695b      	ldr	r3, [r3, #20]
   b4b5c:	4798      	blx	r3
   b4b5e:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = Wire.read();
   b4b62:	f002 f955 	bl	b6e10 <_Z19__fetch_global_Wirev>
   b4b66:	6803      	ldr	r3, [r0, #0]
   b4b68:	695b      	ldr	r3, [r3, #20]
   b4b6a:	4798      	blx	r3
          sense.green[sense.head] = tempLong;
   b4b6c:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
          temp[0] = Wire.read();
   b4b70:	f88d 0004 	strb.w	r0, [sp, #4]
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b4b74:	9a01      	ldr	r2, [sp, #4]
          sense.green[sense.head] = tempLong;
   b4b76:	3308      	adds	r3, #8
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b4b78:	f3c2 0211 	ubfx	r2, r2, #0, #18
          sense.green[sense.head] = tempLong;
   b4b7c:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
        toGet -= activeLEDs * 3;
   b4b80:	797b      	ldrb	r3, [r7, #5]
   b4b82:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   b4b86:	441d      	add	r5, r3
      while (toGet > 0)
   b4b88:	e793      	b.n	b4ab2 <_ZN8MAX301055checkEv+0x76>
  int numberOfSamples = 0;
   b4b8a:	2400      	movs	r4, #0
}
   b4b8c:	b2a0      	uxth	r0, r4
   b4b8e:	b003      	add	sp, #12
   b4b90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4b94:	2003e330 	.word	0x2003e330

000b4b98 <_ZN8MAX301059safeCheckEh>:
{
   b4b98:	b570      	push	{r4, r5, r6, lr}
   b4b9a:	4605      	mov	r5, r0
   b4b9c:	460e      	mov	r6, r1
   b4b9e:	f000 fb9f 	bl	b52e0 <HAL_Timer_Get_Milli_Seconds>
   b4ba2:	4604      	mov	r4, r0
   b4ba4:	f000 fb9c 	bl	b52e0 <HAL_Timer_Get_Milli_Seconds>
	if(millis() - markTime > maxTimeToCheck) return(false);
   b4ba8:	1b00      	subs	r0, r0, r4
   b4baa:	42b0      	cmp	r0, r6
   b4bac:	d808      	bhi.n	b4bc0 <_ZN8MAX301059safeCheckEh+0x28>
	if(check() == true) //We found new data!
   b4bae:	4628      	mov	r0, r5
   b4bb0:	f7ff ff44 	bl	b4a3c <_ZN8MAX301055checkEv>
   b4bb4:	2801      	cmp	r0, #1
   b4bb6:	d004      	beq.n	b4bc2 <_ZN8MAX301059safeCheckEh+0x2a>
	delay(1);
   b4bb8:	2001      	movs	r0, #1
   b4bba:	f001 fab5 	bl	b6128 <delay>
	if(millis() - markTime > maxTimeToCheck) return(false);
   b4bbe:	e7f1      	b.n	b4ba4 <_ZN8MAX301059safeCheckEh+0xc>
   b4bc0:	2000      	movs	r0, #0
}
   b4bc2:	bd70      	pop	{r4, r5, r6, pc}

000b4bc4 <_ZN8MAX301056getRedEv>:
{
   b4bc4:	b508      	push	{r3, lr}
  if(safeCheck(250))
   b4bc6:	21fa      	movs	r1, #250	; 0xfa
   b4bc8:	f7ff ffe6 	bl	b4b98 <_ZN8MAX301059safeCheckEh>
   b4bcc:	b120      	cbz	r0, b4bd8 <_ZN8MAX301056getRedEv+0x14>
    return (sense.red[sense.head]);
   b4bce:	4b03      	ldr	r3, [pc, #12]	; (b4bdc <_ZN8MAX301056getRedEv+0x18>)
   b4bd0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   b4bd4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
}
   b4bd8:	bd08      	pop	{r3, pc}
   b4bda:	bf00      	nop
   b4bdc:	2003e330 	.word	0x2003e330

000b4be0 <_ZN8MAX301055getIREv>:
{
   b4be0:	b508      	push	{r3, lr}
  if(safeCheck(250))
   b4be2:	21fa      	movs	r1, #250	; 0xfa
   b4be4:	f7ff ffd8 	bl	b4b98 <_ZN8MAX301059safeCheckEh>
   b4be8:	b128      	cbz	r0, b4bf6 <_ZN8MAX301055getIREv+0x16>
    return (sense.IR[sense.head]);
   b4bea:	4a03      	ldr	r2, [pc, #12]	; (b4bf8 <_ZN8MAX301055getIREv+0x18>)
   b4bec:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   b4bf0:	3304      	adds	r3, #4
   b4bf2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
}
   b4bf6:	bd08      	pop	{r3, pc}
   b4bf8:	2003e330 	.word	0x2003e330

000b4bfc <_ZN8MAX3010510readPartIDEv>:
  return readRegister8(MAX30105_ADDRESS, MAX30105_PARTID);
   b4bfc:	22ff      	movs	r2, #255	; 0xff
   b4bfe:	2157      	movs	r1, #87	; 0x57
   b4c00:	f7ff beee 	b.w	b49e0 <_ZN8MAX3010513readRegister8Ehh>

000b4c04 <_ZN8MAX3010514readRevisionIDEv>:
void MAX30105::readRevisionID() {
   b4c04:	b510      	push	{r4, lr}
  revisionID = readRegister8(MAX30105_ADDRESS, MAX30105_REVISIONID);
   b4c06:	22fe      	movs	r2, #254	; 0xfe
   b4c08:	2157      	movs	r1, #87	; 0x57
void MAX30105::readRevisionID() {
   b4c0a:	4604      	mov	r4, r0
  revisionID = readRegister8(MAX30105_ADDRESS, MAX30105_REVISIONID);
   b4c0c:	f7ff fee8 	bl	b49e0 <_ZN8MAX3010513readRegister8Ehh>
   b4c10:	71a0      	strb	r0, [r4, #6]
}
   b4c12:	bd10      	pop	{r4, pc}

000b4c14 <_ZN8MAX301055beginEv>:
boolean MAX30105::begin() {
   b4c14:	b510      	push	{r4, lr}
   b4c16:	4604      	mov	r4, r0
 	Wire.begin();
   b4c18:	f002 f8fa 	bl	b6e10 <_Z19__fetch_global_Wirev>
   b4c1c:	f001 ff6e 	bl	b6afc <_ZN7TwoWire5beginEv>
  if (!readPartID() == MAX_30105_EXPECTEDPARTID) {
   b4c20:	4620      	mov	r0, r4
   b4c22:	f7ff ffeb 	bl	b4bfc <_ZN8MAX3010510readPartIDEv>
  readRevisionID();
   b4c26:	4620      	mov	r0, r4
   b4c28:	f7ff ffec 	bl	b4c04 <_ZN8MAX3010514readRevisionIDEv>
}
   b4c2c:	2001      	movs	r0, #1
   b4c2e:	bd10      	pop	{r4, pc}

000b4c30 <_ZN8MAX3010514writeRegister8Ehhh>:
  Wire.beginTransmission(address);
  Wire.write(reg);
   b4c30:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4c32:	4615      	mov	r5, r2
   b4c34:	461c      	mov	r4, r3
   b4c36:	9101      	str	r1, [sp, #4]
  Wire.write(value);
   b4c38:	f002 f8ea 	bl	b6e10 <_Z19__fetch_global_Wirev>
   b4c3c:	9901      	ldr	r1, [sp, #4]
   b4c3e:	f001 ff8f 	bl	b6b60 <_ZN7TwoWire17beginTransmissionEh>
  Wire.endTransmission();
   b4c42:	f002 f8e5 	bl	b6e10 <_Z19__fetch_global_Wirev>
   b4c46:	6803      	ldr	r3, [r0, #0]
   b4c48:	4629      	mov	r1, r5
   b4c4a:	689b      	ldr	r3, [r3, #8]
   b4c4c:	4798      	blx	r3
}
   b4c4e:	f002 f8df 	bl	b6e10 <_Z19__fetch_global_Wirev>
   b4c52:	6803      	ldr	r3, [r0, #0]
   b4c54:	4621      	mov	r1, r4
   b4c56:	689b      	ldr	r3, [r3, #8]
   b4c58:	4798      	blx	r3
   b4c5a:	f002 f8d9 	bl	b6e10 <_Z19__fetch_global_Wirev>
   b4c5e:	b003      	add	sp, #12
   b4c60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   b4c64:	f001 bf84 	b.w	b6b70 <_ZN7TwoWire15endTransmissionEv>

000b4c68 <_ZN8MAX3010520setPulseAmplitudeRedEh>:
void MAX30105::setPulseAmplitudeRed(uint8_t amplitude) {
   b4c68:	460b      	mov	r3, r1
  writeRegister8(MAX30105_ADDRESS, MAX30105_LED1_PULSEAMP, amplitude);
   b4c6a:	220c      	movs	r2, #12
   b4c6c:	2157      	movs	r1, #87	; 0x57
   b4c6e:	f7ff bfdf 	b.w	b4c30 <_ZN8MAX3010514writeRegister8Ehhh>

000b4c72 <_ZN8MAX3010519setPulseAmplitudeIREh>:
void MAX30105::setPulseAmplitudeIR(uint8_t amplitude) {
   b4c72:	460b      	mov	r3, r1
  writeRegister8(MAX30105_ADDRESS, MAX30105_LED2_PULSEAMP, amplitude);
   b4c74:	220d      	movs	r2, #13
   b4c76:	2157      	movs	r1, #87	; 0x57
   b4c78:	f7ff bfda 	b.w	b4c30 <_ZN8MAX3010514writeRegister8Ehhh>

000b4c7c <_ZN8MAX3010522setPulseAmplitudeGreenEh>:
void MAX30105::setPulseAmplitudeGreen(uint8_t amplitude) {
   b4c7c:	460b      	mov	r3, r1
  writeRegister8(MAX30105_ADDRESS, MAX30105_LED3_PULSEAMP, amplitude);
   b4c7e:	220e      	movs	r2, #14
   b4c80:	2157      	movs	r1, #87	; 0x57
   b4c82:	f7ff bfd5 	b.w	b4c30 <_ZN8MAX3010514writeRegister8Ehhh>

000b4c86 <_ZN8MAX3010526setPulseAmplitudeProximityEh>:
void MAX30105::setPulseAmplitudeProximity(uint8_t amplitude) {
   b4c86:	460b      	mov	r3, r1
  writeRegister8(MAX30105_ADDRESS, MAX30105_LED_PROX_AMP, amplitude);
   b4c88:	2210      	movs	r2, #16
   b4c8a:	2157      	movs	r1, #87	; 0x57
   b4c8c:	f7ff bfd0 	b.w	b4c30 <_ZN8MAX3010514writeRegister8Ehhh>

000b4c90 <_ZN8MAX301059clearFIFOEv>:
void MAX30105::clearFIFO(void) {
   b4c90:	b510      	push	{r4, lr}
  writeRegister8(MAX30105_ADDRESS, MAX30105_FIFOWRITEPTR, 0);
   b4c92:	2300      	movs	r3, #0
void MAX30105::clearFIFO(void) {
   b4c94:	4604      	mov	r4, r0
  writeRegister8(MAX30105_ADDRESS, MAX30105_FIFOWRITEPTR, 0);
   b4c96:	2204      	movs	r2, #4
   b4c98:	2157      	movs	r1, #87	; 0x57
   b4c9a:	f7ff ffc9 	bl	b4c30 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(MAX30105_ADDRESS, MAX30105_FIFOOVERFLOW, 0);
   b4c9e:	4620      	mov	r0, r4
   b4ca0:	2300      	movs	r3, #0
   b4ca2:	2205      	movs	r2, #5
   b4ca4:	2157      	movs	r1, #87	; 0x57
   b4ca6:	f7ff ffc3 	bl	b4c30 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(MAX30105_ADDRESS, MAX30105_FIFOREADPTR, 0);
   b4caa:	4620      	mov	r0, r4
   b4cac:	2300      	movs	r3, #0
}
   b4cae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeRegister8(MAX30105_ADDRESS, MAX30105_FIFOREADPTR, 0);
   b4cb2:	2206      	movs	r2, #6
   b4cb4:	2157      	movs	r1, #87	; 0x57
   b4cb6:	f7ff bfbb 	b.w	b4c30 <_ZN8MAX3010514writeRegister8Ehhh>

000b4cba <_ZN8MAX301057bitMaskEhhh>:
{
   b4cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4cbe:	460c      	mov	r4, r1
   b4cc0:	4617      	mov	r7, r2
  uint8_t originalContents = readRegister8(MAX30105_ADDRESS, reg);
   b4cc2:	460a      	mov	r2, r1
   b4cc4:	2157      	movs	r1, #87	; 0x57
{
   b4cc6:	4605      	mov	r5, r0
   b4cc8:	461e      	mov	r6, r3
  uint8_t originalContents = readRegister8(MAX30105_ADDRESS, reg);
   b4cca:	f7ff fe89 	bl	b49e0 <_ZN8MAX3010513readRegister8Ehh>
  originalContents = originalContents & mask;
   b4cce:	4038      	ands	r0, r7
  writeRegister8(MAX30105_ADDRESS, reg, originalContents | thing);
   b4cd0:	ea46 0300 	orr.w	r3, r6, r0
   b4cd4:	4622      	mov	r2, r4
   b4cd6:	4628      	mov	r0, r5
   b4cd8:	2157      	movs	r1, #87	; 0x57
}
   b4cda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  writeRegister8(MAX30105_ADDRESS, reg, originalContents | thing);
   b4cde:	f7ff bfa7 	b.w	b4c30 <_ZN8MAX3010514writeRegister8Ehhh>

000b4ce2 <_ZN8MAX301059softResetEv>:
void MAX30105::softReset(void) {
   b4ce2:	b538      	push	{r3, r4, r5, lr}
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
   b4ce4:	22bf      	movs	r2, #191	; 0xbf
   b4ce6:	2340      	movs	r3, #64	; 0x40
   b4ce8:	2109      	movs	r1, #9
void MAX30105::softReset(void) {
   b4cea:	4605      	mov	r5, r0
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
   b4cec:	f7ff ffe5 	bl	b4cba <_ZN8MAX301057bitMaskEhhh>
   b4cf0:	f000 faf6 	bl	b52e0 <HAL_Timer_Get_Milli_Seconds>
   b4cf4:	4604      	mov	r4, r0
   b4cf6:	f000 faf3 	bl	b52e0 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < 100)
   b4cfa:	1b00      	subs	r0, r0, r4
   b4cfc:	2863      	cmp	r0, #99	; 0x63
   b4cfe:	d80a      	bhi.n	b4d16 <_ZN8MAX301059softResetEv+0x34>
    uint8_t response = readRegister8(MAX30105_ADDRESS, MAX30105_MODECONFIG);
   b4d00:	2209      	movs	r2, #9
   b4d02:	2157      	movs	r1, #87	; 0x57
   b4d04:	4628      	mov	r0, r5
   b4d06:	f7ff fe6b 	bl	b49e0 <_ZN8MAX3010513readRegister8Ehh>
    if ((response & MAX30105_RESET) == 0) break; //We're done!
   b4d0a:	0643      	lsls	r3, r0, #25
   b4d0c:	d503      	bpl.n	b4d16 <_ZN8MAX301059softResetEv+0x34>
    delay(1); //Let's not over burden the I2C bus
   b4d0e:	2001      	movs	r0, #1
   b4d10:	f001 fa0a 	bl	b6128 <delay>
  while (millis() - startTime < 100)
   b4d14:	e7ef      	b.n	b4cf6 <_ZN8MAX301059softResetEv+0x14>
}
   b4d16:	bd38      	pop	{r3, r4, r5, pc}

000b4d18 <_ZN8MAX3010510setLEDModeEh>:
void MAX30105::setLEDMode(uint8_t mode) {
   b4d18:	460b      	mov	r3, r1
  bitMask(MAX30105_MODECONFIG, MAX30105_MODE_MASK, mode);
   b4d1a:	22f8      	movs	r2, #248	; 0xf8
   b4d1c:	2109      	movs	r1, #9
   b4d1e:	f7ff bfcc 	b.w	b4cba <_ZN8MAX301057bitMaskEhhh>

000b4d22 <_ZN8MAX3010511setADCRangeEh>:
void MAX30105::setADCRange(uint8_t adcRange) {
   b4d22:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_ADCRANGE_MASK, adcRange);
   b4d24:	229f      	movs	r2, #159	; 0x9f
   b4d26:	210a      	movs	r1, #10
   b4d28:	f7ff bfc7 	b.w	b4cba <_ZN8MAX301057bitMaskEhhh>

000b4d2c <_ZN8MAX3010513setSampleRateEh>:
void MAX30105::setSampleRate(uint8_t sampleRate) {
   b4d2c:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_SAMPLERATE_MASK, sampleRate);
   b4d2e:	22e3      	movs	r2, #227	; 0xe3
   b4d30:	210a      	movs	r1, #10
   b4d32:	f7ff bfc2 	b.w	b4cba <_ZN8MAX301057bitMaskEhhh>

000b4d36 <_ZN8MAX3010513setPulseWidthEh>:
void MAX30105::setPulseWidth(uint8_t pulseWidth) {
   b4d36:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_PULSEWIDTH_MASK, pulseWidth);
   b4d38:	22fc      	movs	r2, #252	; 0xfc
   b4d3a:	210a      	movs	r1, #10
   b4d3c:	f7ff bfbd 	b.w	b4cba <_ZN8MAX301057bitMaskEhhh>

000b4d40 <_ZN8MAX3010510enableSlotEhh>:
  switch (slotNumber) {
   b4d40:	3901      	subs	r1, #1
void MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {
   b4d42:	4613      	mov	r3, r2
   b4d44:	2903      	cmp	r1, #3
   b4d46:	d814      	bhi.n	b4d72 <_ZN8MAX3010510enableSlotEhh+0x32>
   b4d48:	e8df f001 	tbb	[pc, r1]
   b4d4c:	0e0b0602 	.word	0x0e0b0602
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
   b4d50:	22f8      	movs	r2, #248	; 0xf8
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   b4d52:	2111      	movs	r1, #17
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
   b4d54:	f7ff bfb1 	b.w	b4cba <_ZN8MAX301057bitMaskEhhh>
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   b4d58:	011b      	lsls	r3, r3, #4
   b4d5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   b4d5e:	228f      	movs	r2, #143	; 0x8f
   b4d60:	e7f7      	b.n	b4d52 <_ZN8MAX3010510enableSlotEhh+0x12>
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT3_MASK, device);
   b4d62:	22f8      	movs	r2, #248	; 0xf8
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
   b4d64:	2112      	movs	r1, #18
   b4d66:	e7f5      	b.n	b4d54 <_ZN8MAX3010510enableSlotEhh+0x14>
   b4d68:	011b      	lsls	r3, r3, #4
   b4d6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   b4d6e:	228f      	movs	r2, #143	; 0x8f
   b4d70:	e7f8      	b.n	b4d64 <_ZN8MAX3010510enableSlotEhh+0x24>
}
   b4d72:	4770      	bx	lr

000b4d74 <_ZN8MAX3010514setFIFOAverageEh>:
void MAX30105::setFIFOAverage(uint8_t numberOfSamples) {
   b4d74:	460b      	mov	r3, r1
  bitMask(MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);
   b4d76:	221f      	movs	r2, #31
   b4d78:	2108      	movs	r1, #8
   b4d7a:	f7ff bf9e 	b.w	b4cba <_ZN8MAX301057bitMaskEhhh>

000b4d7e <_ZN8MAX3010518enableFIFORolloverEv>:
  bitMask(MAX30105_FIFOCONFIG, MAX30105_ROLLOVER_MASK, MAX30105_ROLLOVER_ENABLE);
   b4d7e:	2310      	movs	r3, #16
   b4d80:	22ef      	movs	r2, #239	; 0xef
   b4d82:	2108      	movs	r1, #8
   b4d84:	f7ff bf99 	b.w	b4cba <_ZN8MAX301057bitMaskEhhh>

000b4d88 <_ZN8MAX301055setupEhhhiii>:
void MAX30105::setup(byte powerLevel, byte sampleAverage, byte ledMode, int sampleRate, int pulseWidth, int adcRange) {
   b4d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4d8c:	4615      	mov	r5, r2
   b4d8e:	e9dd 7908 	ldrd	r7, r9, [sp, #32]
   b4d92:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   b4d96:	4604      	mov	r4, r0
   b4d98:	4688      	mov	r8, r1
   b4d9a:	461e      	mov	r6, r3
  softReset(); //Reset all configuration, threshold, and data registers to POR values
   b4d9c:	f7ff ffa1 	bl	b4ce2 <_ZN8MAX301059softResetEv>
  if (sampleAverage == 1) setFIFOAverage(MAX30105_SAMPLEAVG_1); //No averaging per FIFO record
   b4da0:	2d01      	cmp	r5, #1
   b4da2:	d149      	bne.n	b4e38 <_ZN8MAX301055setupEhhhiii+0xb0>
   b4da4:	2100      	movs	r1, #0
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
   b4da6:	4620      	mov	r0, r4
   b4da8:	f7ff ffe4 	bl	b4d74 <_ZN8MAX3010514setFIFOAverageEh>
  enableFIFORollover(); //Allow FIFO to wrap/roll over
   b4dac:	4620      	mov	r0, r4
   b4dae:	f7ff ffe6 	bl	b4d7e <_ZN8MAX3010518enableFIFORolloverEv>
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
   b4db2:	2e03      	cmp	r6, #3
   b4db4:	d154      	bne.n	b4e60 <_ZN8MAX301055setupEhhhiii+0xd8>
   b4db6:	2107      	movs	r1, #7
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
   b4db8:	4620      	mov	r0, r4
   b4dba:	f7ff ffad 	bl	b4d18 <_ZN8MAX3010510setLEDModeEh>
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
   b4dbe:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
   b4dc2:	7166      	strb	r6, [r4, #5]
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
   b4dc4:	da51      	bge.n	b4e6a <_ZN8MAX301055setupEhhhiii+0xe2>
   b4dc6:	2100      	movs	r1, #0
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
   b4dc8:	4620      	mov	r0, r4
   b4dca:	f7ff ffaa 	bl	b4d22 <_ZN8MAX3010511setADCRangeEh>
  if (sampleRate < 100) setSampleRate(MAX30105_SAMPLERATE_50); //Take 50 samples per second
   b4dce:	2f63      	cmp	r7, #99	; 0x63
   b4dd0:	dc58      	bgt.n	b4e84 <_ZN8MAX301055setupEhhhiii+0xfc>
   b4dd2:	2100      	movs	r1, #0
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
   b4dd4:	4620      	mov	r0, r4
   b4dd6:	f7ff ffa9 	bl	b4d2c <_ZN8MAX3010513setSampleRateEh>
  if (pulseWidth < 118) setPulseWidth(MAX30105_PULSEWIDTH_69); //Page 26, Gets us 15 bit resolution
   b4dda:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
   b4dde:	dc71      	bgt.n	b4ec4 <_ZN8MAX301055setupEhhhiii+0x13c>
   b4de0:	2100      	movs	r1, #0
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
   b4de2:	4620      	mov	r0, r4
   b4de4:	f7ff ffa7 	bl	b4d36 <_ZN8MAX3010513setPulseWidthEh>
  setPulseAmplitudeRed(powerLevel);
   b4de8:	4641      	mov	r1, r8
   b4dea:	4620      	mov	r0, r4
   b4dec:	f7ff ff3c 	bl	b4c68 <_ZN8MAX3010520setPulseAmplitudeRedEh>
  setPulseAmplitudeIR(powerLevel);
   b4df0:	4641      	mov	r1, r8
   b4df2:	4620      	mov	r0, r4
   b4df4:	f7ff ff3d 	bl	b4c72 <_ZN8MAX3010519setPulseAmplitudeIREh>
  setPulseAmplitudeGreen(powerLevel);
   b4df8:	4641      	mov	r1, r8
   b4dfa:	4620      	mov	r0, r4
   b4dfc:	f7ff ff3e 	bl	b4c7c <_ZN8MAX3010522setPulseAmplitudeGreenEh>
  setPulseAmplitudeProximity(powerLevel);
   b4e00:	4641      	mov	r1, r8
   b4e02:	4620      	mov	r0, r4
   b4e04:	f7ff ff3f 	bl	b4c86 <_ZN8MAX3010526setPulseAmplitudeProximityEh>
  enableSlot(1, SLOT_RED_LED);
   b4e08:	2201      	movs	r2, #1
   b4e0a:	4611      	mov	r1, r2
   b4e0c:	4620      	mov	r0, r4
   b4e0e:	f7ff ff97 	bl	b4d40 <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
   b4e12:	2e01      	cmp	r6, #1
   b4e14:	d90b      	bls.n	b4e2e <_ZN8MAX301055setupEhhhiii+0xa6>
   b4e16:	2202      	movs	r2, #2
   b4e18:	4611      	mov	r1, r2
   b4e1a:	4620      	mov	r0, r4
   b4e1c:	f7ff ff90 	bl	b4d40 <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 2) enableSlot(3, SLOT_GREEN_LED);
   b4e20:	2e02      	cmp	r6, #2
   b4e22:	d004      	beq.n	b4e2e <_ZN8MAX301055setupEhhhiii+0xa6>
   b4e24:	2203      	movs	r2, #3
   b4e26:	4611      	mov	r1, r2
   b4e28:	4620      	mov	r0, r4
   b4e2a:	f7ff ff89 	bl	b4d40 <_ZN8MAX3010510enableSlotEhh>
  clearFIFO(); //Reset the FIFO before we begin checking the sensor
   b4e2e:	4620      	mov	r0, r4
}
   b4e30:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  clearFIFO(); //Reset the FIFO before we begin checking the sensor
   b4e34:	f7ff bf2c 	b.w	b4c90 <_ZN8MAX301059clearFIFOEv>
  else if (sampleAverage == 2) setFIFOAverage(MAX30105_SAMPLEAVG_2);
   b4e38:	2d02      	cmp	r5, #2
   b4e3a:	d101      	bne.n	b4e40 <_ZN8MAX301055setupEhhhiii+0xb8>
   b4e3c:	2120      	movs	r1, #32
   b4e3e:	e7b2      	b.n	b4da6 <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 4) setFIFOAverage(MAX30105_SAMPLEAVG_4);
   b4e40:	2d04      	cmp	r5, #4
   b4e42:	d101      	bne.n	b4e48 <_ZN8MAX301055setupEhhhiii+0xc0>
   b4e44:	2140      	movs	r1, #64	; 0x40
   b4e46:	e7ae      	b.n	b4da6 <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 8) setFIFOAverage(MAX30105_SAMPLEAVG_8);
   b4e48:	2d08      	cmp	r5, #8
   b4e4a:	d101      	bne.n	b4e50 <_ZN8MAX301055setupEhhhiii+0xc8>
   b4e4c:	2160      	movs	r1, #96	; 0x60
   b4e4e:	e7aa      	b.n	b4da6 <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 16) setFIFOAverage(MAX30105_SAMPLEAVG_16);
   b4e50:	2d10      	cmp	r5, #16
   b4e52:	d101      	bne.n	b4e58 <_ZN8MAX301055setupEhhhiii+0xd0>
   b4e54:	2180      	movs	r1, #128	; 0x80
   b4e56:	e7a6      	b.n	b4da6 <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
   b4e58:	2d20      	cmp	r5, #32
   b4e5a:	d1f3      	bne.n	b4e44 <_ZN8MAX301055setupEhhhiii+0xbc>
   b4e5c:	21a0      	movs	r1, #160	; 0xa0
   b4e5e:	e7a2      	b.n	b4da6 <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
   b4e60:	2e02      	cmp	r6, #2
   b4e62:	bf0c      	ite	eq
   b4e64:	2103      	moveq	r1, #3
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
   b4e66:	2102      	movne	r1, #2
   b4e68:	e7a6      	b.n	b4db8 <_ZN8MAX301055setupEhhhiii+0x30>
  else if(adcRange < 8192) setADCRange(MAX30105_ADCRANGE_4096); //15.63pA per LSB
   b4e6a:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
   b4e6e:	da01      	bge.n	b4e74 <_ZN8MAX301055setupEhhhiii+0xec>
   b4e70:	2120      	movs	r1, #32
   b4e72:	e7a9      	b.n	b4dc8 <_ZN8MAX301055setupEhhhiii+0x40>
  else if(adcRange < 16384) setADCRange(MAX30105_ADCRANGE_8192); //31.25pA per LSB
   b4e74:	f5ba 4f80 	cmp.w	sl, #16384	; 0x4000
   b4e78:	da01      	bge.n	b4e7e <_ZN8MAX301055setupEhhhiii+0xf6>
   b4e7a:	2140      	movs	r1, #64	; 0x40
   b4e7c:	e7a4      	b.n	b4dc8 <_ZN8MAX301055setupEhhhiii+0x40>
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
   b4e7e:	d1a2      	bne.n	b4dc6 <_ZN8MAX301055setupEhhhiii+0x3e>
   b4e80:	2160      	movs	r1, #96	; 0x60
   b4e82:	e7a1      	b.n	b4dc8 <_ZN8MAX301055setupEhhhiii+0x40>
  else if (sampleRate < 200) setSampleRate(MAX30105_SAMPLERATE_100);
   b4e84:	2fc7      	cmp	r7, #199	; 0xc7
   b4e86:	dc01      	bgt.n	b4e8c <_ZN8MAX301055setupEhhhiii+0x104>
   b4e88:	2104      	movs	r1, #4
   b4e8a:	e7a3      	b.n	b4dd4 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 400) setSampleRate(MAX30105_SAMPLERATE_200);
   b4e8c:	f5b7 7fc8 	cmp.w	r7, #400	; 0x190
   b4e90:	da01      	bge.n	b4e96 <_ZN8MAX301055setupEhhhiii+0x10e>
   b4e92:	2108      	movs	r1, #8
   b4e94:	e79e      	b.n	b4dd4 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 800) setSampleRate(MAX30105_SAMPLERATE_400);
   b4e96:	f5b7 7f48 	cmp.w	r7, #800	; 0x320
   b4e9a:	da01      	bge.n	b4ea0 <_ZN8MAX301055setupEhhhiii+0x118>
   b4e9c:	210c      	movs	r1, #12
   b4e9e:	e799      	b.n	b4dd4 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 1000) setSampleRate(MAX30105_SAMPLERATE_800);
   b4ea0:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
   b4ea4:	da01      	bge.n	b4eaa <_ZN8MAX301055setupEhhhiii+0x122>
   b4ea6:	2110      	movs	r1, #16
   b4ea8:	e794      	b.n	b4dd4 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 1600) setSampleRate(MAX30105_SAMPLERATE_1000);
   b4eaa:	f5b7 6fc8 	cmp.w	r7, #1600	; 0x640
   b4eae:	da01      	bge.n	b4eb4 <_ZN8MAX301055setupEhhhiii+0x12c>
   b4eb0:	2114      	movs	r1, #20
   b4eb2:	e78f      	b.n	b4dd4 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 3200) setSampleRate(MAX30105_SAMPLERATE_1600);
   b4eb4:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
   b4eb8:	da01      	bge.n	b4ebe <_ZN8MAX301055setupEhhhiii+0x136>
   b4eba:	2118      	movs	r1, #24
   b4ebc:	e78a      	b.n	b4dd4 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
   b4ebe:	d188      	bne.n	b4dd2 <_ZN8MAX301055setupEhhhiii+0x4a>
   b4ec0:	211c      	movs	r1, #28
   b4ec2:	e787      	b.n	b4dd4 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (pulseWidth < 215) setPulseWidth(MAX30105_PULSEWIDTH_118); //16 bit resolution
   b4ec4:	f1b9 0fd6 	cmp.w	r9, #214	; 0xd6
   b4ec8:	dc01      	bgt.n	b4ece <_ZN8MAX301055setupEhhhiii+0x146>
   b4eca:	2101      	movs	r1, #1
   b4ecc:	e789      	b.n	b4de2 <_ZN8MAX301055setupEhhhiii+0x5a>
  else if (pulseWidth < 411) setPulseWidth(MAX30105_PULSEWIDTH_215); //17 bit resolution
   b4ece:	f5b9 7fcd 	cmp.w	r9, #410	; 0x19a
   b4ed2:	dc01      	bgt.n	b4ed8 <_ZN8MAX301055setupEhhhiii+0x150>
   b4ed4:	2102      	movs	r1, #2
   b4ed6:	e784      	b.n	b4de2 <_ZN8MAX301055setupEhhhiii+0x5a>
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
   b4ed8:	f240 139b 	movw	r3, #411	; 0x19b
   b4edc:	4599      	cmp	r9, r3
   b4ede:	f47f af7f 	bne.w	b4de0 <_ZN8MAX301055setupEhhhiii+0x58>
   b4ee2:	2103      	movs	r1, #3
   b4ee4:	e77d      	b.n	b4de2 <_ZN8MAX301055setupEhhhiii+0x5a>

000b4ee6 <_Z28maxim_peaks_above_min_heightPlS_S_ll>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
   b4ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int32_t i = 1, n_width;
  *n_npks = 0;
   b4eea:	2400      	movs	r4, #0
   b4eec:	600c      	str	r4, [r1, #0]
  
  while (i < n_size-1){
   b4eee:	f103 38ff 	add.w	r8, r3, #4294967295
  int32_t i = 1, n_width;
   b4ef2:	2401      	movs	r4, #1
  while (i < n_size-1){
   b4ef4:	45a0      	cmp	r8, r4
   b4ef6:	dd27      	ble.n	b4f48 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x62>
    if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){      // find left edge of potential peaks
   b4ef8:	9d06      	ldr	r5, [sp, #24]
   b4efa:	f852 c024 	ldr.w	ip, [r2, r4, lsl #2]
   b4efe:	45ac      	cmp	ip, r5
   b4f00:	ea4f 0684 	mov.w	r6, r4, lsl #2
   b4f04:	f104 0501 	add.w	r5, r4, #1
   b4f08:	dd1c      	ble.n	b4f44 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
   b4f0a:	4416      	add	r6, r2
   b4f0c:	f856 6c04 	ldr.w	r6, [r6, #-4]
   b4f10:	45b4      	cmp	ip, r6
   b4f12:	dd17      	ble.n	b4f44 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
   b4f14:	462e      	mov	r6, r5
      n_width = 1;
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
   b4f16:	429e      	cmp	r6, r3
   b4f18:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
   b4f1c:	eba6 0e04 	sub.w	lr, r6, r4
   b4f20:	4635      	mov	r5, r6
   b4f22:	d003      	beq.n	b4f2c <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x46>
   b4f24:	45bc      	cmp	ip, r7
   b4f26:	f106 0601 	add.w	r6, r6, #1
   b4f2a:	d0f4      	beq.n	b4f16 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x30>
        n_width++;
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
   b4f2c:	45bc      	cmp	ip, r7
   b4f2e:	dd09      	ble.n	b4f44 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
   b4f30:	680e      	ldr	r6, [r1, #0]
   b4f32:	2e0e      	cmp	r6, #14
   b4f34:	dc06      	bgt.n	b4f44 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
        pn_locs[(*n_npks)++] = i;    
   b4f36:	1c75      	adds	r5, r6, #1
   b4f38:	600d      	str	r5, [r1, #0]
        // for flat peaks, peak location is left edge
        i += n_width+1;
   b4f3a:	f10e 0501 	add.w	r5, lr, #1
        pn_locs[(*n_npks)++] = i;    
   b4f3e:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
        i += n_width+1;
   b4f42:	4425      	add	r5, r4
{
   b4f44:	462c      	mov	r4, r5
   b4f46:	e7d5      	b.n	b4ef4 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0xe>
        i += n_width;
    }
    else
      i++;
  }
}
   b4f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4f4c <_Z17maxim_sort_ascendPll>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
   b4f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
   b4f4e:	2301      	movs	r3, #1
   b4f50:	4604      	mov	r4, r0
   b4f52:	428b      	cmp	r3, r1
   b4f54:	da0f      	bge.n	b4f76 <_Z17maxim_sort_ascendPll+0x2a>
    n_temp = pn_x[i];
   b4f56:	f854 6f04 	ldr.w	r6, [r4, #4]!
   b4f5a:	461a      	mov	r2, r3
   b4f5c:	4625      	mov	r5, r4
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
   b4f5e:	f855 7c04 	ldr.w	r7, [r5, #-4]
   b4f62:	42b7      	cmp	r7, r6
   b4f64:	dd03      	ble.n	b4f6e <_Z17maxim_sort_ascendPll+0x22>
   b4f66:	3a01      	subs	r2, #1
        pn_x[j] = pn_x[j-1];
   b4f68:	f845 7904 	str.w	r7, [r5], #-4
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
   b4f6c:	d1f7      	bne.n	b4f5e <_Z17maxim_sort_ascendPll+0x12>
    pn_x[j] = n_temp;
   b4f6e:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
  for (i = 1; i < n_size; i++) {
   b4f72:	3301      	adds	r3, #1
   b4f74:	e7ed      	b.n	b4f52 <_Z17maxim_sort_ascendPll+0x6>
  }
}
   b4f76:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4f78 <_Z26maxim_sort_indices_descendPlS_l>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/ 
{
   b4f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
   b4f7c:	2301      	movs	r3, #1
{
   b4f7e:	4690      	mov	r8, r2
   b4f80:	460d      	mov	r5, r1
  for (i = 1; i < n_size; i++) {
   b4f82:	4543      	cmp	r3, r8
   b4f84:	da16      	bge.n	b4fb4 <_Z26maxim_sort_indices_descendPlS_l+0x3c>
    n_temp = pn_indx[i];
   b4f86:	f855 6f04 	ldr.w	r6, [r5, #4]!
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
   b4f8a:	461c      	mov	r4, r3
   b4f8c:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   b4f90:	46ac      	mov	ip, r5
   b4f92:	f8d9 2000 	ldr.w	r2, [r9]
   b4f96:	f85c 7c04 	ldr.w	r7, [ip, #-4]
   b4f9a:	4696      	mov	lr, r2
   b4f9c:	f850 2027 	ldr.w	r2, [r0, r7, lsl #2]
   b4fa0:	4596      	cmp	lr, r2
   b4fa2:	dd03      	ble.n	b4fac <_Z26maxim_sort_indices_descendPlS_l+0x34>
   b4fa4:	3c01      	subs	r4, #1
      pn_indx[j] = pn_indx[j-1];
   b4fa6:	f84c 7904 	str.w	r7, [ip], #-4
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
   b4faa:	d1f2      	bne.n	b4f92 <_Z26maxim_sort_indices_descendPlS_l+0x1a>
    pn_indx[j] = n_temp;
   b4fac:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
  for (i = 1; i < n_size; i++) {
   b4fb0:	3301      	adds	r3, #1
   b4fb2:	e7e6      	b.n	b4f82 <_Z26maxim_sort_indices_descendPlS_l+0xa>
  }
}
   b4fb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4fb8 <_Z24maxim_remove_close_peaksPlS_S_l>:
{
   b4fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4fbc:	4604      	mov	r4, r0
   b4fbe:	461f      	mov	r7, r3
   b4fc0:	4610      	mov	r0, r2
   b4fc2:	460d      	mov	r5, r1
  maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
   b4fc4:	680a      	ldr	r2, [r1, #0]
   b4fc6:	4621      	mov	r1, r4
   b4fc8:	f7ff ffd6 	bl	b4f78 <_Z26maxim_sort_indices_descendPlS_l>
   b4fcc:	f04f 32ff 	mov.w	r2, #4294967295
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
   b4fd0:	f1c7 0e00 	rsb	lr, r7, #0
  for ( i = -1; i < *pn_npks; i++ ){
   b4fd4:	6829      	ldr	r1, [r5, #0]
   b4fd6:	4291      	cmp	r1, r2
   b4fd8:	dd1d      	ble.n	b5016 <_Z24maxim_remove_close_peaksPlS_S_l+0x5e>
    *pn_npks = i+1;
   b4fda:	1c53      	adds	r3, r2, #1
   b4fdc:	461e      	mov	r6, r3
   b4fde:	602b      	str	r3, [r5, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
   b4fe0:	42b1      	cmp	r1, r6
   b4fe2:	d016      	beq.n	b5012 <_Z24maxim_remove_close_peaksPlS_S_l+0x5a>
      n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
   b4fe4:	1c50      	adds	r0, r2, #1
   b4fe6:	bf18      	it	ne
   b4fe8:	f854 0022 	ldrne.w	r0, [r4, r2, lsl #2]
   b4fec:	f854 c026 	ldr.w	ip, [r4, r6, lsl #2]
   b4ff0:	bf08      	it	eq
   b4ff2:	4610      	moveq	r0, r2
   b4ff4:	ebac 0000 	sub.w	r0, ip, r0
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
   b4ff8:	42b8      	cmp	r0, r7
   b4ffa:	dc01      	bgt.n	b5000 <_Z24maxim_remove_close_peaksPlS_S_l+0x48>
   b4ffc:	4586      	cmp	lr, r0
   b4ffe:	dd06      	ble.n	b500e <_Z24maxim_remove_close_peaksPlS_S_l+0x56>
        pn_locs[(*pn_npks)++] = pn_locs[j];
   b5000:	6828      	ldr	r0, [r5, #0]
   b5002:	f100 0801 	add.w	r8, r0, #1
   b5006:	f8c5 8000 	str.w	r8, [r5]
   b500a:	f844 c020 	str.w	ip, [r4, r0, lsl #2]
    for ( j = i+1; j < n_old_npks; j++ ){
   b500e:	3601      	adds	r6, #1
   b5010:	e7e6      	b.n	b4fe0 <_Z24maxim_remove_close_peaksPlS_S_l+0x28>
   b5012:	461a      	mov	r2, r3
   b5014:	e7de      	b.n	b4fd4 <_Z24maxim_remove_close_peaksPlS_S_l+0x1c>
  maxim_sort_ascend( pn_locs, *pn_npks );
   b5016:	4620      	mov	r0, r4
}
   b5018:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  maxim_sort_ascend( pn_locs, *pn_npks );
   b501c:	f7ff bf96 	b.w	b4f4c <_Z17maxim_sort_ascendPll>

000b5020 <_Z16maxim_find_peaksPlS_S_llll>:
{
   b5020:	b537      	push	{r0, r1, r2, r4, r5, lr}
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
   b5022:	9d06      	ldr	r5, [sp, #24]
   b5024:	9500      	str	r5, [sp, #0]
   b5026:	f7ff ff5e 	bl	b4ee6 <_Z28maxim_peaks_above_min_heightPlS_S_ll>
{
   b502a:	460c      	mov	r4, r1
  maxim_remove_close_peaks( pn_locs, n_npks, pn_x, n_min_distance );
   b502c:	9b07      	ldr	r3, [sp, #28]
   b502e:	f7ff ffc3 	bl	b4fb8 <_Z24maxim_remove_close_peaksPlS_S_l>
  *n_npks = min( *n_npks, n_max_num );
   b5032:	6822      	ldr	r2, [r4, #0]
   b5034:	9b08      	ldr	r3, [sp, #32]
   b5036:	429a      	cmp	r2, r3
   b5038:	bfd4      	ite	le
   b503a:	6022      	strle	r2, [r4, #0]
   b503c:	6023      	strgt	r3, [r4, #0]
}
   b503e:	b003      	add	sp, #12
   b5040:	bd30      	pop	{r4, r5, pc}
	...

000b5044 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_>:
{
   b5044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5048:	b09d      	sub	sp, #116	; 0x74
   b504a:	e9dd 9827 	ldrd	r9, r8, [sp, #156]	; 0x9c
   b504e:	4616      	mov	r6, r2
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
   b5050:	2200      	movs	r2, #0
{
   b5052:	469b      	mov	fp, r3
   b5054:	4605      	mov	r5, r0
   b5056:	460c      	mov	r4, r1
  un_ir_mean =0; 
   b5058:	4613      	mov	r3, r2
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
   b505a:	42a2      	cmp	r2, r4
   b505c:	da04      	bge.n	b5068 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x24>
   b505e:	f835 1012 	ldrh.w	r1, [r5, r2, lsl #1]
   b5062:	3201      	adds	r2, #1
   b5064:	440b      	add	r3, r1
   b5066:	e7f8      	b.n	b505a <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x16>
  un_ir_mean =un_ir_mean/n_ir_buffer_length ;
   b5068:	4f8d      	ldr	r7, [pc, #564]	; (b52a0 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x25c>)
   b506a:	fbb3 f3f4 	udiv	r3, r3, r4
   b506e:	4638      	mov	r0, r7
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
   b5070:	2200      	movs	r2, #0
   b5072:	42a2      	cmp	r2, r4
   b5074:	da06      	bge.n	b5084 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x40>
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ; 
   b5076:	f835 1012 	ldrh.w	r1, [r5, r2, lsl #1]
   b507a:	1a59      	subs	r1, r3, r1
   b507c:	f840 1b04 	str.w	r1, [r0], #4
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
   b5080:	3201      	adds	r2, #1
   b5082:	e7f6      	b.n	b5072 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x2e>
   b5084:	4a86      	ldr	r2, [pc, #536]	; (b52a0 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x25c>)
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
   b5086:	2100      	movs	r1, #0
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
   b5088:	6813      	ldr	r3, [r2, #0]
   b508a:	f852 0f04 	ldr.w	r0, [r2, #4]!
   b508e:	4403      	add	r3, r0
   b5090:	6850      	ldr	r0, [r2, #4]
   b5092:	4403      	add	r3, r0
   b5094:	6890      	ldr	r0, [r2, #8]
   b5096:	181b      	adds	r3, r3, r0
   b5098:	bf48      	it	mi
   b509a:	3303      	addmi	r3, #3
   b509c:	3101      	adds	r1, #1
   b509e:	109b      	asrs	r3, r3, #2
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
   b50a0:	2960      	cmp	r1, #96	; 0x60
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
   b50a2:	f842 3c04 	str.w	r3, [r2, #-4]
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
   b50a6:	d1ef      	bne.n	b5088 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x44>
  n_th1=0; 
   b50a8:	2300      	movs	r3, #0
   b50aa:	4a7d      	ldr	r2, [pc, #500]	; (b52a0 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x25c>)
  for ( k=0 ; k<BUFFER_SIZE ;k++){
   b50ac:	469a      	mov	sl, r3
    n_th1 +=  an_x[k];
   b50ae:	f852 1b04 	ldr.w	r1, [r2], #4
  for ( k=0 ; k<BUFFER_SIZE ;k++){
   b50b2:	f10a 0a01 	add.w	sl, sl, #1
   b50b6:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
    n_th1 +=  an_x[k];
   b50ba:	440b      	add	r3, r1
  for ( k=0 ; k<BUFFER_SIZE ;k++){
   b50bc:	d1f7      	bne.n	b50ae <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x6a>
  if( n_th1<30) n_th1=30; // min allowed
   b50be:	f640 32b7 	movw	r2, #2999	; 0xbb7
   b50c2:	4293      	cmp	r3, r2
   b50c4:	dd4f      	ble.n	b5166 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x122>
  n_th1=  n_th1/ ( BUFFER_SIZE);
   b50c6:	fb93 fafa 	sdiv	sl, r3, sl
   b50ca:	f1ba 0f3c 	cmp.w	sl, #60	; 0x3c
   b50ce:	bfa8      	it	ge
   b50d0:	f04f 0a3c 	movge.w	sl, #60	; 0x3c
  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
   b50d4:	223c      	movs	r2, #60	; 0x3c
   b50d6:	2100      	movs	r1, #0
   b50d8:	a80d      	add	r0, sp, #52	; 0x34
   b50da:	f002 fc6a 	bl	b79b2 <memset>
  maxim_find_peaks( an_ir_valley_locs, &n_npks, an_x, BUFFER_SIZE, n_th1, 4, 15 );//peak_height, peak_distance, max_num_peaks 
   b50de:	2304      	movs	r3, #4
   b50e0:	220f      	movs	r2, #15
   b50e2:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b50e6:	f8cd a000 	str.w	sl, [sp]
   b50ea:	4a6d      	ldr	r2, [pc, #436]	; (b52a0 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x25c>)
   b50ec:	2364      	movs	r3, #100	; 0x64
   b50ee:	a907      	add	r1, sp, #28
   b50f0:	a80d      	add	r0, sp, #52	; 0x34
   b50f2:	f7ff ff95 	bl	b5020 <_Z16maxim_find_peaksPlS_S_llll>
  if (n_npks>=2){
   b50f6:	9b07      	ldr	r3, [sp, #28]
   b50f8:	2b01      	cmp	r3, #1
   b50fa:	f04f 0200 	mov.w	r2, #0
   b50fe:	dd35      	ble.n	b516c <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x128>
   b5100:	a90d      	add	r1, sp, #52	; 0x34
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
   b5102:	f04f 0c01 	mov.w	ip, #1
   b5106:	4608      	mov	r0, r1
   b5108:	f8d1 e004 	ldr.w	lr, [r1, #4]
   b510c:	6800      	ldr	r0, [r0, #0]
   b510e:	f10c 0c01 	add.w	ip, ip, #1
   b5112:	ebae 0000 	sub.w	r0, lr, r0
   b5116:	4563      	cmp	r3, ip
   b5118:	f101 0104 	add.w	r1, r1, #4
   b511c:	4402      	add	r2, r0
   b511e:	d1f2      	bne.n	b5106 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0xc2>
    n_peak_interval_sum =n_peak_interval_sum/(n_npks-1);
   b5120:	1e59      	subs	r1, r3, #1
   b5122:	fb92 f2f1 	sdiv	r2, r2, r1
    *pn_heart_rate =(int32_t)( (FreqS*60)/ n_peak_interval_sum );
   b5126:	f240 51dc 	movw	r1, #1500	; 0x5dc
   b512a:	fb91 f2f2 	sdiv	r2, r1, r2
   b512e:	f8c9 2000 	str.w	r2, [r9]
    *pch_hr_valid  = 1;
   b5132:	2201      	movs	r2, #1
   b5134:	495b      	ldr	r1, [pc, #364]	; (b52a4 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x260>)
   b5136:	f888 2000 	strb.w	r2, [r8]
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
   b513a:	2200      	movs	r2, #0
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
   b513c:	42a2      	cmp	r2, r4
   b513e:	db19      	blt.n	b5174 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x130>
  for(k=0; k< 5; k++) an_ratio[k]=0;
   b5140:	2200      	movs	r2, #0
   b5142:	e9cd 2208 	strd	r2, r2, [sp, #32]
   b5146:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
   b514a:	ae0d      	add	r6, sp, #52	; 0x34
   b514c:	920c      	str	r2, [sp, #48]	; 0x30
   b514e:	4631      	mov	r1, r6
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
   b5150:	4293      	cmp	r3, r2
   b5152:	dd1b      	ble.n	b518c <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x148>
    if (an_ir_valley_locs[k] > BUFFER_SIZE ){
   b5154:	f851 0b04 	ldr.w	r0, [r1], #4
   b5158:	2864      	cmp	r0, #100	; 0x64
   b515a:	dd15      	ble.n	b5188 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x144>
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
   b515c:	4b52      	ldr	r3, [pc, #328]	; (b52a8 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x264>)
   b515e:	f8cb 3000 	str.w	r3, [fp]
    *pch_spo2_valid  = 0; 
   b5162:	2300      	movs	r3, #0
   b5164:	e092      	b.n	b528c <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x248>
  if( n_th1<30) n_th1=30; // min allowed
   b5166:	f04f 0a1e 	mov.w	sl, #30
   b516a:	e7b3      	b.n	b50d4 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x90>
    *pn_heart_rate = -999; // unable to calculate because # of peaks are too small
   b516c:	494e      	ldr	r1, [pc, #312]	; (b52a8 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x264>)
   b516e:	f8c9 1000 	str.w	r1, [r9]
    *pch_hr_valid  = 0;
   b5172:	e7df      	b.n	b5134 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0xf0>
      an_x[k] =  pun_ir_buffer[k] ; 
   b5174:	f835 0012 	ldrh.w	r0, [r5, r2, lsl #1]
   b5178:	f847 0b04 	str.w	r0, [r7], #4
      an_y[k] =  pun_red_buffer[k] ; 
   b517c:	f836 0012 	ldrh.w	r0, [r6, r2, lsl #1]
   b5180:	f841 0b04 	str.w	r0, [r1], #4
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
   b5184:	3201      	adds	r2, #1
   b5186:	e7d9      	b.n	b513c <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0xf8>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
   b5188:	3201      	adds	r2, #1
   b518a:	e7e1      	b.n	b5150 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x10c>
  int32_t n_x_dc_max_idx = 0; 
   b518c:	2400      	movs	r4, #0
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
   b518e:	3b01      	subs	r3, #1
   b5190:	4f43      	ldr	r7, [pc, #268]	; (b52a0 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x25c>)
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   b5192:	f8df c110 	ldr.w	ip, [pc, #272]	; b52a4 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x260>
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
   b5196:	9404      	str	r4, [sp, #16]
  int32_t n_y_dc_max_idx = 0;
   b5198:	4625      	mov	r5, r4
  n_i_ratio_count = 0; 
   b519a:	4621      	mov	r1, r4
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
   b519c:	9305      	str	r3, [sp, #20]
   b519e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b51a2:	4293      	cmp	r3, r2
   b51a4:	dd56      	ble.n	b5254 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x210>
    if (an_ir_valley_locs[k+1]-an_ir_valley_locs[k] >3){
   b51a6:	f8d6 8004 	ldr.w	r8, [r6, #4]
   b51aa:	f856 0b04 	ldr.w	r0, [r6], #4
   b51ae:	4613      	mov	r3, r2
   b51b0:	eba8 0900 	sub.w	r9, r8, r0
   b51b4:	3301      	adds	r3, #1
   b51b6:	f1b9 0f03 	cmp.w	r9, #3
   b51ba:	9304      	str	r3, [sp, #16]
   b51bc:	ddef      	ble.n	b519e <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x15a>
    n_x_dc_max= -16777216; 
   b51be:	f04f 4e7f 	mov.w	lr, #4278190080	; 0xff000000
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
   b51c2:	4603      	mov	r3, r0
    n_y_dc_max= -16777216 ; 
   b51c4:	46f2      	mov	sl, lr
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
   b51c6:	4598      	cmp	r8, r3
   b51c8:	dd0e      	ble.n	b51e8 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x1a4>
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
   b51ca:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
   b51ce:	4572      	cmp	r2, lr
   b51d0:	bfc8      	it	gt
   b51d2:	4696      	movgt	lr, r2
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   b51d4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
   b51d8:	bfc8      	it	gt
   b51da:	461c      	movgt	r4, r3
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   b51dc:	4552      	cmp	r2, sl
   b51de:	bfc4      	itt	gt
   b51e0:	461d      	movgt	r5, r3
   b51e2:	4692      	movgt	sl, r2
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
   b51e4:	3301      	adds	r3, #1
   b51e6:	e7ee      	b.n	b51c6 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x182>
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
   b51e8:	f857 2020 	ldr.w	r2, [r7, r0, lsl #2]
   b51ec:	f857 3028 	ldr.w	r3, [r7, r8, lsl #2]
   b51f0:	1a9b      	subs	r3, r3, r2
   b51f2:	1a22      	subs	r2, r4, r0
   b51f4:	4353      	muls	r3, r2
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]); 
   b51f6:	f857 2020 	ldr.w	r2, [r7, r0, lsl #2]
   b51fa:	fb93 f3f9 	sdiv	r3, r3, r9
   b51fe:	4413      	add	r3, r2
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
   b5200:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
   b5204:	1ad2      	subs	r2, r2, r3
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
   b5206:	fb0a f202 	mul.w	r2, sl, r2
   b520a:	ea4f 1ae2 	mov.w	sl, r2, asr #7
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
   b520e:	f1ba 0f00 	cmp.w	sl, #0
   b5212:	ddc4      	ble.n	b519e <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x15a>
   b5214:	2904      	cmp	r1, #4
   b5216:	dcc2      	bgt.n	b519e <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x15a>
      n_y_ac= (an_y[an_ir_valley_locs[k+1]] - an_y[an_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_ir_valley_locs[k]); //red
   b5218:	f85c 3020 	ldr.w	r3, [ip, r0, lsl #2]
   b521c:	f85c 2028 	ldr.w	r2, [ip, r8, lsl #2]
   b5220:	1a28      	subs	r0, r5, r0
   b5222:	1ad2      	subs	r2, r2, r3
   b5224:	4350      	muls	r0, r2
      n_y_ac=  an_y[an_ir_valley_locs[k]] + n_y_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k])  ; 
   b5226:	fb90 f0f9 	sdiv	r0, r0, r9
   b522a:	4418      	add	r0, r3
      n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw 
   b522c:	f85c 3025 	ldr.w	r3, [ip, r5, lsl #2]
   b5230:	1a1b      	subs	r3, r3, r0
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
   b5232:	fb0e fe03 	mul.w	lr, lr, r3
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
   b5236:	ea5f 1eee 	movs.w	lr, lr, asr #7
   b523a:	d0b0      	beq.n	b519e <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x15a>
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
   b523c:	ab1c      	add	r3, sp, #112	; 0x70
   b523e:	eb03 0881 	add.w	r8, r3, r1, lsl #2
   b5242:	2364      	movs	r3, #100	; 0x64
   b5244:	fb03 f20e 	mul.w	r2, r3, lr
        n_i_ratio_count++;
   b5248:	3101      	adds	r1, #1
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
   b524a:	fb92 f2fa 	sdiv	r2, r2, sl
   b524e:	f848 2c50 	str.w	r2, [r8, #-80]
        n_i_ratio_count++;
   b5252:	e7a4      	b.n	b519e <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x15a>
  maxim_sort_ascend(an_ratio, n_i_ratio_count);
   b5254:	a808      	add	r0, sp, #32
   b5256:	f7ff fe79 	bl	b4f4c <_Z17maxim_sort_ascendPll>
  n_middle_idx= n_i_ratio_count/2;
   b525a:	104a      	asrs	r2, r1, #1
  if (n_middle_idx >1)
   b525c:	2903      	cmp	r1, #3
   b525e:	ea4f 0382 	mov.w	r3, r2, lsl #2
   b5262:	dd18      	ble.n	b5296 <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x252>
    n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
   b5264:	a91c      	add	r1, sp, #112	; 0x70
   b5266:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   b526a:	f851 3c54 	ldr.w	r3, [r1, #-84]
   b526e:	f851 2c50 	ldr.w	r2, [r1, #-80]
   b5272:	4413      	add	r3, r2
   b5274:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   b5278:	105b      	asrs	r3, r3, #1
  if( n_ratio_average>2 && n_ratio_average <184){
   b527a:	1eda      	subs	r2, r3, #3
   b527c:	2ab4      	cmp	r2, #180	; 0xb4
   b527e:	f63f af6d 	bhi.w	b515c <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x118>
    n_spo2_calc= uch_spo2_table[n_ratio_average] ;
   b5282:	4a0a      	ldr	r2, [pc, #40]	; (b52ac <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x268>)
   b5284:	5cd3      	ldrb	r3, [r2, r3]
   b5286:	f8cb 3000 	str.w	r3, [fp]
    *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
   b528a:	2301      	movs	r3, #1
    *pch_spo2_valid  = 0; 
   b528c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   b528e:	7013      	strb	r3, [r2, #0]
}
   b5290:	b01d      	add	sp, #116	; 0x74
   b5292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    n_ratio_average = an_ratio[n_middle_idx ];
   b5296:	aa1c      	add	r2, sp, #112	; 0x70
   b5298:	4413      	add	r3, r2
   b529a:	f853 3c50 	ldr.w	r3, [r3, #-80]
   b529e:	e7ec      	b.n	b527a <_Z38maxim_heart_rate_and_oxygen_saturationPtlS_PlPaS0_S1_+0x236>
   b52a0:	2003e364 	.word	0x2003e364
   b52a4:	2003e4f4 	.word	0x2003e4f4
   b52a8:	fffffc19 	.word	0xfffffc19
   b52ac:	000b9c08 	.word	0x000b9c08

000b52b0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b52b0:	b508      	push	{r3, lr}
   b52b2:	4b02      	ldr	r3, [pc, #8]	; (b52bc <netdb_freeaddrinfo+0xc>)
   b52b4:	681b      	ldr	r3, [r3, #0]
   b52b6:	689b      	ldr	r3, [r3, #8]
   b52b8:	9301      	str	r3, [sp, #4]
   b52ba:	bd08      	pop	{r3, pc}
   b52bc:	00030268 	.word	0x00030268

000b52c0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b52c0:	b508      	push	{r3, lr}
   b52c2:	4b02      	ldr	r3, [pc, #8]	; (b52cc <netdb_getaddrinfo+0xc>)
   b52c4:	681b      	ldr	r3, [r3, #0]
   b52c6:	68db      	ldr	r3, [r3, #12]
   b52c8:	9301      	str	r3, [sp, #4]
   b52ca:	bd08      	pop	{r3, pc}
   b52cc:	00030268 	.word	0x00030268

000b52d0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b52d0:	b508      	push	{r3, lr}
   b52d2:	4b02      	ldr	r3, [pc, #8]	; (b52dc <HAL_RNG_GetRandomNumber+0xc>)
   b52d4:	681b      	ldr	r3, [r3, #0]
   b52d6:	685b      	ldr	r3, [r3, #4]
   b52d8:	9301      	str	r3, [sp, #4]
   b52da:	bd08      	pop	{r3, pc}
   b52dc:	00030218 	.word	0x00030218

000b52e0 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b52e0:	b508      	push	{r3, lr}
   b52e2:	4b02      	ldr	r3, [pc, #8]	; (b52ec <HAL_Timer_Get_Milli_Seconds+0xc>)
   b52e4:	681b      	ldr	r3, [r3, #0]
   b52e6:	695b      	ldr	r3, [r3, #20]
   b52e8:	9301      	str	r3, [sp, #4]
   b52ea:	bd08      	pop	{r3, pc}
   b52ec:	00030218 	.word	0x00030218

000b52f0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b52f0:	b508      	push	{r3, lr}
   b52f2:	4b02      	ldr	r3, [pc, #8]	; (b52fc <hal_rtc_time_is_valid+0xc>)
   b52f4:	681b      	ldr	r3, [r3, #0]
   b52f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b52f8:	9301      	str	r3, [sp, #4]
   b52fa:	bd08      	pop	{r3, pc}
   b52fc:	00030218 	.word	0x00030218

000b5300 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b5300:	b508      	push	{r3, lr}
   b5302:	4b02      	ldr	r3, [pc, #8]	; (b530c <hal_rtc_get_time+0xc>)
   b5304:	681b      	ldr	r3, [r3, #0]
   b5306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b5308:	9301      	str	r3, [sp, #4]
   b530a:	bd08      	pop	{r3, pc}
   b530c:	00030218 	.word	0x00030218

000b5310 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5310:	b508      	push	{r3, lr}
   b5312:	4b02      	ldr	r3, [pc, #8]	; (b531c <os_mutex_recursive_create+0xc>)
   b5314:	681b      	ldr	r3, [r3, #0]
   b5316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5318:	9301      	str	r3, [sp, #4]
   b531a:	bd08      	pop	{r3, pc}
   b531c:	00030248 	.word	0x00030248

000b5320 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5320:	b508      	push	{r3, lr}
   b5322:	4b02      	ldr	r3, [pc, #8]	; (b532c <inet_inet_ntop+0xc>)
   b5324:	681b      	ldr	r3, [r3, #0]
   b5326:	695b      	ldr	r3, [r3, #20]
   b5328:	9301      	str	r3, [sp, #4]
   b532a:	bd08      	pop	{r3, pc}
   b532c:	00030264 	.word	0x00030264

000b5330 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5330:	b508      	push	{r3, lr}
   b5332:	4b02      	ldr	r3, [pc, #8]	; (b533c <hal_usart_write+0xc>)
   b5334:	681b      	ldr	r3, [r3, #0]
   b5336:	68db      	ldr	r3, [r3, #12]
   b5338:	9301      	str	r3, [sp, #4]
   b533a:	bd08      	pop	{r3, pc}
   b533c:	0003023c 	.word	0x0003023c

000b5340 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5340:	b508      	push	{r3, lr}
   b5342:	4b02      	ldr	r3, [pc, #8]	; (b534c <hal_usart_available+0xc>)
   b5344:	681b      	ldr	r3, [r3, #0]
   b5346:	691b      	ldr	r3, [r3, #16]
   b5348:	9301      	str	r3, [sp, #4]
   b534a:	bd08      	pop	{r3, pc}
   b534c:	0003023c 	.word	0x0003023c

000b5350 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5350:	b508      	push	{r3, lr}
   b5352:	4b02      	ldr	r3, [pc, #8]	; (b535c <hal_usart_read+0xc>)
   b5354:	681b      	ldr	r3, [r3, #0]
   b5356:	695b      	ldr	r3, [r3, #20]
   b5358:	9301      	str	r3, [sp, #4]
   b535a:	bd08      	pop	{r3, pc}
   b535c:	0003023c 	.word	0x0003023c

000b5360 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5360:	b508      	push	{r3, lr}
   b5362:	4b02      	ldr	r3, [pc, #8]	; (b536c <hal_usart_peek+0xc>)
   b5364:	681b      	ldr	r3, [r3, #0]
   b5366:	699b      	ldr	r3, [r3, #24]
   b5368:	9301      	str	r3, [sp, #4]
   b536a:	bd08      	pop	{r3, pc}
   b536c:	0003023c 	.word	0x0003023c

000b5370 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5370:	b508      	push	{r3, lr}
   b5372:	4b02      	ldr	r3, [pc, #8]	; (b537c <hal_usart_flush+0xc>)
   b5374:	681b      	ldr	r3, [r3, #0]
   b5376:	69db      	ldr	r3, [r3, #28]
   b5378:	9301      	str	r3, [sp, #4]
   b537a:	bd08      	pop	{r3, pc}
   b537c:	0003023c 	.word	0x0003023c

000b5380 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5380:	b508      	push	{r3, lr}
   b5382:	4b02      	ldr	r3, [pc, #8]	; (b538c <hal_usart_available_data_for_write+0xc>)
   b5384:	681b      	ldr	r3, [r3, #0]
   b5386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5388:	9301      	str	r3, [sp, #4]
   b538a:	bd08      	pop	{r3, pc}
   b538c:	0003023c 	.word	0x0003023c

000b5390 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5390:	b508      	push	{r3, lr}
   b5392:	4b02      	ldr	r3, [pc, #8]	; (b539c <hal_usart_init_ex+0xc>)
   b5394:	681b      	ldr	r3, [r3, #0]
   b5396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5398:	9301      	str	r3, [sp, #4]
   b539a:	bd08      	pop	{r3, pc}
   b539c:	0003023c 	.word	0x0003023c

000b53a0 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b53a0:	b508      	push	{r3, lr}
   b53a2:	4b02      	ldr	r3, [pc, #8]	; (b53ac <hal_i2c_begin+0xc>)
   b53a4:	681b      	ldr	r3, [r3, #0]
   b53a6:	68db      	ldr	r3, [r3, #12]
   b53a8:	9301      	str	r3, [sp, #4]
   b53aa:	bd08      	pop	{r3, pc}
   b53ac:	00030228 	.word	0x00030228

000b53b0 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b53b0:	b508      	push	{r3, lr}
   b53b2:	4b02      	ldr	r3, [pc, #8]	; (b53bc <hal_i2c_begin_transmission+0xc>)
   b53b4:	681b      	ldr	r3, [r3, #0]
   b53b6:	699b      	ldr	r3, [r3, #24]
   b53b8:	9301      	str	r3, [sp, #4]
   b53ba:	bd08      	pop	{r3, pc}
   b53bc:	00030228 	.word	0x00030228

000b53c0 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b53c0:	b508      	push	{r3, lr}
   b53c2:	4b02      	ldr	r3, [pc, #8]	; (b53cc <hal_i2c_end_transmission+0xc>)
   b53c4:	681b      	ldr	r3, [r3, #0]
   b53c6:	69db      	ldr	r3, [r3, #28]
   b53c8:	9301      	str	r3, [sp, #4]
   b53ca:	bd08      	pop	{r3, pc}
   b53cc:	00030228 	.word	0x00030228

000b53d0 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b53d0:	b508      	push	{r3, lr}
   b53d2:	4b02      	ldr	r3, [pc, #8]	; (b53dc <hal_i2c_write+0xc>)
   b53d4:	681b      	ldr	r3, [r3, #0]
   b53d6:	6a1b      	ldr	r3, [r3, #32]
   b53d8:	9301      	str	r3, [sp, #4]
   b53da:	bd08      	pop	{r3, pc}
   b53dc:	00030228 	.word	0x00030228

000b53e0 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b53e0:	b508      	push	{r3, lr}
   b53e2:	4b02      	ldr	r3, [pc, #8]	; (b53ec <hal_i2c_available+0xc>)
   b53e4:	681b      	ldr	r3, [r3, #0]
   b53e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b53e8:	9301      	str	r3, [sp, #4]
   b53ea:	bd08      	pop	{r3, pc}
   b53ec:	00030228 	.word	0x00030228

000b53f0 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b53f0:	b508      	push	{r3, lr}
   b53f2:	4b02      	ldr	r3, [pc, #8]	; (b53fc <hal_i2c_read+0xc>)
   b53f4:	681b      	ldr	r3, [r3, #0]
   b53f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b53f8:	9301      	str	r3, [sp, #4]
   b53fa:	bd08      	pop	{r3, pc}
   b53fc:	00030228 	.word	0x00030228

000b5400 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5400:	b508      	push	{r3, lr}
   b5402:	4b02      	ldr	r3, [pc, #8]	; (b540c <hal_i2c_peek+0xc>)
   b5404:	681b      	ldr	r3, [r3, #0]
   b5406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5408:	9301      	str	r3, [sp, #4]
   b540a:	bd08      	pop	{r3, pc}
   b540c:	00030228 	.word	0x00030228

000b5410 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5410:	b508      	push	{r3, lr}
   b5412:	4b02      	ldr	r3, [pc, #8]	; (b541c <hal_i2c_flush+0xc>)
   b5414:	681b      	ldr	r3, [r3, #0]
   b5416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5418:	9301      	str	r3, [sp, #4]
   b541a:	bd08      	pop	{r3, pc}
   b541c:	00030228 	.word	0x00030228

000b5420 <hal_i2c_init>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5420:	b508      	push	{r3, lr}
   b5422:	4b02      	ldr	r3, [pc, #8]	; (b542c <hal_i2c_init+0xc>)
   b5424:	681b      	ldr	r3, [r3, #0]
   b5426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5428:	9301      	str	r3, [sp, #4]
   b542a:	bd08      	pop	{r3, pc}
   b542c:	00030228 	.word	0x00030228

000b5430 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b5430:	b508      	push	{r3, lr}
   b5432:	4b02      	ldr	r3, [pc, #8]	; (b543c <hal_i2c_request_ex+0xc>)
   b5434:	681b      	ldr	r3, [r3, #0]
   b5436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5438:	9301      	str	r3, [sp, #4]
   b543a:	bd08      	pop	{r3, pc}
   b543c:	00030228 	.word	0x00030228

000b5440 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5440:	b508      	push	{r3, lr}
   b5442:	4b02      	ldr	r3, [pc, #8]	; (b544c <HAL_USB_USART_Init+0xc>)
   b5444:	681b      	ldr	r3, [r3, #0]
   b5446:	681b      	ldr	r3, [r3, #0]
   b5448:	9301      	str	r3, [sp, #4]
   b544a:	bd08      	pop	{r3, pc}
   b544c:	0003024c 	.word	0x0003024c

000b5450 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5450:	b508      	push	{r3, lr}
   b5452:	4b02      	ldr	r3, [pc, #8]	; (b545c <HAL_USB_USART_Begin+0xc>)
   b5454:	681b      	ldr	r3, [r3, #0]
   b5456:	685b      	ldr	r3, [r3, #4]
   b5458:	9301      	str	r3, [sp, #4]
   b545a:	bd08      	pop	{r3, pc}
   b545c:	0003024c 	.word	0x0003024c

000b5460 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5460:	b508      	push	{r3, lr}
   b5462:	4b02      	ldr	r3, [pc, #8]	; (b546c <HAL_USB_USART_Available_Data+0xc>)
   b5464:	681b      	ldr	r3, [r3, #0]
   b5466:	691b      	ldr	r3, [r3, #16]
   b5468:	9301      	str	r3, [sp, #4]
   b546a:	bd08      	pop	{r3, pc}
   b546c:	0003024c 	.word	0x0003024c

000b5470 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5470:	b508      	push	{r3, lr}
   b5472:	4b02      	ldr	r3, [pc, #8]	; (b547c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5474:	681b      	ldr	r3, [r3, #0]
   b5476:	695b      	ldr	r3, [r3, #20]
   b5478:	9301      	str	r3, [sp, #4]
   b547a:	bd08      	pop	{r3, pc}
   b547c:	0003024c 	.word	0x0003024c

000b5480 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5480:	b508      	push	{r3, lr}
   b5482:	4b02      	ldr	r3, [pc, #8]	; (b548c <HAL_USB_USART_Receive_Data+0xc>)
   b5484:	681b      	ldr	r3, [r3, #0]
   b5486:	699b      	ldr	r3, [r3, #24]
   b5488:	9301      	str	r3, [sp, #4]
   b548a:	bd08      	pop	{r3, pc}
   b548c:	0003024c 	.word	0x0003024c

000b5490 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5490:	b508      	push	{r3, lr}
   b5492:	4b02      	ldr	r3, [pc, #8]	; (b549c <HAL_USB_USART_Send_Data+0xc>)
   b5494:	681b      	ldr	r3, [r3, #0]
   b5496:	69db      	ldr	r3, [r3, #28]
   b5498:	9301      	str	r3, [sp, #4]
   b549a:	bd08      	pop	{r3, pc}
   b549c:	0003024c 	.word	0x0003024c

000b54a0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b54a0:	b508      	push	{r3, lr}
   b54a2:	4b02      	ldr	r3, [pc, #8]	; (b54ac <HAL_USB_USART_Flush_Data+0xc>)
   b54a4:	681b      	ldr	r3, [r3, #0]
   b54a6:	6a1b      	ldr	r3, [r3, #32]
   b54a8:	9301      	str	r3, [sp, #4]
   b54aa:	bd08      	pop	{r3, pc}
   b54ac:	0003024c 	.word	0x0003024c

000b54b0 <led_set_status_active>:
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, get_default_system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   b54b0:	b508      	push	{r3, lr}
   b54b2:	4b03      	ldr	r3, [pc, #12]	; (b54c0 <led_set_status_active+0x10>)
   b54b4:	681b      	ldr	r3, [r3, #0]
   b54b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b54ba:	9301      	str	r3, [sp, #4]
   b54bc:	bd08      	pop	{r3, pc}
   b54be:	0000      	.short	0x0000
   b54c0:	00030260 	.word	0x00030260

000b54c4 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b54c4:	b508      	push	{r3, lr}
   b54c6:	4b02      	ldr	r3, [pc, #8]	; (b54d0 <system_mode+0xc>)
   b54c8:	681b      	ldr	r3, [r3, #0]
   b54ca:	681b      	ldr	r3, [r3, #0]
   b54cc:	9301      	str	r3, [sp, #4]
   b54ce:	bd08      	pop	{r3, pc}
   b54d0:	00030220 	.word	0x00030220

000b54d4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b54d4:	b508      	push	{r3, lr}
   b54d6:	4b02      	ldr	r3, [pc, #8]	; (b54e0 <set_system_mode+0xc>)
   b54d8:	681b      	ldr	r3, [r3, #0]
   b54da:	685b      	ldr	r3, [r3, #4]
   b54dc:	9301      	str	r3, [sp, #4]
   b54de:	bd08      	pop	{r3, pc}
   b54e0:	00030220 	.word	0x00030220

000b54e4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b54e4:	b508      	push	{r3, lr}
   b54e6:	4b02      	ldr	r3, [pc, #8]	; (b54f0 <system_delay_ms+0xc>)
   b54e8:	681b      	ldr	r3, [r3, #0]
   b54ea:	695b      	ldr	r3, [r3, #20]
   b54ec:	9301      	str	r3, [sp, #4]
   b54ee:	bd08      	pop	{r3, pc}
   b54f0:	00030220 	.word	0x00030220

000b54f4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b54f4:	b508      	push	{r3, lr}
   b54f6:	4b02      	ldr	r3, [pc, #8]	; (b5500 <application_thread_current+0xc>)
   b54f8:	681b      	ldr	r3, [r3, #0]
   b54fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b54fc:	9301      	str	r3, [sp, #4]
   b54fe:	bd08      	pop	{r3, pc}
   b5500:	00030220 	.word	0x00030220

000b5504 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b5504:	b508      	push	{r3, lr}
   b5506:	4b02      	ldr	r3, [pc, #8]	; (b5510 <application_thread_invoke+0xc>)
   b5508:	681b      	ldr	r3, [r3, #0]
   b550a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b550c:	9301      	str	r3, [sp, #4]
   b550e:	bd08      	pop	{r3, pc}
   b5510:	00030220 	.word	0x00030220

000b5514 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b5514:	b508      	push	{r3, lr}
   b5516:	4b02      	ldr	r3, [pc, #8]	; (b5520 <system_thread_get_state+0xc>)
   b5518:	681b      	ldr	r3, [r3, #0]
   b551a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b551c:	9301      	str	r3, [sp, #4]
   b551e:	bd08      	pop	{r3, pc}
   b5520:	00030220 	.word	0x00030220

000b5524 <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   b5524:	b508      	push	{r3, lr}
   b5526:	4b02      	ldr	r3, [pc, #8]	; (b5530 <led_pattern_period+0xc>)
   b5528:	681b      	ldr	r3, [r3, #0]
   b552a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b552c:	9301      	str	r3, [sp, #4]
   b552e:	bd08      	pop	{r3, pc}
   b5530:	00030220 	.word	0x00030220

000b5534 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5534:	b508      	push	{r3, lr}
   b5536:	4b03      	ldr	r3, [pc, #12]	; (b5544 <system_ctrl_set_app_request_handler+0x10>)
   b5538:	681b      	ldr	r3, [r3, #0]
   b553a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b553e:	9301      	str	r3, [sp, #4]
   b5540:	bd08      	pop	{r3, pc}
   b5542:	0000      	.short	0x0000
   b5544:	00030220 	.word	0x00030220

000b5548 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5548:	b508      	push	{r3, lr}
   b554a:	4b03      	ldr	r3, [pc, #12]	; (b5558 <system_ctrl_set_result+0x10>)
   b554c:	681b      	ldr	r3, [r3, #0]
   b554e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5552:	9301      	str	r3, [sp, #4]
   b5554:	bd08      	pop	{r3, pc}
   b5556:	0000      	.short	0x0000
   b5558:	00030220 	.word	0x00030220

000b555c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b555c:	b508      	push	{r3, lr}
   b555e:	4b02      	ldr	r3, [pc, #8]	; (b5568 <network_connect+0xc>)
   b5560:	681b      	ldr	r3, [r3, #0]
   b5562:	685b      	ldr	r3, [r3, #4]
   b5564:	9301      	str	r3, [sp, #4]
   b5566:	bd08      	pop	{r3, pc}
   b5568:	00030240 	.word	0x00030240

000b556c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b556c:	b508      	push	{r3, lr}
   b556e:	4b02      	ldr	r3, [pc, #8]	; (b5578 <network_connecting+0xc>)
   b5570:	681b      	ldr	r3, [r3, #0]
   b5572:	689b      	ldr	r3, [r3, #8]
   b5574:	9301      	str	r3, [sp, #4]
   b5576:	bd08      	pop	{r3, pc}
   b5578:	00030240 	.word	0x00030240

000b557c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b557c:	b508      	push	{r3, lr}
   b557e:	4b02      	ldr	r3, [pc, #8]	; (b5588 <network_disconnect+0xc>)
   b5580:	681b      	ldr	r3, [r3, #0]
   b5582:	68db      	ldr	r3, [r3, #12]
   b5584:	9301      	str	r3, [sp, #4]
   b5586:	bd08      	pop	{r3, pc}
   b5588:	00030240 	.word	0x00030240

000b558c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b558c:	b508      	push	{r3, lr}
   b558e:	4b02      	ldr	r3, [pc, #8]	; (b5598 <network_ready+0xc>)
   b5590:	681b      	ldr	r3, [r3, #0]
   b5592:	691b      	ldr	r3, [r3, #16]
   b5594:	9301      	str	r3, [sp, #4]
   b5596:	bd08      	pop	{r3, pc}
   b5598:	00030240 	.word	0x00030240

000b559c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b559c:	b508      	push	{r3, lr}
   b559e:	4b02      	ldr	r3, [pc, #8]	; (b55a8 <network_on+0xc>)
   b55a0:	681b      	ldr	r3, [r3, #0]
   b55a2:	695b      	ldr	r3, [r3, #20]
   b55a4:	9301      	str	r3, [sp, #4]
   b55a6:	bd08      	pop	{r3, pc}
   b55a8:	00030240 	.word	0x00030240

000b55ac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b55ac:	b508      	push	{r3, lr}
   b55ae:	4b02      	ldr	r3, [pc, #8]	; (b55b8 <network_off+0xc>)
   b55b0:	681b      	ldr	r3, [r3, #0]
   b55b2:	699b      	ldr	r3, [r3, #24]
   b55b4:	9301      	str	r3, [sp, #4]
   b55b6:	bd08      	pop	{r3, pc}
   b55b8:	00030240 	.word	0x00030240

000b55bc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b55bc:	b508      	push	{r3, lr}
   b55be:	4b02      	ldr	r3, [pc, #8]	; (b55c8 <network_listen+0xc>)
   b55c0:	681b      	ldr	r3, [r3, #0]
   b55c2:	69db      	ldr	r3, [r3, #28]
   b55c4:	9301      	str	r3, [sp, #4]
   b55c6:	bd08      	pop	{r3, pc}
   b55c8:	00030240 	.word	0x00030240

000b55cc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b55cc:	b508      	push	{r3, lr}
   b55ce:	4b02      	ldr	r3, [pc, #8]	; (b55d8 <network_listening+0xc>)
   b55d0:	681b      	ldr	r3, [r3, #0]
   b55d2:	6a1b      	ldr	r3, [r3, #32]
   b55d4:	9301      	str	r3, [sp, #4]
   b55d6:	bd08      	pop	{r3, pc}
   b55d8:	00030240 	.word	0x00030240

000b55dc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b55dc:	b508      	push	{r3, lr}
   b55de:	4b02      	ldr	r3, [pc, #8]	; (b55e8 <network_set_listen_timeout+0xc>)
   b55e0:	681b      	ldr	r3, [r3, #0]
   b55e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b55e4:	9301      	str	r3, [sp, #4]
   b55e6:	bd08      	pop	{r3, pc}
   b55e8:	00030240 	.word	0x00030240

000b55ec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b55ec:	b508      	push	{r3, lr}
   b55ee:	4b02      	ldr	r3, [pc, #8]	; (b55f8 <network_get_listen_timeout+0xc>)
   b55f0:	681b      	ldr	r3, [r3, #0]
   b55f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b55f4:	9301      	str	r3, [sp, #4]
   b55f6:	bd08      	pop	{r3, pc}
   b55f8:	00030240 	.word	0x00030240

000b55fc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b55fc:	b508      	push	{r3, lr}
   b55fe:	4b02      	ldr	r3, [pc, #8]	; (b5608 <network_is_on+0xc>)
   b5600:	681b      	ldr	r3, [r3, #0]
   b5602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5604:	9301      	str	r3, [sp, #4]
   b5606:	bd08      	pop	{r3, pc}
   b5608:	00030240 	.word	0x00030240

000b560c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b560c:	b508      	push	{r3, lr}
   b560e:	4b02      	ldr	r3, [pc, #8]	; (b5618 <network_is_off+0xc>)
   b5610:	681b      	ldr	r3, [r3, #0]
   b5612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5614:	9301      	str	r3, [sp, #4]
   b5616:	bd08      	pop	{r3, pc}
   b5618:	00030240 	.word	0x00030240

000b561c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b561c:	b508      	push	{r3, lr}
   b561e:	4b02      	ldr	r3, [pc, #8]	; (b5628 <spark_process+0xc>)
   b5620:	681b      	ldr	r3, [r3, #0]
   b5622:	689b      	ldr	r3, [r3, #8]
   b5624:	9301      	str	r3, [sp, #4]
   b5626:	bd08      	pop	{r3, pc}
   b5628:	00030244 	.word	0x00030244

000b562c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b562c:	b508      	push	{r3, lr}
   b562e:	4b02      	ldr	r3, [pc, #8]	; (b5638 <spark_cloud_flag_connected+0xc>)
   b5630:	681b      	ldr	r3, [r3, #0]
   b5632:	695b      	ldr	r3, [r3, #20]
   b5634:	9301      	str	r3, [sp, #4]
   b5636:	bd08      	pop	{r3, pc}
   b5638:	00030244 	.word	0x00030244

000b563c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b563c:	b508      	push	{r3, lr}
   b563e:	4b02      	ldr	r3, [pc, #8]	; (b5648 <spark_send_event+0xc>)
   b5640:	681b      	ldr	r3, [r3, #0]
   b5642:	6a1b      	ldr	r3, [r3, #32]
   b5644:	9301      	str	r3, [sp, #4]
   b5646:	bd08      	pop	{r3, pc}
   b5648:	00030244 	.word	0x00030244

000b564c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b564c:	b508      	push	{r3, lr}
   b564e:	4b02      	ldr	r3, [pc, #8]	; (b5658 <spark_subscribe+0xc>)
   b5650:	681b      	ldr	r3, [r3, #0]
   b5652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5654:	9301      	str	r3, [sp, #4]
   b5656:	bd08      	pop	{r3, pc}
   b5658:	00030244 	.word	0x00030244

000b565c <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b565c:	b508      	push	{r3, lr}
   b565e:	4b02      	ldr	r3, [pc, #8]	; (b5668 <spark_sync_time_pending+0xc>)
   b5660:	681b      	ldr	r3, [r3, #0]
   b5662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5664:	9301      	str	r3, [sp, #4]
   b5666:	bd08      	pop	{r3, pc}
   b5668:	00030244 	.word	0x00030244

000b566c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b566c:	b508      	push	{r3, lr}
   b566e:	4b02      	ldr	r3, [pc, #8]	; (b5678 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5670:	681b      	ldr	r3, [r3, #0]
   b5672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5674:	9301      	str	r3, [sp, #4]
   b5676:	bd08      	pop	{r3, pc}
   b5678:	00030244 	.word	0x00030244

000b567c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b567c:	b508      	push	{r3, lr}
   b567e:	4b02      	ldr	r3, [pc, #8]	; (b5688 <malloc+0xc>)
   b5680:	681b      	ldr	r3, [r3, #0]
   b5682:	681b      	ldr	r3, [r3, #0]
   b5684:	9301      	str	r3, [sp, #4]
   b5686:	bd08      	pop	{r3, pc}
   b5688:	0003021c 	.word	0x0003021c

000b568c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b568c:	b508      	push	{r3, lr}
   b568e:	4b02      	ldr	r3, [pc, #8]	; (b5698 <free+0xc>)
   b5690:	681b      	ldr	r3, [r3, #0]
   b5692:	685b      	ldr	r3, [r3, #4]
   b5694:	9301      	str	r3, [sp, #4]
   b5696:	bd08      	pop	{r3, pc}
   b5698:	0003021c 	.word	0x0003021c

000b569c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b569c:	b508      	push	{r3, lr}
   b569e:	4b02      	ldr	r3, [pc, #8]	; (b56a8 <realloc+0xc>)
   b56a0:	681b      	ldr	r3, [r3, #0]
   b56a2:	689b      	ldr	r3, [r3, #8]
   b56a4:	9301      	str	r3, [sp, #4]
   b56a6:	bd08      	pop	{r3, pc}
   b56a8:	0003021c 	.word	0x0003021c

000b56ac <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b56ac:	b508      	push	{r3, lr}
   b56ae:	4b02      	ldr	r3, [pc, #8]	; (b56b8 <siprintf+0xc>)
   b56b0:	681b      	ldr	r3, [r3, #0]
   b56b2:	691b      	ldr	r3, [r3, #16]
   b56b4:	9301      	str	r3, [sp, #4]
   b56b6:	bd08      	pop	{r3, pc}
   b56b8:	0003021c 	.word	0x0003021c

000b56bc <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b56bc:	b508      	push	{r3, lr}
   b56be:	4b02      	ldr	r3, [pc, #8]	; (b56c8 <snprintf+0xc>)
   b56c0:	681b      	ldr	r3, [r3, #0]
   b56c2:	69db      	ldr	r3, [r3, #28]
   b56c4:	9301      	str	r3, [sp, #4]
   b56c6:	bd08      	pop	{r3, pc}
   b56c8:	0003021c 	.word	0x0003021c

000b56cc <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b56cc:	b508      	push	{r3, lr}
   b56ce:	4b02      	ldr	r3, [pc, #8]	; (b56d8 <abort+0xc>)
   b56d0:	681b      	ldr	r3, [r3, #0]
   b56d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b56d4:	9301      	str	r3, [sp, #4]
   b56d6:	bd08      	pop	{r3, pc}
   b56d8:	0003021c 	.word	0x0003021c

000b56dc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b56dc:	b508      	push	{r3, lr}
   b56de:	4b02      	ldr	r3, [pc, #8]	; (b56e8 <_malloc_r+0xc>)
   b56e0:	681b      	ldr	r3, [r3, #0]
   b56e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b56e4:	9301      	str	r3, [sp, #4]
   b56e6:	bd08      	pop	{r3, pc}
   b56e8:	0003021c 	.word	0x0003021c

000b56ec <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b56ec:	b508      	push	{r3, lr}
   b56ee:	4b02      	ldr	r3, [pc, #8]	; (b56f8 <__assert_func+0xc>)
   b56f0:	681b      	ldr	r3, [r3, #0]
   b56f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b56f4:	9301      	str	r3, [sp, #4]
   b56f6:	bd08      	pop	{r3, pc}
   b56f8:	0003021c 	.word	0x0003021c

000b56fc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b56fc:	b508      	push	{r3, lr}
   b56fe:	4b02      	ldr	r3, [pc, #8]	; (b5708 <newlib_impure_ptr_callback+0xc>)
   b5700:	681b      	ldr	r3, [r3, #0]
   b5702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5704:	9301      	str	r3, [sp, #4]
   b5706:	bd08      	pop	{r3, pc}
   b5708:	0003021c 	.word	0x0003021c

000b570c <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   b570c:	b508      	push	{r3, lr}
   b570e:	4b02      	ldr	r3, [pc, #8]	; (b5718 <strftime+0xc>)
   b5710:	681b      	ldr	r3, [r3, #0]
   b5712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b5714:	9301      	str	r3, [sp, #4]
   b5716:	bd08      	pop	{r3, pc}
   b5718:	0003021c 	.word	0x0003021c

000b571c <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b571c:	b508      	push	{r3, lr}
   b571e:	4b02      	ldr	r3, [pc, #8]	; (b5728 <localtime_r+0xc>)
   b5720:	681b      	ldr	r3, [r3, #0]
   b5722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5724:	9301      	str	r3, [sp, #4]
   b5726:	bd08      	pop	{r3, pc}
   b5728:	0003021c 	.word	0x0003021c

000b572c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b572c:	2200      	movs	r2, #0
   b572e:	6840      	ldr	r0, [r0, #4]
   b5730:	4611      	mov	r1, r2
   b5732:	f7ff bf4b 	b.w	b55cc <network_listening>

000b5736 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5736:	2200      	movs	r2, #0
   b5738:	6840      	ldr	r0, [r0, #4]
   b573a:	4611      	mov	r1, r2
   b573c:	f7ff bf56 	b.w	b55ec <network_get_listen_timeout>

000b5740 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5740:	6840      	ldr	r0, [r0, #4]
   b5742:	2200      	movs	r2, #0
   b5744:	f7ff bf4a 	b.w	b55dc <network_set_listen_timeout>

000b5748 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5748:	6840      	ldr	r0, [r0, #4]
   b574a:	2200      	movs	r2, #0
   b574c:	f081 0101 	eor.w	r1, r1, #1
   b5750:	f7ff bf34 	b.w	b55bc <network_listen>

000b5754 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5754:	2300      	movs	r3, #0
   b5756:	6840      	ldr	r0, [r0, #4]
   b5758:	461a      	mov	r2, r3
   b575a:	4619      	mov	r1, r3
   b575c:	f7ff bf26 	b.w	b55ac <network_off>

000b5760 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5760:	2300      	movs	r3, #0
   b5762:	6840      	ldr	r0, [r0, #4]
   b5764:	461a      	mov	r2, r3
   b5766:	4619      	mov	r1, r3
   b5768:	f7ff bf18 	b.w	b559c <network_on>

000b576c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b576c:	2200      	movs	r2, #0
   b576e:	6840      	ldr	r0, [r0, #4]
   b5770:	4611      	mov	r1, r2
   b5772:	f7ff bf0b 	b.w	b558c <network_ready>

000b5776 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5776:	2200      	movs	r2, #0
   b5778:	6840      	ldr	r0, [r0, #4]
   b577a:	4611      	mov	r1, r2
   b577c:	f7ff bef6 	b.w	b556c <network_connecting>

000b5780 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5780:	6840      	ldr	r0, [r0, #4]
   b5782:	2200      	movs	r2, #0
   b5784:	2102      	movs	r1, #2
   b5786:	f7ff bef9 	b.w	b557c <network_disconnect>

000b578a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b578a:	2300      	movs	r3, #0
   b578c:	6840      	ldr	r0, [r0, #4]
   b578e:	461a      	mov	r2, r3
   b5790:	f7ff bee4 	b.w	b555c <network_connect>

000b5794 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5794:	4b02      	ldr	r3, [pc, #8]	; (b57a0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5796:	2203      	movs	r2, #3
   b5798:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b579a:	4a02      	ldr	r2, [pc, #8]	; (b57a4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b579c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b579e:	4770      	bx	lr
   b57a0:	2003e684 	.word	0x2003e684
   b57a4:	000b9cc8 	.word	0x000b9cc8

000b57a8 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   b57a8:	680a      	ldr	r2, [r1, #0]
void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   b57aa:	460b      	mov	r3, r1
    s->update(ticks);
   b57ac:	6892      	ldr	r2, [r2, #8]
   b57ae:	4601      	mov	r1, r0
   b57b0:	4618      	mov	r0, r3
   b57b2:	4710      	bx	r2

000b57b4 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   b57b4:	b570      	push	{r4, r5, r6, lr}
   b57b6:	4c0e      	ldr	r4, [pc, #56]	; (b57f0 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   b57b8:	6004      	str	r4, [r0, #0]
    d_.next = nullptr;
   b57ba:	2500      	movs	r5, #0
   b57bc:	241c      	movs	r4, #28
   b57be:	e9c0 4501 	strd	r4, r5, [r0, #4]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   b57c2:	f89d 4014 	ldrb.w	r4, [sp, #20]
   b57c6:	f89d 6010 	ldrb.w	r6, [sp, #16]
    d_.prev = nullptr;
   b57ca:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   b57cc:	f004 0403 	and.w	r4, r4, #3
   b57d0:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
   b57d4:	b2e4      	uxtb	r4, r4
   b57d6:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   b57d8:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   b57da:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   b57dc:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   b57de:	7c42      	ldrb	r2, [r0, #17]
   b57e0:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   b57e2:	bf0a      	itet	eq
   b57e4:	4b03      	ldreq	r3, [pc, #12]	; (b57f4 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)
        d_.period = period;
   b57e6:	8303      	strhne	r3, [r0, #24]
        d_.data = this; // Callback data
   b57e8:	e9c0 3006 	strdeq	r3, r0, [r0, #24]
}
   b57ec:	bd70      	pop	{r4, r5, r6, pc}
   b57ee:	bf00      	nop
   b57f0:	000b9bfc 	.word	0x000b9bfc
   b57f4:	000b57a9 	.word	0x000b57a9

000b57f8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b57f8:	4b05      	ldr	r3, [pc, #20]	; (b5810 <_GLOBAL__sub_I_System+0x18>)
   b57fa:	2202      	movs	r2, #2
   b57fc:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b57fe:	4b05      	ldr	r3, [pc, #20]	; (b5814 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5800:	4a05      	ldr	r2, [pc, #20]	; (b5818 <_GLOBAL__sub_I_System+0x20>)
   b5802:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5804:	2000      	movs	r0, #0
   b5806:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b580a:	f7ff be63 	b.w	b54d4 <set_system_mode>
   b580e:	bf00      	nop
   b5810:	2003e698 	.word	0x2003e698
   b5814:	2003e68c 	.word	0x2003e68c
   b5818:	ffff0000 	.word	0xffff0000

000b581c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b581c:	b510      	push	{r4, lr}
   b581e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b5820:	f002 f92d 	bl	b7a7e <strlen>
   b5824:	3801      	subs	r0, #1
   b5826:	1823      	adds	r3, r4, r0
   b5828:	4620      	mov	r0, r4
	while(i<j){
   b582a:	4283      	cmp	r3, r0
   b582c:	d906      	bls.n	b583c <_Z11str_reversePc+0x20>
		c = *i;
   b582e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b5830:	7819      	ldrb	r1, [r3, #0]
   b5832:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b5836:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b583a:	e7f6      	b.n	b582a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b583c:	bd10      	pop	{r4, pc}

000b583e <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b583e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b5842:	1e93      	subs	r3, r2, #2
{
   b5844:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b5846:	2b22      	cmp	r3, #34	; 0x22
   b5848:	f04f 0300 	mov.w	r3, #0
{
   b584c:	460d      	mov	r5, r1
   b584e:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b5850:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b5854:	d927      	bls.n	b58a6 <ltoa+0x68>

      if (10 == base && N < 0L)
   b5856:	2800      	cmp	r0, #0
   b5858:	da2a      	bge.n	b58b0 <ltoa+0x72>
      {
            *head++ = '-';
   b585a:	462e      	mov	r6, r5
   b585c:	232d      	movs	r3, #45	; 0x2d
   b585e:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b5862:	4240      	negs	r0, r0
   b5864:	240a      	movs	r4, #10
      *tail-- = '\0';
   b5866:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b586a:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b586e:	4622      	mov	r2, r4
   b5870:	4601      	mov	r1, r0
   b5872:	a801      	add	r0, sp, #4
   b5874:	f002 f87b 	bl	b796e <ldiv>
   b5878:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b587a:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b587c:	2b09      	cmp	r3, #9
   b587e:	bfcc      	ite	gt
   b5880:	2237      	movgt	r2, #55	; 0x37
   b5882:	2230      	movle	r2, #48	; 0x30
   b5884:	fa52 f383 	uxtab	r3, r2, r3
   b5888:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b588c:	f108 0801 	add.w	r8, r8, #1
   b5890:	2800      	cmp	r0, #0
   b5892:	d1ec      	bne.n	b586e <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b5894:	4642      	mov	r2, r8
   b5896:	1c79      	adds	r1, r7, #1
   b5898:	4630      	mov	r0, r6
   b589a:	f002 f87c 	bl	b7996 <memcpy>
      return str;
}
   b589e:	4628      	mov	r0, r5
   b58a0:	b00c      	add	sp, #48	; 0x30
   b58a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b58a6:	2a0a      	cmp	r2, #10
   b58a8:	d0d5      	beq.n	b5856 <ltoa+0x18>
      if (uarg)
   b58aa:	b118      	cbz	r0, b58b4 <ltoa+0x76>
   b58ac:	462e      	mov	r6, r5
   b58ae:	e7da      	b.n	b5866 <ltoa+0x28>
   b58b0:	240a      	movs	r4, #10
   b58b2:	e7fa      	b.n	b58aa <ltoa+0x6c>
      else  *tail-- = '0';
   b58b4:	2330      	movs	r3, #48	; 0x30
   b58b6:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b58ba:	462e      	mov	r6, r5
   b58bc:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b58c0:	f04f 0802 	mov.w	r8, #2
   b58c4:	e7e6      	b.n	b5894 <ltoa+0x56>

000b58c6 <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b58c6:	b570      	push	{r4, r5, r6, lr}
   b58c8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b58ca:	1e91      	subs	r1, r2, #2
   b58cc:	2922      	cmp	r1, #34	; 0x22
   b58ce:	d81d      	bhi.n	b590c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b58d0:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b58d2:	b930      	cbnz	r0, b58e2 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b58d4:	4423      	add	r3, r4
            *ptr++ = '0';
   b58d6:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b58d8:	429d      	cmp	r5, r3
   b58da:	d210      	bcs.n	b58fe <ultoa+0x38>
            *ptr++ = '0';
   b58dc:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b58e0:	e7fa      	b.n	b58d8 <ultoa+0x12>
            result.quot = a/radix;
   b58e2:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b58e6:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b58ea:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b58ec:	2809      	cmp	r0, #9
                *ptr += '0';
   b58ee:	bf94      	ite	ls
   b58f0:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b58f2:	3157      	addhi	r1, #87	; 0x57
   b58f4:	b2c9      	uxtb	r1, r1
   b58f6:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b58fa:	4630      	mov	r0, r6
	while(a){
   b58fc:	e7e9      	b.n	b58d2 <ultoa+0xc>

	*ptr = '\0';
   b58fe:	2300      	movs	r3, #0
	str_reverse(buffer);
   b5900:	4620      	mov	r0, r4
	*ptr = '\0';
   b5902:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b5904:	f7ff ff8a 	bl	b581c <_Z11str_reversePc>
	return buffer;
   b5908:	4620      	mov	r0, r4
}
   b590a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b590c:	2000      	movs	r0, #0
   b590e:	e7fc      	b.n	b590a <ultoa+0x44>

000b5910 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b5910:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b5912:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b5914:	460c      	mov	r4, r1
   b5916:	4615      	mov	r5, r2
	if(a<0){
   b5918:	da0e      	bge.n	b5938 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b591a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b591e:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b5922:	bf14      	ite	ne
   b5924:	4258      	negne	r0, r3
   b5926:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b5928:	2301      	movs	r3, #1
		*buffer = '-';
   b592a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b592c:	462a      	mov	r2, r5
   b592e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b5930:	f7ff ffc9 	bl	b58c6 <ultoa>
	}
	return buffer;
}
   b5934:	4620      	mov	r0, r4
   b5936:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b5938:	2301      	movs	r3, #1
   b593a:	e7f9      	b.n	b5930 <itoa+0x20>

000b593c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b593c:	b510      	push	{r4, lr}
   b593e:	4604      	mov	r4, r0
{
	free(buffer);
   b5940:	6800      	ldr	r0, [r0, #0]
   b5942:	f7ff fea3 	bl	b568c <free>
}
   b5946:	4620      	mov	r0, r4
   b5948:	bd10      	pop	{r4, pc}

000b594a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b594a:	b510      	push	{r4, lr}
   b594c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b594e:	6800      	ldr	r0, [r0, #0]
   b5950:	b108      	cbz	r0, b5956 <_ZN6String10invalidateEv+0xc>
   b5952:	f7ff fe9b 	bl	b568c <free>
	buffer = NULL;
   b5956:	2300      	movs	r3, #0
	capacity = len = 0;
   b5958:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b595c:	6023      	str	r3, [r4, #0]
}
   b595e:	bd10      	pop	{r4, pc}

000b5960 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5960:	b538      	push	{r3, r4, r5, lr}
   b5962:	4604      	mov	r4, r0
   b5964:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5966:	6800      	ldr	r0, [r0, #0]
   b5968:	3101      	adds	r1, #1
   b596a:	f7ff fe97 	bl	b569c <realloc>
	if (newbuffer) {
   b596e:	b110      	cbz	r0, b5976 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5970:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5974:	2001      	movs	r0, #1
	}
	return 0;
}
   b5976:	bd38      	pop	{r3, r4, r5, pc}

000b5978 <_ZN6String7reserveEj>:
{
   b5978:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b597a:	6803      	ldr	r3, [r0, #0]
{
   b597c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b597e:	b123      	cbz	r3, b598a <_ZN6String7reserveEj+0x12>
   b5980:	6843      	ldr	r3, [r0, #4]
   b5982:	428b      	cmp	r3, r1
   b5984:	d301      	bcc.n	b598a <_ZN6String7reserveEj+0x12>
   b5986:	2001      	movs	r0, #1
}
   b5988:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b598a:	4620      	mov	r0, r4
   b598c:	f7ff ffe8 	bl	b5960 <_ZN6String12changeBufferEj>
   b5990:	2800      	cmp	r0, #0
   b5992:	d0f9      	beq.n	b5988 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5994:	68a3      	ldr	r3, [r4, #8]
   b5996:	2b00      	cmp	r3, #0
   b5998:	d1f5      	bne.n	b5986 <_ZN6String7reserveEj+0xe>
   b599a:	6822      	ldr	r2, [r4, #0]
   b599c:	7013      	strb	r3, [r2, #0]
   b599e:	e7f2      	b.n	b5986 <_ZN6String7reserveEj+0xe>

000b59a0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b59a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b59a2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b59a4:	4611      	mov	r1, r2
   b59a6:	9201      	str	r2, [sp, #4]
{
   b59a8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b59aa:	f7ff ffe5 	bl	b5978 <_ZN6String7reserveEj>
   b59ae:	9a01      	ldr	r2, [sp, #4]
   b59b0:	b928      	cbnz	r0, b59be <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b59b2:	4620      	mov	r0, r4
   b59b4:	f7ff ffc9 	bl	b594a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b59b8:	4620      	mov	r0, r4
   b59ba:	b003      	add	sp, #12
   b59bc:	bd30      	pop	{r4, r5, pc}
	len = length;
   b59be:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b59c0:	4629      	mov	r1, r5
   b59c2:	6820      	ldr	r0, [r4, #0]
   b59c4:	f001 ffe7 	bl	b7996 <memcpy>
	buffer[len] = 0;
   b59c8:	6822      	ldr	r2, [r4, #0]
   b59ca:	68a3      	ldr	r3, [r4, #8]
   b59cc:	2100      	movs	r1, #0
   b59ce:	54d1      	strb	r1, [r2, r3]
	return *this;
   b59d0:	e7f2      	b.n	b59b8 <_ZN6String4copyEPKcj+0x18>

000b59d2 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b59d2:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b59d4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b59d6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b59da:	4604      	mov	r4, r0
	len = 0;
   b59dc:	6083      	str	r3, [r0, #8]
	flags = 0;
   b59de:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b59e0:	b141      	cbz	r1, b59f4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b59e2:	4608      	mov	r0, r1
   b59e4:	9101      	str	r1, [sp, #4]
   b59e6:	f002 f84a 	bl	b7a7e <strlen>
   b59ea:	9901      	ldr	r1, [sp, #4]
   b59ec:	4602      	mov	r2, r0
   b59ee:	4620      	mov	r0, r4
   b59f0:	f7ff ffd6 	bl	b59a0 <_ZN6String4copyEPKcj>
}
   b59f4:	4620      	mov	r0, r4
   b59f6:	b002      	add	sp, #8
   b59f8:	bd10      	pop	{r4, pc}

000b59fa <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b59fa:	4288      	cmp	r0, r1
{
   b59fc:	b510      	push	{r4, lr}
   b59fe:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b5a00:	d005      	beq.n	b5a0e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b5a02:	680b      	ldr	r3, [r1, #0]
   b5a04:	b12b      	cbz	r3, b5a12 <_ZN6StringaSERKS_+0x18>
   b5a06:	688a      	ldr	r2, [r1, #8]
   b5a08:	4619      	mov	r1, r3
   b5a0a:	f7ff ffc9 	bl	b59a0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5a0e:	4620      	mov	r0, r4
   b5a10:	bd10      	pop	{r4, pc}
	else invalidate();
   b5a12:	f7ff ff9a 	bl	b594a <_ZN6String10invalidateEv>
   b5a16:	e7fa      	b.n	b5a0e <_ZN6StringaSERKS_+0x14>

000b5a18 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b5a18:	b510      	push	{r4, lr}
	buffer = NULL;
   b5a1a:	2300      	movs	r3, #0
String::String(const String &value)
   b5a1c:	4604      	mov	r4, r0
	capacity = 0;
   b5a1e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b5a22:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5a24:	7303      	strb	r3, [r0, #12]
	*this = value;
   b5a26:	f7ff ffe8 	bl	b59fa <_ZN6StringaSERKS_>
}
   b5a2a:	4620      	mov	r0, r4
   b5a2c:	bd10      	pop	{r4, pc}

000b5a2e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b5a2e:	b513      	push	{r0, r1, r4, lr}
   b5a30:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b5a32:	b159      	cbz	r1, b5a4c <_ZN6StringaSEPKc+0x1e>
   b5a34:	4608      	mov	r0, r1
   b5a36:	9101      	str	r1, [sp, #4]
   b5a38:	f002 f821 	bl	b7a7e <strlen>
   b5a3c:	9901      	ldr	r1, [sp, #4]
   b5a3e:	4602      	mov	r2, r0
   b5a40:	4620      	mov	r0, r4
   b5a42:	f7ff ffad 	bl	b59a0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5a46:	4620      	mov	r0, r4
   b5a48:	b002      	add	sp, #8
   b5a4a:	bd10      	pop	{r4, pc}
	else invalidate();
   b5a4c:	f7ff ff7d 	bl	b594a <_ZN6String10invalidateEv>
   b5a50:	e7f9      	b.n	b5a46 <_ZN6StringaSEPKc+0x18>

000b5a52 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b5a52:	b510      	push	{r4, lr}
   b5a54:	4604      	mov	r4, r0
   b5a56:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b5a58:	2300      	movs	r3, #0
	capacity = 0;
   b5a5a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b5a5e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b5a60:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b5a62:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b5a64:	a901      	add	r1, sp, #4
   b5a66:	f7ff ff53 	bl	b5910 <itoa>
	*this = buf;
   b5a6a:	a901      	add	r1, sp, #4
   b5a6c:	4620      	mov	r0, r4
   b5a6e:	f7ff ffde 	bl	b5a2e <_ZN6StringaSEPKc>
}
   b5a72:	4620      	mov	r0, r4
   b5a74:	b00a      	add	sp, #40	; 0x28
   b5a76:	bd10      	pop	{r4, pc}

000b5a78 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   b5a78:	b510      	push	{r4, lr}
   b5a7a:	4604      	mov	r4, r0
   b5a7c:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b5a7e:	2300      	movs	r3, #0
	capacity = 0;
   b5a80:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b5a84:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b5a86:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   b5a88:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   b5a8a:	a901      	add	r1, sp, #4
   b5a8c:	f7ff fed7 	bl	b583e <ltoa>
	*this = buf;
   b5a90:	a901      	add	r1, sp, #4
   b5a92:	4620      	mov	r0, r4
   b5a94:	f7ff ffcb 	bl	b5a2e <_ZN6StringaSEPKc>
}
   b5a98:	4620      	mov	r0, r4
   b5a9a:	b00a      	add	sp, #40	; 0x28
   b5a9c:	bd10      	pop	{r4, pc}

000b5a9e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b5a9e:	b570      	push	{r4, r5, r6, lr}
   b5aa0:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b5aa2:	460e      	mov	r6, r1
   b5aa4:	b909      	cbnz	r1, b5aaa <_ZN6String6concatEPKcj+0xc>
   b5aa6:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b5aa8:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b5aaa:	b16a      	cbz	r2, b5ac8 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b5aac:	6884      	ldr	r4, [r0, #8]
   b5aae:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b5ab0:	4621      	mov	r1, r4
   b5ab2:	f7ff ff61 	bl	b5978 <_ZN6String7reserveEj>
   b5ab6:	2800      	cmp	r0, #0
   b5ab8:	d0f5      	beq.n	b5aa6 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b5aba:	6828      	ldr	r0, [r5, #0]
   b5abc:	68ab      	ldr	r3, [r5, #8]
   b5abe:	4631      	mov	r1, r6
   b5ac0:	4418      	add	r0, r3
   b5ac2:	f001 ffb7 	bl	b7a34 <strcpy>
	len = newlen;
   b5ac6:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b5ac8:	2001      	movs	r0, #1
   b5aca:	e7ed      	b.n	b5aa8 <_ZN6String6concatEPKcj+0xa>

000b5acc <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b5acc:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b5ace:	688a      	ldr	r2, [r1, #8]
   b5ad0:	6809      	ldr	r1, [r1, #0]
{
   b5ad2:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b5ad4:	f7ff ffe3 	bl	b5a9e <_ZN6String6concatEPKcj>
   b5ad8:	b910      	cbnz	r0, b5ae0 <_ZplRK15StringSumHelperRK6String+0x14>
   b5ada:	4620      	mov	r0, r4
   b5adc:	f7ff ff35 	bl	b594a <_ZN6String10invalidateEv>
	return a;
}
   b5ae0:	4620      	mov	r0, r4
   b5ae2:	bd10      	pop	{r4, pc}

000b5ae4 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b5ae4:	b513      	push	{r0, r1, r4, lr}
   b5ae6:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b5ae8:	b929      	cbnz	r1, b5af6 <_ZplRK15StringSumHelperPKc+0x12>
   b5aea:	4620      	mov	r0, r4
   b5aec:	f7ff ff2d 	bl	b594a <_ZN6String10invalidateEv>
	return a;
}
   b5af0:	4620      	mov	r0, r4
   b5af2:	b002      	add	sp, #8
   b5af4:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b5af6:	4608      	mov	r0, r1
   b5af8:	9101      	str	r1, [sp, #4]
   b5afa:	f001 ffc0 	bl	b7a7e <strlen>
   b5afe:	9901      	ldr	r1, [sp, #4]
   b5b00:	4602      	mov	r2, r0
   b5b02:	4620      	mov	r0, r4
   b5b04:	f7ff ffcb 	bl	b5a9e <_ZN6String6concatEPKcj>
   b5b08:	2800      	cmp	r0, #0
   b5b0a:	d0ee      	beq.n	b5aea <_ZplRK15StringSumHelperPKc+0x6>
   b5b0c:	e7f0      	b.n	b5af0 <_ZplRK15StringSumHelperPKc+0xc>

000b5b0e <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b5b0e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b5b10:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5b12:	4604      	mov	r4, r0
      if (_M_manager)
   b5b14:	b113      	cbz	r3, b5b1c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5b16:	2203      	movs	r2, #3
   b5b18:	4601      	mov	r1, r0
   b5b1a:	4798      	blx	r3
    }
   b5b1c:	4620      	mov	r0, r4
   b5b1e:	bd10      	pop	{r4, pc}

000b5b20 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b5b20:	b513      	push	{r0, r1, r4, lr}
   b5b22:	460b      	mov	r3, r1
   b5b24:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5b26:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5b2a:	466c      	mov	r4, sp
   b5b2c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5b30:	e893 0003 	ldmia.w	r3, {r0, r1}
   b5b34:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5b38:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5b3c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b5b40:	b002      	add	sp, #8
   b5b42:	bd10      	pop	{r4, pc}

000b5b44 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5b44:	4802      	ldr	r0, [pc, #8]	; (b5b50 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5b46:	2300      	movs	r3, #0
   b5b48:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5b4a:	f7ff bbe1 	b.w	b5310 <os_mutex_recursive_create>
   b5b4e:	bf00      	nop
   b5b50:	2003e69c 	.word	0x2003e69c

000b5b54 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b56:	4606      	mov	r6, r0
   b5b58:	460d      	mov	r5, r1
  size_t n = 0;
   b5b5a:	188f      	adds	r7, r1, r2
   b5b5c:	2400      	movs	r4, #0
  while (size--) {
   b5b5e:	42bd      	cmp	r5, r7
   b5b60:	d00c      	beq.n	b5b7c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5b62:	6833      	ldr	r3, [r6, #0]
   b5b64:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5b68:	689b      	ldr	r3, [r3, #8]
   b5b6a:	4630      	mov	r0, r6
   b5b6c:	4798      	blx	r3
     if (chunk>=0)
   b5b6e:	1e03      	subs	r3, r0, #0
   b5b70:	db01      	blt.n	b5b76 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5b72:	441c      	add	r4, r3
  while (size--) {
   b5b74:	e7f3      	b.n	b5b5e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5b76:	2c00      	cmp	r4, #0
   b5b78:	bf08      	it	eq
   b5b7a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5b7c:	4620      	mov	r0, r4
   b5b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5b80 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b5b80:	b513      	push	{r0, r1, r4, lr}
   b5b82:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b5b84:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5b86:	b159      	cbz	r1, b5ba0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5b88:	9101      	str	r1, [sp, #4]
   b5b8a:	f001 ff78 	bl	b7a7e <strlen>
   b5b8e:	6823      	ldr	r3, [r4, #0]
   b5b90:	9901      	ldr	r1, [sp, #4]
   b5b92:	68db      	ldr	r3, [r3, #12]
   b5b94:	4602      	mov	r2, r0
   b5b96:	4620      	mov	r0, r4
    }
   b5b98:	b002      	add	sp, #8
   b5b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5b9e:	4718      	bx	r3
    }
   b5ba0:	b002      	add	sp, #8
   b5ba2:	bd10      	pop	{r4, pc}

000b5ba4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b5ba4:	b508      	push	{r3, lr}
  return write(str);
   b5ba6:	f7ff ffeb 	bl	b5b80 <_ZN5Print5writeEPKc>
}
   b5baa:	bd08      	pop	{r3, pc}

000b5bac <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b5bac:	6803      	ldr	r3, [r0, #0]
   b5bae:	689b      	ldr	r3, [r3, #8]
   b5bb0:	4718      	bx	r3

000b5bb2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5bb2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5bb4:	210d      	movs	r1, #13
{
   b5bb6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5bb8:	f7ff fff8 	bl	b5bac <_ZN5Print5printEc>
  n += print('\n');
   b5bbc:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5bbe:	4604      	mov	r4, r0
  n += print('\n');
   b5bc0:	4628      	mov	r0, r5
   b5bc2:	f7ff fff3 	bl	b5bac <_ZN5Print5printEc>
  return n;
}
   b5bc6:	4420      	add	r0, r4
   b5bc8:	bd38      	pop	{r3, r4, r5, pc}

000b5bca <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b5bca:	b538      	push	{r3, r4, r5, lr}
   b5bcc:	4605      	mov	r5, r0
  return write(str);
   b5bce:	f7ff ffd7 	bl	b5b80 <_ZN5Print5writeEPKc>
   b5bd2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5bd4:	4628      	mov	r0, r5
   b5bd6:	f7ff ffec 	bl	b5bb2 <_ZN5Print7printlnEv>
  return n;
}
   b5bda:	4420      	add	r0, r4
   b5bdc:	bd38      	pop	{r3, r4, r5, pc}

000b5bde <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5bde:	b530      	push	{r4, r5, lr}
   b5be0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5be2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5be4:	2a01      	cmp	r2, #1
  *str = '\0';
   b5be6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5bea:	bf98      	it	ls
   b5bec:	220a      	movls	r2, #10
   b5bee:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5bf0:	460d      	mov	r5, r1
   b5bf2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5bf6:	fb01 5312 	mls	r3, r1, r2, r5
   b5bfa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5bfe:	2b09      	cmp	r3, #9
   b5c00:	bf94      	ite	ls
   b5c02:	3330      	addls	r3, #48	; 0x30
   b5c04:	3337      	addhi	r3, #55	; 0x37
   b5c06:	b2db      	uxtb	r3, r3
  } while(n);
   b5c08:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5c0a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5c0e:	d9ef      	bls.n	b5bf0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5c10:	4621      	mov	r1, r4
   b5c12:	f7ff ffb5 	bl	b5b80 <_ZN5Print5writeEPKc>
}
   b5c16:	b00b      	add	sp, #44	; 0x2c
   b5c18:	bd30      	pop	{r4, r5, pc}
	...

000b5c1c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b5c1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5c20:	ec55 4b10 	vmov	r4, r5, d0
   b5c24:	4606      	mov	r6, r0
   b5c26:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b5c28:	ee10 2a10 	vmov	r2, s0
   b5c2c:	ee10 0a10 	vmov	r0, s0
   b5c30:	462b      	mov	r3, r5
   b5c32:	4629      	mov	r1, r5
   b5c34:	f001 fd6c 	bl	b7710 <__aeabi_dcmpun>
   b5c38:	b140      	cbz	r0, b5c4c <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b5c3a:	4953      	ldr	r1, [pc, #332]	; (b5d88 <_ZN5Print10printFloatEdh+0x16c>)
   b5c3c:	4630      	mov	r0, r6
   b5c3e:	f7ff ff9f 	bl	b5b80 <_ZN5Print5writeEPKc>
   b5c42:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b5c44:	4650      	mov	r0, sl
   b5c46:	b003      	add	sp, #12
   b5c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b5c4c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b5c50:	4b4e      	ldr	r3, [pc, #312]	; (b5d8c <_ZN5Print10printFloatEdh+0x170>)
   b5c52:	f04f 32ff 	mov.w	r2, #4294967295
   b5c56:	4620      	mov	r0, r4
   b5c58:	4649      	mov	r1, r9
   b5c5a:	f001 fd59 	bl	b7710 <__aeabi_dcmpun>
   b5c5e:	b948      	cbnz	r0, b5c74 <_ZN5Print10printFloatEdh+0x58>
   b5c60:	4b4a      	ldr	r3, [pc, #296]	; (b5d8c <_ZN5Print10printFloatEdh+0x170>)
   b5c62:	f04f 32ff 	mov.w	r2, #4294967295
   b5c66:	4620      	mov	r0, r4
   b5c68:	4649      	mov	r1, r9
   b5c6a:	f001 fd33 	bl	b76d4 <__aeabi_dcmple>
   b5c6e:	b908      	cbnz	r0, b5c74 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b5c70:	4947      	ldr	r1, [pc, #284]	; (b5d90 <_ZN5Print10printFloatEdh+0x174>)
   b5c72:	e7e3      	b.n	b5c3c <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b5c74:	4b47      	ldr	r3, [pc, #284]	; (b5d94 <_ZN5Print10printFloatEdh+0x178>)
   b5c76:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b5c7a:	4620      	mov	r0, r4
   b5c7c:	4629      	mov	r1, r5
   b5c7e:	f001 fd3d 	bl	b76fc <__aeabi_dcmpgt>
   b5c82:	b108      	cbz	r0, b5c88 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b5c84:	4944      	ldr	r1, [pc, #272]	; (b5d98 <_ZN5Print10printFloatEdh+0x17c>)
   b5c86:	e7d9      	b.n	b5c3c <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b5c88:	4b44      	ldr	r3, [pc, #272]	; (b5d9c <_ZN5Print10printFloatEdh+0x180>)
   b5c8a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b5c8e:	4620      	mov	r0, r4
   b5c90:	4629      	mov	r1, r5
   b5c92:	f001 fd15 	bl	b76c0 <__aeabi_dcmplt>
   b5c96:	2800      	cmp	r0, #0
   b5c98:	d1f4      	bne.n	b5c84 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b5c9a:	2200      	movs	r2, #0
   b5c9c:	2300      	movs	r3, #0
   b5c9e:	4620      	mov	r0, r4
   b5ca0:	4629      	mov	r1, r5
   b5ca2:	f001 fd0d 	bl	b76c0 <__aeabi_dcmplt>
   b5ca6:	b1d0      	cbz	r0, b5cde <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b5ca8:	212d      	movs	r1, #45	; 0x2d
   b5caa:	4630      	mov	r0, r6
   b5cac:	f7ff ff7e 	bl	b5bac <_ZN5Print5printEc>
     number = -number;
   b5cb0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b5cb4:	4682      	mov	sl, r0
     number = -number;
   b5cb6:	461d      	mov	r5, r3
  double rounding = 0.5;
   b5cb8:	4939      	ldr	r1, [pc, #228]	; (b5da0 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b5cba:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b5da8 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b5cbe:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b5cc2:	2000      	movs	r0, #0
    rounding /= 10.0;
   b5cc4:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b5cc8:	fa5f f38b 	uxtb.w	r3, fp
   b5ccc:	429f      	cmp	r7, r3
   b5cce:	d908      	bls.n	b5ce2 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b5cd0:	4642      	mov	r2, r8
   b5cd2:	464b      	mov	r3, r9
   b5cd4:	f001 fbac 	bl	b7430 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b5cd8:	f10b 0b01 	add.w	fp, fp, #1
   b5cdc:	e7f4      	b.n	b5cc8 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b5cde:	4682      	mov	sl, r0
   b5ce0:	e7ea      	b.n	b5cb8 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b5ce2:	4622      	mov	r2, r4
   b5ce4:	462b      	mov	r3, r5
   b5ce6:	f001 f8c3 	bl	b6e70 <__adddf3>
   b5cea:	460d      	mov	r5, r1
   b5cec:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b5cee:	f001 fd4d 	bl	b778c <__aeabi_d2uiz>
   b5cf2:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b5cf4:	f001 f9f8 	bl	b70e8 <__aeabi_ui2d>
   b5cf8:	4602      	mov	r2, r0
   b5cfa:	460b      	mov	r3, r1
   b5cfc:	4620      	mov	r0, r4
   b5cfe:	4629      	mov	r1, r5
   b5d00:	f001 f8b4 	bl	b6e6c <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5d04:	220a      	movs	r2, #10
   b5d06:	4604      	mov	r4, r0
   b5d08:	460d      	mov	r5, r1
   b5d0a:	4630      	mov	r0, r6
   b5d0c:	4641      	mov	r1, r8
   b5d0e:	f7ff ff66 	bl	b5bde <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b5d12:	4482      	add	sl, r0
  if (digits > 0) {
   b5d14:	2f00      	cmp	r7, #0
   b5d16:	d095      	beq.n	b5c44 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b5d18:	4922      	ldr	r1, [pc, #136]	; (b5da4 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b5d1a:	f8df 908c 	ldr.w	r9, [pc, #140]	; b5da8 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b5d1e:	4630      	mov	r0, r6
   b5d20:	f7ff ff2e 	bl	b5b80 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b5d24:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b5d28:	4482      	add	sl, r0
  while (digits-- > 0)
   b5d2a:	2f00      	cmp	r7, #0
   b5d2c:	d08a      	beq.n	b5c44 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b5d2e:	4642      	mov	r2, r8
   b5d30:	464b      	mov	r3, r9
   b5d32:	4620      	mov	r0, r4
   b5d34:	4629      	mov	r1, r5
   b5d36:	f001 fa51 	bl	b71dc <__aeabi_dmul>
   b5d3a:	4604      	mov	r4, r0
   b5d3c:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b5d3e:	f001 fcfd 	bl	b773c <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b5d42:	f1b0 0b00 	subs.w	fp, r0, #0
   b5d46:	da1c      	bge.n	b5d82 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b5d48:	212d      	movs	r1, #45	; 0x2d
   b5d4a:	4630      	mov	r0, r6
   b5d4c:	f7ff ff2e 	bl	b5bac <_ZN5Print5printEc>
            val = -n;
   b5d50:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b5d54:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b5d56:	220a      	movs	r2, #10
   b5d58:	4630      	mov	r0, r6
   b5d5a:	9301      	str	r3, [sp, #4]
   b5d5c:	f7ff ff3f 	bl	b5bde <_ZN5Print11printNumberEmh>
   b5d60:	9b01      	ldr	r3, [sp, #4]
   b5d62:	4418      	add	r0, r3
    n += print(toPrint);
   b5d64:	4482      	add	sl, r0
    remainder -= toPrint;
   b5d66:	4658      	mov	r0, fp
   b5d68:	f001 f9ce 	bl	b7108 <__aeabi_i2d>
   b5d6c:	4602      	mov	r2, r0
   b5d6e:	460b      	mov	r3, r1
   b5d70:	4620      	mov	r0, r4
   b5d72:	4629      	mov	r1, r5
   b5d74:	f001 f87a 	bl	b6e6c <__aeabi_dsub>
   b5d78:	3f01      	subs	r7, #1
   b5d7a:	4604      	mov	r4, r0
   b5d7c:	460d      	mov	r5, r1
   b5d7e:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b5d80:	e7d3      	b.n	b5d2a <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b5d82:	4659      	mov	r1, fp
        size_t t = 0;
   b5d84:	2300      	movs	r3, #0
   b5d86:	e7e6      	b.n	b5d56 <_ZN5Print10printFloatEdh+0x13a>
   b5d88:	000b9cfc 	.word	0x000b9cfc
   b5d8c:	7fefffff 	.word	0x7fefffff
   b5d90:	000b9d00 	.word	0x000b9d00
   b5d94:	41efffff 	.word	0x41efffff
   b5d98:	000b9d04 	.word	0x000b9d04
   b5d9c:	c1efffff 	.word	0xc1efffff
   b5da0:	3fe00000 	.word	0x3fe00000
   b5da4:	000b9b13 	.word	0x000b9b13
   b5da8:	40240000 	.word	0x40240000

000b5dac <_ZN5Print7printlnEdi>:
{
   b5dac:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   b5dae:	b2c9      	uxtb	r1, r1
{
   b5db0:	4605      	mov	r5, r0
  return printFloat(n, digits);
   b5db2:	f7ff ff33 	bl	b5c1c <_ZN5Print10printFloatEdh>
   b5db6:	4604      	mov	r4, r0
  n += println();
   b5db8:	4628      	mov	r0, r5
   b5dba:	f7ff fefa 	bl	b5bb2 <_ZN5Print7printlnEv>
}
   b5dbe:	4420      	add	r0, r4
   b5dc0:	bd38      	pop	{r3, r4, r5, pc}

000b5dc2 <_ZN5Print7printlnEfi>:
{
   b5dc2:	b538      	push	{r3, r4, r5, lr}
   b5dc4:	4604      	mov	r4, r0
   b5dc6:	ee10 0a10 	vmov	r0, s0
   b5dca:	460d      	mov	r5, r1
    return println((double)num, digits);
   b5dcc:	f001 f9ae 	bl	b712c <__aeabi_f2d>
   b5dd0:	ec41 0b10 	vmov	d0, r0, r1
   b5dd4:	4629      	mov	r1, r5
   b5dd6:	4620      	mov	r0, r4
}
   b5dd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   b5ddc:	f7ff bfe6 	b.w	b5dac <_ZN5Print7printlnEdi>

000b5de0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5de0:	4b01      	ldr	r3, [pc, #4]	; (b5de8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5de2:	4a02      	ldr	r2, [pc, #8]	; (b5dec <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5de4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5de6:	4770      	bx	lr
   b5de8:	2003e6a0 	.word	0x2003e6a0
   b5dec:	000b9d08 	.word	0x000b9d08

000b5df0 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b5df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b5df4:	4a15      	ldr	r2, [pc, #84]	; (b5e4c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b5df6:	f8df 8060 	ldr.w	r8, [pc, #96]	; b5e58 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b5dfa:	e9d2 6300 	ldrd	r6, r3, [r2]
   b5dfe:	1980      	adds	r0, r0, r6
   b5e00:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b5e04:	4b12      	ldr	r3, [pc, #72]	; (b5e50 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b5e06:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b5e0a:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b5e0e:	1986      	adds	r6, r0, r6
   b5e10:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b5e14:	42bb      	cmp	r3, r7
   b5e16:	bf08      	it	eq
   b5e18:	42b2      	cmpeq	r2, r6
{
   b5e1a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b5e1c:	d013      	beq.n	b5e46 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b5e1e:	a903      	add	r1, sp, #12
   b5e20:	4668      	mov	r0, sp
   b5e22:	e9cd 6700 	strd	r6, r7, [sp]
   b5e26:	f7ff fc79 	bl	b571c <localtime_r>
	calendar_time.tm_year += 1900;
   b5e2a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b5e2c:	4d09      	ldr	r5, [pc, #36]	; (b5e54 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b5e2e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b5e32:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b5e34:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b5e36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5e38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5e3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5e3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b5e3e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b5e42:	6823      	ldr	r3, [r4, #0]
   b5e44:	602b      	str	r3, [r5, #0]
    }
}
   b5e46:	b00c      	add	sp, #48	; 0x30
   b5e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5e4c:	2003e6d8 	.word	0x2003e6d8
   b5e50:	2003e6d0 	.word	0x2003e6d0
   b5e54:	2003e6ac 	.word	0x2003e6ac
   b5e58:	2003e6e0 	.word	0x2003e6e0

000b5e5c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b5e5c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5e5e:	2000      	movs	r0, #0
   b5e60:	f7ff fbfc 	bl	b565c <spark_sync_time_pending>
   b5e64:	b128      	cbz	r0, b5e72 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5e66:	f7ff fbe1 	bl	b562c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5e6a:	f080 0001 	eor.w	r0, r0, #1
   b5e6e:	b2c0      	uxtb	r0, r0
    }
   b5e70:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5e72:	2001      	movs	r0, #1
   b5e74:	e7fc      	b.n	b5e70 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b5e78 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b5e78:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   b5e7c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b5e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   b5e84:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b5e86:	d411      	bmi.n	b5eac <_ZN9TimeClass4zoneEf+0x34>
   b5e88:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   b5e8c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b5e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5e94:	dc0a      	bgt.n	b5eac <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   b5e96:	eddf 7a06 	vldr	s15, [pc, #24]	; b5eb0 <_ZN9TimeClass4zoneEf+0x38>
   b5e9a:	ee60 7a27 	vmul.f32	s15, s0, s15
   b5e9e:	ee17 0a90 	vmov	r0, s15
   b5ea2:	f001 fce3 	bl	b786c <__aeabi_f2lz>
   b5ea6:	4b03      	ldr	r3, [pc, #12]	; (b5eb4 <_ZN9TimeClass4zoneEf+0x3c>)
   b5ea8:	e9c3 0100 	strd	r0, r1, [r3]
}
   b5eac:	bd08      	pop	{r3, pc}
   b5eae:	bf00      	nop
   b5eb0:	45610000 	.word	0x45610000
   b5eb4:	2003e6d8 	.word	0x2003e6d8

000b5eb8 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   b5eb8:	b530      	push	{r4, r5, lr}
   b5eba:	b093      	sub	sp, #76	; 0x4c
   b5ebc:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   b5ec0:	4b19      	ldr	r3, [pc, #100]	; (b5f28 <_ZN9TimeClass7timeStrEx+0x70>)
{
   b5ec2:	4604      	mov	r4, r0
    t += time_zone_cache;
   b5ec4:	e9d3 1000 	ldrd	r1, r0, [r3]
   b5ec8:	9b01      	ldr	r3, [sp, #4]
   b5eca:	1852      	adds	r2, r2, r1
   b5ecc:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   b5ed0:	4816      	ldr	r0, [pc, #88]	; (b5f2c <_ZN9TimeClass7timeStrEx+0x74>)
   b5ed2:	e9d0 1000 	ldrd	r1, r0, [r0]
   b5ed6:	1852      	adds	r2, r2, r1
   b5ed8:	eb43 0300 	adc.w	r3, r3, r0
   b5edc:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   b5ee0:	2224      	movs	r2, #36	; 0x24
   b5ee2:	eb0d 0002 	add.w	r0, sp, r2
   b5ee6:	2100      	movs	r1, #0
   b5ee8:	f001 fd63 	bl	b79b2 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   b5eec:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   b5eee:	a909      	add	r1, sp, #36	; 0x24
   b5ef0:	4668      	mov	r0, sp
   b5ef2:	f7ff fc13 	bl	b571c <localtime_r>
    char ascstr[26] = {};
   b5ef6:	2216      	movs	r2, #22
   b5ef8:	4629      	mov	r1, r5
   b5efa:	a803      	add	r0, sp, #12
   b5efc:	9502      	str	r5, [sp, #8]
   b5efe:	f001 fd58 	bl	b79b2 <memset>
    asctime_r(&calendar_time, ascstr);
   b5f02:	a902      	add	r1, sp, #8
   b5f04:	a809      	add	r0, sp, #36	; 0x24
   b5f06:	f001 fd03 	bl	b7910 <asctime_r>
    int len = strlen(ascstr);
   b5f0a:	a802      	add	r0, sp, #8
   b5f0c:	f001 fdb7 	bl	b7a7e <strlen>
    ascstr[len-1] = 0; // remove final newline
   b5f10:	ab12      	add	r3, sp, #72	; 0x48
   b5f12:	4418      	add	r0, r3
    return String(ascstr);
   b5f14:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   b5f16:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   b5f1a:	4620      	mov	r0, r4
   b5f1c:	f7ff fd59 	bl	b59d2 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b5f20:	4620      	mov	r0, r4
   b5f22:	b013      	add	sp, #76	; 0x4c
   b5f24:	bd30      	pop	{r4, r5, pc}
   b5f26:	bf00      	nop
   b5f28:	2003e6d8 	.word	0x2003e6d8
   b5f2c:	2003e6d0 	.word	0x2003e6d0

000b5f30 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   b5f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5f34:	b0a4      	sub	sp, #144	; 0x90
   b5f36:	4607      	mov	r7, r0
   b5f38:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b5f3a:	a814      	add	r0, sp, #80	; 0x50
{
   b5f3c:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b5f3e:	223f      	movs	r2, #63	; 0x3f
{
   b5f40:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b5f42:	f001 fdb8 	bl	b7ab6 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b5f46:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b5f48:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b5f4a:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b5f4e:	f001 fd96 	bl	b7a7e <strlen>
   b5f52:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   b5f54:	bb4c      	cbnz	r4, b5faa <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   b5f56:	4929      	ldr	r1, [pc, #164]	; (b5ffc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   b5f58:	a803      	add	r0, sp, #12
   b5f5a:	f001 fd6b 	bl	b7a34 <strcpy>
   b5f5e:	ac14      	add	r4, sp, #80	; 0x50
{
   b5f60:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   b5f62:	f105 39ff 	add.w	r9, r5, #4294967295
   b5f66:	45b1      	cmp	r9, r6
   b5f68:	d934      	bls.n	b5fd4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   b5f6a:	7823      	ldrb	r3, [r4, #0]
   b5f6c:	2b25      	cmp	r3, #37	; 0x25
   b5f6e:	f106 0a01 	add.w	sl, r6, #1
   b5f72:	d117      	bne.n	b5fa4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   b5f74:	7863      	ldrb	r3, [r4, #1]
   b5f76:	2b7a      	cmp	r3, #122	; 0x7a
   b5f78:	d114      	bne.n	b5fa4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   b5f7a:	a803      	add	r0, sp, #12
   b5f7c:	f001 fd7f 	bl	b7a7e <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b5f80:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   b5f82:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b5f84:	1830      	adds	r0, r6, r0
   b5f86:	4418      	add	r0, r3
   b5f88:	eba9 0206 	sub.w	r2, r9, r6
   b5f8c:	1ca1      	adds	r1, r4, #2
   b5f8e:	f001 fd02 	bl	b7996 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   b5f92:	462a      	mov	r2, r5
   b5f94:	a903      	add	r1, sp, #12
   b5f96:	4620      	mov	r0, r4
   b5f98:	f001 fcfd 	bl	b7996 <memcpy>
            len = strlen(format_str);
   b5f9c:	a814      	add	r0, sp, #80	; 0x50
   b5f9e:	f001 fd6e 	bl	b7a7e <strlen>
   b5fa2:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   b5fa4:	3401      	adds	r4, #1
   b5fa6:	4656      	mov	r6, sl
   b5fa8:	e7db      	b.n	b5f62 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   b5faa:	233c      	movs	r3, #60	; 0x3c
   b5fac:	fb94 f2f3 	sdiv	r2, r4, r3
   b5fb0:	2a00      	cmp	r2, #0
   b5fb2:	bfb8      	it	lt
   b5fb4:	4252      	neglt	r2, r2
   b5fb6:	fbb2 f1f3 	udiv	r1, r2, r3
   b5fba:	fb03 2211 	mls	r2, r3, r1, r2
   b5fbe:	9200      	str	r2, [sp, #0]
   b5fc0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   b5fc4:	4a0e      	ldr	r2, [pc, #56]	; (b6000 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   b5fc6:	fb94 f3f3 	sdiv	r3, r4, r3
   b5fca:	2110      	movs	r1, #16
   b5fcc:	a803      	add	r0, sp, #12
   b5fce:	f7ff fb75 	bl	b56bc <snprintf>
   b5fd2:	e7c4      	b.n	b5f5e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   b5fd4:	2100      	movs	r1, #0
   b5fd6:	222e      	movs	r2, #46	; 0x2e
   b5fd8:	a808      	add	r0, sp, #32
   b5fda:	9107      	str	r1, [sp, #28]
   b5fdc:	f001 fce9 	bl	b79b2 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   b5fe0:	4643      	mov	r3, r8
   b5fe2:	aa14      	add	r2, sp, #80	; 0x50
   b5fe4:	2132      	movs	r1, #50	; 0x32
   b5fe6:	a807      	add	r0, sp, #28
   b5fe8:	f7ff fb90 	bl	b570c <strftime>
    return String(buf);
   b5fec:	a907      	add	r1, sp, #28
   b5fee:	4638      	mov	r0, r7
   b5ff0:	f7ff fcef 	bl	b59d2 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b5ff4:	4638      	mov	r0, r7
   b5ff6:	b024      	add	sp, #144	; 0x90
   b5ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5ffc:	000b9d0c 	.word	0x000b9d0c
   b6000:	000b9d0e 	.word	0x000b9d0e

000b6004 <_ZN9TimeClass6formatExPKc>:
{
   b6004:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6006:	b08d      	sub	sp, #52	; 0x34
   b6008:	e9cd 2300 	strd	r2, r3, [sp]
   b600c:	9d12      	ldr	r5, [sp, #72]	; 0x48
   b600e:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   b6010:	b915      	cbnz	r5, b6018 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   b6012:	4b19      	ldr	r3, [pc, #100]	; (b6078 <_ZN9TimeClass6formatExPKc+0x74>)
   b6014:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   b6016:	b12d      	cbz	r5, b6024 <_ZN9TimeClass6formatExPKc+0x20>
   b6018:	4b18      	ldr	r3, [pc, #96]	; (b607c <_ZN9TimeClass6formatExPKc+0x78>)
   b601a:	4628      	mov	r0, r5
   b601c:	6819      	ldr	r1, [r3, #0]
   b601e:	f001 fcff 	bl	b7a20 <strcmp>
   b6022:	b938      	cbnz	r0, b6034 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   b6024:	e9dd 2300 	ldrd	r2, r3, [sp]
   b6028:	4620      	mov	r0, r4
   b602a:	f7ff ff45 	bl	b5eb8 <_ZN9TimeClass7timeStrEx>
}
   b602e:	4620      	mov	r0, r4
   b6030:	b00d      	add	sp, #52	; 0x34
   b6032:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   b6034:	4e12      	ldr	r6, [pc, #72]	; (b6080 <_ZN9TimeClass6formatExPKc+0x7c>)
   b6036:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   b6038:	4f12      	ldr	r7, [pc, #72]	; (b6084 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   b603a:	e9d6 3200 	ldrd	r3, r2, [r6]
   b603e:	185b      	adds	r3, r3, r1
   b6040:	9901      	ldr	r1, [sp, #4]
   b6042:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   b6046:	e9d7 0100 	ldrd	r0, r1, [r7]
   b604a:	181b      	adds	r3, r3, r0
   b604c:	eb42 0201 	adc.w	r2, r2, r1
   b6050:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   b6054:	2100      	movs	r1, #0
   b6056:	2224      	movs	r2, #36	; 0x24
   b6058:	a803      	add	r0, sp, #12
   b605a:	f001 fcaa 	bl	b79b2 <memset>
    localtime_r(&t, &calendar_time);
   b605e:	a903      	add	r1, sp, #12
   b6060:	4668      	mov	r0, sp
   b6062:	f7ff fb5b 	bl	b571c <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   b6066:	6832      	ldr	r2, [r6, #0]
   b6068:	683b      	ldr	r3, [r7, #0]
   b606a:	a903      	add	r1, sp, #12
   b606c:	4413      	add	r3, r2
   b606e:	4620      	mov	r0, r4
   b6070:	462a      	mov	r2, r5
   b6072:	f7ff ff5d 	bl	b5f30 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   b6076:	e7da      	b.n	b602e <_ZN9TimeClass6formatExPKc+0x2a>
   b6078:	2003e6a8 	.word	0x2003e6a8
   b607c:	2003dd80 	.word	0x2003dd80
   b6080:	2003e6d8 	.word	0x2003e6d8
   b6084:	2003e6d0 	.word	0x2003e6d0

000b6088 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   b6088:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b608a:	2000      	movs	r0, #0
   b608c:	f7ff f930 	bl	b52f0 <hal_rtc_time_is_valid>
    if (rtcstate)
   b6090:	4604      	mov	r4, r0
   b6092:	b9a0      	cbnz	r0, b60be <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b6094:	f7ff fa16 	bl	b54c4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b6098:	2801      	cmp	r0, #1
   b609a:	d110      	bne.n	b60be <_ZN9TimeClass7isValidEv+0x36>
   b609c:	4620      	mov	r0, r4
   b609e:	f7ff fa39 	bl	b5514 <system_thread_get_state>
   b60a2:	b960      	cbnz	r0, b60be <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b60a4:	f7ff feda 	bl	b5e5c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b60a8:	b910      	cbnz	r0, b60b0 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b60aa:	f7ff fab7 	bl	b561c <spark_process>
        while (_while() && !_condition()) {
   b60ae:	e7f9      	b.n	b60a4 <_ZN9TimeClass7isValidEv+0x1c>
   b60b0:	f7ff fed4 	bl	b5e5c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b60b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b60b8:	2000      	movs	r0, #0
   b60ba:	f7ff b919 	b.w	b52f0 <hal_rtc_time_is_valid>
}
   b60be:	4620      	mov	r0, r4
   b60c0:	bd10      	pop	{r4, pc}

000b60c2 <_ZN9TimeClass3nowEv>:
{
   b60c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b60c4:	f7ff ffe0 	bl	b6088 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b60c8:	2210      	movs	r2, #16
   b60ca:	2100      	movs	r1, #0
   b60cc:	4668      	mov	r0, sp
   b60ce:	f001 fc70 	bl	b79b2 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b60d2:	2100      	movs	r1, #0
   b60d4:	4668      	mov	r0, sp
   b60d6:	f7ff f913 	bl	b5300 <hal_rtc_get_time>
}
   b60da:	9800      	ldr	r0, [sp, #0]
   b60dc:	b005      	add	sp, #20
   b60de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b60e4 <_ZN9TimeClass4hourEv>:
{
   b60e4:	b508      	push	{r3, lr}
	return hour(now());
   b60e6:	f7ff ffec 	bl	b60c2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b60ea:	17c1      	asrs	r1, r0, #31
   b60ec:	f7ff fe80 	bl	b5df0 <_ZL22Refresh_UnixTime_Cachex>
}
   b60f0:	4b01      	ldr	r3, [pc, #4]	; (b60f8 <_ZN9TimeClass4hourEv+0x14>)
   b60f2:	6898      	ldr	r0, [r3, #8]
   b60f4:	bd08      	pop	{r3, pc}
   b60f6:	bf00      	nop
   b60f8:	2003e6ac 	.word	0x2003e6ac

000b60fc <_ZN9TimeClass6minuteEv>:
{
   b60fc:	b508      	push	{r3, lr}
	return minute(now());
   b60fe:	f7ff ffe0 	bl	b60c2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b6102:	17c1      	asrs	r1, r0, #31
   b6104:	f7ff fe74 	bl	b5df0 <_ZL22Refresh_UnixTime_Cachex>
}
   b6108:	4b01      	ldr	r3, [pc, #4]	; (b6110 <_ZN9TimeClass6minuteEv+0x14>)
   b610a:	6858      	ldr	r0, [r3, #4]
   b610c:	bd08      	pop	{r3, pc}
   b610e:	bf00      	nop
   b6110:	2003e6ac 	.word	0x2003e6ac

000b6114 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6114:	4b02      	ldr	r3, [pc, #8]	; (b6120 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6116:	681a      	ldr	r2, [r3, #0]
   b6118:	4b02      	ldr	r3, [pc, #8]	; (b6124 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b611a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b611c:	4770      	bx	lr
   b611e:	bf00      	nop
   b6120:	2003dd80 	.word	0x2003dd80
   b6124:	2003e6a8 	.word	0x2003e6a8

000b6128 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6128:	2100      	movs	r1, #0
   b612a:	f7ff b9db 	b.w	b54e4 <system_delay_ms>
	...

000b6130 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b6130:	4b01      	ldr	r3, [pc, #4]	; (b6138 <_GLOBAL__sub_I_RGB+0x8>)
   b6132:	2200      	movs	r2, #0
   b6134:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6136:	4770      	bx	lr
   b6138:	2003e6e8 	.word	0x2003e6e8

000b613c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b613c:	4b01      	ldr	r3, [pc, #4]	; (b6144 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b613e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6140:	4770      	bx	lr
   b6142:	bf00      	nop
   b6144:	2003dd88 	.word	0x2003dd88

000b6148 <serialEventRun>:
{
   b6148:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b614a:	4b0b      	ldr	r3, [pc, #44]	; (b6178 <serialEventRun+0x30>)
   b614c:	b143      	cbz	r3, b6160 <serialEventRun+0x18>
   b614e:	f000 fbff 	bl	b6950 <_Z16_fetch_usbserialv>
   b6152:	6803      	ldr	r3, [r0, #0]
   b6154:	691b      	ldr	r3, [r3, #16]
   b6156:	4798      	blx	r3
   b6158:	2800      	cmp	r0, #0
   b615a:	dd01      	ble.n	b6160 <serialEventRun+0x18>
        serialEvent();
   b615c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6160:	4b06      	ldr	r3, [pc, #24]	; (b617c <serialEventRun+0x34>)
   b6162:	b143      	cbz	r3, b6176 <serialEventRun+0x2e>
   b6164:	f000 fe14 	bl	b6d90 <_Z22__fetch_global_Serial1v>
   b6168:	6803      	ldr	r3, [r0, #0]
   b616a:	691b      	ldr	r3, [r3, #16]
   b616c:	4798      	blx	r3
   b616e:	2800      	cmp	r0, #0
   b6170:	dd01      	ble.n	b6176 <serialEventRun+0x2e>
        serialEvent1();
   b6172:	f3af 8000 	nop.w
}
   b6176:	bd08      	pop	{r3, pc}
	...

000b6180 <_post_loop>:
{
   b6180:	b508      	push	{r3, lr}
	serialEventRun();
   b6182:	f7ff ffe1 	bl	b6148 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6186:	f7ff f8ab 	bl	b52e0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b618a:	4b01      	ldr	r3, [pc, #4]	; (b6190 <_post_loop+0x10>)
   b618c:	6018      	str	r0, [r3, #0]
}
   b618e:	bd08      	pop	{r3, pc}
   b6190:	2003e740 	.word	0x2003e740

000b6194 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6194:	4805      	ldr	r0, [pc, #20]	; (b61ac <_Z33system_initialize_user_backup_ramv+0x18>)
   b6196:	4a06      	ldr	r2, [pc, #24]	; (b61b0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6198:	4906      	ldr	r1, [pc, #24]	; (b61b4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b619a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b619c:	1a12      	subs	r2, r2, r0
   b619e:	f001 fbfa 	bl	b7996 <memcpy>
    __backup_sram_signature = signature;
   b61a2:	4b05      	ldr	r3, [pc, #20]	; (b61b8 <_Z33system_initialize_user_backup_ramv+0x24>)
   b61a4:	4a05      	ldr	r2, [pc, #20]	; (b61bc <_Z33system_initialize_user_backup_ramv+0x28>)
   b61a6:	601a      	str	r2, [r3, #0]
}
   b61a8:	bd08      	pop	{r3, pc}
   b61aa:	bf00      	nop
   b61ac:	2003f400 	.word	0x2003f400
   b61b0:	2003f404 	.word	0x2003f404
   b61b4:	000ba324 	.word	0x000ba324
   b61b8:	2003f400 	.word	0x2003f400
   b61bc:	9a271c1e 	.word	0x9a271c1e

000b61c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b61c0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b61c2:	2300      	movs	r3, #0
   b61c4:	9300      	str	r3, [sp, #0]
   b61c6:	461a      	mov	r2, r3
   b61c8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b61cc:	f7ff f9bc 	bl	b5548 <system_ctrl_set_result>
}
   b61d0:	b003      	add	sp, #12
   b61d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b61d8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b61d8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b61da:	8843      	ldrh	r3, [r0, #2]
   b61dc:	2b0a      	cmp	r3, #10
   b61de:	d008      	beq.n	b61f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b61e0:	2b50      	cmp	r3, #80	; 0x50
   b61e2:	d10b      	bne.n	b61fc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b61e4:	4b09      	ldr	r3, [pc, #36]	; (b620c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b61e6:	681b      	ldr	r3, [r3, #0]
   b61e8:	b14b      	cbz	r3, b61fe <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b61ea:	b003      	add	sp, #12
   b61ec:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b61f0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b61f2:	f7ff ffe5 	bl	b61c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b61f6:	b003      	add	sp, #12
   b61f8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b61fc:	2300      	movs	r3, #0
   b61fe:	9300      	str	r3, [sp, #0]
   b6200:	461a      	mov	r2, r3
   b6202:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6206:	f7ff f99f 	bl	b5548 <system_ctrl_set_result>
}
   b620a:	e7f4      	b.n	b61f6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b620c:	2003e6fc 	.word	0x2003e6fc

000b6210 <module_user_init_hook>:
{
   b6210:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6212:	4812      	ldr	r0, [pc, #72]	; (b625c <module_user_init_hook+0x4c>)
   b6214:	2100      	movs	r1, #0
   b6216:	f7ff fa71 	bl	b56fc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b621a:	4b11      	ldr	r3, [pc, #68]	; (b6260 <module_user_init_hook+0x50>)
   b621c:	681a      	ldr	r2, [r3, #0]
   b621e:	4b11      	ldr	r3, [pc, #68]	; (b6264 <module_user_init_hook+0x54>)
   b6220:	429a      	cmp	r2, r3
   b6222:	4b11      	ldr	r3, [pc, #68]	; (b6268 <module_user_init_hook+0x58>)
   b6224:	bf0c      	ite	eq
   b6226:	2201      	moveq	r2, #1
   b6228:	2200      	movne	r2, #0
   b622a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b622c:	d001      	beq.n	b6232 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b622e:	f7ff ffb1 	bl	b6194 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6232:	f7ff f84d 	bl	b52d0 <HAL_RNG_GetRandomNumber>
   b6236:	4604      	mov	r4, r0
    srand(seed);
   b6238:	f001 fbc4 	bl	b79c4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b623c:	4b0b      	ldr	r3, [pc, #44]	; (b626c <module_user_init_hook+0x5c>)
   b623e:	b113      	cbz	r3, b6246 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6240:	4620      	mov	r0, r4
   b6242:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6246:	2100      	movs	r1, #0
   b6248:	4808      	ldr	r0, [pc, #32]	; (b626c <module_user_init_hook+0x5c>)
   b624a:	f7ff fa0f 	bl	b566c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b624e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6252:	4807      	ldr	r0, [pc, #28]	; (b6270 <module_user_init_hook+0x60>)
   b6254:	2100      	movs	r1, #0
   b6256:	f7ff b96d 	b.w	b5534 <system_ctrl_set_app_request_handler>
   b625a:	bf00      	nop
   b625c:	000b613d 	.word	0x000b613d
   b6260:	2003f400 	.word	0x2003f400
   b6264:	9a271c1e 	.word	0x9a271c1e
   b6268:	2003e6f8 	.word	0x2003e6f8
   b626c:	00000000 	.word	0x00000000
   b6270:	000b61d9 	.word	0x000b61d9

000b6274 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b6274:	4770      	bx	lr

000b6276 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b6276:	2000      	movs	r0, #0
   b6278:	4770      	bx	lr

000b627a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b627a:	b510      	push	{r4, lr}
   b627c:	2110      	movs	r1, #16
   b627e:	4604      	mov	r4, r0
   b6280:	f7fd ff0d 	bl	b409e <_ZdlPvj>
   b6284:	4620      	mov	r0, r4
   b6286:	bd10      	pop	{r4, pc}

000b6288 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b6288:	b508      	push	{r3, lr}
      { delete this; }
   b628a:	f7ff fff6 	bl	b627a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b628e:	bd08      	pop	{r3, pc}

000b6290 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b6290:	b530      	push	{r4, r5, lr}
        type_(type) {
   b6292:	2200      	movs	r2, #0
   b6294:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b6298:	6002      	str	r2, [r0, #0]
   b629a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b629c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b629e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b62a0:	680c      	ldr	r4, [r1, #0]
   b62a2:	8085      	strh	r5, [r0, #4]
   b62a4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b62a6:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b62a8:	bd30      	pop	{r4, r5, pc}

000b62aa <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b62aa:	b510      	push	{r4, lr}
   b62ac:	4604      	mov	r4, r0
    free((void*)msg_);
   b62ae:	6800      	ldr	r0, [r0, #0]
   b62b0:	f7ff f9ec 	bl	b568c <free>
}
   b62b4:	4620      	mov	r0, r4
   b62b6:	bd10      	pop	{r4, pc}

000b62b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b62b8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b62ba:	68c4      	ldr	r4, [r0, #12]
   b62bc:	b1f4      	cbz	r4, b62fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   b62be:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b62c0:	2b02      	cmp	r3, #2
   b62c2:	d103      	bne.n	b62cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b62c4:	f104 000c 	add.w	r0, r4, #12
   b62c8:	f7ff ffef 	bl	b62aa <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b62cc:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b62ce:	b135      	cbz	r5, b62de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b62d0:	4628      	mov	r0, r5
   b62d2:	f7ff fc1c 	bl	b5b0e <_ZNSt14_Function_baseD1Ev>
   b62d6:	2110      	movs	r1, #16
   b62d8:	4628      	mov	r0, r5
   b62da:	f7fd fee0 	bl	b409e <_ZdlPvj>
   b62de:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b62e0:	b135      	cbz	r5, b62f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b62e2:	4628      	mov	r0, r5
   b62e4:	f7ff fc13 	bl	b5b0e <_ZNSt14_Function_baseD1Ev>
   b62e8:	2110      	movs	r1, #16
   b62ea:	4628      	mov	r0, r5
   b62ec:	f7fd fed7 	bl	b409e <_ZdlPvj>
   b62f0:	4620      	mov	r0, r4
   b62f2:	2114      	movs	r1, #20
   b62f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b62f8:	f7fd bed1 	b.w	b409e <_ZdlPvj>
   b62fc:	bd38      	pop	{r3, r4, r5, pc}

000b62fe <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b62fe:	680b      	ldr	r3, [r1, #0]
   b6300:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b6302:	684b      	ldr	r3, [r1, #4]
   b6304:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b6306:	b113      	cbz	r3, b630e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b6308:	685a      	ldr	r2, [r3, #4]
   b630a:	3201      	adds	r2, #1
   b630c:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b630e:	4770      	bx	lr

000b6310 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b6310:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6312:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6314:	4668      	mov	r0, sp
   b6316:	460d      	mov	r5, r1
   b6318:	f7ff fff1 	bl	b62fe <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b631c:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b631e:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6320:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b6322:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b6324:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b6326:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b6328:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b632a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b632c:	f7fe f80c 	bl	b4348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b6330:	b135      	cbz	r5, b6340 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b6332:	1d28      	adds	r0, r5, #4
   b6334:	f7fe f808 	bl	b4348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6338:	2108      	movs	r1, #8
   b633a:	4628      	mov	r0, r5
   b633c:	f7fd feaf 	bl	b409e <_ZdlPvj>
        return p;
    }
   b6340:	4620      	mov	r0, r4
   b6342:	b003      	add	sp, #12
   b6344:	bd30      	pop	{r4, r5, pc}

000b6346 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b6346:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6348:	b510      	push	{r4, lr}
      if (_M_empty())
   b634a:	b90a      	cbnz	r2, b6350 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b634c:	f000 fd86 	bl	b6e5c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b6350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6354:	68c3      	ldr	r3, [r0, #12]
   b6356:	4718      	bx	r3

000b6358 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6358:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b635a:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b635c:	f100 0110 	add.w	r1, r0, #16
   b6360:	f7ff fff1 	bl	b6346 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b6364:	bd08      	pop	{r3, pc}

000b6366 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b6366:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6368:	b510      	push	{r4, lr}
      if (_M_empty())
   b636a:	b90a      	cbnz	r2, b6370 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b636c:	f000 fd76 	bl	b6e5c <_ZSt25__throw_bad_function_callv>
    }
   b6370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6374:	68c3      	ldr	r3, [r0, #12]
   b6376:	4718      	bx	r3

000b6378 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6378:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b637a:	6800      	ldr	r0, [r0, #0]
   b637c:	f100 0110 	add.w	r1, r0, #16
   b6380:	f7ff fff1 	bl	b6366 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b6384:	bd08      	pop	{r3, pc}
	...

000b6388 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b6388:	b538      	push	{r3, r4, r5, lr}
   b638a:	2300      	movs	r3, #0
   b638c:	4604      	mov	r4, r0
   b638e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6390:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b6392:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6394:	f7fd fe7f 	bl	b4096 <_Znwj>
   b6398:	b128      	cbz	r0, b63a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b639a:	2301      	movs	r3, #1
   b639c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b63a0:	4b02      	ldr	r3, [pc, #8]	; (b63ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b63a2:	6003      	str	r3, [r0, #0]
   b63a4:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b63a6:	6020      	str	r0, [r4, #0]
	}
   b63a8:	4620      	mov	r0, r4
   b63aa:	bd38      	pop	{r3, r4, r5, pc}
   b63ac:	000b9d40 	.word	0x000b9d40

000b63b0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b63b0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b63b2:	2300      	movs	r3, #0
   b63b4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b63b6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b63b8:	4604      	mov	r4, r0
   b63ba:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b63bc:	b12b      	cbz	r3, b63ca <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b63be:	2202      	movs	r2, #2
   b63c0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b63c2:	68eb      	ldr	r3, [r5, #12]
   b63c4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b63c6:	68ab      	ldr	r3, [r5, #8]
   b63c8:	60a3      	str	r3, [r4, #8]
    }
   b63ca:	4620      	mov	r0, r4
   b63cc:	bd38      	pop	{r3, r4, r5, pc}
	...

000b63d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b63d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b63d2:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b63d4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b63d6:	4668      	mov	r0, sp
   b63d8:	f7ff ff5a 	bl	b6290 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b63dc:	f04f 0302 	mov.w	r3, #2
   b63e0:	e8d4 2f4f 	ldrexb	r2, [r4]
   b63e4:	2a00      	cmp	r2, #0
   b63e6:	d103      	bne.n	b63f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b63e8:	e8c4 3f41 	strexb	r1, r3, [r4]
   b63ec:	2900      	cmp	r1, #0
   b63ee:	d1f7      	bne.n	b63e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b63f0:	d125      	bne.n	b643e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b63f2:	f104 050c 	add.w	r5, r4, #12
   b63f6:	4669      	mov	r1, sp
   b63f8:	4628      	mov	r0, r5
   b63fa:	f7ff ff49 	bl	b6290 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b63fe:	f3bf 8f5b 	dmb	ish
   b6402:	2301      	movs	r3, #1
   b6404:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6406:	2000      	movs	r0, #0
   b6408:	f104 0308 	add.w	r3, r4, #8
   b640c:	f3bf 8f5b 	dmb	ish
   b6410:	e853 6f00 	ldrex	r6, [r3]
   b6414:	e843 0200 	strex	r2, r0, [r3]
   b6418:	2a00      	cmp	r2, #0
   b641a:	d1f9      	bne.n	b6410 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b641c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6420:	b16e      	cbz	r6, b643e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b6422:	f7ff f867 	bl	b54f4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6426:	b178      	cbz	r0, b6448 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6428:	4629      	mov	r1, r5
   b642a:	4630      	mov	r0, r6
   b642c:	f7ff ff8b 	bl	b6346 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b6430:	4630      	mov	r0, r6
   b6432:	f7ff fb6c 	bl	b5b0e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6436:	2110      	movs	r1, #16
   b6438:	4630      	mov	r0, r6
   b643a:	f7fd fe30 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b643e:	4668      	mov	r0, sp
   b6440:	f7ff ff33 	bl	b62aa <_ZN8particle5ErrorD1Ev>
    }
   b6444:	b009      	add	sp, #36	; 0x24
   b6446:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6448:	4631      	mov	r1, r6
   b644a:	a802      	add	r0, sp, #8
   b644c:	f7ff ffb0 	bl	b63b0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6450:	68e0      	ldr	r0, [r4, #12]
   b6452:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6456:	b108      	cbz	r0, b645c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b6458:	f001 faf4 	bl	b7a44 <strdup>
        type_(type) {
   b645c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b645e:	2010      	movs	r0, #16
   b6460:	f8ad 501c 	strh.w	r5, [sp, #28]
   b6464:	f7fd fe17 	bl	b4096 <_Znwj>
   b6468:	4605      	mov	r5, r0
   b646a:	b1e8      	cbz	r0, b64a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b646c:	2700      	movs	r7, #0
   b646e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6470:	2018      	movs	r0, #24
   b6472:	f7fd fe10 	bl	b4096 <_Znwj>
   b6476:	4604      	mov	r4, r0
   b6478:	b188      	cbz	r0, b649e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b647a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b647c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b647e:	a802      	add	r0, sp, #8
   b6480:	f7ff fb4e 	bl	b5b20 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6484:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b6486:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6488:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b648a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b648c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b648e:	a906      	add	r1, sp, #24
   b6490:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6492:	60e3      	str	r3, [r4, #12]
   b6494:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b6498:	9205      	str	r2, [sp, #20]
   b649a:	f7ff fef9 	bl	b6290 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b649e:	4b08      	ldr	r3, [pc, #32]	; (b64c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b64a0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b64a2:	4b08      	ldr	r3, [pc, #32]	; (b64c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b64a4:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b64a6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b64a8:	a806      	add	r0, sp, #24
   b64aa:	f7ff fefe 	bl	b62aa <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b64ae:	a802      	add	r0, sp, #8
   b64b0:	f7ff fb2d 	bl	b5b0e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b64b4:	2200      	movs	r2, #0
   b64b6:	4629      	mov	r1, r5
   b64b8:	4803      	ldr	r0, [pc, #12]	; (b64c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b64ba:	f7ff f823 	bl	b5504 <application_thread_invoke>
   b64be:	e7b7      	b.n	b6430 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b64c0:	000b6359 	.word	0x000b6359
   b64c4:	000b65dd 	.word	0x000b65dd
   b64c8:	000b6a41 	.word	0x000b6a41

000b64cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b64cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b64d0:	b08b      	sub	sp, #44	; 0x2c
   b64d2:	4605      	mov	r5, r0
   b64d4:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b64d8:	460f      	mov	r7, r1
   b64da:	4690      	mov	r8, r2
   b64dc:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b64de:	f7ff f8a5 	bl	b562c <spark_cloud_flag_connected>
   b64e2:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b64e4:	4683      	mov	fp, r0
   b64e6:	bb38      	cbnz	r0, b6538 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b64e8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b64ec:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b64ee:	a905      	add	r1, sp, #20
   b64f0:	4630      	mov	r0, r6
   b64f2:	f8ad 3018 	strh.w	r3, [sp, #24]
   b64f6:	f7ff fecb 	bl	b6290 <_ZN8particle5ErrorC1EOS0_>
   b64fa:	2014      	movs	r0, #20
   b64fc:	f7fd fdcb 	bl	b4096 <_Znwj>
   b6500:	4604      	mov	r4, r0
   b6502:	b148      	cbz	r0, b6518 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b6504:	2302      	movs	r3, #2
   b6506:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6508:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b650a:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b650e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b6510:	4631      	mov	r1, r6
   b6512:	300c      	adds	r0, #12
   b6514:	f7ff febc 	bl	b6290 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6518:	4628      	mov	r0, r5
	: __shared_count(__p)
   b651a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b651c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b6520:	f7ff ff32 	bl	b6388 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6524:	4630      	mov	r0, r6
   b6526:	f7ff fec0 	bl	b62aa <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b652a:	a805      	add	r0, sp, #20
   b652c:	f7ff febd 	bl	b62aa <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b6530:	4628      	mov	r0, r5
   b6532:	b00b      	add	sp, #44	; 0x2c
   b6534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b6538:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b653a:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b653c:	2014      	movs	r0, #20
   b653e:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b6542:	9307      	str	r3, [sp, #28]
   b6544:	f7fd fda7 	bl	b4096 <_Znwj>
   b6548:	4601      	mov	r1, r0
   b654a:	b118      	cbz	r0, b6554 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b654c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b6550:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6552:	7044      	strb	r4, [r0, #1]
   b6554:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6556:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b6558:	f7ff ff16 	bl	b6388 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b655c:	4b1e      	ldr	r3, [pc, #120]	; (b65d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b655e:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b6560:	2008      	movs	r0, #8
   b6562:	f7fd fd98 	bl	b4096 <_Znwj>
   b6566:	4604      	mov	r4, r0
   b6568:	b110      	cbz	r0, b6570 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b656a:	a903      	add	r1, sp, #12
   b656c:	f7ff fec7 	bl	b62fe <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6570:	9600      	str	r6, [sp, #0]
   b6572:	fa5f f38a 	uxtb.w	r3, sl
   b6576:	464a      	mov	r2, r9
   b6578:	4641      	mov	r1, r8
   b657a:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b657c:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b657e:	f7ff f85d 	bl	b563c <spark_send_event>
   b6582:	b9b8      	cbnz	r0, b65b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b6584:	9b03      	ldr	r3, [sp, #12]
   b6586:	785b      	ldrb	r3, [r3, #1]
   b6588:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b658c:	b993      	cbnz	r3, b65b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b658e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b6592:	a905      	add	r1, sp, #20
   b6594:	a803      	add	r0, sp, #12
   b6596:	9205      	str	r2, [sp, #20]
   b6598:	f8ad 3018 	strh.w	r3, [sp, #24]
   b659c:	f7ff ff18 	bl	b63d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b65a0:	a805      	add	r0, sp, #20
   b65a2:	f7ff fe82 	bl	b62aa <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b65a6:	a805      	add	r0, sp, #20
   b65a8:	9909      	ldr	r1, [sp, #36]	; 0x24
   b65aa:	f7ff feb1 	bl	b6310 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b65ae:	a806      	add	r0, sp, #24
   b65b0:	f7fd feca 	bl	b4348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b65b4:	a903      	add	r1, sp, #12
   b65b6:	a805      	add	r0, sp, #20
   b65b8:	f7ff fea1 	bl	b62fe <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b65bc:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b65be:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b65c0:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b65c2:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b65c4:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b65c6:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b65c8:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b65ca:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b65cc:	f7fd febc 	bl	b4348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b65d0:	a804      	add	r0, sp, #16
   b65d2:	f7fd feb9 	bl	b4348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b65d6:	e7ab      	b.n	b6530 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b65d8:	000b6659 	.word	0x000b6659

000b65dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b65dc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b65de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b65e0:	4605      	mov	r5, r0
	switch (__op)
   b65e2:	d103      	bne.n	b65ec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b65e4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b65e6:	6003      	str	r3, [r0, #0]
      }
   b65e8:	2000      	movs	r0, #0
   b65ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b65ec:	2a02      	cmp	r2, #2
   b65ee:	d010      	beq.n	b6612 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b65f0:	2a03      	cmp	r2, #3
   b65f2:	d1f9      	bne.n	b65e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b65f4:	6804      	ldr	r4, [r0, #0]
   b65f6:	2c00      	cmp	r4, #0
   b65f8:	d0f6      	beq.n	b65e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b65fa:	f104 0010 	add.w	r0, r4, #16
   b65fe:	f7ff fe54 	bl	b62aa <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6602:	4620      	mov	r0, r4
   b6604:	f7ff fa83 	bl	b5b0e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6608:	2118      	movs	r1, #24
   b660a:	4620      	mov	r0, r4
   b660c:	f7fd fd47 	bl	b409e <_ZdlPvj>
   b6610:	e7ea      	b.n	b65e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6612:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b6614:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6616:	f7fd fd3e 	bl	b4096 <_Znwj>
   b661a:	4604      	mov	r4, r0
   b661c:	b150      	cbz	r0, b6634 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b661e:	4631      	mov	r1, r6
   b6620:	f7ff fec6 	bl	b63b0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6624:	6930      	ldr	r0, [r6, #16]
   b6626:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b662a:	b108      	cbz	r0, b6630 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b662c:	f001 fa0a 	bl	b7a44 <strdup>
        type_(type) {
   b6630:	6120      	str	r0, [r4, #16]
   b6632:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b6634:	602c      	str	r4, [r5, #0]
	}
   b6636:	e7d7      	b.n	b65e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b6638 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b6638:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b663a:	2300      	movs	r3, #0
   b663c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b663e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6640:	4604      	mov	r4, r0
   b6642:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6644:	b12b      	cbz	r3, b6652 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6646:	2202      	movs	r2, #2
   b6648:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b664a:	68eb      	ldr	r3, [r5, #12]
   b664c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b664e:	68ab      	ldr	r3, [r5, #8]
   b6650:	60a3      	str	r3, [r4, #8]
    }
   b6652:	4620      	mov	r0, r4
   b6654:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6658 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b6658:	b5f0      	push	{r4, r5, r6, r7, lr}
   b665a:	b089      	sub	sp, #36	; 0x24
   b665c:	4604      	mov	r4, r0
   b665e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b6660:	a801      	add	r0, sp, #4
   b6662:	4611      	mov	r1, r2
   b6664:	f7ff fe54 	bl	b6310 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b6668:	b1a4      	cbz	r4, b6694 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b666a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b666c:	b11d      	cbz	r5, b6676 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b666e:	4628      	mov	r0, r5
   b6670:	f001 f9e8 	bl	b7a44 <strdup>
   b6674:	4605      	mov	r5, r0
   b6676:	a801      	add	r0, sp, #4
   b6678:	a903      	add	r1, sp, #12
        type_(type) {
   b667a:	9503      	str	r5, [sp, #12]
   b667c:	f8ad 4010 	strh.w	r4, [sp, #16]
   b6680:	f7ff fea6 	bl	b63d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6684:	a803      	add	r0, sp, #12
   b6686:	f7ff fe10 	bl	b62aa <_ZN8particle5ErrorD1Ev>
   b668a:	a802      	add	r0, sp, #8
   b668c:	f7fd fe5c 	bl	b4348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6690:	b009      	add	sp, #36	; 0x24
   b6692:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b6694:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6696:	2301      	movs	r3, #1
   b6698:	e8d5 2f4f 	ldrexb	r2, [r5]
   b669c:	2a00      	cmp	r2, #0
   b669e:	d103      	bne.n	b66a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b66a0:	e8c5 3f41 	strexb	r1, r3, [r5]
   b66a4:	2900      	cmp	r1, #0
   b66a6:	d1f7      	bne.n	b6698 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b66a8:	d1ef      	bne.n	b668a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b66aa:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b66ac:	f3bf 8f5b 	dmb	ish
   b66b0:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b66b2:	1d2b      	adds	r3, r5, #4
   b66b4:	f3bf 8f5b 	dmb	ish
   b66b8:	e853 6f00 	ldrex	r6, [r3]
   b66bc:	e843 4200 	strex	r2, r4, [r3]
   b66c0:	2a00      	cmp	r2, #0
   b66c2:	d1f9      	bne.n	b66b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b66c4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b66c8:	2e00      	cmp	r6, #0
   b66ca:	d0de      	beq.n	b668a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b66cc:	4620      	mov	r0, r4
   b66ce:	f7fe ff11 	bl	b54f4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b66d2:	4607      	mov	r7, r0
   b66d4:	b160      	cbz	r0, b66f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b66d6:	f105 010c 	add.w	r1, r5, #12
   b66da:	4630      	mov	r0, r6
   b66dc:	f7ff fe43 	bl	b6366 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b66e0:	4630      	mov	r0, r6
   b66e2:	f7ff fa14 	bl	b5b0e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b66e6:	2110      	movs	r1, #16
   b66e8:	4630      	mov	r0, r6
   b66ea:	f7fd fcd8 	bl	b409e <_ZdlPvj>
   b66ee:	e7cc      	b.n	b668a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b66f0:	4631      	mov	r1, r6
   b66f2:	a803      	add	r0, sp, #12
   b66f4:	f7ff ffa0 	bl	b6638 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b66f8:	7b2b      	ldrb	r3, [r5, #12]
   b66fa:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b66fe:	2010      	movs	r0, #16
   b6700:	f7fd fcc9 	bl	b4096 <_Znwj>
   b6704:	4605      	mov	r5, r0
   b6706:	b1d0      	cbz	r0, b673e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b6708:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b670a:	2014      	movs	r0, #20
   b670c:	f7fd fcc3 	bl	b4096 <_Znwj>
   b6710:	4604      	mov	r4, r0
   b6712:	b178      	cbz	r0, b6734 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b6714:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6716:	4601      	mov	r1, r0
   b6718:	a803      	add	r0, sp, #12
   b671a:	f7ff fa01 	bl	b5b20 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b671e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6720:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6722:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6724:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b6726:	9205      	str	r2, [sp, #20]
   b6728:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b672a:	60e3      	str	r3, [r4, #12]
   b672c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b6730:	9206      	str	r2, [sp, #24]
   b6732:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b6734:	4b06      	ldr	r3, [pc, #24]	; (b6750 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b6736:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6738:	4b06      	ldr	r3, [pc, #24]	; (b6754 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b673a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b673c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b673e:	a803      	add	r0, sp, #12
   b6740:	f7ff f9e5 	bl	b5b0e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6744:	2200      	movs	r2, #0
   b6746:	4629      	mov	r1, r5
   b6748:	4803      	ldr	r0, [pc, #12]	; (b6758 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b674a:	f7fe fedb 	bl	b5504 <application_thread_invoke>
   b674e:	e7c7      	b.n	b66e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b6750:	000b6379 	.word	0x000b6379
   b6754:	000b675d 	.word	0x000b675d
   b6758:	000b6a41 	.word	0x000b6a41

000b675c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b675c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b675e:	b570      	push	{r4, r5, r6, lr}
   b6760:	4604      	mov	r4, r0
	switch (__op)
   b6762:	d103      	bne.n	b676c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6764:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6766:	6003      	str	r3, [r0, #0]
      }
   b6768:	2000      	movs	r0, #0
   b676a:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b676c:	2a02      	cmp	r2, #2
   b676e:	d00c      	beq.n	b678a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b6770:	2a03      	cmp	r2, #3
   b6772:	d1f9      	bne.n	b6768 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6774:	6804      	ldr	r4, [r0, #0]
   b6776:	2c00      	cmp	r4, #0
   b6778:	d0f6      	beq.n	b6768 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b677a:	4620      	mov	r0, r4
   b677c:	f7ff f9c7 	bl	b5b0e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6780:	2114      	movs	r1, #20
   b6782:	4620      	mov	r0, r4
   b6784:	f7fd fc8b 	bl	b409e <_ZdlPvj>
   b6788:	e7ee      	b.n	b6768 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b678a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b678c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b678e:	f7fd fc82 	bl	b4096 <_Znwj>
   b6792:	4605      	mov	r5, r0
   b6794:	b120      	cbz	r0, b67a0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b6796:	4631      	mov	r1, r6
   b6798:	f7ff ff4e 	bl	b6638 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b679c:	7c33      	ldrb	r3, [r6, #16]
   b679e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b67a0:	6025      	str	r5, [r4, #0]
	}
   b67a2:	e7e1      	b.n	b6768 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b67a4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b67a4:	4770      	bx	lr

000b67a6 <_ZN9IPAddressD0Ev>:
   b67a6:	b510      	push	{r4, lr}
   b67a8:	2118      	movs	r1, #24
   b67aa:	4604      	mov	r4, r0
   b67ac:	f7fd fc77 	bl	b409e <_ZdlPvj>
   b67b0:	4620      	mov	r0, r4
   b67b2:	bd10      	pop	{r4, pc}

000b67b4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b67b4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b67b6:	7d03      	ldrb	r3, [r0, #20]
   b67b8:	2b06      	cmp	r3, #6
{
   b67ba:	b08d      	sub	sp, #52	; 0x34
   b67bc:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b67be:	f100 0704 	add.w	r7, r0, #4
   b67c2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b67c6:	d012      	beq.n	b67ee <_ZNK9IPAddress7printToER5Print+0x3a>
   b67c8:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   b67cc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b67d0:	220a      	movs	r2, #10
   b67d2:	4630      	mov	r0, r6
   b67d4:	f7ff fa03 	bl	b5bde <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b67d8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b67da:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b67dc:	d019      	beq.n	b6812 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b67de:	2c00      	cmp	r4, #0
   b67e0:	d0f4      	beq.n	b67cc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b67e2:	212e      	movs	r1, #46	; 0x2e
   b67e4:	4630      	mov	r0, r6
   b67e6:	f7ff f9e1 	bl	b5bac <_ZN5Print5printEc>
   b67ea:	4404      	add	r4, r0
   b67ec:	e7ee      	b.n	b67cc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b67ee:	232f      	movs	r3, #47	; 0x2f
   b67f0:	466a      	mov	r2, sp
   b67f2:	4639      	mov	r1, r7
   b67f4:	200a      	movs	r0, #10
		buf[0] = 0;
   b67f6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b67fa:	f7fe fd91 	bl	b5320 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b67fe:	4668      	mov	r0, sp
   b6800:	f001 f93d 	bl	b7a7e <strlen>
   b6804:	6833      	ldr	r3, [r6, #0]
   b6806:	4602      	mov	r2, r0
   b6808:	68db      	ldr	r3, [r3, #12]
   b680a:	4669      	mov	r1, sp
   b680c:	4630      	mov	r0, r6
   b680e:	4798      	blx	r3
   b6810:	4604      	mov	r4, r0
    }
    return n;
}
   b6812:	4620      	mov	r0, r4
   b6814:	b00d      	add	sp, #52	; 0x34
   b6816:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6818 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6818:	b510      	push	{r4, lr}
   b681a:	4b05      	ldr	r3, [pc, #20]	; (b6830 <_ZN9IPAddressC1Ev+0x18>)
   b681c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b681e:	2211      	movs	r2, #17
   b6820:	f840 3b04 	str.w	r3, [r0], #4
   b6824:	2100      	movs	r1, #0
   b6826:	f001 f8c4 	bl	b79b2 <memset>
}
   b682a:	4620      	mov	r0, r4
   b682c:	bd10      	pop	{r4, pc}
   b682e:	bf00      	nop
   b6830:	000b9d5c 	.word	0x000b9d5c

000b6834 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6834:	4603      	mov	r3, r0
   b6836:	4a07      	ldr	r2, [pc, #28]	; (b6854 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6838:	b510      	push	{r4, lr}
   b683a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b683e:	f101 0210 	add.w	r2, r1, #16
   b6842:	f851 4b04 	ldr.w	r4, [r1], #4
   b6846:	f843 4b04 	str.w	r4, [r3], #4
   b684a:	4291      	cmp	r1, r2
   b684c:	d1f9      	bne.n	b6842 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b684e:	780a      	ldrb	r2, [r1, #0]
   b6850:	701a      	strb	r2, [r3, #0]
}
   b6852:	bd10      	pop	{r4, pc}
   b6854:	000b9d5c 	.word	0x000b9d5c

000b6858 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6858:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b685a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b685e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6862:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6866:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b686a:	2304      	movs	r3, #4
   b686c:	6041      	str	r1, [r0, #4]
   b686e:	7503      	strb	r3, [r0, #20]
}
   b6870:	bd10      	pop	{r4, pc}
	...

000b6874 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6874:	b507      	push	{r0, r1, r2, lr}
   b6876:	4b06      	ldr	r3, [pc, #24]	; (b6890 <_ZN9IPAddressC1EPKh+0x1c>)
   b6878:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b687a:	78cb      	ldrb	r3, [r1, #3]
   b687c:	9300      	str	r3, [sp, #0]
   b687e:	788b      	ldrb	r3, [r1, #2]
   b6880:	784a      	ldrb	r2, [r1, #1]
   b6882:	7809      	ldrb	r1, [r1, #0]
   b6884:	f7ff ffe8 	bl	b6858 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6888:	b003      	add	sp, #12
   b688a:	f85d fb04 	ldr.w	pc, [sp], #4
   b688e:	bf00      	nop
   b6890:	000b9d5c 	.word	0x000b9d5c

000b6894 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6894:	7441      	strb	r1, [r0, #17]
}
   b6896:	4770      	bx	lr

000b6898 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6898:	4770      	bx	lr

000b689a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b689a:	4770      	bx	lr

000b689c <_ZN9USBSerial4readEv>:
{
   b689c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b689e:	2100      	movs	r1, #0
   b68a0:	7c00      	ldrb	r0, [r0, #16]
   b68a2:	f7fe fded 	bl	b5480 <HAL_USB_USART_Receive_Data>
}
   b68a6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b68aa:	bd08      	pop	{r3, pc}

000b68ac <_ZN9USBSerial4peekEv>:
{
   b68ac:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b68ae:	2101      	movs	r1, #1
   b68b0:	7c00      	ldrb	r0, [r0, #16]
   b68b2:	f7fe fde5 	bl	b5480 <HAL_USB_USART_Receive_Data>
}
   b68b6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b68ba:	bd08      	pop	{r3, pc}

000b68bc <_ZN9USBSerial17availableForWriteEv>:
{
   b68bc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b68be:	7c00      	ldrb	r0, [r0, #16]
   b68c0:	f7fe fdd6 	bl	b5470 <HAL_USB_USART_Available_Data_For_Write>
}
   b68c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b68c8:	bd08      	pop	{r3, pc}

000b68ca <_ZN9USBSerial9availableEv>:
{
   b68ca:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b68cc:	7c00      	ldrb	r0, [r0, #16]
   b68ce:	f7fe fdc7 	bl	b5460 <HAL_USB_USART_Available_Data>
}
   b68d2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b68d6:	bd08      	pop	{r3, pc}

000b68d8 <_ZN9USBSerial5writeEh>:
{
   b68d8:	b513      	push	{r0, r1, r4, lr}
   b68da:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b68dc:	7c00      	ldrb	r0, [r0, #16]
{
   b68de:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b68e0:	f7fe fdc6 	bl	b5470 <HAL_USB_USART_Available_Data_For_Write>
   b68e4:	2800      	cmp	r0, #0
   b68e6:	9901      	ldr	r1, [sp, #4]
   b68e8:	dc01      	bgt.n	b68ee <_ZN9USBSerial5writeEh+0x16>
   b68ea:	7c60      	ldrb	r0, [r4, #17]
   b68ec:	b120      	cbz	r0, b68f8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b68ee:	7c20      	ldrb	r0, [r4, #16]
   b68f0:	f7fe fdce 	bl	b5490 <HAL_USB_USART_Send_Data>
   b68f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b68f8:	b002      	add	sp, #8
   b68fa:	bd10      	pop	{r4, pc}

000b68fc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b68fc:	7c00      	ldrb	r0, [r0, #16]
   b68fe:	f7fe bdcf 	b.w	b54a0 <HAL_USB_USART_Flush_Data>

000b6902 <_ZN9USBSerialD0Ev>:
   b6902:	b510      	push	{r4, lr}
   b6904:	2114      	movs	r1, #20
   b6906:	4604      	mov	r4, r0
   b6908:	f7fd fbc9 	bl	b409e <_ZdlPvj>
   b690c:	4620      	mov	r0, r4
   b690e:	bd10      	pop	{r4, pc}

000b6910 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6910:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6916:	4604      	mov	r4, r0
   b6918:	4608      	mov	r0, r1
   b691a:	2100      	movs	r1, #0
   b691c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6920:	4b04      	ldr	r3, [pc, #16]	; (b6934 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6922:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6924:	2301      	movs	r3, #1
  _serial = serial;
   b6926:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6928:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b692a:	4611      	mov	r1, r2
   b692c:	f7fe fd88 	bl	b5440 <HAL_USB_USART_Init>
}
   b6930:	4620      	mov	r0, r4
   b6932:	bd10      	pop	{r4, pc}
   b6934:	000b9d70 	.word	0x000b9d70

000b6938 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6938:	7c00      	ldrb	r0, [r0, #16]
   b693a:	2200      	movs	r2, #0
   b693c:	f7fe bd88 	b.w	b5450 <HAL_USB_USART_Begin>

000b6940 <_Z19acquireSerialBufferv>:
{
   b6940:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6942:	2214      	movs	r2, #20
{
   b6944:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6946:	2100      	movs	r1, #0
   b6948:	f001 f833 	bl	b79b2 <memset>
}
   b694c:	4620      	mov	r0, r4
   b694e:	bd10      	pop	{r4, pc}

000b6950 <_Z16_fetch_usbserialv>:
{
   b6950:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6952:	4c0f      	ldr	r4, [pc, #60]	; (b6990 <_Z16_fetch_usbserialv+0x40>)
{
   b6954:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6956:	a803      	add	r0, sp, #12
   b6958:	f7ff fff2 	bl	b6940 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b695c:	7821      	ldrb	r1, [r4, #0]
   b695e:	f3bf 8f5b 	dmb	ish
   b6962:	f011 0101 	ands.w	r1, r1, #1
   b6966:	d10f      	bne.n	b6988 <_Z16_fetch_usbserialv+0x38>
   b6968:	4620      	mov	r0, r4
   b696a:	9101      	str	r1, [sp, #4]
   b696c:	f7fd fb99 	bl	b40a2 <__cxa_guard_acquire>
   b6970:	9901      	ldr	r1, [sp, #4]
   b6972:	b148      	cbz	r0, b6988 <_Z16_fetch_usbserialv+0x38>
   b6974:	aa03      	add	r2, sp, #12
   b6976:	4807      	ldr	r0, [pc, #28]	; (b6994 <_Z16_fetch_usbserialv+0x44>)
   b6978:	f7ff ffca 	bl	b6910 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b697c:	4620      	mov	r0, r4
   b697e:	f7fd fb95 	bl	b40ac <__cxa_guard_release>
   b6982:	4805      	ldr	r0, [pc, #20]	; (b6998 <_Z16_fetch_usbserialv+0x48>)
   b6984:	f000 ffea 	bl	b795c <atexit>
	return _usbserial;
}
   b6988:	4802      	ldr	r0, [pc, #8]	; (b6994 <_Z16_fetch_usbserialv+0x44>)
   b698a:	b008      	add	sp, #32
   b698c:	bd10      	pop	{r4, pc}
   b698e:	bf00      	nop
   b6990:	2003e700 	.word	0x2003e700
   b6994:	2003e704 	.word	0x2003e704
   b6998:	000b6899 	.word	0x000b6899

000b699c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b699c:	4770      	bx	lr

000b699e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b699e:	7441      	strb	r1, [r0, #17]
}
   b69a0:	4770      	bx	lr

000b69a2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b69a2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b69a4:	7c00      	ldrb	r0, [r0, #16]
   b69a6:	f7fe fceb 	bl	b5380 <hal_usart_available_data_for_write>
}
   b69aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b69ae:	bd08      	pop	{r3, pc}

000b69b0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b69b0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b69b2:	7c00      	ldrb	r0, [r0, #16]
   b69b4:	f7fe fcc4 	bl	b5340 <hal_usart_available>
}
   b69b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b69bc:	bd08      	pop	{r3, pc}

000b69be <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b69be:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b69c0:	7c00      	ldrb	r0, [r0, #16]
   b69c2:	f7fe fccd 	bl	b5360 <hal_usart_peek>
}
   b69c6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b69ca:	bd08      	pop	{r3, pc}

000b69cc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b69cc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b69ce:	7c00      	ldrb	r0, [r0, #16]
   b69d0:	f7fe fcbe 	bl	b5350 <hal_usart_read>
}
   b69d4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b69d8:	bd08      	pop	{r3, pc}

000b69da <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b69da:	7c00      	ldrb	r0, [r0, #16]
   b69dc:	f7fe bcc8 	b.w	b5370 <hal_usart_flush>

000b69e0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b69e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b69e2:	7c45      	ldrb	r5, [r0, #17]
{
   b69e4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b69e6:	b12d      	cbz	r5, b69f4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b69e8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b69ea:	b003      	add	sp, #12
   b69ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b69f0:	f7fe bc9e 	b.w	b5330 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b69f4:	7c00      	ldrb	r0, [r0, #16]
   b69f6:	9101      	str	r1, [sp, #4]
   b69f8:	f7fe fcc2 	bl	b5380 <hal_usart_available_data_for_write>
   b69fc:	2800      	cmp	r0, #0
   b69fe:	9901      	ldr	r1, [sp, #4]
   b6a00:	dcf2      	bgt.n	b69e8 <_ZN11USARTSerial5writeEh+0x8>
}
   b6a02:	4628      	mov	r0, r5
   b6a04:	b003      	add	sp, #12
   b6a06:	bd30      	pop	{r4, r5, pc}

000b6a08 <_ZN11USARTSerialD0Ev>:
   b6a08:	b510      	push	{r4, lr}
   b6a0a:	2114      	movs	r1, #20
   b6a0c:	4604      	mov	r4, r0
   b6a0e:	f7fd fb46 	bl	b409e <_ZdlPvj>
   b6a12:	4620      	mov	r0, r4
   b6a14:	bd10      	pop	{r4, pc}
	...

000b6a18 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6a18:	b510      	push	{r4, lr}
   b6a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6a1e:	4604      	mov	r4, r0
   b6a20:	4608      	mov	r0, r1
   b6a22:	4611      	mov	r1, r2
   b6a24:	2200      	movs	r2, #0
   b6a26:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6a2a:	4b04      	ldr	r3, [pc, #16]	; (b6a3c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6a2c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6a2e:	2301      	movs	r3, #1
  _serial = serial;
   b6a30:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6a32:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6a34:	f7fe fcac 	bl	b5390 <hal_usart_init_ex>
}
   b6a38:	4620      	mov	r0, r4
   b6a3a:	bd10      	pop	{r4, pc}
   b6a3c:	000b9da0 	.word	0x000b9da0

000b6a40 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b6a40:	b510      	push	{r4, lr}
      if (_M_empty())
   b6a42:	6883      	ldr	r3, [r0, #8]
   b6a44:	4604      	mov	r4, r0
   b6a46:	b90b      	cbnz	r3, b6a4c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b6a48:	f000 fa08 	bl	b6e5c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6a4c:	68c3      	ldr	r3, [r0, #12]
   b6a4e:	4798      	blx	r3
      if (_M_manager)
   b6a50:	68a3      	ldr	r3, [r4, #8]
   b6a52:	b11b      	cbz	r3, b6a5c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6a54:	2203      	movs	r2, #3
   b6a56:	4621      	mov	r1, r4
   b6a58:	4620      	mov	r0, r4
   b6a5a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b6a5c:	4620      	mov	r0, r4
   b6a5e:	2110      	movs	r1, #16
}
   b6a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b6a64:	f7fd bb1b 	b.w	b409e <_ZdlPvj>

000b6a68 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6a68:	4770      	bx	lr

000b6a6a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6a6c:	4606      	mov	r6, r0
   b6a6e:	4615      	mov	r5, r2
   b6a70:	460c      	mov	r4, r1
   b6a72:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6a74:	42bc      	cmp	r4, r7
   b6a76:	d006      	beq.n	b6a86 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6a78:	6833      	ldr	r3, [r6, #0]
   b6a7a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6a7e:	689b      	ldr	r3, [r3, #8]
   b6a80:	4630      	mov	r0, r6
   b6a82:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6a84:	e7f6      	b.n	b6a74 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6a86:	4628      	mov	r0, r5
   b6a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6a8a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6a8a:	7c00      	ldrb	r0, [r0, #16]
   b6a8c:	2200      	movs	r2, #0
   b6a8e:	f7fe bc9f 	b.w	b53d0 <hal_i2c_write>

000b6a92 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6a92:	7c00      	ldrb	r0, [r0, #16]
   b6a94:	2100      	movs	r1, #0
   b6a96:	f7fe bca3 	b.w	b53e0 <hal_i2c_available>

000b6a9a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6a9a:	7c00      	ldrb	r0, [r0, #16]
   b6a9c:	2100      	movs	r1, #0
   b6a9e:	f7fe bca7 	b.w	b53f0 <hal_i2c_read>

000b6aa2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6aa2:	7c00      	ldrb	r0, [r0, #16]
   b6aa4:	2100      	movs	r1, #0
   b6aa6:	f7fe bcab 	b.w	b5400 <hal_i2c_peek>

000b6aaa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6aaa:	7c00      	ldrb	r0, [r0, #16]
   b6aac:	2100      	movs	r1, #0
   b6aae:	f7fe bcaf 	b.w	b5410 <hal_i2c_flush>

000b6ab2 <_ZN7TwoWireD0Ev>:
   b6ab2:	b510      	push	{r4, lr}
   b6ab4:	2114      	movs	r1, #20
   b6ab6:	4604      	mov	r4, r0
   b6ab8:	f7fd faf1 	bl	b409e <_ZdlPvj>
   b6abc:	4620      	mov	r0, r4
   b6abe:	bd10      	pop	{r4, pc}

000b6ac0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6ac0:	b538      	push	{r3, r4, r5, lr}
   b6ac2:	4604      	mov	r4, r0
   b6ac4:	4615      	mov	r5, r2
   b6ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6aca:	2200      	movs	r2, #0
   b6acc:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6ad0:	4b09      	ldr	r3, [pc, #36]	; (b6af8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b6ad2:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6ad4:	4608      	mov	r0, r1
   b6ad6:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6ad8:	4629      	mov	r1, r5
   b6ada:	f7fe fca1 	bl	b5420 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6ade:	30bf      	adds	r0, #191	; 0xbf
   b6ae0:	d108      	bne.n	b6af4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b6ae2:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6ae4:	07db      	lsls	r3, r3, #31
   b6ae6:	d505      	bpl.n	b6af4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6ae8:	6868      	ldr	r0, [r5, #4]
   b6aea:	f7fe fdcf 	bl	b568c <free>
    free(conf.tx_buffer);
   b6aee:	68e8      	ldr	r0, [r5, #12]
   b6af0:	f7fe fdcc 	bl	b568c <free>
}
   b6af4:	4620      	mov	r0, r4
   b6af6:	bd38      	pop	{r3, r4, r5, pc}
   b6af8:	000b9dd0 	.word	0x000b9dd0

000b6afc <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6afc:	2300      	movs	r3, #0
   b6afe:	7c00      	ldrb	r0, [r0, #16]
   b6b00:	461a      	mov	r2, r3
   b6b02:	4619      	mov	r1, r3
   b6b04:	f7fe bc4c 	b.w	b53a0 <hal_i2c_begin>

000b6b08 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6b08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6b0a:	2200      	movs	r2, #0
   b6b0c:	2314      	movs	r3, #20
   b6b0e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b6b12:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b6b16:	780b      	ldrb	r3, [r1, #0]
   b6b18:	f88d 3008 	strb.w	r3, [sp, #8]
   b6b1c:	684b      	ldr	r3, [r1, #4]
   b6b1e:	9303      	str	r3, [sp, #12]
   b6b20:	68cb      	ldr	r3, [r1, #12]
   b6b22:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b6b24:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b6b26:	7a0b      	ldrb	r3, [r1, #8]
   b6b28:	9305      	str	r3, [sp, #20]
   b6b2a:	a901      	add	r1, sp, #4
   b6b2c:	f7fe fc80 	bl	b5430 <hal_i2c_request_ex>
}
   b6b30:	b007      	add	sp, #28
   b6b32:	f85d fb04 	ldr.w	pc, [sp], #4

000b6b36 <_ZN7TwoWire11requestFromEhjh>:
{
   b6b36:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b6b38:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b6b3a:	f88d 1000 	strb.w	r1, [sp]
   b6b3e:	f04f 0164 	mov.w	r1, #100	; 0x64
   b6b42:	9103      	str	r1, [sp, #12]
   b6b44:	bf18      	it	ne
   b6b46:	2301      	movne	r3, #1
   b6b48:	4669      	mov	r1, sp
    size_ = size;
   b6b4a:	9201      	str	r2, [sp, #4]
   b6b4c:	f88d 3008 	strb.w	r3, [sp, #8]
   b6b50:	f7ff ffda 	bl	b6b08 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b6b54:	b005      	add	sp, #20
   b6b56:	f85d fb04 	ldr.w	pc, [sp], #4

000b6b5a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b6b5a:	2301      	movs	r3, #1
   b6b5c:	f7ff bfeb 	b.w	b6b36 <_ZN7TwoWire11requestFromEhjh>

000b6b60 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6b60:	7c00      	ldrb	r0, [r0, #16]
   b6b62:	2200      	movs	r2, #0
   b6b64:	f7fe bc24 	b.w	b53b0 <hal_i2c_begin_transmission>

000b6b68 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6b68:	7c00      	ldrb	r0, [r0, #16]
   b6b6a:	2200      	movs	r2, #0
   b6b6c:	f7fe bc28 	b.w	b53c0 <hal_i2c_end_transmission>

000b6b70 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b6b70:	2101      	movs	r1, #1
   b6b72:	f7ff bff9 	b.w	b6b68 <_ZN7TwoWire15endTransmissionEh>

000b6b76 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6b76:	2200      	movs	r2, #0
   b6b78:	6840      	ldr	r0, [r0, #4]
   b6b7a:	4611      	mov	r1, r2
   b6b7c:	f7fe bd06 	b.w	b558c <network_ready>

000b6b80 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6b80:	2200      	movs	r2, #0
   b6b82:	6840      	ldr	r0, [r0, #4]
   b6b84:	4611      	mov	r1, r2
   b6b86:	f7fe bd21 	b.w	b55cc <network_listening>

000b6b8a <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6b8a:	2200      	movs	r2, #0
   b6b8c:	6840      	ldr	r0, [r0, #4]
   b6b8e:	4611      	mov	r1, r2
   b6b90:	f7fe bd2c 	b.w	b55ec <network_get_listen_timeout>

000b6b94 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6b94:	6840      	ldr	r0, [r0, #4]
   b6b96:	2200      	movs	r2, #0
   b6b98:	f7fe bd20 	b.w	b55dc <network_set_listen_timeout>

000b6b9c <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6b9c:	6840      	ldr	r0, [r0, #4]
   b6b9e:	2200      	movs	r2, #0
   b6ba0:	f081 0101 	eor.w	r1, r1, #1
   b6ba4:	f7fe bd0a 	b.w	b55bc <network_listen>

000b6ba8 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6ba8:	2300      	movs	r3, #0
   b6baa:	6840      	ldr	r0, [r0, #4]
   b6bac:	461a      	mov	r2, r3
   b6bae:	4619      	mov	r1, r3
   b6bb0:	f7fe bcfc 	b.w	b55ac <network_off>

000b6bb4 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6bb4:	2300      	movs	r3, #0
   b6bb6:	6840      	ldr	r0, [r0, #4]
   b6bb8:	461a      	mov	r2, r3
   b6bba:	4619      	mov	r1, r3
   b6bbc:	f7fe bcee 	b.w	b559c <network_on>

000b6bc0 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6bc0:	2200      	movs	r2, #0
   b6bc2:	6840      	ldr	r0, [r0, #4]
   b6bc4:	4611      	mov	r1, r2
   b6bc6:	f7fe bcd1 	b.w	b556c <network_connecting>

000b6bca <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6bca:	6840      	ldr	r0, [r0, #4]
   b6bcc:	2200      	movs	r2, #0
   b6bce:	2102      	movs	r1, #2
   b6bd0:	f7fe bcd4 	b.w	b557c <network_disconnect>

000b6bd4 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6bd4:	2300      	movs	r3, #0
   b6bd6:	6840      	ldr	r0, [r0, #4]
   b6bd8:	461a      	mov	r2, r3
   b6bda:	f7fe bcbf 	b.w	b555c <network_connect>
	...

000b6be0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6be0:	4b02      	ldr	r3, [pc, #8]	; (b6bec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6be2:	2204      	movs	r2, #4
   b6be4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6be6:	4a02      	ldr	r2, [pc, #8]	; (b6bf0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6be8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6bea:	4770      	bx	lr
   b6bec:	2003e718 	.word	0x2003e718
   b6bf0:	000b9df8 	.word	0x000b9df8

000b6bf4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6bf4:	2300      	movs	r3, #0
   b6bf6:	6840      	ldr	r0, [r0, #4]
   b6bf8:	461a      	mov	r2, r3
   b6bfa:	f7fe bcaf 	b.w	b555c <network_connect>

000b6bfe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6bfe:	6840      	ldr	r0, [r0, #4]
   b6c00:	2200      	movs	r2, #0
   b6c02:	2102      	movs	r1, #2
   b6c04:	f7fe bcba 	b.w	b557c <network_disconnect>

000b6c08 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6c08:	2200      	movs	r2, #0
   b6c0a:	6840      	ldr	r0, [r0, #4]
   b6c0c:	4611      	mov	r1, r2
   b6c0e:	f7fe bcad 	b.w	b556c <network_connecting>

000b6c12 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6c12:	2200      	movs	r2, #0
   b6c14:	6840      	ldr	r0, [r0, #4]
   b6c16:	4611      	mov	r1, r2
   b6c18:	f7fe bcb8 	b.w	b558c <network_ready>

000b6c1c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6c1c:	2300      	movs	r3, #0
   b6c1e:	6840      	ldr	r0, [r0, #4]
   b6c20:	461a      	mov	r2, r3
   b6c22:	4619      	mov	r1, r3
   b6c24:	f7fe bcba 	b.w	b559c <network_on>

000b6c28 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6c28:	2300      	movs	r3, #0
   b6c2a:	6840      	ldr	r0, [r0, #4]
   b6c2c:	461a      	mov	r2, r3
   b6c2e:	4619      	mov	r1, r3
   b6c30:	f7fe bcbc 	b.w	b55ac <network_off>

000b6c34 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6c34:	6840      	ldr	r0, [r0, #4]
   b6c36:	2100      	movs	r1, #0
   b6c38:	f7fe bce0 	b.w	b55fc <network_is_on>

000b6c3c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6c3c:	6840      	ldr	r0, [r0, #4]
   b6c3e:	2100      	movs	r1, #0
   b6c40:	f7fe bce4 	b.w	b560c <network_is_off>

000b6c44 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6c44:	6840      	ldr	r0, [r0, #4]
   b6c46:	2200      	movs	r2, #0
   b6c48:	f081 0101 	eor.w	r1, r1, #1
   b6c4c:	f7fe bcb6 	b.w	b55bc <network_listen>

000b6c50 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6c50:	6840      	ldr	r0, [r0, #4]
   b6c52:	2200      	movs	r2, #0
   b6c54:	f7fe bcc2 	b.w	b55dc <network_set_listen_timeout>

000b6c58 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6c58:	2200      	movs	r2, #0
   b6c5a:	6840      	ldr	r0, [r0, #4]
   b6c5c:	4611      	mov	r1, r2
   b6c5e:	f7fe bcc5 	b.w	b55ec <network_get_listen_timeout>

000b6c62 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6c62:	2200      	movs	r2, #0
   b6c64:	6840      	ldr	r0, [r0, #4]
   b6c66:	4611      	mov	r1, r2
   b6c68:	f7fe bcb0 	b.w	b55cc <network_listening>

000b6c6c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6c6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6c70:	b095      	sub	sp, #84	; 0x54
   b6c72:	4614      	mov	r4, r2
   b6c74:	460d      	mov	r5, r1
   b6c76:	4607      	mov	r7, r0
    IPAddress addr;
   b6c78:	f7ff fdce 	bl	b6818 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6c7c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6c7e:	221c      	movs	r2, #28
   b6c80:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6c82:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6c84:	f000 fe95 	bl	b79b2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6c88:	2340      	movs	r3, #64	; 0x40
   b6c8a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6c8c:	4620      	mov	r0, r4
   b6c8e:	466b      	mov	r3, sp
   b6c90:	aa0c      	add	r2, sp, #48	; 0x30
   b6c92:	2100      	movs	r1, #0
   b6c94:	f7fe fb14 	bl	b52c0 <netdb_getaddrinfo>
    if (!r) {
   b6c98:	4604      	mov	r4, r0
   b6c9a:	2800      	cmp	r0, #0
   b6c9c:	d14b      	bne.n	b6d36 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6c9e:	4602      	mov	r2, r0
   b6ca0:	2101      	movs	r1, #1
   b6ca2:	6868      	ldr	r0, [r5, #4]
   b6ca4:	f7fe fc72 	bl	b558c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6ca8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6caa:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6cac:	4622      	mov	r2, r4
   b6cae:	6868      	ldr	r0, [r5, #4]
   b6cb0:	f7fe fc6c 	bl	b558c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6cb4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6cb6:	4681      	mov	r9, r0
        bool ok = false;
   b6cb8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6cba:	2e00      	cmp	r6, #0
   b6cbc:	d03b      	beq.n	b6d36 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6cbe:	2900      	cmp	r1, #0
   b6cc0:	d139      	bne.n	b6d36 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6cc2:	6873      	ldr	r3, [r6, #4]
   b6cc4:	2b02      	cmp	r3, #2
   b6cc6:	d003      	beq.n	b6cd0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6cc8:	2b0a      	cmp	r3, #10
   b6cca:	d011      	beq.n	b6cf0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6ccc:	69f6      	ldr	r6, [r6, #28]
   b6cce:	e7f4      	b.n	b6cba <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6cd0:	f1b8 0f00 	cmp.w	r8, #0
   b6cd4:	d0fa      	beq.n	b6ccc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6cd6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6cd8:	a806      	add	r0, sp, #24
   b6cda:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6cdc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6cde:	f7ff fdc9 	bl	b6874 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6ce2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6ce4:	1d3c      	adds	r4, r7, #4
   b6ce6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6ce8:	682b      	ldr	r3, [r5, #0]
   b6cea:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6cec:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6cee:	e7ed      	b.n	b6ccc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6cf0:	f1b9 0f00 	cmp.w	r9, #0
   b6cf4:	d0ea      	beq.n	b6ccc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6cf6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6cf8:	2210      	movs	r2, #16
   b6cfa:	a801      	add	r0, sp, #4
   b6cfc:	f000 fe59 	bl	b79b2 <memset>
                    a.v = 6;
   b6d00:	2306      	movs	r3, #6
   b6d02:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6d06:	ad01      	add	r5, sp, #4
   b6d08:	f104 0308 	add.w	r3, r4, #8
   b6d0c:	3418      	adds	r4, #24
   b6d0e:	6818      	ldr	r0, [r3, #0]
   b6d10:	6859      	ldr	r1, [r3, #4]
   b6d12:	462a      	mov	r2, r5
   b6d14:	c203      	stmia	r2!, {r0, r1}
   b6d16:	3308      	adds	r3, #8
   b6d18:	42a3      	cmp	r3, r4
   b6d1a:	4615      	mov	r5, r2
   b6d1c:	d1f7      	bne.n	b6d0e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6d1e:	a901      	add	r1, sp, #4
   b6d20:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6d22:	ad07      	add	r5, sp, #28
   b6d24:	f7ff fd86 	bl	b6834 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6d28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6d2a:	1d3c      	adds	r4, r7, #4
   b6d2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6d2e:	682b      	ldr	r3, [r5, #0]
   b6d30:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6d32:	4649      	mov	r1, r9
   b6d34:	e7ca      	b.n	b6ccc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6d36:	9800      	ldr	r0, [sp, #0]
   b6d38:	f7fe faba 	bl	b52b0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6d3c:	4638      	mov	r0, r7
   b6d3e:	b015      	add	sp, #84	; 0x54
   b6d40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6d44 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6d44:	4b02      	ldr	r3, [pc, #8]	; (b6d50 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6d46:	4a03      	ldr	r2, [pc, #12]	; (b6d54 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6d48:	601a      	str	r2, [r3, #0]
   b6d4a:	2200      	movs	r2, #0
   b6d4c:	605a      	str	r2, [r3, #4]

} // spark
   b6d4e:	4770      	bx	lr
   b6d50:	2003e720 	.word	0x2003e720
   b6d54:	000b9e34 	.word	0x000b9e34

000b6d58 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6d58:	4770      	bx	lr
	...

000b6d5c <_Z20acquireSerial1Bufferv>:
{
   b6d5c:	b538      	push	{r3, r4, r5, lr}
   b6d5e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6d60:	2514      	movs	r5, #20
   b6d62:	462a      	mov	r2, r5
   b6d64:	2100      	movs	r1, #0
   b6d66:	f000 fe24 	bl	b79b2 <memset>
   b6d6a:	8025      	strh	r5, [r4, #0]
   b6d6c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6d6e:	4907      	ldr	r1, [pc, #28]	; (b6d8c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6d70:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6d72:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6d74:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6d76:	f000 f86f 	bl	b6e58 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6d7a:	4904      	ldr	r1, [pc, #16]	; (b6d8c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6d7c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6d7e:	4628      	mov	r0, r5
   b6d80:	f000 f86a 	bl	b6e58 <_ZnajRKSt9nothrow_t>
    };
   b6d84:	60e0      	str	r0, [r4, #12]
}
   b6d86:	4620      	mov	r0, r4
   b6d88:	bd38      	pop	{r3, r4, r5, pc}
   b6d8a:	bf00      	nop
   b6d8c:	000b9e68 	.word	0x000b9e68

000b6d90 <_Z22__fetch_global_Serial1v>:
{
   b6d90:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6d92:	4d0e      	ldr	r5, [pc, #56]	; (b6dcc <_Z22__fetch_global_Serial1v+0x3c>)
   b6d94:	7829      	ldrb	r1, [r5, #0]
   b6d96:	f3bf 8f5b 	dmb	ish
   b6d9a:	f011 0401 	ands.w	r4, r1, #1
{
   b6d9e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6da0:	d111      	bne.n	b6dc6 <_Z22__fetch_global_Serial1v+0x36>
   b6da2:	4628      	mov	r0, r5
   b6da4:	f7fd f97d 	bl	b40a2 <__cxa_guard_acquire>
   b6da8:	b168      	cbz	r0, b6dc6 <_Z22__fetch_global_Serial1v+0x36>
   b6daa:	a801      	add	r0, sp, #4
   b6dac:	f7ff ffd6 	bl	b6d5c <_Z20acquireSerial1Bufferv>
   b6db0:	aa01      	add	r2, sp, #4
   b6db2:	4621      	mov	r1, r4
   b6db4:	4806      	ldr	r0, [pc, #24]	; (b6dd0 <_Z22__fetch_global_Serial1v+0x40>)
   b6db6:	f7ff fe2f 	bl	b6a18 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6dba:	4628      	mov	r0, r5
   b6dbc:	f7fd f976 	bl	b40ac <__cxa_guard_release>
   b6dc0:	4804      	ldr	r0, [pc, #16]	; (b6dd4 <_Z22__fetch_global_Serial1v+0x44>)
   b6dc2:	f000 fdcb 	bl	b795c <atexit>
    return serial1;
}
   b6dc6:	4802      	ldr	r0, [pc, #8]	; (b6dd0 <_Z22__fetch_global_Serial1v+0x40>)
   b6dc8:	b007      	add	sp, #28
   b6dca:	bd30      	pop	{r4, r5, pc}
   b6dcc:	2003e728 	.word	0x2003e728
   b6dd0:	2003e72c 	.word	0x2003e72c
   b6dd4:	000b6d59 	.word	0x000b6d59

000b6dd8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6dd8:	4770      	bx	lr
	...

000b6ddc <_Z17acquireWireBufferv>:
{
   b6ddc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b6dde:	4b0a      	ldr	r3, [pc, #40]	; (b6e08 <_Z17acquireWireBufferv+0x2c>)
   b6de0:	6003      	str	r3, [r0, #0]
   b6de2:	2301      	movs	r3, #1
{
   b6de4:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6de6:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6de8:	4908      	ldr	r1, [pc, #32]	; (b6e0c <_Z17acquireWireBufferv+0x30>)
   b6dea:	2020      	movs	r0, #32
   b6dec:	f000 f834 	bl	b6e58 <_ZnajRKSt9nothrow_t>
	};
   b6df0:	2520      	movs	r5, #32
   b6df2:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6df4:	4905      	ldr	r1, [pc, #20]	; (b6e0c <_Z17acquireWireBufferv+0x30>)
	};
   b6df6:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6df8:	4628      	mov	r0, r5
   b6dfa:	f000 f82d 	bl	b6e58 <_ZnajRKSt9nothrow_t>
	};
   b6dfe:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b6e02:	4620      	mov	r0, r4
   b6e04:	bd38      	pop	{r3, r4, r5, pc}
   b6e06:	bf00      	nop
   b6e08:	00010018 	.word	0x00010018
   b6e0c:	000b9e68 	.word	0x000b9e68

000b6e10 <_Z19__fetch_global_Wirev>:
{
   b6e10:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6e12:	4d0e      	ldr	r5, [pc, #56]	; (b6e4c <_Z19__fetch_global_Wirev+0x3c>)
   b6e14:	7829      	ldrb	r1, [r5, #0]
   b6e16:	f3bf 8f5b 	dmb	ish
   b6e1a:	f011 0401 	ands.w	r4, r1, #1
{
   b6e1e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6e20:	d111      	bne.n	b6e46 <_Z19__fetch_global_Wirev+0x36>
   b6e22:	4628      	mov	r0, r5
   b6e24:	f7fd f93d 	bl	b40a2 <__cxa_guard_acquire>
   b6e28:	b168      	cbz	r0, b6e46 <_Z19__fetch_global_Wirev+0x36>
   b6e2a:	4668      	mov	r0, sp
   b6e2c:	f7ff ffd6 	bl	b6ddc <_Z17acquireWireBufferv>
   b6e30:	466a      	mov	r2, sp
   b6e32:	4621      	mov	r1, r4
   b6e34:	4806      	ldr	r0, [pc, #24]	; (b6e50 <_Z19__fetch_global_Wirev+0x40>)
   b6e36:	f7ff fe43 	bl	b6ac0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6e3a:	4628      	mov	r0, r5
   b6e3c:	f7fd f936 	bl	b40ac <__cxa_guard_release>
   b6e40:	4804      	ldr	r0, [pc, #16]	; (b6e54 <_Z19__fetch_global_Wirev+0x44>)
   b6e42:	f000 fd8b 	bl	b795c <atexit>
	return wire;
}
   b6e46:	4802      	ldr	r0, [pc, #8]	; (b6e50 <_Z19__fetch_global_Wirev+0x40>)
   b6e48:	b007      	add	sp, #28
   b6e4a:	bd30      	pop	{r4, r5, pc}
   b6e4c:	2003e744 	.word	0x2003e744
   b6e50:	2003e748 	.word	0x2003e748
   b6e54:	000b6dd9 	.word	0x000b6dd9

000b6e58 <_ZnajRKSt9nothrow_t>:
   b6e58:	f7fd b91f 	b.w	b409a <_Znaj>

000b6e5c <_ZSt25__throw_bad_function_callv>:
   b6e5c:	b508      	push	{r3, lr}
   b6e5e:	f7fe fc35 	bl	b56cc <abort>
	...

000b6e64 <__aeabi_drsub>:
   b6e64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b6e68:	e002      	b.n	b6e70 <__adddf3>
   b6e6a:	bf00      	nop

000b6e6c <__aeabi_dsub>:
   b6e6c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b6e70 <__adddf3>:
   b6e70:	b530      	push	{r4, r5, lr}
   b6e72:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b6e76:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b6e7a:	ea94 0f05 	teq	r4, r5
   b6e7e:	bf08      	it	eq
   b6e80:	ea90 0f02 	teqeq	r0, r2
   b6e84:	bf1f      	itttt	ne
   b6e86:	ea54 0c00 	orrsne.w	ip, r4, r0
   b6e8a:	ea55 0c02 	orrsne.w	ip, r5, r2
   b6e8e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b6e92:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6e96:	f000 80e2 	beq.w	b705e <__adddf3+0x1ee>
   b6e9a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b6e9e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b6ea2:	bfb8      	it	lt
   b6ea4:	426d      	neglt	r5, r5
   b6ea6:	dd0c      	ble.n	b6ec2 <__adddf3+0x52>
   b6ea8:	442c      	add	r4, r5
   b6eaa:	ea80 0202 	eor.w	r2, r0, r2
   b6eae:	ea81 0303 	eor.w	r3, r1, r3
   b6eb2:	ea82 0000 	eor.w	r0, r2, r0
   b6eb6:	ea83 0101 	eor.w	r1, r3, r1
   b6eba:	ea80 0202 	eor.w	r2, r0, r2
   b6ebe:	ea81 0303 	eor.w	r3, r1, r3
   b6ec2:	2d36      	cmp	r5, #54	; 0x36
   b6ec4:	bf88      	it	hi
   b6ec6:	bd30      	pophi	{r4, r5, pc}
   b6ec8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b6ecc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6ed0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b6ed4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b6ed8:	d002      	beq.n	b6ee0 <__adddf3+0x70>
   b6eda:	4240      	negs	r0, r0
   b6edc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6ee0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b6ee4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6ee8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b6eec:	d002      	beq.n	b6ef4 <__adddf3+0x84>
   b6eee:	4252      	negs	r2, r2
   b6ef0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b6ef4:	ea94 0f05 	teq	r4, r5
   b6ef8:	f000 80a7 	beq.w	b704a <__adddf3+0x1da>
   b6efc:	f1a4 0401 	sub.w	r4, r4, #1
   b6f00:	f1d5 0e20 	rsbs	lr, r5, #32
   b6f04:	db0d      	blt.n	b6f22 <__adddf3+0xb2>
   b6f06:	fa02 fc0e 	lsl.w	ip, r2, lr
   b6f0a:	fa22 f205 	lsr.w	r2, r2, r5
   b6f0e:	1880      	adds	r0, r0, r2
   b6f10:	f141 0100 	adc.w	r1, r1, #0
   b6f14:	fa03 f20e 	lsl.w	r2, r3, lr
   b6f18:	1880      	adds	r0, r0, r2
   b6f1a:	fa43 f305 	asr.w	r3, r3, r5
   b6f1e:	4159      	adcs	r1, r3
   b6f20:	e00e      	b.n	b6f40 <__adddf3+0xd0>
   b6f22:	f1a5 0520 	sub.w	r5, r5, #32
   b6f26:	f10e 0e20 	add.w	lr, lr, #32
   b6f2a:	2a01      	cmp	r2, #1
   b6f2c:	fa03 fc0e 	lsl.w	ip, r3, lr
   b6f30:	bf28      	it	cs
   b6f32:	f04c 0c02 	orrcs.w	ip, ip, #2
   b6f36:	fa43 f305 	asr.w	r3, r3, r5
   b6f3a:	18c0      	adds	r0, r0, r3
   b6f3c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b6f40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6f44:	d507      	bpl.n	b6f56 <__adddf3+0xe6>
   b6f46:	f04f 0e00 	mov.w	lr, #0
   b6f4a:	f1dc 0c00 	rsbs	ip, ip, #0
   b6f4e:	eb7e 0000 	sbcs.w	r0, lr, r0
   b6f52:	eb6e 0101 	sbc.w	r1, lr, r1
   b6f56:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b6f5a:	d31b      	bcc.n	b6f94 <__adddf3+0x124>
   b6f5c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b6f60:	d30c      	bcc.n	b6f7c <__adddf3+0x10c>
   b6f62:	0849      	lsrs	r1, r1, #1
   b6f64:	ea5f 0030 	movs.w	r0, r0, rrx
   b6f68:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b6f6c:	f104 0401 	add.w	r4, r4, #1
   b6f70:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b6f74:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b6f78:	f080 809a 	bcs.w	b70b0 <__adddf3+0x240>
   b6f7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b6f80:	bf08      	it	eq
   b6f82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6f86:	f150 0000 	adcs.w	r0, r0, #0
   b6f8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6f8e:	ea41 0105 	orr.w	r1, r1, r5
   b6f92:	bd30      	pop	{r4, r5, pc}
   b6f94:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b6f98:	4140      	adcs	r0, r0
   b6f9a:	eb41 0101 	adc.w	r1, r1, r1
   b6f9e:	3c01      	subs	r4, #1
   b6fa0:	bf28      	it	cs
   b6fa2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b6fa6:	d2e9      	bcs.n	b6f7c <__adddf3+0x10c>
   b6fa8:	f091 0f00 	teq	r1, #0
   b6fac:	bf04      	itt	eq
   b6fae:	4601      	moveq	r1, r0
   b6fb0:	2000      	moveq	r0, #0
   b6fb2:	fab1 f381 	clz	r3, r1
   b6fb6:	bf08      	it	eq
   b6fb8:	3320      	addeq	r3, #32
   b6fba:	f1a3 030b 	sub.w	r3, r3, #11
   b6fbe:	f1b3 0220 	subs.w	r2, r3, #32
   b6fc2:	da0c      	bge.n	b6fde <__adddf3+0x16e>
   b6fc4:	320c      	adds	r2, #12
   b6fc6:	dd08      	ble.n	b6fda <__adddf3+0x16a>
   b6fc8:	f102 0c14 	add.w	ip, r2, #20
   b6fcc:	f1c2 020c 	rsb	r2, r2, #12
   b6fd0:	fa01 f00c 	lsl.w	r0, r1, ip
   b6fd4:	fa21 f102 	lsr.w	r1, r1, r2
   b6fd8:	e00c      	b.n	b6ff4 <__adddf3+0x184>
   b6fda:	f102 0214 	add.w	r2, r2, #20
   b6fde:	bfd8      	it	le
   b6fe0:	f1c2 0c20 	rsble	ip, r2, #32
   b6fe4:	fa01 f102 	lsl.w	r1, r1, r2
   b6fe8:	fa20 fc0c 	lsr.w	ip, r0, ip
   b6fec:	bfdc      	itt	le
   b6fee:	ea41 010c 	orrle.w	r1, r1, ip
   b6ff2:	4090      	lslle	r0, r2
   b6ff4:	1ae4      	subs	r4, r4, r3
   b6ff6:	bfa2      	ittt	ge
   b6ff8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b6ffc:	4329      	orrge	r1, r5
   b6ffe:	bd30      	popge	{r4, r5, pc}
   b7000:	ea6f 0404 	mvn.w	r4, r4
   b7004:	3c1f      	subs	r4, #31
   b7006:	da1c      	bge.n	b7042 <__adddf3+0x1d2>
   b7008:	340c      	adds	r4, #12
   b700a:	dc0e      	bgt.n	b702a <__adddf3+0x1ba>
   b700c:	f104 0414 	add.w	r4, r4, #20
   b7010:	f1c4 0220 	rsb	r2, r4, #32
   b7014:	fa20 f004 	lsr.w	r0, r0, r4
   b7018:	fa01 f302 	lsl.w	r3, r1, r2
   b701c:	ea40 0003 	orr.w	r0, r0, r3
   b7020:	fa21 f304 	lsr.w	r3, r1, r4
   b7024:	ea45 0103 	orr.w	r1, r5, r3
   b7028:	bd30      	pop	{r4, r5, pc}
   b702a:	f1c4 040c 	rsb	r4, r4, #12
   b702e:	f1c4 0220 	rsb	r2, r4, #32
   b7032:	fa20 f002 	lsr.w	r0, r0, r2
   b7036:	fa01 f304 	lsl.w	r3, r1, r4
   b703a:	ea40 0003 	orr.w	r0, r0, r3
   b703e:	4629      	mov	r1, r5
   b7040:	bd30      	pop	{r4, r5, pc}
   b7042:	fa21 f004 	lsr.w	r0, r1, r4
   b7046:	4629      	mov	r1, r5
   b7048:	bd30      	pop	{r4, r5, pc}
   b704a:	f094 0f00 	teq	r4, #0
   b704e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b7052:	bf06      	itte	eq
   b7054:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b7058:	3401      	addeq	r4, #1
   b705a:	3d01      	subne	r5, #1
   b705c:	e74e      	b.n	b6efc <__adddf3+0x8c>
   b705e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7062:	bf18      	it	ne
   b7064:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7068:	d029      	beq.n	b70be <__adddf3+0x24e>
   b706a:	ea94 0f05 	teq	r4, r5
   b706e:	bf08      	it	eq
   b7070:	ea90 0f02 	teqeq	r0, r2
   b7074:	d005      	beq.n	b7082 <__adddf3+0x212>
   b7076:	ea54 0c00 	orrs.w	ip, r4, r0
   b707a:	bf04      	itt	eq
   b707c:	4619      	moveq	r1, r3
   b707e:	4610      	moveq	r0, r2
   b7080:	bd30      	pop	{r4, r5, pc}
   b7082:	ea91 0f03 	teq	r1, r3
   b7086:	bf1e      	ittt	ne
   b7088:	2100      	movne	r1, #0
   b708a:	2000      	movne	r0, #0
   b708c:	bd30      	popne	{r4, r5, pc}
   b708e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b7092:	d105      	bne.n	b70a0 <__adddf3+0x230>
   b7094:	0040      	lsls	r0, r0, #1
   b7096:	4149      	adcs	r1, r1
   b7098:	bf28      	it	cs
   b709a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b709e:	bd30      	pop	{r4, r5, pc}
   b70a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b70a4:	bf3c      	itt	cc
   b70a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b70aa:	bd30      	popcc	{r4, r5, pc}
   b70ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b70b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b70b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b70b8:	f04f 0000 	mov.w	r0, #0
   b70bc:	bd30      	pop	{r4, r5, pc}
   b70be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b70c2:	bf1a      	itte	ne
   b70c4:	4619      	movne	r1, r3
   b70c6:	4610      	movne	r0, r2
   b70c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b70cc:	bf1c      	itt	ne
   b70ce:	460b      	movne	r3, r1
   b70d0:	4602      	movne	r2, r0
   b70d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b70d6:	bf06      	itte	eq
   b70d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b70dc:	ea91 0f03 	teqeq	r1, r3
   b70e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b70e4:	bd30      	pop	{r4, r5, pc}
   b70e6:	bf00      	nop

000b70e8 <__aeabi_ui2d>:
   b70e8:	f090 0f00 	teq	r0, #0
   b70ec:	bf04      	itt	eq
   b70ee:	2100      	moveq	r1, #0
   b70f0:	4770      	bxeq	lr
   b70f2:	b530      	push	{r4, r5, lr}
   b70f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b70f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b70fc:	f04f 0500 	mov.w	r5, #0
   b7100:	f04f 0100 	mov.w	r1, #0
   b7104:	e750      	b.n	b6fa8 <__adddf3+0x138>
   b7106:	bf00      	nop

000b7108 <__aeabi_i2d>:
   b7108:	f090 0f00 	teq	r0, #0
   b710c:	bf04      	itt	eq
   b710e:	2100      	moveq	r1, #0
   b7110:	4770      	bxeq	lr
   b7112:	b530      	push	{r4, r5, lr}
   b7114:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7118:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b711c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b7120:	bf48      	it	mi
   b7122:	4240      	negmi	r0, r0
   b7124:	f04f 0100 	mov.w	r1, #0
   b7128:	e73e      	b.n	b6fa8 <__adddf3+0x138>
   b712a:	bf00      	nop

000b712c <__aeabi_f2d>:
   b712c:	0042      	lsls	r2, r0, #1
   b712e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b7132:	ea4f 0131 	mov.w	r1, r1, rrx
   b7136:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b713a:	bf1f      	itttt	ne
   b713c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b7140:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b7144:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b7148:	4770      	bxne	lr
   b714a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b714e:	bf08      	it	eq
   b7150:	4770      	bxeq	lr
   b7152:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b7156:	bf04      	itt	eq
   b7158:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b715c:	4770      	bxeq	lr
   b715e:	b530      	push	{r4, r5, lr}
   b7160:	f44f 7460 	mov.w	r4, #896	; 0x380
   b7164:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7168:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b716c:	e71c      	b.n	b6fa8 <__adddf3+0x138>
   b716e:	bf00      	nop

000b7170 <__aeabi_ul2d>:
   b7170:	ea50 0201 	orrs.w	r2, r0, r1
   b7174:	bf08      	it	eq
   b7176:	4770      	bxeq	lr
   b7178:	b530      	push	{r4, r5, lr}
   b717a:	f04f 0500 	mov.w	r5, #0
   b717e:	e00a      	b.n	b7196 <__aeabi_l2d+0x16>

000b7180 <__aeabi_l2d>:
   b7180:	ea50 0201 	orrs.w	r2, r0, r1
   b7184:	bf08      	it	eq
   b7186:	4770      	bxeq	lr
   b7188:	b530      	push	{r4, r5, lr}
   b718a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b718e:	d502      	bpl.n	b7196 <__aeabi_l2d+0x16>
   b7190:	4240      	negs	r0, r0
   b7192:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7196:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b719a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b719e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b71a2:	f43f aed8 	beq.w	b6f56 <__adddf3+0xe6>
   b71a6:	f04f 0203 	mov.w	r2, #3
   b71aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b71ae:	bf18      	it	ne
   b71b0:	3203      	addne	r2, #3
   b71b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b71b6:	bf18      	it	ne
   b71b8:	3203      	addne	r2, #3
   b71ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b71be:	f1c2 0320 	rsb	r3, r2, #32
   b71c2:	fa00 fc03 	lsl.w	ip, r0, r3
   b71c6:	fa20 f002 	lsr.w	r0, r0, r2
   b71ca:	fa01 fe03 	lsl.w	lr, r1, r3
   b71ce:	ea40 000e 	orr.w	r0, r0, lr
   b71d2:	fa21 f102 	lsr.w	r1, r1, r2
   b71d6:	4414      	add	r4, r2
   b71d8:	e6bd      	b.n	b6f56 <__adddf3+0xe6>
   b71da:	bf00      	nop

000b71dc <__aeabi_dmul>:
   b71dc:	b570      	push	{r4, r5, r6, lr}
   b71de:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b71e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b71e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b71ea:	bf1d      	ittte	ne
   b71ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b71f0:	ea94 0f0c 	teqne	r4, ip
   b71f4:	ea95 0f0c 	teqne	r5, ip
   b71f8:	f000 f8de 	bleq	b73b8 <__aeabi_dmul+0x1dc>
   b71fc:	442c      	add	r4, r5
   b71fe:	ea81 0603 	eor.w	r6, r1, r3
   b7202:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b7206:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b720a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b720e:	bf18      	it	ne
   b7210:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b7214:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7218:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b721c:	d038      	beq.n	b7290 <__aeabi_dmul+0xb4>
   b721e:	fba0 ce02 	umull	ip, lr, r0, r2
   b7222:	f04f 0500 	mov.w	r5, #0
   b7226:	fbe1 e502 	umlal	lr, r5, r1, r2
   b722a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b722e:	fbe0 e503 	umlal	lr, r5, r0, r3
   b7232:	f04f 0600 	mov.w	r6, #0
   b7236:	fbe1 5603 	umlal	r5, r6, r1, r3
   b723a:	f09c 0f00 	teq	ip, #0
   b723e:	bf18      	it	ne
   b7240:	f04e 0e01 	orrne.w	lr, lr, #1
   b7244:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b7248:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b724c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b7250:	d204      	bcs.n	b725c <__aeabi_dmul+0x80>
   b7252:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b7256:	416d      	adcs	r5, r5
   b7258:	eb46 0606 	adc.w	r6, r6, r6
   b725c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b7260:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b7264:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b7268:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b726c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b7270:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7274:	bf88      	it	hi
   b7276:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b727a:	d81e      	bhi.n	b72ba <__aeabi_dmul+0xde>
   b727c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b7280:	bf08      	it	eq
   b7282:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b7286:	f150 0000 	adcs.w	r0, r0, #0
   b728a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b728e:	bd70      	pop	{r4, r5, r6, pc}
   b7290:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b7294:	ea46 0101 	orr.w	r1, r6, r1
   b7298:	ea40 0002 	orr.w	r0, r0, r2
   b729c:	ea81 0103 	eor.w	r1, r1, r3
   b72a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b72a4:	bfc2      	ittt	gt
   b72a6:	ebd4 050c 	rsbsgt	r5, r4, ip
   b72aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b72ae:	bd70      	popgt	{r4, r5, r6, pc}
   b72b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b72b4:	f04f 0e00 	mov.w	lr, #0
   b72b8:	3c01      	subs	r4, #1
   b72ba:	f300 80ab 	bgt.w	b7414 <__aeabi_dmul+0x238>
   b72be:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b72c2:	bfde      	ittt	le
   b72c4:	2000      	movle	r0, #0
   b72c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b72ca:	bd70      	pople	{r4, r5, r6, pc}
   b72cc:	f1c4 0400 	rsb	r4, r4, #0
   b72d0:	3c20      	subs	r4, #32
   b72d2:	da35      	bge.n	b7340 <__aeabi_dmul+0x164>
   b72d4:	340c      	adds	r4, #12
   b72d6:	dc1b      	bgt.n	b7310 <__aeabi_dmul+0x134>
   b72d8:	f104 0414 	add.w	r4, r4, #20
   b72dc:	f1c4 0520 	rsb	r5, r4, #32
   b72e0:	fa00 f305 	lsl.w	r3, r0, r5
   b72e4:	fa20 f004 	lsr.w	r0, r0, r4
   b72e8:	fa01 f205 	lsl.w	r2, r1, r5
   b72ec:	ea40 0002 	orr.w	r0, r0, r2
   b72f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b72f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b72f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b72fc:	fa21 f604 	lsr.w	r6, r1, r4
   b7300:	eb42 0106 	adc.w	r1, r2, r6
   b7304:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7308:	bf08      	it	eq
   b730a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b730e:	bd70      	pop	{r4, r5, r6, pc}
   b7310:	f1c4 040c 	rsb	r4, r4, #12
   b7314:	f1c4 0520 	rsb	r5, r4, #32
   b7318:	fa00 f304 	lsl.w	r3, r0, r4
   b731c:	fa20 f005 	lsr.w	r0, r0, r5
   b7320:	fa01 f204 	lsl.w	r2, r1, r4
   b7324:	ea40 0002 	orr.w	r0, r0, r2
   b7328:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b732c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7330:	f141 0100 	adc.w	r1, r1, #0
   b7334:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7338:	bf08      	it	eq
   b733a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b733e:	bd70      	pop	{r4, r5, r6, pc}
   b7340:	f1c4 0520 	rsb	r5, r4, #32
   b7344:	fa00 f205 	lsl.w	r2, r0, r5
   b7348:	ea4e 0e02 	orr.w	lr, lr, r2
   b734c:	fa20 f304 	lsr.w	r3, r0, r4
   b7350:	fa01 f205 	lsl.w	r2, r1, r5
   b7354:	ea43 0302 	orr.w	r3, r3, r2
   b7358:	fa21 f004 	lsr.w	r0, r1, r4
   b735c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7360:	fa21 f204 	lsr.w	r2, r1, r4
   b7364:	ea20 0002 	bic.w	r0, r0, r2
   b7368:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b736c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7370:	bf08      	it	eq
   b7372:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7376:	bd70      	pop	{r4, r5, r6, pc}
   b7378:	f094 0f00 	teq	r4, #0
   b737c:	d10f      	bne.n	b739e <__aeabi_dmul+0x1c2>
   b737e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b7382:	0040      	lsls	r0, r0, #1
   b7384:	eb41 0101 	adc.w	r1, r1, r1
   b7388:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b738c:	bf08      	it	eq
   b738e:	3c01      	subeq	r4, #1
   b7390:	d0f7      	beq.n	b7382 <__aeabi_dmul+0x1a6>
   b7392:	ea41 0106 	orr.w	r1, r1, r6
   b7396:	f095 0f00 	teq	r5, #0
   b739a:	bf18      	it	ne
   b739c:	4770      	bxne	lr
   b739e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b73a2:	0052      	lsls	r2, r2, #1
   b73a4:	eb43 0303 	adc.w	r3, r3, r3
   b73a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b73ac:	bf08      	it	eq
   b73ae:	3d01      	subeq	r5, #1
   b73b0:	d0f7      	beq.n	b73a2 <__aeabi_dmul+0x1c6>
   b73b2:	ea43 0306 	orr.w	r3, r3, r6
   b73b6:	4770      	bx	lr
   b73b8:	ea94 0f0c 	teq	r4, ip
   b73bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b73c0:	bf18      	it	ne
   b73c2:	ea95 0f0c 	teqne	r5, ip
   b73c6:	d00c      	beq.n	b73e2 <__aeabi_dmul+0x206>
   b73c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b73cc:	bf18      	it	ne
   b73ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b73d2:	d1d1      	bne.n	b7378 <__aeabi_dmul+0x19c>
   b73d4:	ea81 0103 	eor.w	r1, r1, r3
   b73d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b73dc:	f04f 0000 	mov.w	r0, #0
   b73e0:	bd70      	pop	{r4, r5, r6, pc}
   b73e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b73e6:	bf06      	itte	eq
   b73e8:	4610      	moveq	r0, r2
   b73ea:	4619      	moveq	r1, r3
   b73ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b73f0:	d019      	beq.n	b7426 <__aeabi_dmul+0x24a>
   b73f2:	ea94 0f0c 	teq	r4, ip
   b73f6:	d102      	bne.n	b73fe <__aeabi_dmul+0x222>
   b73f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b73fc:	d113      	bne.n	b7426 <__aeabi_dmul+0x24a>
   b73fe:	ea95 0f0c 	teq	r5, ip
   b7402:	d105      	bne.n	b7410 <__aeabi_dmul+0x234>
   b7404:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b7408:	bf1c      	itt	ne
   b740a:	4610      	movne	r0, r2
   b740c:	4619      	movne	r1, r3
   b740e:	d10a      	bne.n	b7426 <__aeabi_dmul+0x24a>
   b7410:	ea81 0103 	eor.w	r1, r1, r3
   b7414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7418:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b741c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7420:	f04f 0000 	mov.w	r0, #0
   b7424:	bd70      	pop	{r4, r5, r6, pc}
   b7426:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b742a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b742e:	bd70      	pop	{r4, r5, r6, pc}

000b7430 <__aeabi_ddiv>:
   b7430:	b570      	push	{r4, r5, r6, lr}
   b7432:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b7436:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b743a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b743e:	bf1d      	ittte	ne
   b7440:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7444:	ea94 0f0c 	teqne	r4, ip
   b7448:	ea95 0f0c 	teqne	r5, ip
   b744c:	f000 f8a7 	bleq	b759e <__aeabi_ddiv+0x16e>
   b7450:	eba4 0405 	sub.w	r4, r4, r5
   b7454:	ea81 0e03 	eor.w	lr, r1, r3
   b7458:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b745c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7460:	f000 8088 	beq.w	b7574 <__aeabi_ddiv+0x144>
   b7464:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7468:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b746c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b7470:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b7474:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b7478:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b747c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b7480:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b7484:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b7488:	429d      	cmp	r5, r3
   b748a:	bf08      	it	eq
   b748c:	4296      	cmpeq	r6, r2
   b748e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b7492:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b7496:	d202      	bcs.n	b749e <__aeabi_ddiv+0x6e>
   b7498:	085b      	lsrs	r3, r3, #1
   b749a:	ea4f 0232 	mov.w	r2, r2, rrx
   b749e:	1ab6      	subs	r6, r6, r2
   b74a0:	eb65 0503 	sbc.w	r5, r5, r3
   b74a4:	085b      	lsrs	r3, r3, #1
   b74a6:	ea4f 0232 	mov.w	r2, r2, rrx
   b74aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b74ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b74b2:	ebb6 0e02 	subs.w	lr, r6, r2
   b74b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b74ba:	bf22      	ittt	cs
   b74bc:	1ab6      	subcs	r6, r6, r2
   b74be:	4675      	movcs	r5, lr
   b74c0:	ea40 000c 	orrcs.w	r0, r0, ip
   b74c4:	085b      	lsrs	r3, r3, #1
   b74c6:	ea4f 0232 	mov.w	r2, r2, rrx
   b74ca:	ebb6 0e02 	subs.w	lr, r6, r2
   b74ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   b74d2:	bf22      	ittt	cs
   b74d4:	1ab6      	subcs	r6, r6, r2
   b74d6:	4675      	movcs	r5, lr
   b74d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b74dc:	085b      	lsrs	r3, r3, #1
   b74de:	ea4f 0232 	mov.w	r2, r2, rrx
   b74e2:	ebb6 0e02 	subs.w	lr, r6, r2
   b74e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b74ea:	bf22      	ittt	cs
   b74ec:	1ab6      	subcs	r6, r6, r2
   b74ee:	4675      	movcs	r5, lr
   b74f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b74f4:	085b      	lsrs	r3, r3, #1
   b74f6:	ea4f 0232 	mov.w	r2, r2, rrx
   b74fa:	ebb6 0e02 	subs.w	lr, r6, r2
   b74fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7502:	bf22      	ittt	cs
   b7504:	1ab6      	subcs	r6, r6, r2
   b7506:	4675      	movcs	r5, lr
   b7508:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b750c:	ea55 0e06 	orrs.w	lr, r5, r6
   b7510:	d018      	beq.n	b7544 <__aeabi_ddiv+0x114>
   b7512:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b7516:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b751a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b751e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b7522:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b7526:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b752a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b752e:	d1c0      	bne.n	b74b2 <__aeabi_ddiv+0x82>
   b7530:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7534:	d10b      	bne.n	b754e <__aeabi_ddiv+0x11e>
   b7536:	ea41 0100 	orr.w	r1, r1, r0
   b753a:	f04f 0000 	mov.w	r0, #0
   b753e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b7542:	e7b6      	b.n	b74b2 <__aeabi_ddiv+0x82>
   b7544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7548:	bf04      	itt	eq
   b754a:	4301      	orreq	r1, r0
   b754c:	2000      	moveq	r0, #0
   b754e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7552:	bf88      	it	hi
   b7554:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7558:	f63f aeaf 	bhi.w	b72ba <__aeabi_dmul+0xde>
   b755c:	ebb5 0c03 	subs.w	ip, r5, r3
   b7560:	bf04      	itt	eq
   b7562:	ebb6 0c02 	subseq.w	ip, r6, r2
   b7566:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b756a:	f150 0000 	adcs.w	r0, r0, #0
   b756e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7572:	bd70      	pop	{r4, r5, r6, pc}
   b7574:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b7578:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b757c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b7580:	bfc2      	ittt	gt
   b7582:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7586:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b758a:	bd70      	popgt	{r4, r5, r6, pc}
   b758c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7590:	f04f 0e00 	mov.w	lr, #0
   b7594:	3c01      	subs	r4, #1
   b7596:	e690      	b.n	b72ba <__aeabi_dmul+0xde>
   b7598:	ea45 0e06 	orr.w	lr, r5, r6
   b759c:	e68d      	b.n	b72ba <__aeabi_dmul+0xde>
   b759e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b75a2:	ea94 0f0c 	teq	r4, ip
   b75a6:	bf08      	it	eq
   b75a8:	ea95 0f0c 	teqeq	r5, ip
   b75ac:	f43f af3b 	beq.w	b7426 <__aeabi_dmul+0x24a>
   b75b0:	ea94 0f0c 	teq	r4, ip
   b75b4:	d10a      	bne.n	b75cc <__aeabi_ddiv+0x19c>
   b75b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b75ba:	f47f af34 	bne.w	b7426 <__aeabi_dmul+0x24a>
   b75be:	ea95 0f0c 	teq	r5, ip
   b75c2:	f47f af25 	bne.w	b7410 <__aeabi_dmul+0x234>
   b75c6:	4610      	mov	r0, r2
   b75c8:	4619      	mov	r1, r3
   b75ca:	e72c      	b.n	b7426 <__aeabi_dmul+0x24a>
   b75cc:	ea95 0f0c 	teq	r5, ip
   b75d0:	d106      	bne.n	b75e0 <__aeabi_ddiv+0x1b0>
   b75d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b75d6:	f43f aefd 	beq.w	b73d4 <__aeabi_dmul+0x1f8>
   b75da:	4610      	mov	r0, r2
   b75dc:	4619      	mov	r1, r3
   b75de:	e722      	b.n	b7426 <__aeabi_dmul+0x24a>
   b75e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b75e4:	bf18      	it	ne
   b75e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b75ea:	f47f aec5 	bne.w	b7378 <__aeabi_dmul+0x19c>
   b75ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b75f2:	f47f af0d 	bne.w	b7410 <__aeabi_dmul+0x234>
   b75f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b75fa:	f47f aeeb 	bne.w	b73d4 <__aeabi_dmul+0x1f8>
   b75fe:	e712      	b.n	b7426 <__aeabi_dmul+0x24a>

000b7600 <__gedf2>:
   b7600:	f04f 3cff 	mov.w	ip, #4294967295
   b7604:	e006      	b.n	b7614 <__cmpdf2+0x4>
   b7606:	bf00      	nop

000b7608 <__ledf2>:
   b7608:	f04f 0c01 	mov.w	ip, #1
   b760c:	e002      	b.n	b7614 <__cmpdf2+0x4>
   b760e:	bf00      	nop

000b7610 <__cmpdf2>:
   b7610:	f04f 0c01 	mov.w	ip, #1
   b7614:	f84d cd04 	str.w	ip, [sp, #-4]!
   b7618:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b761c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7620:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7624:	bf18      	it	ne
   b7626:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b762a:	d01b      	beq.n	b7664 <__cmpdf2+0x54>
   b762c:	b001      	add	sp, #4
   b762e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b7632:	bf0c      	ite	eq
   b7634:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b7638:	ea91 0f03 	teqne	r1, r3
   b763c:	bf02      	ittt	eq
   b763e:	ea90 0f02 	teqeq	r0, r2
   b7642:	2000      	moveq	r0, #0
   b7644:	4770      	bxeq	lr
   b7646:	f110 0f00 	cmn.w	r0, #0
   b764a:	ea91 0f03 	teq	r1, r3
   b764e:	bf58      	it	pl
   b7650:	4299      	cmppl	r1, r3
   b7652:	bf08      	it	eq
   b7654:	4290      	cmpeq	r0, r2
   b7656:	bf2c      	ite	cs
   b7658:	17d8      	asrcs	r0, r3, #31
   b765a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b765e:	f040 0001 	orr.w	r0, r0, #1
   b7662:	4770      	bx	lr
   b7664:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7668:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b766c:	d102      	bne.n	b7674 <__cmpdf2+0x64>
   b766e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b7672:	d107      	bne.n	b7684 <__cmpdf2+0x74>
   b7674:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7678:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b767c:	d1d6      	bne.n	b762c <__cmpdf2+0x1c>
   b767e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b7682:	d0d3      	beq.n	b762c <__cmpdf2+0x1c>
   b7684:	f85d 0b04 	ldr.w	r0, [sp], #4
   b7688:	4770      	bx	lr
   b768a:	bf00      	nop

000b768c <__aeabi_cdrcmple>:
   b768c:	4684      	mov	ip, r0
   b768e:	4610      	mov	r0, r2
   b7690:	4662      	mov	r2, ip
   b7692:	468c      	mov	ip, r1
   b7694:	4619      	mov	r1, r3
   b7696:	4663      	mov	r3, ip
   b7698:	e000      	b.n	b769c <__aeabi_cdcmpeq>
   b769a:	bf00      	nop

000b769c <__aeabi_cdcmpeq>:
   b769c:	b501      	push	{r0, lr}
   b769e:	f7ff ffb7 	bl	b7610 <__cmpdf2>
   b76a2:	2800      	cmp	r0, #0
   b76a4:	bf48      	it	mi
   b76a6:	f110 0f00 	cmnmi.w	r0, #0
   b76aa:	bd01      	pop	{r0, pc}

000b76ac <__aeabi_dcmpeq>:
   b76ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   b76b0:	f7ff fff4 	bl	b769c <__aeabi_cdcmpeq>
   b76b4:	bf0c      	ite	eq
   b76b6:	2001      	moveq	r0, #1
   b76b8:	2000      	movne	r0, #0
   b76ba:	f85d fb08 	ldr.w	pc, [sp], #8
   b76be:	bf00      	nop

000b76c0 <__aeabi_dcmplt>:
   b76c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b76c4:	f7ff ffea 	bl	b769c <__aeabi_cdcmpeq>
   b76c8:	bf34      	ite	cc
   b76ca:	2001      	movcc	r0, #1
   b76cc:	2000      	movcs	r0, #0
   b76ce:	f85d fb08 	ldr.w	pc, [sp], #8
   b76d2:	bf00      	nop

000b76d4 <__aeabi_dcmple>:
   b76d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b76d8:	f7ff ffe0 	bl	b769c <__aeabi_cdcmpeq>
   b76dc:	bf94      	ite	ls
   b76de:	2001      	movls	r0, #1
   b76e0:	2000      	movhi	r0, #0
   b76e2:	f85d fb08 	ldr.w	pc, [sp], #8
   b76e6:	bf00      	nop

000b76e8 <__aeabi_dcmpge>:
   b76e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b76ec:	f7ff ffce 	bl	b768c <__aeabi_cdrcmple>
   b76f0:	bf94      	ite	ls
   b76f2:	2001      	movls	r0, #1
   b76f4:	2000      	movhi	r0, #0
   b76f6:	f85d fb08 	ldr.w	pc, [sp], #8
   b76fa:	bf00      	nop

000b76fc <__aeabi_dcmpgt>:
   b76fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7700:	f7ff ffc4 	bl	b768c <__aeabi_cdrcmple>
   b7704:	bf34      	ite	cc
   b7706:	2001      	movcc	r0, #1
   b7708:	2000      	movcs	r0, #0
   b770a:	f85d fb08 	ldr.w	pc, [sp], #8
   b770e:	bf00      	nop

000b7710 <__aeabi_dcmpun>:
   b7710:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7714:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7718:	d102      	bne.n	b7720 <__aeabi_dcmpun+0x10>
   b771a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b771e:	d10a      	bne.n	b7736 <__aeabi_dcmpun+0x26>
   b7720:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7724:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7728:	d102      	bne.n	b7730 <__aeabi_dcmpun+0x20>
   b772a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b772e:	d102      	bne.n	b7736 <__aeabi_dcmpun+0x26>
   b7730:	f04f 0000 	mov.w	r0, #0
   b7734:	4770      	bx	lr
   b7736:	f04f 0001 	mov.w	r0, #1
   b773a:	4770      	bx	lr

000b773c <__aeabi_d2iz>:
   b773c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b7740:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b7744:	d215      	bcs.n	b7772 <__aeabi_d2iz+0x36>
   b7746:	d511      	bpl.n	b776c <__aeabi_d2iz+0x30>
   b7748:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b774c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b7750:	d912      	bls.n	b7778 <__aeabi_d2iz+0x3c>
   b7752:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7756:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b775a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b775e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7762:	fa23 f002 	lsr.w	r0, r3, r2
   b7766:	bf18      	it	ne
   b7768:	4240      	negne	r0, r0
   b776a:	4770      	bx	lr
   b776c:	f04f 0000 	mov.w	r0, #0
   b7770:	4770      	bx	lr
   b7772:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b7776:	d105      	bne.n	b7784 <__aeabi_d2iz+0x48>
   b7778:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b777c:	bf08      	it	eq
   b777e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b7782:	4770      	bx	lr
   b7784:	f04f 0000 	mov.w	r0, #0
   b7788:	4770      	bx	lr
   b778a:	bf00      	nop

000b778c <__aeabi_d2uiz>:
   b778c:	004a      	lsls	r2, r1, #1
   b778e:	d211      	bcs.n	b77b4 <__aeabi_d2uiz+0x28>
   b7790:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b7794:	d211      	bcs.n	b77ba <__aeabi_d2uiz+0x2e>
   b7796:	d50d      	bpl.n	b77b4 <__aeabi_d2uiz+0x28>
   b7798:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b779c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b77a0:	d40e      	bmi.n	b77c0 <__aeabi_d2uiz+0x34>
   b77a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b77a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b77aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b77ae:	fa23 f002 	lsr.w	r0, r3, r2
   b77b2:	4770      	bx	lr
   b77b4:	f04f 0000 	mov.w	r0, #0
   b77b8:	4770      	bx	lr
   b77ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b77be:	d102      	bne.n	b77c6 <__aeabi_d2uiz+0x3a>
   b77c0:	f04f 30ff 	mov.w	r0, #4294967295
   b77c4:	4770      	bx	lr
   b77c6:	f04f 0000 	mov.w	r0, #0
   b77ca:	4770      	bx	lr

000b77cc <__aeabi_d2f>:
   b77cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b77d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b77d4:	bf24      	itt	cs
   b77d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b77da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b77de:	d90d      	bls.n	b77fc <__aeabi_d2f+0x30>
   b77e0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b77e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b77e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b77ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b77f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b77f4:	bf08      	it	eq
   b77f6:	f020 0001 	biceq.w	r0, r0, #1
   b77fa:	4770      	bx	lr
   b77fc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b7800:	d121      	bne.n	b7846 <__aeabi_d2f+0x7a>
   b7802:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b7806:	bfbc      	itt	lt
   b7808:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b780c:	4770      	bxlt	lr
   b780e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7812:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b7816:	f1c2 0218 	rsb	r2, r2, #24
   b781a:	f1c2 0c20 	rsb	ip, r2, #32
   b781e:	fa10 f30c 	lsls.w	r3, r0, ip
   b7822:	fa20 f002 	lsr.w	r0, r0, r2
   b7826:	bf18      	it	ne
   b7828:	f040 0001 	orrne.w	r0, r0, #1
   b782c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7830:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b7834:	fa03 fc0c 	lsl.w	ip, r3, ip
   b7838:	ea40 000c 	orr.w	r0, r0, ip
   b783c:	fa23 f302 	lsr.w	r3, r3, r2
   b7840:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b7844:	e7cc      	b.n	b77e0 <__aeabi_d2f+0x14>
   b7846:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b784a:	d107      	bne.n	b785c <__aeabi_d2f+0x90>
   b784c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b7850:	bf1e      	ittt	ne
   b7852:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b7856:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b785a:	4770      	bxne	lr
   b785c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b7860:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b7864:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7868:	4770      	bx	lr
   b786a:	bf00      	nop

000b786c <__aeabi_f2lz>:
   b786c:	ee07 0a90 	vmov	s15, r0
   b7870:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b7874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7878:	d401      	bmi.n	b787e <__aeabi_f2lz+0x12>
   b787a:	f000 b80b 	b.w	b7894 <__aeabi_f2ulz>
   b787e:	eef1 7a67 	vneg.f32	s15, s15
   b7882:	b508      	push	{r3, lr}
   b7884:	ee17 0a90 	vmov	r0, s15
   b7888:	f000 f804 	bl	b7894 <__aeabi_f2ulz>
   b788c:	4240      	negs	r0, r0
   b788e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7892:	bd08      	pop	{r3, pc}

000b7894 <__aeabi_f2ulz>:
   b7894:	b5d0      	push	{r4, r6, r7, lr}
   b7896:	f7ff fc49 	bl	b712c <__aeabi_f2d>
   b789a:	4b0c      	ldr	r3, [pc, #48]	; (b78cc <__aeabi_f2ulz+0x38>)
   b789c:	2200      	movs	r2, #0
   b789e:	4606      	mov	r6, r0
   b78a0:	460f      	mov	r7, r1
   b78a2:	f7ff fc9b 	bl	b71dc <__aeabi_dmul>
   b78a6:	f7ff ff71 	bl	b778c <__aeabi_d2uiz>
   b78aa:	4604      	mov	r4, r0
   b78ac:	f7ff fc1c 	bl	b70e8 <__aeabi_ui2d>
   b78b0:	4b07      	ldr	r3, [pc, #28]	; (b78d0 <__aeabi_f2ulz+0x3c>)
   b78b2:	2200      	movs	r2, #0
   b78b4:	f7ff fc92 	bl	b71dc <__aeabi_dmul>
   b78b8:	4602      	mov	r2, r0
   b78ba:	460b      	mov	r3, r1
   b78bc:	4630      	mov	r0, r6
   b78be:	4639      	mov	r1, r7
   b78c0:	f7ff fad4 	bl	b6e6c <__aeabi_dsub>
   b78c4:	f7ff ff62 	bl	b778c <__aeabi_d2uiz>
   b78c8:	4621      	mov	r1, r4
   b78ca:	bdd0      	pop	{r4, r6, r7, pc}
   b78cc:	3df00000 	.word	0x3df00000
   b78d0:	41f00000 	.word	0x41f00000

000b78d4 <__aeabi_d2ulz>:
   b78d4:	b5d0      	push	{r4, r6, r7, lr}
   b78d6:	4b0c      	ldr	r3, [pc, #48]	; (b7908 <__aeabi_d2ulz+0x34>)
   b78d8:	2200      	movs	r2, #0
   b78da:	4606      	mov	r6, r0
   b78dc:	460f      	mov	r7, r1
   b78de:	f7ff fc7d 	bl	b71dc <__aeabi_dmul>
   b78e2:	f7ff ff53 	bl	b778c <__aeabi_d2uiz>
   b78e6:	4604      	mov	r4, r0
   b78e8:	f7ff fbfe 	bl	b70e8 <__aeabi_ui2d>
   b78ec:	4b07      	ldr	r3, [pc, #28]	; (b790c <__aeabi_d2ulz+0x38>)
   b78ee:	2200      	movs	r2, #0
   b78f0:	f7ff fc74 	bl	b71dc <__aeabi_dmul>
   b78f4:	4602      	mov	r2, r0
   b78f6:	460b      	mov	r3, r1
   b78f8:	4630      	mov	r0, r6
   b78fa:	4639      	mov	r1, r7
   b78fc:	f7ff fab6 	bl	b6e6c <__aeabi_dsub>
   b7900:	f7ff ff44 	bl	b778c <__aeabi_d2uiz>
   b7904:	4621      	mov	r1, r4
   b7906:	bdd0      	pop	{r4, r6, r7, pc}
   b7908:	3df00000 	.word	0x3df00000
   b790c:	41f00000 	.word	0x41f00000

000b7910 <asctime_r>:
   b7910:	b510      	push	{r4, lr}
   b7912:	460c      	mov	r4, r1
   b7914:	6941      	ldr	r1, [r0, #20]
   b7916:	6903      	ldr	r3, [r0, #16]
   b7918:	6982      	ldr	r2, [r0, #24]
   b791a:	b086      	sub	sp, #24
   b791c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   b7920:	9104      	str	r1, [sp, #16]
   b7922:	6801      	ldr	r1, [r0, #0]
   b7924:	9103      	str	r1, [sp, #12]
   b7926:	6841      	ldr	r1, [r0, #4]
   b7928:	9102      	str	r1, [sp, #8]
   b792a:	6881      	ldr	r1, [r0, #8]
   b792c:	9101      	str	r1, [sp, #4]
   b792e:	68c1      	ldr	r1, [r0, #12]
   b7930:	9100      	str	r1, [sp, #0]
   b7932:	4907      	ldr	r1, [pc, #28]	; (b7950 <asctime_r+0x40>)
   b7934:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b7938:	440b      	add	r3, r1
   b793a:	4906      	ldr	r1, [pc, #24]	; (b7954 <asctime_r+0x44>)
   b793c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b7940:	440a      	add	r2, r1
   b7942:	4620      	mov	r0, r4
   b7944:	4904      	ldr	r1, [pc, #16]	; (b7958 <asctime_r+0x48>)
   b7946:	f7fd feb1 	bl	b56ac <siprintf>
   b794a:	4620      	mov	r0, r4
   b794c:	b006      	add	sp, #24
   b794e:	bd10      	pop	{r4, pc}
   b7950:	000b9e9e 	.word	0x000b9e9e
   b7954:	000b9e89 	.word	0x000b9e89
   b7958:	000b9e69 	.word	0x000b9e69

000b795c <atexit>:
   b795c:	2300      	movs	r3, #0
   b795e:	4601      	mov	r1, r0
   b7960:	461a      	mov	r2, r3
   b7962:	4618      	mov	r0, r3
   b7964:	f000 beea 	b.w	b873c <__register_exitproc>

000b7968 <atof>:
   b7968:	2100      	movs	r1, #0
   b796a:	f000 bedb 	b.w	b8724 <strtod>

000b796e <ldiv>:
   b796e:	2900      	cmp	r1, #0
   b7970:	b510      	push	{r4, lr}
   b7972:	fb91 f4f2 	sdiv	r4, r1, r2
   b7976:	fb02 1314 	mls	r3, r2, r4, r1
   b797a:	db06      	blt.n	b798a <ldiv+0x1c>
   b797c:	2b00      	cmp	r3, #0
   b797e:	da01      	bge.n	b7984 <ldiv+0x16>
   b7980:	3401      	adds	r4, #1
   b7982:	1a9b      	subs	r3, r3, r2
   b7984:	e9c0 4300 	strd	r4, r3, [r0]
   b7988:	bd10      	pop	{r4, pc}
   b798a:	2b00      	cmp	r3, #0
   b798c:	bfc4      	itt	gt
   b798e:	f104 34ff 	addgt.w	r4, r4, #4294967295
   b7992:	189b      	addgt	r3, r3, r2
   b7994:	e7f6      	b.n	b7984 <ldiv+0x16>

000b7996 <memcpy>:
   b7996:	440a      	add	r2, r1
   b7998:	4291      	cmp	r1, r2
   b799a:	f100 33ff 	add.w	r3, r0, #4294967295
   b799e:	d100      	bne.n	b79a2 <memcpy+0xc>
   b79a0:	4770      	bx	lr
   b79a2:	b510      	push	{r4, lr}
   b79a4:	f811 4b01 	ldrb.w	r4, [r1], #1
   b79a8:	f803 4f01 	strb.w	r4, [r3, #1]!
   b79ac:	4291      	cmp	r1, r2
   b79ae:	d1f9      	bne.n	b79a4 <memcpy+0xe>
   b79b0:	bd10      	pop	{r4, pc}

000b79b2 <memset>:
   b79b2:	4402      	add	r2, r0
   b79b4:	4603      	mov	r3, r0
   b79b6:	4293      	cmp	r3, r2
   b79b8:	d100      	bne.n	b79bc <memset+0xa>
   b79ba:	4770      	bx	lr
   b79bc:	f803 1b01 	strb.w	r1, [r3], #1
   b79c0:	e7f9      	b.n	b79b6 <memset+0x4>
	...

000b79c4 <srand>:
   b79c4:	b538      	push	{r3, r4, r5, lr}
   b79c6:	4b10      	ldr	r3, [pc, #64]	; (b7a08 <srand+0x44>)
   b79c8:	681d      	ldr	r5, [r3, #0]
   b79ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b79cc:	4604      	mov	r4, r0
   b79ce:	b9b3      	cbnz	r3, b79fe <srand+0x3a>
   b79d0:	2018      	movs	r0, #24
   b79d2:	f7fd fe53 	bl	b567c <malloc>
   b79d6:	4602      	mov	r2, r0
   b79d8:	63a8      	str	r0, [r5, #56]	; 0x38
   b79da:	b920      	cbnz	r0, b79e6 <srand+0x22>
   b79dc:	4b0b      	ldr	r3, [pc, #44]	; (b7a0c <srand+0x48>)
   b79de:	480c      	ldr	r0, [pc, #48]	; (b7a10 <srand+0x4c>)
   b79e0:	2142      	movs	r1, #66	; 0x42
   b79e2:	f7fd fe83 	bl	b56ec <__assert_func>
   b79e6:	490b      	ldr	r1, [pc, #44]	; (b7a14 <srand+0x50>)
   b79e8:	4b0b      	ldr	r3, [pc, #44]	; (b7a18 <srand+0x54>)
   b79ea:	e9c0 1300 	strd	r1, r3, [r0]
   b79ee:	4b0b      	ldr	r3, [pc, #44]	; (b7a1c <srand+0x58>)
   b79f0:	6083      	str	r3, [r0, #8]
   b79f2:	230b      	movs	r3, #11
   b79f4:	8183      	strh	r3, [r0, #12]
   b79f6:	2100      	movs	r1, #0
   b79f8:	2001      	movs	r0, #1
   b79fa:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b79fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7a00:	2200      	movs	r2, #0
   b7a02:	611c      	str	r4, [r3, #16]
   b7a04:	615a      	str	r2, [r3, #20]
   b7a06:	bd38      	pop	{r3, r4, r5, pc}
   b7a08:	2003dd88 	.word	0x2003dd88
   b7a0c:	000b9ec2 	.word	0x000b9ec2
   b7a10:	000b9ed9 	.word	0x000b9ed9
   b7a14:	abcd330e 	.word	0xabcd330e
   b7a18:	e66d1234 	.word	0xe66d1234
   b7a1c:	0005deec 	.word	0x0005deec

000b7a20 <strcmp>:
   b7a20:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7a24:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7a28:	2a01      	cmp	r2, #1
   b7a2a:	bf28      	it	cs
   b7a2c:	429a      	cmpcs	r2, r3
   b7a2e:	d0f7      	beq.n	b7a20 <strcmp>
   b7a30:	1ad0      	subs	r0, r2, r3
   b7a32:	4770      	bx	lr

000b7a34 <strcpy>:
   b7a34:	4603      	mov	r3, r0
   b7a36:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7a3a:	f803 2b01 	strb.w	r2, [r3], #1
   b7a3e:	2a00      	cmp	r2, #0
   b7a40:	d1f9      	bne.n	b7a36 <strcpy+0x2>
   b7a42:	4770      	bx	lr

000b7a44 <strdup>:
   b7a44:	4b02      	ldr	r3, [pc, #8]	; (b7a50 <strdup+0xc>)
   b7a46:	4601      	mov	r1, r0
   b7a48:	6818      	ldr	r0, [r3, #0]
   b7a4a:	f000 b803 	b.w	b7a54 <_strdup_r>
   b7a4e:	bf00      	nop
   b7a50:	2003dd88 	.word	0x2003dd88

000b7a54 <_strdup_r>:
   b7a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7a56:	4604      	mov	r4, r0
   b7a58:	4608      	mov	r0, r1
   b7a5a:	460d      	mov	r5, r1
   b7a5c:	f000 f80f 	bl	b7a7e <strlen>
   b7a60:	1c42      	adds	r2, r0, #1
   b7a62:	4611      	mov	r1, r2
   b7a64:	4620      	mov	r0, r4
   b7a66:	9201      	str	r2, [sp, #4]
   b7a68:	f7fd fe38 	bl	b56dc <_malloc_r>
   b7a6c:	4604      	mov	r4, r0
   b7a6e:	b118      	cbz	r0, b7a78 <_strdup_r+0x24>
   b7a70:	9a01      	ldr	r2, [sp, #4]
   b7a72:	4629      	mov	r1, r5
   b7a74:	f7ff ff8f 	bl	b7996 <memcpy>
   b7a78:	4620      	mov	r0, r4
   b7a7a:	b003      	add	sp, #12
   b7a7c:	bd30      	pop	{r4, r5, pc}

000b7a7e <strlen>:
   b7a7e:	4603      	mov	r3, r0
   b7a80:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7a84:	2a00      	cmp	r2, #0
   b7a86:	d1fb      	bne.n	b7a80 <strlen+0x2>
   b7a88:	1a18      	subs	r0, r3, r0
   b7a8a:	3801      	subs	r0, #1
   b7a8c:	4770      	bx	lr

000b7a8e <strncmp>:
   b7a8e:	b510      	push	{r4, lr}
   b7a90:	b17a      	cbz	r2, b7ab2 <strncmp+0x24>
   b7a92:	4603      	mov	r3, r0
   b7a94:	3901      	subs	r1, #1
   b7a96:	1884      	adds	r4, r0, r2
   b7a98:	f813 0b01 	ldrb.w	r0, [r3], #1
   b7a9c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b7aa0:	4290      	cmp	r0, r2
   b7aa2:	d101      	bne.n	b7aa8 <strncmp+0x1a>
   b7aa4:	42a3      	cmp	r3, r4
   b7aa6:	d101      	bne.n	b7aac <strncmp+0x1e>
   b7aa8:	1a80      	subs	r0, r0, r2
   b7aaa:	bd10      	pop	{r4, pc}
   b7aac:	2800      	cmp	r0, #0
   b7aae:	d1f3      	bne.n	b7a98 <strncmp+0xa>
   b7ab0:	e7fa      	b.n	b7aa8 <strncmp+0x1a>
   b7ab2:	4610      	mov	r0, r2
   b7ab4:	e7f9      	b.n	b7aaa <strncmp+0x1c>

000b7ab6 <strncpy>:
   b7ab6:	b510      	push	{r4, lr}
   b7ab8:	3901      	subs	r1, #1
   b7aba:	4603      	mov	r3, r0
   b7abc:	b132      	cbz	r2, b7acc <strncpy+0x16>
   b7abe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b7ac2:	f803 4b01 	strb.w	r4, [r3], #1
   b7ac6:	3a01      	subs	r2, #1
   b7ac8:	2c00      	cmp	r4, #0
   b7aca:	d1f7      	bne.n	b7abc <strncpy+0x6>
   b7acc:	441a      	add	r2, r3
   b7ace:	2100      	movs	r1, #0
   b7ad0:	4293      	cmp	r3, r2
   b7ad2:	d100      	bne.n	b7ad6 <strncpy+0x20>
   b7ad4:	bd10      	pop	{r4, pc}
   b7ad6:	f803 1b01 	strb.w	r1, [r3], #1
   b7ada:	e7f9      	b.n	b7ad0 <strncpy+0x1a>

000b7adc <sulp>:
   b7adc:	b570      	push	{r4, r5, r6, lr}
   b7ade:	4604      	mov	r4, r0
   b7ae0:	460d      	mov	r5, r1
   b7ae2:	ec45 4b10 	vmov	d0, r4, r5
   b7ae6:	4616      	mov	r6, r2
   b7ae8:	f001 fd82 	bl	b95f0 <__ulp>
   b7aec:	ec51 0b10 	vmov	r0, r1, d0
   b7af0:	b17e      	cbz	r6, b7b12 <sulp+0x36>
   b7af2:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b7af6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b7afa:	2b00      	cmp	r3, #0
   b7afc:	dd09      	ble.n	b7b12 <sulp+0x36>
   b7afe:	051b      	lsls	r3, r3, #20
   b7b00:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b7b04:	2400      	movs	r4, #0
   b7b06:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b7b0a:	4622      	mov	r2, r4
   b7b0c:	462b      	mov	r3, r5
   b7b0e:	f7ff fb65 	bl	b71dc <__aeabi_dmul>
   b7b12:	bd70      	pop	{r4, r5, r6, pc}
   b7b14:	0000      	movs	r0, r0
	...

000b7b18 <_strtod_l>:
   b7b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7b1c:	ed2d 8b02 	vpush	{d8}
   b7b20:	b09d      	sub	sp, #116	; 0x74
   b7b22:	461f      	mov	r7, r3
   b7b24:	2300      	movs	r3, #0
   b7b26:	9318      	str	r3, [sp, #96]	; 0x60
   b7b28:	4ba2      	ldr	r3, [pc, #648]	; (b7db4 <_strtod_l+0x29c>)
   b7b2a:	9213      	str	r2, [sp, #76]	; 0x4c
   b7b2c:	681b      	ldr	r3, [r3, #0]
   b7b2e:	9305      	str	r3, [sp, #20]
   b7b30:	4604      	mov	r4, r0
   b7b32:	4618      	mov	r0, r3
   b7b34:	4688      	mov	r8, r1
   b7b36:	f7ff ffa2 	bl	b7a7e <strlen>
   b7b3a:	f04f 0a00 	mov.w	sl, #0
   b7b3e:	4605      	mov	r5, r0
   b7b40:	f04f 0b00 	mov.w	fp, #0
   b7b44:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b7b48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7b4a:	781a      	ldrb	r2, [r3, #0]
   b7b4c:	2a2b      	cmp	r2, #43	; 0x2b
   b7b4e:	d04e      	beq.n	b7bee <_strtod_l+0xd6>
   b7b50:	d83b      	bhi.n	b7bca <_strtod_l+0xb2>
   b7b52:	2a0d      	cmp	r2, #13
   b7b54:	d834      	bhi.n	b7bc0 <_strtod_l+0xa8>
   b7b56:	2a08      	cmp	r2, #8
   b7b58:	d834      	bhi.n	b7bc4 <_strtod_l+0xac>
   b7b5a:	2a00      	cmp	r2, #0
   b7b5c:	d03e      	beq.n	b7bdc <_strtod_l+0xc4>
   b7b5e:	2300      	movs	r3, #0
   b7b60:	930a      	str	r3, [sp, #40]	; 0x28
   b7b62:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b7b64:	7833      	ldrb	r3, [r6, #0]
   b7b66:	2b30      	cmp	r3, #48	; 0x30
   b7b68:	f040 80b0 	bne.w	b7ccc <_strtod_l+0x1b4>
   b7b6c:	7873      	ldrb	r3, [r6, #1]
   b7b6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b7b72:	2b58      	cmp	r3, #88	; 0x58
   b7b74:	d168      	bne.n	b7c48 <_strtod_l+0x130>
   b7b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b7b78:	9301      	str	r3, [sp, #4]
   b7b7a:	ab18      	add	r3, sp, #96	; 0x60
   b7b7c:	9702      	str	r7, [sp, #8]
   b7b7e:	9300      	str	r3, [sp, #0]
   b7b80:	4a8d      	ldr	r2, [pc, #564]	; (b7db8 <_strtod_l+0x2a0>)
   b7b82:	ab19      	add	r3, sp, #100	; 0x64
   b7b84:	a917      	add	r1, sp, #92	; 0x5c
   b7b86:	4620      	mov	r0, r4
   b7b88:	f000 fea2 	bl	b88d0 <__gethex>
   b7b8c:	f010 0707 	ands.w	r7, r0, #7
   b7b90:	4605      	mov	r5, r0
   b7b92:	d005      	beq.n	b7ba0 <_strtod_l+0x88>
   b7b94:	2f06      	cmp	r7, #6
   b7b96:	d12c      	bne.n	b7bf2 <_strtod_l+0xda>
   b7b98:	3601      	adds	r6, #1
   b7b9a:	2300      	movs	r3, #0
   b7b9c:	9617      	str	r6, [sp, #92]	; 0x5c
   b7b9e:	930a      	str	r3, [sp, #40]	; 0x28
   b7ba0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b7ba2:	2b00      	cmp	r3, #0
   b7ba4:	f040 8590 	bne.w	b86c8 <_strtod_l+0xbb0>
   b7ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b7baa:	b1eb      	cbz	r3, b7be8 <_strtod_l+0xd0>
   b7bac:	4652      	mov	r2, sl
   b7bae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b7bb2:	ec43 2b10 	vmov	d0, r2, r3
   b7bb6:	b01d      	add	sp, #116	; 0x74
   b7bb8:	ecbd 8b02 	vpop	{d8}
   b7bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7bc0:	2a20      	cmp	r2, #32
   b7bc2:	d1cc      	bne.n	b7b5e <_strtod_l+0x46>
   b7bc4:	3301      	adds	r3, #1
   b7bc6:	9317      	str	r3, [sp, #92]	; 0x5c
   b7bc8:	e7be      	b.n	b7b48 <_strtod_l+0x30>
   b7bca:	2a2d      	cmp	r2, #45	; 0x2d
   b7bcc:	d1c7      	bne.n	b7b5e <_strtod_l+0x46>
   b7bce:	2201      	movs	r2, #1
   b7bd0:	920a      	str	r2, [sp, #40]	; 0x28
   b7bd2:	1c5a      	adds	r2, r3, #1
   b7bd4:	9217      	str	r2, [sp, #92]	; 0x5c
   b7bd6:	785b      	ldrb	r3, [r3, #1]
   b7bd8:	2b00      	cmp	r3, #0
   b7bda:	d1c2      	bne.n	b7b62 <_strtod_l+0x4a>
   b7bdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b7bde:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b7be2:	2b00      	cmp	r3, #0
   b7be4:	f040 856e 	bne.w	b86c4 <_strtod_l+0xbac>
   b7be8:	4652      	mov	r2, sl
   b7bea:	465b      	mov	r3, fp
   b7bec:	e7e1      	b.n	b7bb2 <_strtod_l+0x9a>
   b7bee:	2200      	movs	r2, #0
   b7bf0:	e7ee      	b.n	b7bd0 <_strtod_l+0xb8>
   b7bf2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b7bf4:	b13a      	cbz	r2, b7c06 <_strtod_l+0xee>
   b7bf6:	2135      	movs	r1, #53	; 0x35
   b7bf8:	a81a      	add	r0, sp, #104	; 0x68
   b7bfa:	f001 fe04 	bl	b9806 <__copybits>
   b7bfe:	9918      	ldr	r1, [sp, #96]	; 0x60
   b7c00:	4620      	mov	r0, r4
   b7c02:	f001 f9c3 	bl	b8f8c <_Bfree>
   b7c06:	3f01      	subs	r7, #1
   b7c08:	2f04      	cmp	r7, #4
   b7c0a:	d806      	bhi.n	b7c1a <_strtod_l+0x102>
   b7c0c:	e8df f007 	tbb	[pc, r7]
   b7c10:	1714030a 	.word	0x1714030a
   b7c14:	0a          	.byte	0x0a
   b7c15:	00          	.byte	0x00
   b7c16:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b7c1a:	0728      	lsls	r0, r5, #28
   b7c1c:	d5c0      	bpl.n	b7ba0 <_strtod_l+0x88>
   b7c1e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b7c22:	e7bd      	b.n	b7ba0 <_strtod_l+0x88>
   b7c24:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b7c28:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b7c2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b7c2e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b7c32:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b7c36:	e7f0      	b.n	b7c1a <_strtod_l+0x102>
   b7c38:	f8df b180 	ldr.w	fp, [pc, #384]	; b7dbc <_strtod_l+0x2a4>
   b7c3c:	e7ed      	b.n	b7c1a <_strtod_l+0x102>
   b7c3e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b7c42:	f04f 3aff 	mov.w	sl, #4294967295
   b7c46:	e7e8      	b.n	b7c1a <_strtod_l+0x102>
   b7c48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7c4a:	1c5a      	adds	r2, r3, #1
   b7c4c:	9217      	str	r2, [sp, #92]	; 0x5c
   b7c4e:	785b      	ldrb	r3, [r3, #1]
   b7c50:	2b30      	cmp	r3, #48	; 0x30
   b7c52:	d0f9      	beq.n	b7c48 <_strtod_l+0x130>
   b7c54:	2b00      	cmp	r3, #0
   b7c56:	d0a3      	beq.n	b7ba0 <_strtod_l+0x88>
   b7c58:	2301      	movs	r3, #1
   b7c5a:	f04f 0900 	mov.w	r9, #0
   b7c5e:	9304      	str	r3, [sp, #16]
   b7c60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7c62:	9308      	str	r3, [sp, #32]
   b7c64:	f8cd 901c 	str.w	r9, [sp, #28]
   b7c68:	464f      	mov	r7, r9
   b7c6a:	220a      	movs	r2, #10
   b7c6c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b7c6e:	7806      	ldrb	r6, [r0, #0]
   b7c70:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b7c74:	b2d9      	uxtb	r1, r3
   b7c76:	2909      	cmp	r1, #9
   b7c78:	d92a      	bls.n	b7cd0 <_strtod_l+0x1b8>
   b7c7a:	9905      	ldr	r1, [sp, #20]
   b7c7c:	462a      	mov	r2, r5
   b7c7e:	f7ff ff06 	bl	b7a8e <strncmp>
   b7c82:	b398      	cbz	r0, b7cec <_strtod_l+0x1d4>
   b7c84:	2000      	movs	r0, #0
   b7c86:	4632      	mov	r2, r6
   b7c88:	463d      	mov	r5, r7
   b7c8a:	9005      	str	r0, [sp, #20]
   b7c8c:	4603      	mov	r3, r0
   b7c8e:	2a65      	cmp	r2, #101	; 0x65
   b7c90:	d001      	beq.n	b7c96 <_strtod_l+0x17e>
   b7c92:	2a45      	cmp	r2, #69	; 0x45
   b7c94:	d118      	bne.n	b7cc8 <_strtod_l+0x1b0>
   b7c96:	b91d      	cbnz	r5, b7ca0 <_strtod_l+0x188>
   b7c98:	9a04      	ldr	r2, [sp, #16]
   b7c9a:	4302      	orrs	r2, r0
   b7c9c:	d09e      	beq.n	b7bdc <_strtod_l+0xc4>
   b7c9e:	2500      	movs	r5, #0
   b7ca0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b7ca4:	f108 0201 	add.w	r2, r8, #1
   b7ca8:	9217      	str	r2, [sp, #92]	; 0x5c
   b7caa:	f898 2001 	ldrb.w	r2, [r8, #1]
   b7cae:	2a2b      	cmp	r2, #43	; 0x2b
   b7cb0:	d075      	beq.n	b7d9e <_strtod_l+0x286>
   b7cb2:	2a2d      	cmp	r2, #45	; 0x2d
   b7cb4:	d07b      	beq.n	b7dae <_strtod_l+0x296>
   b7cb6:	f04f 0c00 	mov.w	ip, #0
   b7cba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b7cbe:	2909      	cmp	r1, #9
   b7cc0:	f240 8082 	bls.w	b7dc8 <_strtod_l+0x2b0>
   b7cc4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b7cc8:	2600      	movs	r6, #0
   b7cca:	e09d      	b.n	b7e08 <_strtod_l+0x2f0>
   b7ccc:	2300      	movs	r3, #0
   b7cce:	e7c4      	b.n	b7c5a <_strtod_l+0x142>
   b7cd0:	2f08      	cmp	r7, #8
   b7cd2:	bfd8      	it	le
   b7cd4:	9907      	ldrle	r1, [sp, #28]
   b7cd6:	f100 0001 	add.w	r0, r0, #1
   b7cda:	bfda      	itte	le
   b7cdc:	fb02 3301 	mlale	r3, r2, r1, r3
   b7ce0:	9307      	strle	r3, [sp, #28]
   b7ce2:	fb02 3909 	mlagt	r9, r2, r9, r3
   b7ce6:	3701      	adds	r7, #1
   b7ce8:	9017      	str	r0, [sp, #92]	; 0x5c
   b7cea:	e7bf      	b.n	b7c6c <_strtod_l+0x154>
   b7cec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7cee:	195a      	adds	r2, r3, r5
   b7cf0:	9217      	str	r2, [sp, #92]	; 0x5c
   b7cf2:	5d5a      	ldrb	r2, [r3, r5]
   b7cf4:	2f00      	cmp	r7, #0
   b7cf6:	d037      	beq.n	b7d68 <_strtod_l+0x250>
   b7cf8:	9005      	str	r0, [sp, #20]
   b7cfa:	463d      	mov	r5, r7
   b7cfc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b7d00:	2b09      	cmp	r3, #9
   b7d02:	d912      	bls.n	b7d2a <_strtod_l+0x212>
   b7d04:	2301      	movs	r3, #1
   b7d06:	e7c2      	b.n	b7c8e <_strtod_l+0x176>
   b7d08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7d0a:	1c5a      	adds	r2, r3, #1
   b7d0c:	9217      	str	r2, [sp, #92]	; 0x5c
   b7d0e:	785a      	ldrb	r2, [r3, #1]
   b7d10:	3001      	adds	r0, #1
   b7d12:	2a30      	cmp	r2, #48	; 0x30
   b7d14:	d0f8      	beq.n	b7d08 <_strtod_l+0x1f0>
   b7d16:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b7d1a:	2b08      	cmp	r3, #8
   b7d1c:	f200 84d9 	bhi.w	b86d2 <_strtod_l+0xbba>
   b7d20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7d22:	9005      	str	r0, [sp, #20]
   b7d24:	2000      	movs	r0, #0
   b7d26:	9308      	str	r3, [sp, #32]
   b7d28:	4605      	mov	r5, r0
   b7d2a:	3a30      	subs	r2, #48	; 0x30
   b7d2c:	f100 0301 	add.w	r3, r0, #1
   b7d30:	d014      	beq.n	b7d5c <_strtod_l+0x244>
   b7d32:	9905      	ldr	r1, [sp, #20]
   b7d34:	4419      	add	r1, r3
   b7d36:	9105      	str	r1, [sp, #20]
   b7d38:	462b      	mov	r3, r5
   b7d3a:	eb00 0e05 	add.w	lr, r0, r5
   b7d3e:	210a      	movs	r1, #10
   b7d40:	4573      	cmp	r3, lr
   b7d42:	d113      	bne.n	b7d6c <_strtod_l+0x254>
   b7d44:	182b      	adds	r3, r5, r0
   b7d46:	2b08      	cmp	r3, #8
   b7d48:	f105 0501 	add.w	r5, r5, #1
   b7d4c:	4405      	add	r5, r0
   b7d4e:	dc1c      	bgt.n	b7d8a <_strtod_l+0x272>
   b7d50:	9907      	ldr	r1, [sp, #28]
   b7d52:	230a      	movs	r3, #10
   b7d54:	fb03 2301 	mla	r3, r3, r1, r2
   b7d58:	9307      	str	r3, [sp, #28]
   b7d5a:	2300      	movs	r3, #0
   b7d5c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b7d5e:	1c51      	adds	r1, r2, #1
   b7d60:	9117      	str	r1, [sp, #92]	; 0x5c
   b7d62:	7852      	ldrb	r2, [r2, #1]
   b7d64:	4618      	mov	r0, r3
   b7d66:	e7c9      	b.n	b7cfc <_strtod_l+0x1e4>
   b7d68:	4638      	mov	r0, r7
   b7d6a:	e7d2      	b.n	b7d12 <_strtod_l+0x1fa>
   b7d6c:	2b08      	cmp	r3, #8
   b7d6e:	dc04      	bgt.n	b7d7a <_strtod_l+0x262>
   b7d70:	9e07      	ldr	r6, [sp, #28]
   b7d72:	434e      	muls	r6, r1
   b7d74:	9607      	str	r6, [sp, #28]
   b7d76:	3301      	adds	r3, #1
   b7d78:	e7e2      	b.n	b7d40 <_strtod_l+0x228>
   b7d7a:	f103 0c01 	add.w	ip, r3, #1
   b7d7e:	f1bc 0f10 	cmp.w	ip, #16
   b7d82:	bfd8      	it	le
   b7d84:	fb01 f909 	mulle.w	r9, r1, r9
   b7d88:	e7f5      	b.n	b7d76 <_strtod_l+0x25e>
   b7d8a:	2d10      	cmp	r5, #16
   b7d8c:	bfdc      	itt	le
   b7d8e:	230a      	movle	r3, #10
   b7d90:	fb03 2909 	mlale	r9, r3, r9, r2
   b7d94:	e7e1      	b.n	b7d5a <_strtod_l+0x242>
   b7d96:	2300      	movs	r3, #0
   b7d98:	9305      	str	r3, [sp, #20]
   b7d9a:	2301      	movs	r3, #1
   b7d9c:	e77c      	b.n	b7c98 <_strtod_l+0x180>
   b7d9e:	f04f 0c00 	mov.w	ip, #0
   b7da2:	f108 0202 	add.w	r2, r8, #2
   b7da6:	9217      	str	r2, [sp, #92]	; 0x5c
   b7da8:	f898 2002 	ldrb.w	r2, [r8, #2]
   b7dac:	e785      	b.n	b7cba <_strtod_l+0x1a2>
   b7dae:	f04f 0c01 	mov.w	ip, #1
   b7db2:	e7f6      	b.n	b7da2 <_strtod_l+0x28a>
   b7db4:	000ba148 	.word	0x000ba148
   b7db8:	000b9f5c 	.word	0x000b9f5c
   b7dbc:	7ff00000 	.word	0x7ff00000
   b7dc0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b7dc2:	1c51      	adds	r1, r2, #1
   b7dc4:	9117      	str	r1, [sp, #92]	; 0x5c
   b7dc6:	7852      	ldrb	r2, [r2, #1]
   b7dc8:	2a30      	cmp	r2, #48	; 0x30
   b7dca:	d0f9      	beq.n	b7dc0 <_strtod_l+0x2a8>
   b7dcc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b7dd0:	2908      	cmp	r1, #8
   b7dd2:	f63f af79 	bhi.w	b7cc8 <_strtod_l+0x1b0>
   b7dd6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b7dda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b7ddc:	9206      	str	r2, [sp, #24]
   b7dde:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b7de0:	1c51      	adds	r1, r2, #1
   b7de2:	9117      	str	r1, [sp, #92]	; 0x5c
   b7de4:	7852      	ldrb	r2, [r2, #1]
   b7de6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b7dea:	2e09      	cmp	r6, #9
   b7dec:	d937      	bls.n	b7e5e <_strtod_l+0x346>
   b7dee:	9e06      	ldr	r6, [sp, #24]
   b7df0:	1b89      	subs	r1, r1, r6
   b7df2:	2908      	cmp	r1, #8
   b7df4:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b7df8:	dc02      	bgt.n	b7e00 <_strtod_l+0x2e8>
   b7dfa:	4576      	cmp	r6, lr
   b7dfc:	bfa8      	it	ge
   b7dfe:	4676      	movge	r6, lr
   b7e00:	f1bc 0f00 	cmp.w	ip, #0
   b7e04:	d000      	beq.n	b7e08 <_strtod_l+0x2f0>
   b7e06:	4276      	negs	r6, r6
   b7e08:	2d00      	cmp	r5, #0
   b7e0a:	d14d      	bne.n	b7ea8 <_strtod_l+0x390>
   b7e0c:	9904      	ldr	r1, [sp, #16]
   b7e0e:	4301      	orrs	r1, r0
   b7e10:	f47f aec6 	bne.w	b7ba0 <_strtod_l+0x88>
   b7e14:	2b00      	cmp	r3, #0
   b7e16:	f47f aee1 	bne.w	b7bdc <_strtod_l+0xc4>
   b7e1a:	2a69      	cmp	r2, #105	; 0x69
   b7e1c:	d027      	beq.n	b7e6e <_strtod_l+0x356>
   b7e1e:	dc24      	bgt.n	b7e6a <_strtod_l+0x352>
   b7e20:	2a49      	cmp	r2, #73	; 0x49
   b7e22:	d024      	beq.n	b7e6e <_strtod_l+0x356>
   b7e24:	2a4e      	cmp	r2, #78	; 0x4e
   b7e26:	f47f aed9 	bne.w	b7bdc <_strtod_l+0xc4>
   b7e2a:	499f      	ldr	r1, [pc, #636]	; (b80a8 <_strtod_l+0x590>)
   b7e2c:	a817      	add	r0, sp, #92	; 0x5c
   b7e2e:	f000 ffa7 	bl	b8d80 <__match>
   b7e32:	2800      	cmp	r0, #0
   b7e34:	f43f aed2 	beq.w	b7bdc <_strtod_l+0xc4>
   b7e38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7e3a:	781b      	ldrb	r3, [r3, #0]
   b7e3c:	2b28      	cmp	r3, #40	; 0x28
   b7e3e:	d12d      	bne.n	b7e9c <_strtod_l+0x384>
   b7e40:	499a      	ldr	r1, [pc, #616]	; (b80ac <_strtod_l+0x594>)
   b7e42:	aa1a      	add	r2, sp, #104	; 0x68
   b7e44:	a817      	add	r0, sp, #92	; 0x5c
   b7e46:	f000 ffaf 	bl	b8da8 <__hexnan>
   b7e4a:	2805      	cmp	r0, #5
   b7e4c:	d126      	bne.n	b7e9c <_strtod_l+0x384>
   b7e4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b7e50:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b7e54:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b7e58:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b7e5c:	e6a0      	b.n	b7ba0 <_strtod_l+0x88>
   b7e5e:	210a      	movs	r1, #10
   b7e60:	fb01 2e0e 	mla	lr, r1, lr, r2
   b7e64:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b7e68:	e7b9      	b.n	b7dde <_strtod_l+0x2c6>
   b7e6a:	2a6e      	cmp	r2, #110	; 0x6e
   b7e6c:	e7db      	b.n	b7e26 <_strtod_l+0x30e>
   b7e6e:	4990      	ldr	r1, [pc, #576]	; (b80b0 <_strtod_l+0x598>)
   b7e70:	a817      	add	r0, sp, #92	; 0x5c
   b7e72:	f000 ff85 	bl	b8d80 <__match>
   b7e76:	2800      	cmp	r0, #0
   b7e78:	f43f aeb0 	beq.w	b7bdc <_strtod_l+0xc4>
   b7e7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7e7e:	498d      	ldr	r1, [pc, #564]	; (b80b4 <_strtod_l+0x59c>)
   b7e80:	3b01      	subs	r3, #1
   b7e82:	a817      	add	r0, sp, #92	; 0x5c
   b7e84:	9317      	str	r3, [sp, #92]	; 0x5c
   b7e86:	f000 ff7b 	bl	b8d80 <__match>
   b7e8a:	b910      	cbnz	r0, b7e92 <_strtod_l+0x37a>
   b7e8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7e8e:	3301      	adds	r3, #1
   b7e90:	9317      	str	r3, [sp, #92]	; 0x5c
   b7e92:	f8df b230 	ldr.w	fp, [pc, #560]	; b80c4 <_strtod_l+0x5ac>
   b7e96:	f04f 0a00 	mov.w	sl, #0
   b7e9a:	e681      	b.n	b7ba0 <_strtod_l+0x88>
   b7e9c:	4886      	ldr	r0, [pc, #536]	; (b80b8 <_strtod_l+0x5a0>)
   b7e9e:	f001 fd07 	bl	b98b0 <nan>
   b7ea2:	ec5b ab10 	vmov	sl, fp, d0
   b7ea6:	e67b      	b.n	b7ba0 <_strtod_l+0x88>
   b7ea8:	9b05      	ldr	r3, [sp, #20]
   b7eaa:	9807      	ldr	r0, [sp, #28]
   b7eac:	1af3      	subs	r3, r6, r3
   b7eae:	2f00      	cmp	r7, #0
   b7eb0:	bf08      	it	eq
   b7eb2:	462f      	moveq	r7, r5
   b7eb4:	2d10      	cmp	r5, #16
   b7eb6:	9306      	str	r3, [sp, #24]
   b7eb8:	46a8      	mov	r8, r5
   b7eba:	bfa8      	it	ge
   b7ebc:	f04f 0810 	movge.w	r8, #16
   b7ec0:	f7ff f912 	bl	b70e8 <__aeabi_ui2d>
   b7ec4:	2d09      	cmp	r5, #9
   b7ec6:	4682      	mov	sl, r0
   b7ec8:	468b      	mov	fp, r1
   b7eca:	dd13      	ble.n	b7ef4 <_strtod_l+0x3dc>
   b7ecc:	4b7b      	ldr	r3, [pc, #492]	; (b80bc <_strtod_l+0x5a4>)
   b7ece:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b7ed2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b7ed6:	f7ff f981 	bl	b71dc <__aeabi_dmul>
   b7eda:	4682      	mov	sl, r0
   b7edc:	4648      	mov	r0, r9
   b7ede:	468b      	mov	fp, r1
   b7ee0:	f7ff f902 	bl	b70e8 <__aeabi_ui2d>
   b7ee4:	4602      	mov	r2, r0
   b7ee6:	460b      	mov	r3, r1
   b7ee8:	4650      	mov	r0, sl
   b7eea:	4659      	mov	r1, fp
   b7eec:	f7fe ffc0 	bl	b6e70 <__adddf3>
   b7ef0:	4682      	mov	sl, r0
   b7ef2:	468b      	mov	fp, r1
   b7ef4:	2d0f      	cmp	r5, #15
   b7ef6:	dc38      	bgt.n	b7f6a <_strtod_l+0x452>
   b7ef8:	9b06      	ldr	r3, [sp, #24]
   b7efa:	2b00      	cmp	r3, #0
   b7efc:	f43f ae50 	beq.w	b7ba0 <_strtod_l+0x88>
   b7f00:	dd24      	ble.n	b7f4c <_strtod_l+0x434>
   b7f02:	2b16      	cmp	r3, #22
   b7f04:	dc0b      	bgt.n	b7f1e <_strtod_l+0x406>
   b7f06:	496d      	ldr	r1, [pc, #436]	; (b80bc <_strtod_l+0x5a4>)
   b7f08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b7f0c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7f10:	4652      	mov	r2, sl
   b7f12:	465b      	mov	r3, fp
   b7f14:	f7ff f962 	bl	b71dc <__aeabi_dmul>
   b7f18:	4682      	mov	sl, r0
   b7f1a:	468b      	mov	fp, r1
   b7f1c:	e640      	b.n	b7ba0 <_strtod_l+0x88>
   b7f1e:	9a06      	ldr	r2, [sp, #24]
   b7f20:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b7f24:	4293      	cmp	r3, r2
   b7f26:	db20      	blt.n	b7f6a <_strtod_l+0x452>
   b7f28:	4c64      	ldr	r4, [pc, #400]	; (b80bc <_strtod_l+0x5a4>)
   b7f2a:	f1c5 050f 	rsb	r5, r5, #15
   b7f2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b7f32:	4652      	mov	r2, sl
   b7f34:	465b      	mov	r3, fp
   b7f36:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7f3a:	f7ff f94f 	bl	b71dc <__aeabi_dmul>
   b7f3e:	9b06      	ldr	r3, [sp, #24]
   b7f40:	1b5d      	subs	r5, r3, r5
   b7f42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b7f46:	e9d4 2300 	ldrd	r2, r3, [r4]
   b7f4a:	e7e3      	b.n	b7f14 <_strtod_l+0x3fc>
   b7f4c:	9b06      	ldr	r3, [sp, #24]
   b7f4e:	3316      	adds	r3, #22
   b7f50:	db0b      	blt.n	b7f6a <_strtod_l+0x452>
   b7f52:	9b05      	ldr	r3, [sp, #20]
   b7f54:	1b9e      	subs	r6, r3, r6
   b7f56:	4b59      	ldr	r3, [pc, #356]	; (b80bc <_strtod_l+0x5a4>)
   b7f58:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b7f5c:	e9d6 2300 	ldrd	r2, r3, [r6]
   b7f60:	4650      	mov	r0, sl
   b7f62:	4659      	mov	r1, fp
   b7f64:	f7ff fa64 	bl	b7430 <__aeabi_ddiv>
   b7f68:	e7d6      	b.n	b7f18 <_strtod_l+0x400>
   b7f6a:	9b06      	ldr	r3, [sp, #24]
   b7f6c:	eba5 0808 	sub.w	r8, r5, r8
   b7f70:	4498      	add	r8, r3
   b7f72:	f1b8 0f00 	cmp.w	r8, #0
   b7f76:	dd74      	ble.n	b8062 <_strtod_l+0x54a>
   b7f78:	f018 030f 	ands.w	r3, r8, #15
   b7f7c:	d00a      	beq.n	b7f94 <_strtod_l+0x47c>
   b7f7e:	494f      	ldr	r1, [pc, #316]	; (b80bc <_strtod_l+0x5a4>)
   b7f80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b7f84:	4652      	mov	r2, sl
   b7f86:	465b      	mov	r3, fp
   b7f88:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7f8c:	f7ff f926 	bl	b71dc <__aeabi_dmul>
   b7f90:	4682      	mov	sl, r0
   b7f92:	468b      	mov	fp, r1
   b7f94:	f038 080f 	bics.w	r8, r8, #15
   b7f98:	d04f      	beq.n	b803a <_strtod_l+0x522>
   b7f9a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b7f9e:	dd22      	ble.n	b7fe6 <_strtod_l+0x4ce>
   b7fa0:	2500      	movs	r5, #0
   b7fa2:	462e      	mov	r6, r5
   b7fa4:	9507      	str	r5, [sp, #28]
   b7fa6:	9505      	str	r5, [sp, #20]
   b7fa8:	2322      	movs	r3, #34	; 0x22
   b7faa:	f8df b118 	ldr.w	fp, [pc, #280]	; b80c4 <_strtod_l+0x5ac>
   b7fae:	6023      	str	r3, [r4, #0]
   b7fb0:	f04f 0a00 	mov.w	sl, #0
   b7fb4:	9b07      	ldr	r3, [sp, #28]
   b7fb6:	2b00      	cmp	r3, #0
   b7fb8:	f43f adf2 	beq.w	b7ba0 <_strtod_l+0x88>
   b7fbc:	9918      	ldr	r1, [sp, #96]	; 0x60
   b7fbe:	4620      	mov	r0, r4
   b7fc0:	f000 ffe4 	bl	b8f8c <_Bfree>
   b7fc4:	9905      	ldr	r1, [sp, #20]
   b7fc6:	4620      	mov	r0, r4
   b7fc8:	f000 ffe0 	bl	b8f8c <_Bfree>
   b7fcc:	4631      	mov	r1, r6
   b7fce:	4620      	mov	r0, r4
   b7fd0:	f000 ffdc 	bl	b8f8c <_Bfree>
   b7fd4:	9907      	ldr	r1, [sp, #28]
   b7fd6:	4620      	mov	r0, r4
   b7fd8:	f000 ffd8 	bl	b8f8c <_Bfree>
   b7fdc:	4629      	mov	r1, r5
   b7fde:	4620      	mov	r0, r4
   b7fe0:	f000 ffd4 	bl	b8f8c <_Bfree>
   b7fe4:	e5dc      	b.n	b7ba0 <_strtod_l+0x88>
   b7fe6:	4b36      	ldr	r3, [pc, #216]	; (b80c0 <_strtod_l+0x5a8>)
   b7fe8:	9304      	str	r3, [sp, #16]
   b7fea:	2300      	movs	r3, #0
   b7fec:	ea4f 1828 	mov.w	r8, r8, asr #4
   b7ff0:	4650      	mov	r0, sl
   b7ff2:	4659      	mov	r1, fp
   b7ff4:	4699      	mov	r9, r3
   b7ff6:	f1b8 0f01 	cmp.w	r8, #1
   b7ffa:	dc21      	bgt.n	b8040 <_strtod_l+0x528>
   b7ffc:	b10b      	cbz	r3, b8002 <_strtod_l+0x4ea>
   b7ffe:	4682      	mov	sl, r0
   b8000:	468b      	mov	fp, r1
   b8002:	4b2f      	ldr	r3, [pc, #188]	; (b80c0 <_strtod_l+0x5a8>)
   b8004:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b8008:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b800c:	4652      	mov	r2, sl
   b800e:	465b      	mov	r3, fp
   b8010:	e9d9 0100 	ldrd	r0, r1, [r9]
   b8014:	f7ff f8e2 	bl	b71dc <__aeabi_dmul>
   b8018:	4b2a      	ldr	r3, [pc, #168]	; (b80c4 <_strtod_l+0x5ac>)
   b801a:	460a      	mov	r2, r1
   b801c:	400b      	ands	r3, r1
   b801e:	492a      	ldr	r1, [pc, #168]	; (b80c8 <_strtod_l+0x5b0>)
   b8020:	428b      	cmp	r3, r1
   b8022:	4682      	mov	sl, r0
   b8024:	d8bc      	bhi.n	b7fa0 <_strtod_l+0x488>
   b8026:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b802a:	428b      	cmp	r3, r1
   b802c:	bf86      	itte	hi
   b802e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b80cc <_strtod_l+0x5b4>
   b8032:	f04f 3aff 	movhi.w	sl, #4294967295
   b8036:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b803a:	2300      	movs	r3, #0
   b803c:	9304      	str	r3, [sp, #16]
   b803e:	e084      	b.n	b814a <_strtod_l+0x632>
   b8040:	f018 0f01 	tst.w	r8, #1
   b8044:	d005      	beq.n	b8052 <_strtod_l+0x53a>
   b8046:	9b04      	ldr	r3, [sp, #16]
   b8048:	e9d3 2300 	ldrd	r2, r3, [r3]
   b804c:	f7ff f8c6 	bl	b71dc <__aeabi_dmul>
   b8050:	2301      	movs	r3, #1
   b8052:	9a04      	ldr	r2, [sp, #16]
   b8054:	3208      	adds	r2, #8
   b8056:	f109 0901 	add.w	r9, r9, #1
   b805a:	ea4f 0868 	mov.w	r8, r8, asr #1
   b805e:	9204      	str	r2, [sp, #16]
   b8060:	e7c9      	b.n	b7ff6 <_strtod_l+0x4de>
   b8062:	d0ea      	beq.n	b803a <_strtod_l+0x522>
   b8064:	f1c8 0800 	rsb	r8, r8, #0
   b8068:	f018 020f 	ands.w	r2, r8, #15
   b806c:	d00a      	beq.n	b8084 <_strtod_l+0x56c>
   b806e:	4b13      	ldr	r3, [pc, #76]	; (b80bc <_strtod_l+0x5a4>)
   b8070:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b8074:	4650      	mov	r0, sl
   b8076:	4659      	mov	r1, fp
   b8078:	e9d3 2300 	ldrd	r2, r3, [r3]
   b807c:	f7ff f9d8 	bl	b7430 <__aeabi_ddiv>
   b8080:	4682      	mov	sl, r0
   b8082:	468b      	mov	fp, r1
   b8084:	ea5f 1828 	movs.w	r8, r8, asr #4
   b8088:	d0d7      	beq.n	b803a <_strtod_l+0x522>
   b808a:	f1b8 0f1f 	cmp.w	r8, #31
   b808e:	dd1f      	ble.n	b80d0 <_strtod_l+0x5b8>
   b8090:	2500      	movs	r5, #0
   b8092:	462e      	mov	r6, r5
   b8094:	9507      	str	r5, [sp, #28]
   b8096:	9505      	str	r5, [sp, #20]
   b8098:	2322      	movs	r3, #34	; 0x22
   b809a:	f04f 0a00 	mov.w	sl, #0
   b809e:	f04f 0b00 	mov.w	fp, #0
   b80a2:	6023      	str	r3, [r4, #0]
   b80a4:	e786      	b.n	b7fb4 <_strtod_l+0x49c>
   b80a6:	bf00      	nop
   b80a8:	000b9cfd 	.word	0x000b9cfd
   b80ac:	000b9f70 	.word	0x000b9f70
   b80b0:	000b9d01 	.word	0x000b9d01
   b80b4:	000b9f56 	.word	0x000b9f56
   b80b8:	000b9e88 	.word	0x000b9e88
   b80bc:	000ba208 	.word	0x000ba208
   b80c0:	000ba1e0 	.word	0x000ba1e0
   b80c4:	7ff00000 	.word	0x7ff00000
   b80c8:	7ca00000 	.word	0x7ca00000
   b80cc:	7fefffff 	.word	0x7fefffff
   b80d0:	f018 0310 	ands.w	r3, r8, #16
   b80d4:	bf18      	it	ne
   b80d6:	236a      	movne	r3, #106	; 0x6a
   b80d8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b8488 <_strtod_l+0x970>
   b80dc:	9304      	str	r3, [sp, #16]
   b80de:	4650      	mov	r0, sl
   b80e0:	4659      	mov	r1, fp
   b80e2:	2300      	movs	r3, #0
   b80e4:	f018 0f01 	tst.w	r8, #1
   b80e8:	d004      	beq.n	b80f4 <_strtod_l+0x5dc>
   b80ea:	e9d9 2300 	ldrd	r2, r3, [r9]
   b80ee:	f7ff f875 	bl	b71dc <__aeabi_dmul>
   b80f2:	2301      	movs	r3, #1
   b80f4:	ea5f 0868 	movs.w	r8, r8, asr #1
   b80f8:	f109 0908 	add.w	r9, r9, #8
   b80fc:	d1f2      	bne.n	b80e4 <_strtod_l+0x5cc>
   b80fe:	b10b      	cbz	r3, b8104 <_strtod_l+0x5ec>
   b8100:	4682      	mov	sl, r0
   b8102:	468b      	mov	fp, r1
   b8104:	9b04      	ldr	r3, [sp, #16]
   b8106:	b1c3      	cbz	r3, b813a <_strtod_l+0x622>
   b8108:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b810c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b8110:	2b00      	cmp	r3, #0
   b8112:	4659      	mov	r1, fp
   b8114:	dd11      	ble.n	b813a <_strtod_l+0x622>
   b8116:	2b1f      	cmp	r3, #31
   b8118:	f340 8124 	ble.w	b8364 <_strtod_l+0x84c>
   b811c:	2b34      	cmp	r3, #52	; 0x34
   b811e:	bfde      	ittt	le
   b8120:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b8124:	f04f 33ff 	movle.w	r3, #4294967295
   b8128:	fa03 f202 	lslle.w	r2, r3, r2
   b812c:	f04f 0a00 	mov.w	sl, #0
   b8130:	bfcc      	ite	gt
   b8132:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b8136:	ea02 0b01 	andle.w	fp, r2, r1
   b813a:	2200      	movs	r2, #0
   b813c:	2300      	movs	r3, #0
   b813e:	4650      	mov	r0, sl
   b8140:	4659      	mov	r1, fp
   b8142:	f7ff fab3 	bl	b76ac <__aeabi_dcmpeq>
   b8146:	2800      	cmp	r0, #0
   b8148:	d1a2      	bne.n	b8090 <_strtod_l+0x578>
   b814a:	9b07      	ldr	r3, [sp, #28]
   b814c:	9300      	str	r3, [sp, #0]
   b814e:	9908      	ldr	r1, [sp, #32]
   b8150:	462b      	mov	r3, r5
   b8152:	463a      	mov	r2, r7
   b8154:	4620      	mov	r0, r4
   b8156:	f000 ff81 	bl	b905c <__s2b>
   b815a:	9007      	str	r0, [sp, #28]
   b815c:	2800      	cmp	r0, #0
   b815e:	f43f af1f 	beq.w	b7fa0 <_strtod_l+0x488>
   b8162:	9b05      	ldr	r3, [sp, #20]
   b8164:	1b9e      	subs	r6, r3, r6
   b8166:	9b06      	ldr	r3, [sp, #24]
   b8168:	2b00      	cmp	r3, #0
   b816a:	bfb4      	ite	lt
   b816c:	4633      	movlt	r3, r6
   b816e:	2300      	movge	r3, #0
   b8170:	930c      	str	r3, [sp, #48]	; 0x30
   b8172:	9b06      	ldr	r3, [sp, #24]
   b8174:	2500      	movs	r5, #0
   b8176:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b817a:	9312      	str	r3, [sp, #72]	; 0x48
   b817c:	462e      	mov	r6, r5
   b817e:	9b07      	ldr	r3, [sp, #28]
   b8180:	4620      	mov	r0, r4
   b8182:	6859      	ldr	r1, [r3, #4]
   b8184:	f000 fec2 	bl	b8f0c <_Balloc>
   b8188:	9005      	str	r0, [sp, #20]
   b818a:	2800      	cmp	r0, #0
   b818c:	f43f af0c 	beq.w	b7fa8 <_strtod_l+0x490>
   b8190:	9b07      	ldr	r3, [sp, #28]
   b8192:	691a      	ldr	r2, [r3, #16]
   b8194:	3202      	adds	r2, #2
   b8196:	f103 010c 	add.w	r1, r3, #12
   b819a:	0092      	lsls	r2, r2, #2
   b819c:	300c      	adds	r0, #12
   b819e:	f7ff fbfa 	bl	b7996 <memcpy>
   b81a2:	ec4b ab10 	vmov	d0, sl, fp
   b81a6:	aa1a      	add	r2, sp, #104	; 0x68
   b81a8:	a919      	add	r1, sp, #100	; 0x64
   b81aa:	4620      	mov	r0, r4
   b81ac:	f001 fa9c 	bl	b96e8 <__d2b>
   b81b0:	ec4b ab18 	vmov	d8, sl, fp
   b81b4:	9018      	str	r0, [sp, #96]	; 0x60
   b81b6:	2800      	cmp	r0, #0
   b81b8:	f43f aef6 	beq.w	b7fa8 <_strtod_l+0x490>
   b81bc:	2101      	movs	r1, #1
   b81be:	4620      	mov	r0, r4
   b81c0:	f000 ffe6 	bl	b9190 <__i2b>
   b81c4:	4606      	mov	r6, r0
   b81c6:	2800      	cmp	r0, #0
   b81c8:	f43f aeee 	beq.w	b7fa8 <_strtod_l+0x490>
   b81cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b81ce:	9904      	ldr	r1, [sp, #16]
   b81d0:	2b00      	cmp	r3, #0
   b81d2:	bfab      	itete	ge
   b81d4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b81d6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b81d8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b81da:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b81de:	bfac      	ite	ge
   b81e0:	eb03 0902 	addge.w	r9, r3, r2
   b81e4:	1ad7      	sublt	r7, r2, r3
   b81e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b81e8:	eba3 0801 	sub.w	r8, r3, r1
   b81ec:	4490      	add	r8, r2
   b81ee:	4ba1      	ldr	r3, [pc, #644]	; (b8474 <_strtod_l+0x95c>)
   b81f0:	f108 38ff 	add.w	r8, r8, #4294967295
   b81f4:	4598      	cmp	r8, r3
   b81f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b81fa:	f280 80c7 	bge.w	b838c <_strtod_l+0x874>
   b81fe:	eba3 0308 	sub.w	r3, r3, r8
   b8202:	2b1f      	cmp	r3, #31
   b8204:	eba2 0203 	sub.w	r2, r2, r3
   b8208:	f04f 0101 	mov.w	r1, #1
   b820c:	f300 80b1 	bgt.w	b8372 <_strtod_l+0x85a>
   b8210:	fa01 f303 	lsl.w	r3, r1, r3
   b8214:	930d      	str	r3, [sp, #52]	; 0x34
   b8216:	2300      	movs	r3, #0
   b8218:	9308      	str	r3, [sp, #32]
   b821a:	eb09 0802 	add.w	r8, r9, r2
   b821e:	9b04      	ldr	r3, [sp, #16]
   b8220:	45c1      	cmp	r9, r8
   b8222:	4417      	add	r7, r2
   b8224:	441f      	add	r7, r3
   b8226:	464b      	mov	r3, r9
   b8228:	bfa8      	it	ge
   b822a:	4643      	movge	r3, r8
   b822c:	42bb      	cmp	r3, r7
   b822e:	bfa8      	it	ge
   b8230:	463b      	movge	r3, r7
   b8232:	2b00      	cmp	r3, #0
   b8234:	bfc2      	ittt	gt
   b8236:	eba8 0803 	subgt.w	r8, r8, r3
   b823a:	1aff      	subgt	r7, r7, r3
   b823c:	eba9 0903 	subgt.w	r9, r9, r3
   b8240:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8242:	2b00      	cmp	r3, #0
   b8244:	dd17      	ble.n	b8276 <_strtod_l+0x75e>
   b8246:	4631      	mov	r1, r6
   b8248:	461a      	mov	r2, r3
   b824a:	4620      	mov	r0, r4
   b824c:	f001 f860 	bl	b9310 <__pow5mult>
   b8250:	4606      	mov	r6, r0
   b8252:	2800      	cmp	r0, #0
   b8254:	f43f aea8 	beq.w	b7fa8 <_strtod_l+0x490>
   b8258:	4601      	mov	r1, r0
   b825a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b825c:	4620      	mov	r0, r4
   b825e:	f000 ffad 	bl	b91bc <__multiply>
   b8262:	900b      	str	r0, [sp, #44]	; 0x2c
   b8264:	2800      	cmp	r0, #0
   b8266:	f43f ae9f 	beq.w	b7fa8 <_strtod_l+0x490>
   b826a:	9918      	ldr	r1, [sp, #96]	; 0x60
   b826c:	4620      	mov	r0, r4
   b826e:	f000 fe8d 	bl	b8f8c <_Bfree>
   b8272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8274:	9318      	str	r3, [sp, #96]	; 0x60
   b8276:	f1b8 0f00 	cmp.w	r8, #0
   b827a:	f300 808c 	bgt.w	b8396 <_strtod_l+0x87e>
   b827e:	9b06      	ldr	r3, [sp, #24]
   b8280:	2b00      	cmp	r3, #0
   b8282:	dd08      	ble.n	b8296 <_strtod_l+0x77e>
   b8284:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b8286:	9905      	ldr	r1, [sp, #20]
   b8288:	4620      	mov	r0, r4
   b828a:	f001 f841 	bl	b9310 <__pow5mult>
   b828e:	9005      	str	r0, [sp, #20]
   b8290:	2800      	cmp	r0, #0
   b8292:	f43f ae89 	beq.w	b7fa8 <_strtod_l+0x490>
   b8296:	2f00      	cmp	r7, #0
   b8298:	dd08      	ble.n	b82ac <_strtod_l+0x794>
   b829a:	9905      	ldr	r1, [sp, #20]
   b829c:	463a      	mov	r2, r7
   b829e:	4620      	mov	r0, r4
   b82a0:	f001 f890 	bl	b93c4 <__lshift>
   b82a4:	9005      	str	r0, [sp, #20]
   b82a6:	2800      	cmp	r0, #0
   b82a8:	f43f ae7e 	beq.w	b7fa8 <_strtod_l+0x490>
   b82ac:	f1b9 0f00 	cmp.w	r9, #0
   b82b0:	dd08      	ble.n	b82c4 <_strtod_l+0x7ac>
   b82b2:	4631      	mov	r1, r6
   b82b4:	464a      	mov	r2, r9
   b82b6:	4620      	mov	r0, r4
   b82b8:	f001 f884 	bl	b93c4 <__lshift>
   b82bc:	4606      	mov	r6, r0
   b82be:	2800      	cmp	r0, #0
   b82c0:	f43f ae72 	beq.w	b7fa8 <_strtod_l+0x490>
   b82c4:	9a05      	ldr	r2, [sp, #20]
   b82c6:	9918      	ldr	r1, [sp, #96]	; 0x60
   b82c8:	4620      	mov	r0, r4
   b82ca:	f001 f907 	bl	b94dc <__mdiff>
   b82ce:	4605      	mov	r5, r0
   b82d0:	2800      	cmp	r0, #0
   b82d2:	f43f ae69 	beq.w	b7fa8 <_strtod_l+0x490>
   b82d6:	68c3      	ldr	r3, [r0, #12]
   b82d8:	930b      	str	r3, [sp, #44]	; 0x2c
   b82da:	2300      	movs	r3, #0
   b82dc:	60c3      	str	r3, [r0, #12]
   b82de:	4631      	mov	r1, r6
   b82e0:	f001 f8e0 	bl	b94a4 <__mcmp>
   b82e4:	2800      	cmp	r0, #0
   b82e6:	da60      	bge.n	b83aa <_strtod_l+0x892>
   b82e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b82ea:	ea53 030a 	orrs.w	r3, r3, sl
   b82ee:	f040 8082 	bne.w	b83f6 <_strtod_l+0x8de>
   b82f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b82f6:	2b00      	cmp	r3, #0
   b82f8:	d17d      	bne.n	b83f6 <_strtod_l+0x8de>
   b82fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b82fe:	0d1b      	lsrs	r3, r3, #20
   b8300:	051b      	lsls	r3, r3, #20
   b8302:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b8306:	d976      	bls.n	b83f6 <_strtod_l+0x8de>
   b8308:	696b      	ldr	r3, [r5, #20]
   b830a:	b913      	cbnz	r3, b8312 <_strtod_l+0x7fa>
   b830c:	692b      	ldr	r3, [r5, #16]
   b830e:	2b01      	cmp	r3, #1
   b8310:	dd71      	ble.n	b83f6 <_strtod_l+0x8de>
   b8312:	4629      	mov	r1, r5
   b8314:	2201      	movs	r2, #1
   b8316:	4620      	mov	r0, r4
   b8318:	f001 f854 	bl	b93c4 <__lshift>
   b831c:	4631      	mov	r1, r6
   b831e:	4605      	mov	r5, r0
   b8320:	f001 f8c0 	bl	b94a4 <__mcmp>
   b8324:	2800      	cmp	r0, #0
   b8326:	dd66      	ble.n	b83f6 <_strtod_l+0x8de>
   b8328:	9904      	ldr	r1, [sp, #16]
   b832a:	4a53      	ldr	r2, [pc, #332]	; (b8478 <_strtod_l+0x960>)
   b832c:	465b      	mov	r3, fp
   b832e:	2900      	cmp	r1, #0
   b8330:	f000 8081 	beq.w	b8436 <_strtod_l+0x91e>
   b8334:	ea02 010b 	and.w	r1, r2, fp
   b8338:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b833c:	dc7b      	bgt.n	b8436 <_strtod_l+0x91e>
   b833e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b8342:	f77f aea9 	ble.w	b8098 <_strtod_l+0x580>
   b8346:	4b4d      	ldr	r3, [pc, #308]	; (b847c <_strtod_l+0x964>)
   b8348:	4650      	mov	r0, sl
   b834a:	4659      	mov	r1, fp
   b834c:	2200      	movs	r2, #0
   b834e:	f7fe ff45 	bl	b71dc <__aeabi_dmul>
   b8352:	460b      	mov	r3, r1
   b8354:	4303      	orrs	r3, r0
   b8356:	bf08      	it	eq
   b8358:	2322      	moveq	r3, #34	; 0x22
   b835a:	4682      	mov	sl, r0
   b835c:	468b      	mov	fp, r1
   b835e:	bf08      	it	eq
   b8360:	6023      	streq	r3, [r4, #0]
   b8362:	e62b      	b.n	b7fbc <_strtod_l+0x4a4>
   b8364:	f04f 32ff 	mov.w	r2, #4294967295
   b8368:	fa02 f303 	lsl.w	r3, r2, r3
   b836c:	ea03 0a0a 	and.w	sl, r3, sl
   b8370:	e6e3      	b.n	b813a <_strtod_l+0x622>
   b8372:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b8376:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b837a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b837e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b8382:	fa01 f308 	lsl.w	r3, r1, r8
   b8386:	9308      	str	r3, [sp, #32]
   b8388:	910d      	str	r1, [sp, #52]	; 0x34
   b838a:	e746      	b.n	b821a <_strtod_l+0x702>
   b838c:	2300      	movs	r3, #0
   b838e:	9308      	str	r3, [sp, #32]
   b8390:	2301      	movs	r3, #1
   b8392:	930d      	str	r3, [sp, #52]	; 0x34
   b8394:	e741      	b.n	b821a <_strtod_l+0x702>
   b8396:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8398:	4642      	mov	r2, r8
   b839a:	4620      	mov	r0, r4
   b839c:	f001 f812 	bl	b93c4 <__lshift>
   b83a0:	9018      	str	r0, [sp, #96]	; 0x60
   b83a2:	2800      	cmp	r0, #0
   b83a4:	f47f af6b 	bne.w	b827e <_strtod_l+0x766>
   b83a8:	e5fe      	b.n	b7fa8 <_strtod_l+0x490>
   b83aa:	465f      	mov	r7, fp
   b83ac:	d16e      	bne.n	b848c <_strtod_l+0x974>
   b83ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b83b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b83b4:	b342      	cbz	r2, b8408 <_strtod_l+0x8f0>
   b83b6:	4a32      	ldr	r2, [pc, #200]	; (b8480 <_strtod_l+0x968>)
   b83b8:	4293      	cmp	r3, r2
   b83ba:	d128      	bne.n	b840e <_strtod_l+0x8f6>
   b83bc:	9b04      	ldr	r3, [sp, #16]
   b83be:	4651      	mov	r1, sl
   b83c0:	b1eb      	cbz	r3, b83fe <_strtod_l+0x8e6>
   b83c2:	4b2d      	ldr	r3, [pc, #180]	; (b8478 <_strtod_l+0x960>)
   b83c4:	403b      	ands	r3, r7
   b83c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b83ca:	f04f 32ff 	mov.w	r2, #4294967295
   b83ce:	d819      	bhi.n	b8404 <_strtod_l+0x8ec>
   b83d0:	0d1b      	lsrs	r3, r3, #20
   b83d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b83d6:	fa02 f303 	lsl.w	r3, r2, r3
   b83da:	4299      	cmp	r1, r3
   b83dc:	d117      	bne.n	b840e <_strtod_l+0x8f6>
   b83de:	4b29      	ldr	r3, [pc, #164]	; (b8484 <_strtod_l+0x96c>)
   b83e0:	429f      	cmp	r7, r3
   b83e2:	d102      	bne.n	b83ea <_strtod_l+0x8d2>
   b83e4:	3101      	adds	r1, #1
   b83e6:	f43f addf 	beq.w	b7fa8 <_strtod_l+0x490>
   b83ea:	4b23      	ldr	r3, [pc, #140]	; (b8478 <_strtod_l+0x960>)
   b83ec:	403b      	ands	r3, r7
   b83ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b83f2:	f04f 0a00 	mov.w	sl, #0
   b83f6:	9b04      	ldr	r3, [sp, #16]
   b83f8:	2b00      	cmp	r3, #0
   b83fa:	d1a4      	bne.n	b8346 <_strtod_l+0x82e>
   b83fc:	e5de      	b.n	b7fbc <_strtod_l+0x4a4>
   b83fe:	f04f 33ff 	mov.w	r3, #4294967295
   b8402:	e7ea      	b.n	b83da <_strtod_l+0x8c2>
   b8404:	4613      	mov	r3, r2
   b8406:	e7e8      	b.n	b83da <_strtod_l+0x8c2>
   b8408:	ea53 030a 	orrs.w	r3, r3, sl
   b840c:	d08c      	beq.n	b8328 <_strtod_l+0x810>
   b840e:	9b08      	ldr	r3, [sp, #32]
   b8410:	b1db      	cbz	r3, b844a <_strtod_l+0x932>
   b8412:	423b      	tst	r3, r7
   b8414:	d0ef      	beq.n	b83f6 <_strtod_l+0x8de>
   b8416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8418:	9a04      	ldr	r2, [sp, #16]
   b841a:	4650      	mov	r0, sl
   b841c:	4659      	mov	r1, fp
   b841e:	b1c3      	cbz	r3, b8452 <_strtod_l+0x93a>
   b8420:	f7ff fb5c 	bl	b7adc <sulp>
   b8424:	4602      	mov	r2, r0
   b8426:	460b      	mov	r3, r1
   b8428:	ec51 0b18 	vmov	r0, r1, d8
   b842c:	f7fe fd20 	bl	b6e70 <__adddf3>
   b8430:	4682      	mov	sl, r0
   b8432:	468b      	mov	fp, r1
   b8434:	e7df      	b.n	b83f6 <_strtod_l+0x8de>
   b8436:	4013      	ands	r3, r2
   b8438:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b843c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b8440:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b8444:	f04f 3aff 	mov.w	sl, #4294967295
   b8448:	e7d5      	b.n	b83f6 <_strtod_l+0x8de>
   b844a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b844c:	ea13 0f0a 	tst.w	r3, sl
   b8450:	e7e0      	b.n	b8414 <_strtod_l+0x8fc>
   b8452:	f7ff fb43 	bl	b7adc <sulp>
   b8456:	4602      	mov	r2, r0
   b8458:	460b      	mov	r3, r1
   b845a:	ec51 0b18 	vmov	r0, r1, d8
   b845e:	f7fe fd05 	bl	b6e6c <__aeabi_dsub>
   b8462:	2200      	movs	r2, #0
   b8464:	2300      	movs	r3, #0
   b8466:	4682      	mov	sl, r0
   b8468:	468b      	mov	fp, r1
   b846a:	f7ff f91f 	bl	b76ac <__aeabi_dcmpeq>
   b846e:	2800      	cmp	r0, #0
   b8470:	d0c1      	beq.n	b83f6 <_strtod_l+0x8de>
   b8472:	e611      	b.n	b8098 <_strtod_l+0x580>
   b8474:	fffffc02 	.word	0xfffffc02
   b8478:	7ff00000 	.word	0x7ff00000
   b847c:	39500000 	.word	0x39500000
   b8480:	000fffff 	.word	0x000fffff
   b8484:	7fefffff 	.word	0x7fefffff
   b8488:	000b9f88 	.word	0x000b9f88
   b848c:	4631      	mov	r1, r6
   b848e:	4628      	mov	r0, r5
   b8490:	f001 f986 	bl	b97a0 <__ratio>
   b8494:	ec59 8b10 	vmov	r8, r9, d0
   b8498:	ee10 0a10 	vmov	r0, s0
   b849c:	2200      	movs	r2, #0
   b849e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b84a2:	4649      	mov	r1, r9
   b84a4:	f7ff f916 	bl	b76d4 <__aeabi_dcmple>
   b84a8:	2800      	cmp	r0, #0
   b84aa:	d07a      	beq.n	b85a2 <_strtod_l+0xa8a>
   b84ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b84ae:	2b00      	cmp	r3, #0
   b84b0:	d04a      	beq.n	b8548 <_strtod_l+0xa30>
   b84b2:	4b95      	ldr	r3, [pc, #596]	; (b8708 <_strtod_l+0xbf0>)
   b84b4:	2200      	movs	r2, #0
   b84b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b84ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; b8708 <_strtod_l+0xbf0>
   b84be:	f04f 0800 	mov.w	r8, #0
   b84c2:	4b92      	ldr	r3, [pc, #584]	; (b870c <_strtod_l+0xbf4>)
   b84c4:	403b      	ands	r3, r7
   b84c6:	930d      	str	r3, [sp, #52]	; 0x34
   b84c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b84ca:	4b91      	ldr	r3, [pc, #580]	; (b8710 <_strtod_l+0xbf8>)
   b84cc:	429a      	cmp	r2, r3
   b84ce:	f040 80b0 	bne.w	b8632 <_strtod_l+0xb1a>
   b84d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b84d6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b84da:	ec4b ab10 	vmov	d0, sl, fp
   b84de:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b84e2:	f001 f885 	bl	b95f0 <__ulp>
   b84e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b84ea:	ec53 2b10 	vmov	r2, r3, d0
   b84ee:	f7fe fe75 	bl	b71dc <__aeabi_dmul>
   b84f2:	4652      	mov	r2, sl
   b84f4:	465b      	mov	r3, fp
   b84f6:	f7fe fcbb 	bl	b6e70 <__adddf3>
   b84fa:	460b      	mov	r3, r1
   b84fc:	4983      	ldr	r1, [pc, #524]	; (b870c <_strtod_l+0xbf4>)
   b84fe:	4a85      	ldr	r2, [pc, #532]	; (b8714 <_strtod_l+0xbfc>)
   b8500:	4019      	ands	r1, r3
   b8502:	4291      	cmp	r1, r2
   b8504:	4682      	mov	sl, r0
   b8506:	d960      	bls.n	b85ca <_strtod_l+0xab2>
   b8508:	ee18 3a90 	vmov	r3, s17
   b850c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b8510:	4293      	cmp	r3, r2
   b8512:	d104      	bne.n	b851e <_strtod_l+0xa06>
   b8514:	ee18 3a10 	vmov	r3, s16
   b8518:	3301      	adds	r3, #1
   b851a:	f43f ad45 	beq.w	b7fa8 <_strtod_l+0x490>
   b851e:	f8df b200 	ldr.w	fp, [pc, #512]	; b8720 <_strtod_l+0xc08>
   b8522:	f04f 3aff 	mov.w	sl, #4294967295
   b8526:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8528:	4620      	mov	r0, r4
   b852a:	f000 fd2f 	bl	b8f8c <_Bfree>
   b852e:	9905      	ldr	r1, [sp, #20]
   b8530:	4620      	mov	r0, r4
   b8532:	f000 fd2b 	bl	b8f8c <_Bfree>
   b8536:	4631      	mov	r1, r6
   b8538:	4620      	mov	r0, r4
   b853a:	f000 fd27 	bl	b8f8c <_Bfree>
   b853e:	4629      	mov	r1, r5
   b8540:	4620      	mov	r0, r4
   b8542:	f000 fd23 	bl	b8f8c <_Bfree>
   b8546:	e61a      	b.n	b817e <_strtod_l+0x666>
   b8548:	f1ba 0f00 	cmp.w	sl, #0
   b854c:	d11b      	bne.n	b8586 <_strtod_l+0xa6e>
   b854e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8552:	b9f3      	cbnz	r3, b8592 <_strtod_l+0xa7a>
   b8554:	4b6c      	ldr	r3, [pc, #432]	; (b8708 <_strtod_l+0xbf0>)
   b8556:	2200      	movs	r2, #0
   b8558:	4640      	mov	r0, r8
   b855a:	4649      	mov	r1, r9
   b855c:	f7ff f8b0 	bl	b76c0 <__aeabi_dcmplt>
   b8560:	b9d0      	cbnz	r0, b8598 <_strtod_l+0xa80>
   b8562:	4640      	mov	r0, r8
   b8564:	4649      	mov	r1, r9
   b8566:	4b6c      	ldr	r3, [pc, #432]	; (b8718 <_strtod_l+0xc00>)
   b8568:	2200      	movs	r2, #0
   b856a:	f7fe fe37 	bl	b71dc <__aeabi_dmul>
   b856e:	4680      	mov	r8, r0
   b8570:	4689      	mov	r9, r1
   b8572:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b8576:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b857a:	9315      	str	r3, [sp, #84]	; 0x54
   b857c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b8580:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b8584:	e79d      	b.n	b84c2 <_strtod_l+0x9aa>
   b8586:	f1ba 0f01 	cmp.w	sl, #1
   b858a:	d102      	bne.n	b8592 <_strtod_l+0xa7a>
   b858c:	2f00      	cmp	r7, #0
   b858e:	f43f ad83 	beq.w	b8098 <_strtod_l+0x580>
   b8592:	4b62      	ldr	r3, [pc, #392]	; (b871c <_strtod_l+0xc04>)
   b8594:	2200      	movs	r2, #0
   b8596:	e78e      	b.n	b84b6 <_strtod_l+0x99e>
   b8598:	f8df 917c 	ldr.w	r9, [pc, #380]	; b8718 <_strtod_l+0xc00>
   b859c:	f04f 0800 	mov.w	r8, #0
   b85a0:	e7e7      	b.n	b8572 <_strtod_l+0xa5a>
   b85a2:	4b5d      	ldr	r3, [pc, #372]	; (b8718 <_strtod_l+0xc00>)
   b85a4:	4640      	mov	r0, r8
   b85a6:	4649      	mov	r1, r9
   b85a8:	2200      	movs	r2, #0
   b85aa:	f7fe fe17 	bl	b71dc <__aeabi_dmul>
   b85ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b85b0:	4680      	mov	r8, r0
   b85b2:	4689      	mov	r9, r1
   b85b4:	b933      	cbnz	r3, b85c4 <_strtod_l+0xaac>
   b85b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b85ba:	900e      	str	r0, [sp, #56]	; 0x38
   b85bc:	930f      	str	r3, [sp, #60]	; 0x3c
   b85be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b85c2:	e7dd      	b.n	b8580 <_strtod_l+0xa68>
   b85c4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b85c8:	e7f9      	b.n	b85be <_strtod_l+0xaa6>
   b85ca:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b85ce:	9b04      	ldr	r3, [sp, #16]
   b85d0:	2b00      	cmp	r3, #0
   b85d2:	d1a8      	bne.n	b8526 <_strtod_l+0xa0e>
   b85d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b85d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b85da:	0d1b      	lsrs	r3, r3, #20
   b85dc:	051b      	lsls	r3, r3, #20
   b85de:	429a      	cmp	r2, r3
   b85e0:	d1a1      	bne.n	b8526 <_strtod_l+0xa0e>
   b85e2:	4640      	mov	r0, r8
   b85e4:	4649      	mov	r1, r9
   b85e6:	f001 f979 	bl	b98dc <__aeabi_d2lz>
   b85ea:	f7fe fdc9 	bl	b7180 <__aeabi_l2d>
   b85ee:	4602      	mov	r2, r0
   b85f0:	460b      	mov	r3, r1
   b85f2:	4640      	mov	r0, r8
   b85f4:	4649      	mov	r1, r9
   b85f6:	f7fe fc39 	bl	b6e6c <__aeabi_dsub>
   b85fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b85fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8600:	ea43 030a 	orr.w	r3, r3, sl
   b8604:	4313      	orrs	r3, r2
   b8606:	4680      	mov	r8, r0
   b8608:	4689      	mov	r9, r1
   b860a:	d055      	beq.n	b86b8 <_strtod_l+0xba0>
   b860c:	a336      	add	r3, pc, #216	; (adr r3, b86e8 <_strtod_l+0xbd0>)
   b860e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8612:	f7ff f855 	bl	b76c0 <__aeabi_dcmplt>
   b8616:	2800      	cmp	r0, #0
   b8618:	f47f acd0 	bne.w	b7fbc <_strtod_l+0x4a4>
   b861c:	a334      	add	r3, pc, #208	; (adr r3, b86f0 <_strtod_l+0xbd8>)
   b861e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8622:	4640      	mov	r0, r8
   b8624:	4649      	mov	r1, r9
   b8626:	f7ff f869 	bl	b76fc <__aeabi_dcmpgt>
   b862a:	2800      	cmp	r0, #0
   b862c:	f43f af7b 	beq.w	b8526 <_strtod_l+0xa0e>
   b8630:	e4c4      	b.n	b7fbc <_strtod_l+0x4a4>
   b8632:	9b04      	ldr	r3, [sp, #16]
   b8634:	b333      	cbz	r3, b8684 <_strtod_l+0xb6c>
   b8636:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b8638:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b863c:	d822      	bhi.n	b8684 <_strtod_l+0xb6c>
   b863e:	a32e      	add	r3, pc, #184	; (adr r3, b86f8 <_strtod_l+0xbe0>)
   b8640:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8644:	4640      	mov	r0, r8
   b8646:	4649      	mov	r1, r9
   b8648:	f7ff f844 	bl	b76d4 <__aeabi_dcmple>
   b864c:	b1a0      	cbz	r0, b8678 <_strtod_l+0xb60>
   b864e:	4649      	mov	r1, r9
   b8650:	4640      	mov	r0, r8
   b8652:	f7ff f89b 	bl	b778c <__aeabi_d2uiz>
   b8656:	2801      	cmp	r0, #1
   b8658:	bf38      	it	cc
   b865a:	2001      	movcc	r0, #1
   b865c:	f7fe fd44 	bl	b70e8 <__aeabi_ui2d>
   b8660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8662:	4680      	mov	r8, r0
   b8664:	4689      	mov	r9, r1
   b8666:	bb23      	cbnz	r3, b86b2 <_strtod_l+0xb9a>
   b8668:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b866c:	9010      	str	r0, [sp, #64]	; 0x40
   b866e:	9311      	str	r3, [sp, #68]	; 0x44
   b8670:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   b8674:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b8678:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b867a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b867c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   b8680:	1a9b      	subs	r3, r3, r2
   b8682:	9309      	str	r3, [sp, #36]	; 0x24
   b8684:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b8688:	eeb0 0a48 	vmov.f32	s0, s16
   b868c:	eef0 0a68 	vmov.f32	s1, s17
   b8690:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b8694:	f000 ffac 	bl	b95f0 <__ulp>
   b8698:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b869c:	ec53 2b10 	vmov	r2, r3, d0
   b86a0:	f7fe fd9c 	bl	b71dc <__aeabi_dmul>
   b86a4:	ec53 2b18 	vmov	r2, r3, d8
   b86a8:	f7fe fbe2 	bl	b6e70 <__adddf3>
   b86ac:	4682      	mov	sl, r0
   b86ae:	468b      	mov	fp, r1
   b86b0:	e78d      	b.n	b85ce <_strtod_l+0xab6>
   b86b2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   b86b6:	e7db      	b.n	b8670 <_strtod_l+0xb58>
   b86b8:	a311      	add	r3, pc, #68	; (adr r3, b8700 <_strtod_l+0xbe8>)
   b86ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   b86be:	f7fe ffff 	bl	b76c0 <__aeabi_dcmplt>
   b86c2:	e7b2      	b.n	b862a <_strtod_l+0xb12>
   b86c4:	2300      	movs	r3, #0
   b86c6:	930a      	str	r3, [sp, #40]	; 0x28
   b86c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b86ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b86cc:	6013      	str	r3, [r2, #0]
   b86ce:	f7ff ba6b 	b.w	b7ba8 <_strtod_l+0x90>
   b86d2:	2a65      	cmp	r2, #101	; 0x65
   b86d4:	f43f ab5f 	beq.w	b7d96 <_strtod_l+0x27e>
   b86d8:	2a45      	cmp	r2, #69	; 0x45
   b86da:	f43f ab5c 	beq.w	b7d96 <_strtod_l+0x27e>
   b86de:	2301      	movs	r3, #1
   b86e0:	f7ff bb94 	b.w	b7e0c <_strtod_l+0x2f4>
   b86e4:	f3af 8000 	nop.w
   b86e8:	94a03595 	.word	0x94a03595
   b86ec:	3fdfffff 	.word	0x3fdfffff
   b86f0:	35afe535 	.word	0x35afe535
   b86f4:	3fe00000 	.word	0x3fe00000
   b86f8:	ffc00000 	.word	0xffc00000
   b86fc:	41dfffff 	.word	0x41dfffff
   b8700:	94a03595 	.word	0x94a03595
   b8704:	3fcfffff 	.word	0x3fcfffff
   b8708:	3ff00000 	.word	0x3ff00000
   b870c:	7ff00000 	.word	0x7ff00000
   b8710:	7fe00000 	.word	0x7fe00000
   b8714:	7c9fffff 	.word	0x7c9fffff
   b8718:	3fe00000 	.word	0x3fe00000
   b871c:	bff00000 	.word	0xbff00000
   b8720:	7fefffff 	.word	0x7fefffff

000b8724 <strtod>:
   b8724:	460a      	mov	r2, r1
   b8726:	4601      	mov	r1, r0
   b8728:	4802      	ldr	r0, [pc, #8]	; (b8734 <strtod+0x10>)
   b872a:	4b03      	ldr	r3, [pc, #12]	; (b8738 <strtod+0x14>)
   b872c:	6800      	ldr	r0, [r0, #0]
   b872e:	f7ff b9f3 	b.w	b7b18 <_strtod_l>
   b8732:	bf00      	nop
   b8734:	2003dd88 	.word	0x2003dd88
   b8738:	2003ddf4 	.word	0x2003ddf4

000b873c <__register_exitproc>:
   b873c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8740:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b87fc <__register_exitproc+0xc0>
   b8744:	4606      	mov	r6, r0
   b8746:	f8d8 0000 	ldr.w	r0, [r8]
   b874a:	461f      	mov	r7, r3
   b874c:	460d      	mov	r5, r1
   b874e:	4691      	mov	r9, r2
   b8750:	f000 fbc6 	bl	b8ee0 <__retarget_lock_acquire_recursive>
   b8754:	4b25      	ldr	r3, [pc, #148]	; (b87ec <__register_exitproc+0xb0>)
   b8756:	681c      	ldr	r4, [r3, #0]
   b8758:	b934      	cbnz	r4, b8768 <__register_exitproc+0x2c>
   b875a:	4c25      	ldr	r4, [pc, #148]	; (b87f0 <__register_exitproc+0xb4>)
   b875c:	601c      	str	r4, [r3, #0]
   b875e:	4b25      	ldr	r3, [pc, #148]	; (b87f4 <__register_exitproc+0xb8>)
   b8760:	b113      	cbz	r3, b8768 <__register_exitproc+0x2c>
   b8762:	681b      	ldr	r3, [r3, #0]
   b8764:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8768:	6863      	ldr	r3, [r4, #4]
   b876a:	2b1f      	cmp	r3, #31
   b876c:	dd07      	ble.n	b877e <__register_exitproc+0x42>
   b876e:	f8d8 0000 	ldr.w	r0, [r8]
   b8772:	f000 fbb7 	bl	b8ee4 <__retarget_lock_release_recursive>
   b8776:	f04f 30ff 	mov.w	r0, #4294967295
   b877a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b877e:	b34e      	cbz	r6, b87d4 <__register_exitproc+0x98>
   b8780:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8784:	b988      	cbnz	r0, b87aa <__register_exitproc+0x6e>
   b8786:	4b1c      	ldr	r3, [pc, #112]	; (b87f8 <__register_exitproc+0xbc>)
   b8788:	b923      	cbnz	r3, b8794 <__register_exitproc+0x58>
   b878a:	f8d8 0000 	ldr.w	r0, [r8]
   b878e:	f000 fba8 	bl	b8ee2 <__retarget_lock_release>
   b8792:	e7f0      	b.n	b8776 <__register_exitproc+0x3a>
   b8794:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8798:	f7fc ff70 	bl	b567c <malloc>
   b879c:	2800      	cmp	r0, #0
   b879e:	d0f4      	beq.n	b878a <__register_exitproc+0x4e>
   b87a0:	2300      	movs	r3, #0
   b87a2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b87a6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b87aa:	6863      	ldr	r3, [r4, #4]
   b87ac:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b87b0:	2201      	movs	r2, #1
   b87b2:	409a      	lsls	r2, r3
   b87b4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b87b8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b87bc:	4313      	orrs	r3, r2
   b87be:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b87c2:	2e02      	cmp	r6, #2
   b87c4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b87c8:	bf02      	ittt	eq
   b87ca:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b87ce:	4313      	orreq	r3, r2
   b87d0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b87d4:	6863      	ldr	r3, [r4, #4]
   b87d6:	f8d8 0000 	ldr.w	r0, [r8]
   b87da:	1c5a      	adds	r2, r3, #1
   b87dc:	3302      	adds	r3, #2
   b87de:	6062      	str	r2, [r4, #4]
   b87e0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b87e4:	f000 fb7e 	bl	b8ee4 <__retarget_lock_release_recursive>
   b87e8:	2000      	movs	r0, #0
   b87ea:	e7c6      	b.n	b877a <__register_exitproc+0x3e>
   b87ec:	2003e7e8 	.word	0x2003e7e8
   b87f0:	2003e75c 	.word	0x2003e75c
   b87f4:	00000000 	.word	0x00000000
   b87f8:	000b567d 	.word	0x000b567d
   b87fc:	2003ddec 	.word	0x2003ddec

000b8800 <rshift>:
   b8800:	6903      	ldr	r3, [r0, #16]
   b8802:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   b8806:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b880a:	ea4f 1261 	mov.w	r2, r1, asr #5
   b880e:	f100 0414 	add.w	r4, r0, #20
   b8812:	dd45      	ble.n	b88a0 <rshift+0xa0>
   b8814:	f011 011f 	ands.w	r1, r1, #31
   b8818:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   b881c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   b8820:	d10c      	bne.n	b883c <rshift+0x3c>
   b8822:	f100 0710 	add.w	r7, r0, #16
   b8826:	4629      	mov	r1, r5
   b8828:	42b1      	cmp	r1, r6
   b882a:	d334      	bcc.n	b8896 <rshift+0x96>
   b882c:	1a9b      	subs	r3, r3, r2
   b882e:	009b      	lsls	r3, r3, #2
   b8830:	1eea      	subs	r2, r5, #3
   b8832:	4296      	cmp	r6, r2
   b8834:	bf38      	it	cc
   b8836:	2300      	movcc	r3, #0
   b8838:	4423      	add	r3, r4
   b883a:	e015      	b.n	b8868 <rshift+0x68>
   b883c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   b8840:	f1c1 0820 	rsb	r8, r1, #32
   b8844:	40cf      	lsrs	r7, r1
   b8846:	f105 0e04 	add.w	lr, r5, #4
   b884a:	46a1      	mov	r9, r4
   b884c:	4576      	cmp	r6, lr
   b884e:	46f4      	mov	ip, lr
   b8850:	d815      	bhi.n	b887e <rshift+0x7e>
   b8852:	1a9a      	subs	r2, r3, r2
   b8854:	0092      	lsls	r2, r2, #2
   b8856:	3a04      	subs	r2, #4
   b8858:	3501      	adds	r5, #1
   b885a:	42ae      	cmp	r6, r5
   b885c:	bf38      	it	cc
   b885e:	2200      	movcc	r2, #0
   b8860:	18a3      	adds	r3, r4, r2
   b8862:	50a7      	str	r7, [r4, r2]
   b8864:	b107      	cbz	r7, b8868 <rshift+0x68>
   b8866:	3304      	adds	r3, #4
   b8868:	1b1a      	subs	r2, r3, r4
   b886a:	42a3      	cmp	r3, r4
   b886c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   b8870:	bf08      	it	eq
   b8872:	2300      	moveq	r3, #0
   b8874:	6102      	str	r2, [r0, #16]
   b8876:	bf08      	it	eq
   b8878:	6143      	streq	r3, [r0, #20]
   b887a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b887e:	f8dc c000 	ldr.w	ip, [ip]
   b8882:	fa0c fc08 	lsl.w	ip, ip, r8
   b8886:	ea4c 0707 	orr.w	r7, ip, r7
   b888a:	f849 7b04 	str.w	r7, [r9], #4
   b888e:	f85e 7b04 	ldr.w	r7, [lr], #4
   b8892:	40cf      	lsrs	r7, r1
   b8894:	e7da      	b.n	b884c <rshift+0x4c>
   b8896:	f851 cb04 	ldr.w	ip, [r1], #4
   b889a:	f847 cf04 	str.w	ip, [r7, #4]!
   b889e:	e7c3      	b.n	b8828 <rshift+0x28>
   b88a0:	4623      	mov	r3, r4
   b88a2:	e7e1      	b.n	b8868 <rshift+0x68>

000b88a4 <__hexdig_fun>:
   b88a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b88a8:	2b09      	cmp	r3, #9
   b88aa:	d802      	bhi.n	b88b2 <__hexdig_fun+0xe>
   b88ac:	3820      	subs	r0, #32
   b88ae:	b2c0      	uxtb	r0, r0
   b88b0:	4770      	bx	lr
   b88b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b88b6:	2b05      	cmp	r3, #5
   b88b8:	d801      	bhi.n	b88be <__hexdig_fun+0x1a>
   b88ba:	3847      	subs	r0, #71	; 0x47
   b88bc:	e7f7      	b.n	b88ae <__hexdig_fun+0xa>
   b88be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b88c2:	2b05      	cmp	r3, #5
   b88c4:	d801      	bhi.n	b88ca <__hexdig_fun+0x26>
   b88c6:	3827      	subs	r0, #39	; 0x27
   b88c8:	e7f1      	b.n	b88ae <__hexdig_fun+0xa>
   b88ca:	2000      	movs	r0, #0
   b88cc:	4770      	bx	lr
	...

000b88d0 <__gethex>:
   b88d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b88d4:	ed2d 8b02 	vpush	{d8}
   b88d8:	b089      	sub	sp, #36	; 0x24
   b88da:	ee08 0a10 	vmov	s16, r0
   b88de:	9304      	str	r3, [sp, #16]
   b88e0:	4bb4      	ldr	r3, [pc, #720]	; (b8bb4 <__gethex+0x2e4>)
   b88e2:	681b      	ldr	r3, [r3, #0]
   b88e4:	9301      	str	r3, [sp, #4]
   b88e6:	4618      	mov	r0, r3
   b88e8:	468b      	mov	fp, r1
   b88ea:	4690      	mov	r8, r2
   b88ec:	f7ff f8c7 	bl	b7a7e <strlen>
   b88f0:	9b01      	ldr	r3, [sp, #4]
   b88f2:	f8db 2000 	ldr.w	r2, [fp]
   b88f6:	4403      	add	r3, r0
   b88f8:	4682      	mov	sl, r0
   b88fa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b88fe:	9305      	str	r3, [sp, #20]
   b8900:	1c93      	adds	r3, r2, #2
   b8902:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   b8906:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   b890a:	32fe      	adds	r2, #254	; 0xfe
   b890c:	18d1      	adds	r1, r2, r3
   b890e:	461f      	mov	r7, r3
   b8910:	f813 0b01 	ldrb.w	r0, [r3], #1
   b8914:	9100      	str	r1, [sp, #0]
   b8916:	2830      	cmp	r0, #48	; 0x30
   b8918:	d0f8      	beq.n	b890c <__gethex+0x3c>
   b891a:	f7ff ffc3 	bl	b88a4 <__hexdig_fun>
   b891e:	4604      	mov	r4, r0
   b8920:	2800      	cmp	r0, #0
   b8922:	d13a      	bne.n	b899a <__gethex+0xca>
   b8924:	9901      	ldr	r1, [sp, #4]
   b8926:	4652      	mov	r2, sl
   b8928:	4638      	mov	r0, r7
   b892a:	f7ff f8b0 	bl	b7a8e <strncmp>
   b892e:	4605      	mov	r5, r0
   b8930:	2800      	cmp	r0, #0
   b8932:	d168      	bne.n	b8a06 <__gethex+0x136>
   b8934:	f817 000a 	ldrb.w	r0, [r7, sl]
   b8938:	eb07 060a 	add.w	r6, r7, sl
   b893c:	f7ff ffb2 	bl	b88a4 <__hexdig_fun>
   b8940:	2800      	cmp	r0, #0
   b8942:	d062      	beq.n	b8a0a <__gethex+0x13a>
   b8944:	4633      	mov	r3, r6
   b8946:	7818      	ldrb	r0, [r3, #0]
   b8948:	2830      	cmp	r0, #48	; 0x30
   b894a:	461f      	mov	r7, r3
   b894c:	f103 0301 	add.w	r3, r3, #1
   b8950:	d0f9      	beq.n	b8946 <__gethex+0x76>
   b8952:	f7ff ffa7 	bl	b88a4 <__hexdig_fun>
   b8956:	2301      	movs	r3, #1
   b8958:	fab0 f480 	clz	r4, r0
   b895c:	0964      	lsrs	r4, r4, #5
   b895e:	4635      	mov	r5, r6
   b8960:	9300      	str	r3, [sp, #0]
   b8962:	463a      	mov	r2, r7
   b8964:	4616      	mov	r6, r2
   b8966:	3201      	adds	r2, #1
   b8968:	7830      	ldrb	r0, [r6, #0]
   b896a:	f7ff ff9b 	bl	b88a4 <__hexdig_fun>
   b896e:	2800      	cmp	r0, #0
   b8970:	d1f8      	bne.n	b8964 <__gethex+0x94>
   b8972:	9901      	ldr	r1, [sp, #4]
   b8974:	4652      	mov	r2, sl
   b8976:	4630      	mov	r0, r6
   b8978:	f7ff f889 	bl	b7a8e <strncmp>
   b897c:	b980      	cbnz	r0, b89a0 <__gethex+0xd0>
   b897e:	b94d      	cbnz	r5, b8994 <__gethex+0xc4>
   b8980:	eb06 050a 	add.w	r5, r6, sl
   b8984:	462a      	mov	r2, r5
   b8986:	4616      	mov	r6, r2
   b8988:	3201      	adds	r2, #1
   b898a:	7830      	ldrb	r0, [r6, #0]
   b898c:	f7ff ff8a 	bl	b88a4 <__hexdig_fun>
   b8990:	2800      	cmp	r0, #0
   b8992:	d1f8      	bne.n	b8986 <__gethex+0xb6>
   b8994:	1bad      	subs	r5, r5, r6
   b8996:	00ad      	lsls	r5, r5, #2
   b8998:	e004      	b.n	b89a4 <__gethex+0xd4>
   b899a:	2400      	movs	r4, #0
   b899c:	4625      	mov	r5, r4
   b899e:	e7e0      	b.n	b8962 <__gethex+0x92>
   b89a0:	2d00      	cmp	r5, #0
   b89a2:	d1f7      	bne.n	b8994 <__gethex+0xc4>
   b89a4:	7833      	ldrb	r3, [r6, #0]
   b89a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b89aa:	2b50      	cmp	r3, #80	; 0x50
   b89ac:	d13b      	bne.n	b8a26 <__gethex+0x156>
   b89ae:	7873      	ldrb	r3, [r6, #1]
   b89b0:	2b2b      	cmp	r3, #43	; 0x2b
   b89b2:	d02c      	beq.n	b8a0e <__gethex+0x13e>
   b89b4:	2b2d      	cmp	r3, #45	; 0x2d
   b89b6:	d02e      	beq.n	b8a16 <__gethex+0x146>
   b89b8:	1c71      	adds	r1, r6, #1
   b89ba:	f04f 0900 	mov.w	r9, #0
   b89be:	7808      	ldrb	r0, [r1, #0]
   b89c0:	f7ff ff70 	bl	b88a4 <__hexdig_fun>
   b89c4:	1e43      	subs	r3, r0, #1
   b89c6:	b2db      	uxtb	r3, r3
   b89c8:	2b18      	cmp	r3, #24
   b89ca:	d82c      	bhi.n	b8a26 <__gethex+0x156>
   b89cc:	f1a0 0210 	sub.w	r2, r0, #16
   b89d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   b89d4:	f7ff ff66 	bl	b88a4 <__hexdig_fun>
   b89d8:	1e43      	subs	r3, r0, #1
   b89da:	b2db      	uxtb	r3, r3
   b89dc:	2b18      	cmp	r3, #24
   b89de:	d91d      	bls.n	b8a1c <__gethex+0x14c>
   b89e0:	f1b9 0f00 	cmp.w	r9, #0
   b89e4:	d000      	beq.n	b89e8 <__gethex+0x118>
   b89e6:	4252      	negs	r2, r2
   b89e8:	4415      	add	r5, r2
   b89ea:	f8cb 1000 	str.w	r1, [fp]
   b89ee:	b1e4      	cbz	r4, b8a2a <__gethex+0x15a>
   b89f0:	9b00      	ldr	r3, [sp, #0]
   b89f2:	2b00      	cmp	r3, #0
   b89f4:	bf14      	ite	ne
   b89f6:	2700      	movne	r7, #0
   b89f8:	2706      	moveq	r7, #6
   b89fa:	4638      	mov	r0, r7
   b89fc:	b009      	add	sp, #36	; 0x24
   b89fe:	ecbd 8b02 	vpop	{d8}
   b8a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8a06:	463e      	mov	r6, r7
   b8a08:	4625      	mov	r5, r4
   b8a0a:	2401      	movs	r4, #1
   b8a0c:	e7ca      	b.n	b89a4 <__gethex+0xd4>
   b8a0e:	f04f 0900 	mov.w	r9, #0
   b8a12:	1cb1      	adds	r1, r6, #2
   b8a14:	e7d3      	b.n	b89be <__gethex+0xee>
   b8a16:	f04f 0901 	mov.w	r9, #1
   b8a1a:	e7fa      	b.n	b8a12 <__gethex+0x142>
   b8a1c:	230a      	movs	r3, #10
   b8a1e:	fb03 0202 	mla	r2, r3, r2, r0
   b8a22:	3a10      	subs	r2, #16
   b8a24:	e7d4      	b.n	b89d0 <__gethex+0x100>
   b8a26:	4631      	mov	r1, r6
   b8a28:	e7df      	b.n	b89ea <__gethex+0x11a>
   b8a2a:	1bf3      	subs	r3, r6, r7
   b8a2c:	3b01      	subs	r3, #1
   b8a2e:	4621      	mov	r1, r4
   b8a30:	2b07      	cmp	r3, #7
   b8a32:	dc0b      	bgt.n	b8a4c <__gethex+0x17c>
   b8a34:	ee18 0a10 	vmov	r0, s16
   b8a38:	f000 fa68 	bl	b8f0c <_Balloc>
   b8a3c:	4604      	mov	r4, r0
   b8a3e:	b940      	cbnz	r0, b8a52 <__gethex+0x182>
   b8a40:	4b5d      	ldr	r3, [pc, #372]	; (b8bb8 <__gethex+0x2e8>)
   b8a42:	4602      	mov	r2, r0
   b8a44:	21de      	movs	r1, #222	; 0xde
   b8a46:	485d      	ldr	r0, [pc, #372]	; (b8bbc <__gethex+0x2ec>)
   b8a48:	f7fc fe50 	bl	b56ec <__assert_func>
   b8a4c:	3101      	adds	r1, #1
   b8a4e:	105b      	asrs	r3, r3, #1
   b8a50:	e7ee      	b.n	b8a30 <__gethex+0x160>
   b8a52:	f100 0914 	add.w	r9, r0, #20
   b8a56:	f04f 0b00 	mov.w	fp, #0
   b8a5a:	f1ca 0301 	rsb	r3, sl, #1
   b8a5e:	f8cd 9008 	str.w	r9, [sp, #8]
   b8a62:	f8cd b000 	str.w	fp, [sp]
   b8a66:	9306      	str	r3, [sp, #24]
   b8a68:	42b7      	cmp	r7, r6
   b8a6a:	d340      	bcc.n	b8aee <__gethex+0x21e>
   b8a6c:	9802      	ldr	r0, [sp, #8]
   b8a6e:	9b00      	ldr	r3, [sp, #0]
   b8a70:	f840 3b04 	str.w	r3, [r0], #4
   b8a74:	eba0 0009 	sub.w	r0, r0, r9
   b8a78:	1080      	asrs	r0, r0, #2
   b8a7a:	0146      	lsls	r6, r0, #5
   b8a7c:	6120      	str	r0, [r4, #16]
   b8a7e:	4618      	mov	r0, r3
   b8a80:	f000 fb36 	bl	b90f0 <__hi0bits>
   b8a84:	1a30      	subs	r0, r6, r0
   b8a86:	f8d8 6000 	ldr.w	r6, [r8]
   b8a8a:	42b0      	cmp	r0, r6
   b8a8c:	dd63      	ble.n	b8b56 <__gethex+0x286>
   b8a8e:	1b87      	subs	r7, r0, r6
   b8a90:	4639      	mov	r1, r7
   b8a92:	4620      	mov	r0, r4
   b8a94:	f000 feda 	bl	b984c <__any_on>
   b8a98:	4682      	mov	sl, r0
   b8a9a:	b1a8      	cbz	r0, b8ac8 <__gethex+0x1f8>
   b8a9c:	1e7b      	subs	r3, r7, #1
   b8a9e:	1159      	asrs	r1, r3, #5
   b8aa0:	f003 021f 	and.w	r2, r3, #31
   b8aa4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   b8aa8:	f04f 0a01 	mov.w	sl, #1
   b8aac:	fa0a f202 	lsl.w	r2, sl, r2
   b8ab0:	420a      	tst	r2, r1
   b8ab2:	d009      	beq.n	b8ac8 <__gethex+0x1f8>
   b8ab4:	4553      	cmp	r3, sl
   b8ab6:	dd05      	ble.n	b8ac4 <__gethex+0x1f4>
   b8ab8:	1eb9      	subs	r1, r7, #2
   b8aba:	4620      	mov	r0, r4
   b8abc:	f000 fec6 	bl	b984c <__any_on>
   b8ac0:	2800      	cmp	r0, #0
   b8ac2:	d145      	bne.n	b8b50 <__gethex+0x280>
   b8ac4:	f04f 0a02 	mov.w	sl, #2
   b8ac8:	4639      	mov	r1, r7
   b8aca:	4620      	mov	r0, r4
   b8acc:	f7ff fe98 	bl	b8800 <rshift>
   b8ad0:	443d      	add	r5, r7
   b8ad2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b8ad6:	42ab      	cmp	r3, r5
   b8ad8:	da4c      	bge.n	b8b74 <__gethex+0x2a4>
   b8ada:	ee18 0a10 	vmov	r0, s16
   b8ade:	4621      	mov	r1, r4
   b8ae0:	f000 fa54 	bl	b8f8c <_Bfree>
   b8ae4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b8ae6:	2300      	movs	r3, #0
   b8ae8:	6013      	str	r3, [r2, #0]
   b8aea:	27a3      	movs	r7, #163	; 0xa3
   b8aec:	e785      	b.n	b89fa <__gethex+0x12a>
   b8aee:	1e73      	subs	r3, r6, #1
   b8af0:	9a05      	ldr	r2, [sp, #20]
   b8af2:	9303      	str	r3, [sp, #12]
   b8af4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   b8af8:	4293      	cmp	r3, r2
   b8afa:	d019      	beq.n	b8b30 <__gethex+0x260>
   b8afc:	f1bb 0f20 	cmp.w	fp, #32
   b8b00:	d107      	bne.n	b8b12 <__gethex+0x242>
   b8b02:	9b02      	ldr	r3, [sp, #8]
   b8b04:	9a00      	ldr	r2, [sp, #0]
   b8b06:	f843 2b04 	str.w	r2, [r3], #4
   b8b0a:	9302      	str	r3, [sp, #8]
   b8b0c:	2300      	movs	r3, #0
   b8b0e:	9300      	str	r3, [sp, #0]
   b8b10:	469b      	mov	fp, r3
   b8b12:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   b8b16:	f7ff fec5 	bl	b88a4 <__hexdig_fun>
   b8b1a:	9b00      	ldr	r3, [sp, #0]
   b8b1c:	f000 000f 	and.w	r0, r0, #15
   b8b20:	fa00 f00b 	lsl.w	r0, r0, fp
   b8b24:	4303      	orrs	r3, r0
   b8b26:	9300      	str	r3, [sp, #0]
   b8b28:	f10b 0b04 	add.w	fp, fp, #4
   b8b2c:	9b03      	ldr	r3, [sp, #12]
   b8b2e:	e00d      	b.n	b8b4c <__gethex+0x27c>
   b8b30:	9b03      	ldr	r3, [sp, #12]
   b8b32:	9a06      	ldr	r2, [sp, #24]
   b8b34:	4413      	add	r3, r2
   b8b36:	42bb      	cmp	r3, r7
   b8b38:	d3e0      	bcc.n	b8afc <__gethex+0x22c>
   b8b3a:	4618      	mov	r0, r3
   b8b3c:	9901      	ldr	r1, [sp, #4]
   b8b3e:	9307      	str	r3, [sp, #28]
   b8b40:	4652      	mov	r2, sl
   b8b42:	f7fe ffa4 	bl	b7a8e <strncmp>
   b8b46:	9b07      	ldr	r3, [sp, #28]
   b8b48:	2800      	cmp	r0, #0
   b8b4a:	d1d7      	bne.n	b8afc <__gethex+0x22c>
   b8b4c:	461e      	mov	r6, r3
   b8b4e:	e78b      	b.n	b8a68 <__gethex+0x198>
   b8b50:	f04f 0a03 	mov.w	sl, #3
   b8b54:	e7b8      	b.n	b8ac8 <__gethex+0x1f8>
   b8b56:	da0a      	bge.n	b8b6e <__gethex+0x29e>
   b8b58:	1a37      	subs	r7, r6, r0
   b8b5a:	4621      	mov	r1, r4
   b8b5c:	ee18 0a10 	vmov	r0, s16
   b8b60:	463a      	mov	r2, r7
   b8b62:	f000 fc2f 	bl	b93c4 <__lshift>
   b8b66:	1bed      	subs	r5, r5, r7
   b8b68:	4604      	mov	r4, r0
   b8b6a:	f100 0914 	add.w	r9, r0, #20
   b8b6e:	f04f 0a00 	mov.w	sl, #0
   b8b72:	e7ae      	b.n	b8ad2 <__gethex+0x202>
   b8b74:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b8b78:	42a8      	cmp	r0, r5
   b8b7a:	dd72      	ble.n	b8c62 <__gethex+0x392>
   b8b7c:	1b45      	subs	r5, r0, r5
   b8b7e:	42ae      	cmp	r6, r5
   b8b80:	dc36      	bgt.n	b8bf0 <__gethex+0x320>
   b8b82:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b8b86:	2b02      	cmp	r3, #2
   b8b88:	d02a      	beq.n	b8be0 <__gethex+0x310>
   b8b8a:	2b03      	cmp	r3, #3
   b8b8c:	d02c      	beq.n	b8be8 <__gethex+0x318>
   b8b8e:	2b01      	cmp	r3, #1
   b8b90:	d11c      	bne.n	b8bcc <__gethex+0x2fc>
   b8b92:	42ae      	cmp	r6, r5
   b8b94:	d11a      	bne.n	b8bcc <__gethex+0x2fc>
   b8b96:	2e01      	cmp	r6, #1
   b8b98:	d112      	bne.n	b8bc0 <__gethex+0x2f0>
   b8b9a:	9a04      	ldr	r2, [sp, #16]
   b8b9c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b8ba0:	6013      	str	r3, [r2, #0]
   b8ba2:	2301      	movs	r3, #1
   b8ba4:	6123      	str	r3, [r4, #16]
   b8ba6:	f8c9 3000 	str.w	r3, [r9]
   b8baa:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b8bac:	2762      	movs	r7, #98	; 0x62
   b8bae:	601c      	str	r4, [r3, #0]
   b8bb0:	e723      	b.n	b89fa <__gethex+0x12a>
   b8bb2:	bf00      	nop
   b8bb4:	000ba148 	.word	0x000ba148
   b8bb8:	000ba0b1 	.word	0x000ba0b1
   b8bbc:	000ba0c2 	.word	0x000ba0c2
   b8bc0:	1e71      	subs	r1, r6, #1
   b8bc2:	4620      	mov	r0, r4
   b8bc4:	f000 fe42 	bl	b984c <__any_on>
   b8bc8:	2800      	cmp	r0, #0
   b8bca:	d1e6      	bne.n	b8b9a <__gethex+0x2ca>
   b8bcc:	ee18 0a10 	vmov	r0, s16
   b8bd0:	4621      	mov	r1, r4
   b8bd2:	f000 f9db 	bl	b8f8c <_Bfree>
   b8bd6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b8bd8:	2300      	movs	r3, #0
   b8bda:	6013      	str	r3, [r2, #0]
   b8bdc:	2750      	movs	r7, #80	; 0x50
   b8bde:	e70c      	b.n	b89fa <__gethex+0x12a>
   b8be0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b8be2:	2b00      	cmp	r3, #0
   b8be4:	d1f2      	bne.n	b8bcc <__gethex+0x2fc>
   b8be6:	e7d8      	b.n	b8b9a <__gethex+0x2ca>
   b8be8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b8bea:	2b00      	cmp	r3, #0
   b8bec:	d1d5      	bne.n	b8b9a <__gethex+0x2ca>
   b8bee:	e7ed      	b.n	b8bcc <__gethex+0x2fc>
   b8bf0:	1e6f      	subs	r7, r5, #1
   b8bf2:	f1ba 0f00 	cmp.w	sl, #0
   b8bf6:	d131      	bne.n	b8c5c <__gethex+0x38c>
   b8bf8:	b127      	cbz	r7, b8c04 <__gethex+0x334>
   b8bfa:	4639      	mov	r1, r7
   b8bfc:	4620      	mov	r0, r4
   b8bfe:	f000 fe25 	bl	b984c <__any_on>
   b8c02:	4682      	mov	sl, r0
   b8c04:	117b      	asrs	r3, r7, #5
   b8c06:	2101      	movs	r1, #1
   b8c08:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   b8c0c:	f007 071f 	and.w	r7, r7, #31
   b8c10:	fa01 f707 	lsl.w	r7, r1, r7
   b8c14:	421f      	tst	r7, r3
   b8c16:	4629      	mov	r1, r5
   b8c18:	4620      	mov	r0, r4
   b8c1a:	bf18      	it	ne
   b8c1c:	f04a 0a02 	orrne.w	sl, sl, #2
   b8c20:	1b76      	subs	r6, r6, r5
   b8c22:	f7ff fded 	bl	b8800 <rshift>
   b8c26:	f8d8 5004 	ldr.w	r5, [r8, #4]
   b8c2a:	2702      	movs	r7, #2
   b8c2c:	f1ba 0f00 	cmp.w	sl, #0
   b8c30:	d048      	beq.n	b8cc4 <__gethex+0x3f4>
   b8c32:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b8c36:	2b02      	cmp	r3, #2
   b8c38:	d015      	beq.n	b8c66 <__gethex+0x396>
   b8c3a:	2b03      	cmp	r3, #3
   b8c3c:	d017      	beq.n	b8c6e <__gethex+0x39e>
   b8c3e:	2b01      	cmp	r3, #1
   b8c40:	d109      	bne.n	b8c56 <__gethex+0x386>
   b8c42:	f01a 0f02 	tst.w	sl, #2
   b8c46:	d006      	beq.n	b8c56 <__gethex+0x386>
   b8c48:	f8d9 0000 	ldr.w	r0, [r9]
   b8c4c:	ea4a 0a00 	orr.w	sl, sl, r0
   b8c50:	f01a 0f01 	tst.w	sl, #1
   b8c54:	d10e      	bne.n	b8c74 <__gethex+0x3a4>
   b8c56:	f047 0710 	orr.w	r7, r7, #16
   b8c5a:	e033      	b.n	b8cc4 <__gethex+0x3f4>
   b8c5c:	f04f 0a01 	mov.w	sl, #1
   b8c60:	e7d0      	b.n	b8c04 <__gethex+0x334>
   b8c62:	2701      	movs	r7, #1
   b8c64:	e7e2      	b.n	b8c2c <__gethex+0x35c>
   b8c66:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b8c68:	f1c3 0301 	rsb	r3, r3, #1
   b8c6c:	9315      	str	r3, [sp, #84]	; 0x54
   b8c6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b8c70:	2b00      	cmp	r3, #0
   b8c72:	d0f0      	beq.n	b8c56 <__gethex+0x386>
   b8c74:	f8d4 b010 	ldr.w	fp, [r4, #16]
   b8c78:	f104 0314 	add.w	r3, r4, #20
   b8c7c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   b8c80:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   b8c84:	f04f 0c00 	mov.w	ip, #0
   b8c88:	4618      	mov	r0, r3
   b8c8a:	f853 2b04 	ldr.w	r2, [r3], #4
   b8c8e:	f1b2 3fff 	cmp.w	r2, #4294967295
   b8c92:	d01c      	beq.n	b8cce <__gethex+0x3fe>
   b8c94:	3201      	adds	r2, #1
   b8c96:	6002      	str	r2, [r0, #0]
   b8c98:	2f02      	cmp	r7, #2
   b8c9a:	f104 0314 	add.w	r3, r4, #20
   b8c9e:	d13f      	bne.n	b8d20 <__gethex+0x450>
   b8ca0:	f8d8 2000 	ldr.w	r2, [r8]
   b8ca4:	3a01      	subs	r2, #1
   b8ca6:	42b2      	cmp	r2, r6
   b8ca8:	d10a      	bne.n	b8cc0 <__gethex+0x3f0>
   b8caa:	1171      	asrs	r1, r6, #5
   b8cac:	2201      	movs	r2, #1
   b8cae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   b8cb2:	f006 061f 	and.w	r6, r6, #31
   b8cb6:	fa02 f606 	lsl.w	r6, r2, r6
   b8cba:	421e      	tst	r6, r3
   b8cbc:	bf18      	it	ne
   b8cbe:	4617      	movne	r7, r2
   b8cc0:	f047 0720 	orr.w	r7, r7, #32
   b8cc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b8cc6:	601c      	str	r4, [r3, #0]
   b8cc8:	9b04      	ldr	r3, [sp, #16]
   b8cca:	601d      	str	r5, [r3, #0]
   b8ccc:	e695      	b.n	b89fa <__gethex+0x12a>
   b8cce:	4299      	cmp	r1, r3
   b8cd0:	f843 cc04 	str.w	ip, [r3, #-4]
   b8cd4:	d8d8      	bhi.n	b8c88 <__gethex+0x3b8>
   b8cd6:	68a3      	ldr	r3, [r4, #8]
   b8cd8:	459b      	cmp	fp, r3
   b8cda:	db19      	blt.n	b8d10 <__gethex+0x440>
   b8cdc:	6861      	ldr	r1, [r4, #4]
   b8cde:	ee18 0a10 	vmov	r0, s16
   b8ce2:	3101      	adds	r1, #1
   b8ce4:	f000 f912 	bl	b8f0c <_Balloc>
   b8ce8:	4681      	mov	r9, r0
   b8cea:	b918      	cbnz	r0, b8cf4 <__gethex+0x424>
   b8cec:	4b1a      	ldr	r3, [pc, #104]	; (b8d58 <__gethex+0x488>)
   b8cee:	4602      	mov	r2, r0
   b8cf0:	2184      	movs	r1, #132	; 0x84
   b8cf2:	e6a8      	b.n	b8a46 <__gethex+0x176>
   b8cf4:	6922      	ldr	r2, [r4, #16]
   b8cf6:	3202      	adds	r2, #2
   b8cf8:	f104 010c 	add.w	r1, r4, #12
   b8cfc:	0092      	lsls	r2, r2, #2
   b8cfe:	300c      	adds	r0, #12
   b8d00:	f7fe fe49 	bl	b7996 <memcpy>
   b8d04:	4621      	mov	r1, r4
   b8d06:	ee18 0a10 	vmov	r0, s16
   b8d0a:	f000 f93f 	bl	b8f8c <_Bfree>
   b8d0e:	464c      	mov	r4, r9
   b8d10:	6923      	ldr	r3, [r4, #16]
   b8d12:	1c5a      	adds	r2, r3, #1
   b8d14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   b8d18:	6122      	str	r2, [r4, #16]
   b8d1a:	2201      	movs	r2, #1
   b8d1c:	615a      	str	r2, [r3, #20]
   b8d1e:	e7bb      	b.n	b8c98 <__gethex+0x3c8>
   b8d20:	6922      	ldr	r2, [r4, #16]
   b8d22:	455a      	cmp	r2, fp
   b8d24:	dd0b      	ble.n	b8d3e <__gethex+0x46e>
   b8d26:	2101      	movs	r1, #1
   b8d28:	4620      	mov	r0, r4
   b8d2a:	f7ff fd69 	bl	b8800 <rshift>
   b8d2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b8d32:	3501      	adds	r5, #1
   b8d34:	42ab      	cmp	r3, r5
   b8d36:	f6ff aed0 	blt.w	b8ada <__gethex+0x20a>
   b8d3a:	2701      	movs	r7, #1
   b8d3c:	e7c0      	b.n	b8cc0 <__gethex+0x3f0>
   b8d3e:	f016 061f 	ands.w	r6, r6, #31
   b8d42:	d0fa      	beq.n	b8d3a <__gethex+0x46a>
   b8d44:	4453      	add	r3, sl
   b8d46:	f1c6 0620 	rsb	r6, r6, #32
   b8d4a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   b8d4e:	f000 f9cf 	bl	b90f0 <__hi0bits>
   b8d52:	42b0      	cmp	r0, r6
   b8d54:	dbe7      	blt.n	b8d26 <__gethex+0x456>
   b8d56:	e7f0      	b.n	b8d3a <__gethex+0x46a>
   b8d58:	000ba0b1 	.word	0x000ba0b1

000b8d5c <L_shift>:
   b8d5c:	f1c2 0208 	rsb	r2, r2, #8
   b8d60:	0092      	lsls	r2, r2, #2
   b8d62:	b570      	push	{r4, r5, r6, lr}
   b8d64:	f1c2 0620 	rsb	r6, r2, #32
   b8d68:	6843      	ldr	r3, [r0, #4]
   b8d6a:	6804      	ldr	r4, [r0, #0]
   b8d6c:	fa03 f506 	lsl.w	r5, r3, r6
   b8d70:	432c      	orrs	r4, r5
   b8d72:	40d3      	lsrs	r3, r2
   b8d74:	6004      	str	r4, [r0, #0]
   b8d76:	f840 3f04 	str.w	r3, [r0, #4]!
   b8d7a:	4288      	cmp	r0, r1
   b8d7c:	d3f4      	bcc.n	b8d68 <L_shift+0xc>
   b8d7e:	bd70      	pop	{r4, r5, r6, pc}

000b8d80 <__match>:
   b8d80:	b530      	push	{r4, r5, lr}
   b8d82:	6803      	ldr	r3, [r0, #0]
   b8d84:	3301      	adds	r3, #1
   b8d86:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8d8a:	b914      	cbnz	r4, b8d92 <__match+0x12>
   b8d8c:	6003      	str	r3, [r0, #0]
   b8d8e:	2001      	movs	r0, #1
   b8d90:	bd30      	pop	{r4, r5, pc}
   b8d92:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8d96:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   b8d9a:	2d19      	cmp	r5, #25
   b8d9c:	bf98      	it	ls
   b8d9e:	3220      	addls	r2, #32
   b8da0:	42a2      	cmp	r2, r4
   b8da2:	d0f0      	beq.n	b8d86 <__match+0x6>
   b8da4:	2000      	movs	r0, #0
   b8da6:	e7f3      	b.n	b8d90 <__match+0x10>

000b8da8 <__hexnan>:
   b8da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8dac:	680b      	ldr	r3, [r1, #0]
   b8dae:	115e      	asrs	r6, r3, #5
   b8db0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   b8db4:	f013 031f 	ands.w	r3, r3, #31
   b8db8:	b087      	sub	sp, #28
   b8dba:	bf18      	it	ne
   b8dbc:	3604      	addne	r6, #4
   b8dbe:	2500      	movs	r5, #0
   b8dc0:	1f37      	subs	r7, r6, #4
   b8dc2:	4690      	mov	r8, r2
   b8dc4:	6802      	ldr	r2, [r0, #0]
   b8dc6:	9301      	str	r3, [sp, #4]
   b8dc8:	4682      	mov	sl, r0
   b8dca:	f846 5c04 	str.w	r5, [r6, #-4]
   b8dce:	46b9      	mov	r9, r7
   b8dd0:	463c      	mov	r4, r7
   b8dd2:	9502      	str	r5, [sp, #8]
   b8dd4:	46ab      	mov	fp, r5
   b8dd6:	7851      	ldrb	r1, [r2, #1]
   b8dd8:	1c53      	adds	r3, r2, #1
   b8dda:	9303      	str	r3, [sp, #12]
   b8ddc:	b341      	cbz	r1, b8e30 <__hexnan+0x88>
   b8dde:	4608      	mov	r0, r1
   b8de0:	9205      	str	r2, [sp, #20]
   b8de2:	9104      	str	r1, [sp, #16]
   b8de4:	f7ff fd5e 	bl	b88a4 <__hexdig_fun>
   b8de8:	2800      	cmp	r0, #0
   b8dea:	d14f      	bne.n	b8e8c <__hexnan+0xe4>
   b8dec:	9904      	ldr	r1, [sp, #16]
   b8dee:	9a05      	ldr	r2, [sp, #20]
   b8df0:	2920      	cmp	r1, #32
   b8df2:	d818      	bhi.n	b8e26 <__hexnan+0x7e>
   b8df4:	9b02      	ldr	r3, [sp, #8]
   b8df6:	459b      	cmp	fp, r3
   b8df8:	dd13      	ble.n	b8e22 <__hexnan+0x7a>
   b8dfa:	454c      	cmp	r4, r9
   b8dfc:	d206      	bcs.n	b8e0c <__hexnan+0x64>
   b8dfe:	2d07      	cmp	r5, #7
   b8e00:	dc04      	bgt.n	b8e0c <__hexnan+0x64>
   b8e02:	462a      	mov	r2, r5
   b8e04:	4649      	mov	r1, r9
   b8e06:	4620      	mov	r0, r4
   b8e08:	f7ff ffa8 	bl	b8d5c <L_shift>
   b8e0c:	4544      	cmp	r4, r8
   b8e0e:	d950      	bls.n	b8eb2 <__hexnan+0x10a>
   b8e10:	2300      	movs	r3, #0
   b8e12:	f1a4 0904 	sub.w	r9, r4, #4
   b8e16:	f844 3c04 	str.w	r3, [r4, #-4]
   b8e1a:	f8cd b008 	str.w	fp, [sp, #8]
   b8e1e:	464c      	mov	r4, r9
   b8e20:	461d      	mov	r5, r3
   b8e22:	9a03      	ldr	r2, [sp, #12]
   b8e24:	e7d7      	b.n	b8dd6 <__hexnan+0x2e>
   b8e26:	2929      	cmp	r1, #41	; 0x29
   b8e28:	d156      	bne.n	b8ed8 <__hexnan+0x130>
   b8e2a:	3202      	adds	r2, #2
   b8e2c:	f8ca 2000 	str.w	r2, [sl]
   b8e30:	f1bb 0f00 	cmp.w	fp, #0
   b8e34:	d050      	beq.n	b8ed8 <__hexnan+0x130>
   b8e36:	454c      	cmp	r4, r9
   b8e38:	d206      	bcs.n	b8e48 <__hexnan+0xa0>
   b8e3a:	2d07      	cmp	r5, #7
   b8e3c:	dc04      	bgt.n	b8e48 <__hexnan+0xa0>
   b8e3e:	462a      	mov	r2, r5
   b8e40:	4649      	mov	r1, r9
   b8e42:	4620      	mov	r0, r4
   b8e44:	f7ff ff8a 	bl	b8d5c <L_shift>
   b8e48:	4544      	cmp	r4, r8
   b8e4a:	d934      	bls.n	b8eb6 <__hexnan+0x10e>
   b8e4c:	f1a8 0204 	sub.w	r2, r8, #4
   b8e50:	4623      	mov	r3, r4
   b8e52:	f853 1b04 	ldr.w	r1, [r3], #4
   b8e56:	f842 1f04 	str.w	r1, [r2, #4]!
   b8e5a:	429f      	cmp	r7, r3
   b8e5c:	d2f9      	bcs.n	b8e52 <__hexnan+0xaa>
   b8e5e:	1b3b      	subs	r3, r7, r4
   b8e60:	f023 0303 	bic.w	r3, r3, #3
   b8e64:	3304      	adds	r3, #4
   b8e66:	3401      	adds	r4, #1
   b8e68:	3e03      	subs	r6, #3
   b8e6a:	42b4      	cmp	r4, r6
   b8e6c:	bf88      	it	hi
   b8e6e:	2304      	movhi	r3, #4
   b8e70:	4443      	add	r3, r8
   b8e72:	2200      	movs	r2, #0
   b8e74:	f843 2b04 	str.w	r2, [r3], #4
   b8e78:	429f      	cmp	r7, r3
   b8e7a:	d2fb      	bcs.n	b8e74 <__hexnan+0xcc>
   b8e7c:	683b      	ldr	r3, [r7, #0]
   b8e7e:	b91b      	cbnz	r3, b8e88 <__hexnan+0xe0>
   b8e80:	4547      	cmp	r7, r8
   b8e82:	d127      	bne.n	b8ed4 <__hexnan+0x12c>
   b8e84:	2301      	movs	r3, #1
   b8e86:	603b      	str	r3, [r7, #0]
   b8e88:	2005      	movs	r0, #5
   b8e8a:	e026      	b.n	b8eda <__hexnan+0x132>
   b8e8c:	3501      	adds	r5, #1
   b8e8e:	2d08      	cmp	r5, #8
   b8e90:	f10b 0b01 	add.w	fp, fp, #1
   b8e94:	dd06      	ble.n	b8ea4 <__hexnan+0xfc>
   b8e96:	4544      	cmp	r4, r8
   b8e98:	d9c3      	bls.n	b8e22 <__hexnan+0x7a>
   b8e9a:	2300      	movs	r3, #0
   b8e9c:	f844 3c04 	str.w	r3, [r4, #-4]
   b8ea0:	2501      	movs	r5, #1
   b8ea2:	3c04      	subs	r4, #4
   b8ea4:	6822      	ldr	r2, [r4, #0]
   b8ea6:	f000 000f 	and.w	r0, r0, #15
   b8eaa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   b8eae:	6022      	str	r2, [r4, #0]
   b8eb0:	e7b7      	b.n	b8e22 <__hexnan+0x7a>
   b8eb2:	2508      	movs	r5, #8
   b8eb4:	e7b5      	b.n	b8e22 <__hexnan+0x7a>
   b8eb6:	9b01      	ldr	r3, [sp, #4]
   b8eb8:	2b00      	cmp	r3, #0
   b8eba:	d0df      	beq.n	b8e7c <__hexnan+0xd4>
   b8ebc:	f04f 32ff 	mov.w	r2, #4294967295
   b8ec0:	f1c3 0320 	rsb	r3, r3, #32
   b8ec4:	fa22 f303 	lsr.w	r3, r2, r3
   b8ec8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   b8ecc:	401a      	ands	r2, r3
   b8ece:	f846 2c04 	str.w	r2, [r6, #-4]
   b8ed2:	e7d3      	b.n	b8e7c <__hexnan+0xd4>
   b8ed4:	3f04      	subs	r7, #4
   b8ed6:	e7d1      	b.n	b8e7c <__hexnan+0xd4>
   b8ed8:	2004      	movs	r0, #4
   b8eda:	b007      	add	sp, #28
   b8edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b8ee0 <__retarget_lock_acquire_recursive>:
   b8ee0:	4770      	bx	lr

000b8ee2 <__retarget_lock_release>:
   b8ee2:	4770      	bx	lr

000b8ee4 <__retarget_lock_release_recursive>:
   b8ee4:	4770      	bx	lr

000b8ee6 <__ascii_mbtowc>:
   b8ee6:	b082      	sub	sp, #8
   b8ee8:	b901      	cbnz	r1, b8eec <__ascii_mbtowc+0x6>
   b8eea:	a901      	add	r1, sp, #4
   b8eec:	b142      	cbz	r2, b8f00 <__ascii_mbtowc+0x1a>
   b8eee:	b14b      	cbz	r3, b8f04 <__ascii_mbtowc+0x1e>
   b8ef0:	7813      	ldrb	r3, [r2, #0]
   b8ef2:	600b      	str	r3, [r1, #0]
   b8ef4:	7812      	ldrb	r2, [r2, #0]
   b8ef6:	1e10      	subs	r0, r2, #0
   b8ef8:	bf18      	it	ne
   b8efa:	2001      	movne	r0, #1
   b8efc:	b002      	add	sp, #8
   b8efe:	4770      	bx	lr
   b8f00:	4610      	mov	r0, r2
   b8f02:	e7fb      	b.n	b8efc <__ascii_mbtowc+0x16>
   b8f04:	f06f 0001 	mvn.w	r0, #1
   b8f08:	e7f8      	b.n	b8efc <__ascii_mbtowc+0x16>
	...

000b8f0c <_Balloc>:
   b8f0c:	b570      	push	{r4, r5, r6, lr}
   b8f0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b8f10:	4604      	mov	r4, r0
   b8f12:	460d      	mov	r5, r1
   b8f14:	b976      	cbnz	r6, b8f34 <_Balloc+0x28>
   b8f16:	2010      	movs	r0, #16
   b8f18:	f7fc fbb0 	bl	b567c <malloc>
   b8f1c:	4602      	mov	r2, r0
   b8f1e:	6260      	str	r0, [r4, #36]	; 0x24
   b8f20:	b920      	cbnz	r0, b8f2c <_Balloc+0x20>
   b8f22:	4b18      	ldr	r3, [pc, #96]	; (b8f84 <_Balloc+0x78>)
   b8f24:	4818      	ldr	r0, [pc, #96]	; (b8f88 <_Balloc+0x7c>)
   b8f26:	2166      	movs	r1, #102	; 0x66
   b8f28:	f7fc fbe0 	bl	b56ec <__assert_func>
   b8f2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b8f30:	6006      	str	r6, [r0, #0]
   b8f32:	60c6      	str	r6, [r0, #12]
   b8f34:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b8f36:	68f3      	ldr	r3, [r6, #12]
   b8f38:	b183      	cbz	r3, b8f5c <_Balloc+0x50>
   b8f3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b8f3c:	68db      	ldr	r3, [r3, #12]
   b8f3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   b8f42:	b9b8      	cbnz	r0, b8f74 <_Balloc+0x68>
   b8f44:	2101      	movs	r1, #1
   b8f46:	fa01 f605 	lsl.w	r6, r1, r5
   b8f4a:	1d72      	adds	r2, r6, #5
   b8f4c:	0092      	lsls	r2, r2, #2
   b8f4e:	4620      	mov	r0, r4
   b8f50:	f000 fc9d 	bl	b988e <_calloc_r>
   b8f54:	b160      	cbz	r0, b8f70 <_Balloc+0x64>
   b8f56:	e9c0 5601 	strd	r5, r6, [r0, #4]
   b8f5a:	e00e      	b.n	b8f7a <_Balloc+0x6e>
   b8f5c:	2221      	movs	r2, #33	; 0x21
   b8f5e:	2104      	movs	r1, #4
   b8f60:	4620      	mov	r0, r4
   b8f62:	f000 fc94 	bl	b988e <_calloc_r>
   b8f66:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b8f68:	60f0      	str	r0, [r6, #12]
   b8f6a:	68db      	ldr	r3, [r3, #12]
   b8f6c:	2b00      	cmp	r3, #0
   b8f6e:	d1e4      	bne.n	b8f3a <_Balloc+0x2e>
   b8f70:	2000      	movs	r0, #0
   b8f72:	bd70      	pop	{r4, r5, r6, pc}
   b8f74:	6802      	ldr	r2, [r0, #0]
   b8f76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   b8f7a:	2300      	movs	r3, #0
   b8f7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   b8f80:	e7f7      	b.n	b8f72 <_Balloc+0x66>
   b8f82:	bf00      	nop
   b8f84:	000b9ec2 	.word	0x000b9ec2
   b8f88:	000ba15c 	.word	0x000ba15c

000b8f8c <_Bfree>:
   b8f8c:	b570      	push	{r4, r5, r6, lr}
   b8f8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b8f90:	4605      	mov	r5, r0
   b8f92:	460c      	mov	r4, r1
   b8f94:	b976      	cbnz	r6, b8fb4 <_Bfree+0x28>
   b8f96:	2010      	movs	r0, #16
   b8f98:	f7fc fb70 	bl	b567c <malloc>
   b8f9c:	4602      	mov	r2, r0
   b8f9e:	6268      	str	r0, [r5, #36]	; 0x24
   b8fa0:	b920      	cbnz	r0, b8fac <_Bfree+0x20>
   b8fa2:	4b09      	ldr	r3, [pc, #36]	; (b8fc8 <_Bfree+0x3c>)
   b8fa4:	4809      	ldr	r0, [pc, #36]	; (b8fcc <_Bfree+0x40>)
   b8fa6:	218a      	movs	r1, #138	; 0x8a
   b8fa8:	f7fc fba0 	bl	b56ec <__assert_func>
   b8fac:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b8fb0:	6006      	str	r6, [r0, #0]
   b8fb2:	60c6      	str	r6, [r0, #12]
   b8fb4:	b13c      	cbz	r4, b8fc6 <_Bfree+0x3a>
   b8fb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b8fb8:	6862      	ldr	r2, [r4, #4]
   b8fba:	68db      	ldr	r3, [r3, #12]
   b8fbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b8fc0:	6021      	str	r1, [r4, #0]
   b8fc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b8fc6:	bd70      	pop	{r4, r5, r6, pc}
   b8fc8:	000b9ec2 	.word	0x000b9ec2
   b8fcc:	000ba15c 	.word	0x000ba15c

000b8fd0 <__multadd>:
   b8fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8fd4:	690d      	ldr	r5, [r1, #16]
   b8fd6:	4607      	mov	r7, r0
   b8fd8:	460c      	mov	r4, r1
   b8fda:	461e      	mov	r6, r3
   b8fdc:	f101 0c14 	add.w	ip, r1, #20
   b8fe0:	2000      	movs	r0, #0
   b8fe2:	f8dc 3000 	ldr.w	r3, [ip]
   b8fe6:	b299      	uxth	r1, r3
   b8fe8:	fb02 6101 	mla	r1, r2, r1, r6
   b8fec:	0c1e      	lsrs	r6, r3, #16
   b8fee:	0c0b      	lsrs	r3, r1, #16
   b8ff0:	fb02 3306 	mla	r3, r2, r6, r3
   b8ff4:	b289      	uxth	r1, r1
   b8ff6:	3001      	adds	r0, #1
   b8ff8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   b8ffc:	4285      	cmp	r5, r0
   b8ffe:	f84c 1b04 	str.w	r1, [ip], #4
   b9002:	ea4f 4613 	mov.w	r6, r3, lsr #16
   b9006:	dcec      	bgt.n	b8fe2 <__multadd+0x12>
   b9008:	b30e      	cbz	r6, b904e <__multadd+0x7e>
   b900a:	68a3      	ldr	r3, [r4, #8]
   b900c:	42ab      	cmp	r3, r5
   b900e:	dc19      	bgt.n	b9044 <__multadd+0x74>
   b9010:	6861      	ldr	r1, [r4, #4]
   b9012:	4638      	mov	r0, r7
   b9014:	3101      	adds	r1, #1
   b9016:	f7ff ff79 	bl	b8f0c <_Balloc>
   b901a:	4680      	mov	r8, r0
   b901c:	b928      	cbnz	r0, b902a <__multadd+0x5a>
   b901e:	4602      	mov	r2, r0
   b9020:	4b0c      	ldr	r3, [pc, #48]	; (b9054 <__multadd+0x84>)
   b9022:	480d      	ldr	r0, [pc, #52]	; (b9058 <__multadd+0x88>)
   b9024:	21b5      	movs	r1, #181	; 0xb5
   b9026:	f7fc fb61 	bl	b56ec <__assert_func>
   b902a:	6922      	ldr	r2, [r4, #16]
   b902c:	3202      	adds	r2, #2
   b902e:	f104 010c 	add.w	r1, r4, #12
   b9032:	0092      	lsls	r2, r2, #2
   b9034:	300c      	adds	r0, #12
   b9036:	f7fe fcae 	bl	b7996 <memcpy>
   b903a:	4621      	mov	r1, r4
   b903c:	4638      	mov	r0, r7
   b903e:	f7ff ffa5 	bl	b8f8c <_Bfree>
   b9042:	4644      	mov	r4, r8
   b9044:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   b9048:	3501      	adds	r5, #1
   b904a:	615e      	str	r6, [r3, #20]
   b904c:	6125      	str	r5, [r4, #16]
   b904e:	4620      	mov	r0, r4
   b9050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9054:	000ba0b1 	.word	0x000ba0b1
   b9058:	000ba15c 	.word	0x000ba15c

000b905c <__s2b>:
   b905c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9060:	460c      	mov	r4, r1
   b9062:	4615      	mov	r5, r2
   b9064:	461f      	mov	r7, r3
   b9066:	2209      	movs	r2, #9
   b9068:	3308      	adds	r3, #8
   b906a:	4606      	mov	r6, r0
   b906c:	fb93 f3f2 	sdiv	r3, r3, r2
   b9070:	2100      	movs	r1, #0
   b9072:	2201      	movs	r2, #1
   b9074:	429a      	cmp	r2, r3
   b9076:	db09      	blt.n	b908c <__s2b+0x30>
   b9078:	4630      	mov	r0, r6
   b907a:	f7ff ff47 	bl	b8f0c <_Balloc>
   b907e:	b940      	cbnz	r0, b9092 <__s2b+0x36>
   b9080:	4602      	mov	r2, r0
   b9082:	4b19      	ldr	r3, [pc, #100]	; (b90e8 <__s2b+0x8c>)
   b9084:	4819      	ldr	r0, [pc, #100]	; (b90ec <__s2b+0x90>)
   b9086:	21ce      	movs	r1, #206	; 0xce
   b9088:	f7fc fb30 	bl	b56ec <__assert_func>
   b908c:	0052      	lsls	r2, r2, #1
   b908e:	3101      	adds	r1, #1
   b9090:	e7f0      	b.n	b9074 <__s2b+0x18>
   b9092:	9b08      	ldr	r3, [sp, #32]
   b9094:	6143      	str	r3, [r0, #20]
   b9096:	2d09      	cmp	r5, #9
   b9098:	f04f 0301 	mov.w	r3, #1
   b909c:	6103      	str	r3, [r0, #16]
   b909e:	dd16      	ble.n	b90ce <__s2b+0x72>
   b90a0:	f104 0909 	add.w	r9, r4, #9
   b90a4:	46c8      	mov	r8, r9
   b90a6:	442c      	add	r4, r5
   b90a8:	f818 3b01 	ldrb.w	r3, [r8], #1
   b90ac:	4601      	mov	r1, r0
   b90ae:	3b30      	subs	r3, #48	; 0x30
   b90b0:	220a      	movs	r2, #10
   b90b2:	4630      	mov	r0, r6
   b90b4:	f7ff ff8c 	bl	b8fd0 <__multadd>
   b90b8:	45a0      	cmp	r8, r4
   b90ba:	d1f5      	bne.n	b90a8 <__s2b+0x4c>
   b90bc:	f1a5 0408 	sub.w	r4, r5, #8
   b90c0:	444c      	add	r4, r9
   b90c2:	1b2d      	subs	r5, r5, r4
   b90c4:	1963      	adds	r3, r4, r5
   b90c6:	42bb      	cmp	r3, r7
   b90c8:	db04      	blt.n	b90d4 <__s2b+0x78>
   b90ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b90ce:	340a      	adds	r4, #10
   b90d0:	2509      	movs	r5, #9
   b90d2:	e7f6      	b.n	b90c2 <__s2b+0x66>
   b90d4:	f814 3b01 	ldrb.w	r3, [r4], #1
   b90d8:	4601      	mov	r1, r0
   b90da:	3b30      	subs	r3, #48	; 0x30
   b90dc:	220a      	movs	r2, #10
   b90de:	4630      	mov	r0, r6
   b90e0:	f7ff ff76 	bl	b8fd0 <__multadd>
   b90e4:	e7ee      	b.n	b90c4 <__s2b+0x68>
   b90e6:	bf00      	nop
   b90e8:	000ba0b1 	.word	0x000ba0b1
   b90ec:	000ba15c 	.word	0x000ba15c

000b90f0 <__hi0bits>:
   b90f0:	0c03      	lsrs	r3, r0, #16
   b90f2:	041b      	lsls	r3, r3, #16
   b90f4:	b9d3      	cbnz	r3, b912c <__hi0bits+0x3c>
   b90f6:	0400      	lsls	r0, r0, #16
   b90f8:	2310      	movs	r3, #16
   b90fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   b90fe:	bf04      	itt	eq
   b9100:	0200      	lsleq	r0, r0, #8
   b9102:	3308      	addeq	r3, #8
   b9104:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   b9108:	bf04      	itt	eq
   b910a:	0100      	lsleq	r0, r0, #4
   b910c:	3304      	addeq	r3, #4
   b910e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   b9112:	bf04      	itt	eq
   b9114:	0080      	lsleq	r0, r0, #2
   b9116:	3302      	addeq	r3, #2
   b9118:	2800      	cmp	r0, #0
   b911a:	db05      	blt.n	b9128 <__hi0bits+0x38>
   b911c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   b9120:	f103 0301 	add.w	r3, r3, #1
   b9124:	bf08      	it	eq
   b9126:	2320      	moveq	r3, #32
   b9128:	4618      	mov	r0, r3
   b912a:	4770      	bx	lr
   b912c:	2300      	movs	r3, #0
   b912e:	e7e4      	b.n	b90fa <__hi0bits+0xa>

000b9130 <__lo0bits>:
   b9130:	6803      	ldr	r3, [r0, #0]
   b9132:	f013 0207 	ands.w	r2, r3, #7
   b9136:	4601      	mov	r1, r0
   b9138:	d00b      	beq.n	b9152 <__lo0bits+0x22>
   b913a:	07da      	lsls	r2, r3, #31
   b913c:	d423      	bmi.n	b9186 <__lo0bits+0x56>
   b913e:	0798      	lsls	r0, r3, #30
   b9140:	bf49      	itett	mi
   b9142:	085b      	lsrmi	r3, r3, #1
   b9144:	089b      	lsrpl	r3, r3, #2
   b9146:	2001      	movmi	r0, #1
   b9148:	600b      	strmi	r3, [r1, #0]
   b914a:	bf5c      	itt	pl
   b914c:	600b      	strpl	r3, [r1, #0]
   b914e:	2002      	movpl	r0, #2
   b9150:	4770      	bx	lr
   b9152:	b298      	uxth	r0, r3
   b9154:	b9a8      	cbnz	r0, b9182 <__lo0bits+0x52>
   b9156:	0c1b      	lsrs	r3, r3, #16
   b9158:	2010      	movs	r0, #16
   b915a:	b2da      	uxtb	r2, r3
   b915c:	b90a      	cbnz	r2, b9162 <__lo0bits+0x32>
   b915e:	3008      	adds	r0, #8
   b9160:	0a1b      	lsrs	r3, r3, #8
   b9162:	071a      	lsls	r2, r3, #28
   b9164:	bf04      	itt	eq
   b9166:	091b      	lsreq	r3, r3, #4
   b9168:	3004      	addeq	r0, #4
   b916a:	079a      	lsls	r2, r3, #30
   b916c:	bf04      	itt	eq
   b916e:	089b      	lsreq	r3, r3, #2
   b9170:	3002      	addeq	r0, #2
   b9172:	07da      	lsls	r2, r3, #31
   b9174:	d403      	bmi.n	b917e <__lo0bits+0x4e>
   b9176:	085b      	lsrs	r3, r3, #1
   b9178:	f100 0001 	add.w	r0, r0, #1
   b917c:	d005      	beq.n	b918a <__lo0bits+0x5a>
   b917e:	600b      	str	r3, [r1, #0]
   b9180:	4770      	bx	lr
   b9182:	4610      	mov	r0, r2
   b9184:	e7e9      	b.n	b915a <__lo0bits+0x2a>
   b9186:	2000      	movs	r0, #0
   b9188:	4770      	bx	lr
   b918a:	2020      	movs	r0, #32
   b918c:	4770      	bx	lr
	...

000b9190 <__i2b>:
   b9190:	b510      	push	{r4, lr}
   b9192:	460c      	mov	r4, r1
   b9194:	2101      	movs	r1, #1
   b9196:	f7ff feb9 	bl	b8f0c <_Balloc>
   b919a:	4602      	mov	r2, r0
   b919c:	b928      	cbnz	r0, b91aa <__i2b+0x1a>
   b919e:	4b05      	ldr	r3, [pc, #20]	; (b91b4 <__i2b+0x24>)
   b91a0:	4805      	ldr	r0, [pc, #20]	; (b91b8 <__i2b+0x28>)
   b91a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
   b91a6:	f7fc faa1 	bl	b56ec <__assert_func>
   b91aa:	2301      	movs	r3, #1
   b91ac:	6144      	str	r4, [r0, #20]
   b91ae:	6103      	str	r3, [r0, #16]
   b91b0:	bd10      	pop	{r4, pc}
   b91b2:	bf00      	nop
   b91b4:	000ba0b1 	.word	0x000ba0b1
   b91b8:	000ba15c 	.word	0x000ba15c

000b91bc <__multiply>:
   b91bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b91c0:	4691      	mov	r9, r2
   b91c2:	690a      	ldr	r2, [r1, #16]
   b91c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b91c8:	429a      	cmp	r2, r3
   b91ca:	bfb8      	it	lt
   b91cc:	460b      	movlt	r3, r1
   b91ce:	460c      	mov	r4, r1
   b91d0:	bfbc      	itt	lt
   b91d2:	464c      	movlt	r4, r9
   b91d4:	4699      	movlt	r9, r3
   b91d6:	6927      	ldr	r7, [r4, #16]
   b91d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
   b91dc:	68a3      	ldr	r3, [r4, #8]
   b91de:	6861      	ldr	r1, [r4, #4]
   b91e0:	eb07 060a 	add.w	r6, r7, sl
   b91e4:	42b3      	cmp	r3, r6
   b91e6:	b085      	sub	sp, #20
   b91e8:	bfb8      	it	lt
   b91ea:	3101      	addlt	r1, #1
   b91ec:	f7ff fe8e 	bl	b8f0c <_Balloc>
   b91f0:	b930      	cbnz	r0, b9200 <__multiply+0x44>
   b91f2:	4602      	mov	r2, r0
   b91f4:	4b44      	ldr	r3, [pc, #272]	; (b9308 <__multiply+0x14c>)
   b91f6:	4845      	ldr	r0, [pc, #276]	; (b930c <__multiply+0x150>)
   b91f8:	f240 115d 	movw	r1, #349	; 0x15d
   b91fc:	f7fc fa76 	bl	b56ec <__assert_func>
   b9200:	f100 0514 	add.w	r5, r0, #20
   b9204:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   b9208:	462b      	mov	r3, r5
   b920a:	2200      	movs	r2, #0
   b920c:	4543      	cmp	r3, r8
   b920e:	d321      	bcc.n	b9254 <__multiply+0x98>
   b9210:	f104 0314 	add.w	r3, r4, #20
   b9214:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   b9218:	f109 0314 	add.w	r3, r9, #20
   b921c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   b9220:	9202      	str	r2, [sp, #8]
   b9222:	1b3a      	subs	r2, r7, r4
   b9224:	3a15      	subs	r2, #21
   b9226:	f022 0203 	bic.w	r2, r2, #3
   b922a:	3204      	adds	r2, #4
   b922c:	f104 0115 	add.w	r1, r4, #21
   b9230:	428f      	cmp	r7, r1
   b9232:	bf38      	it	cc
   b9234:	2204      	movcc	r2, #4
   b9236:	9201      	str	r2, [sp, #4]
   b9238:	9a02      	ldr	r2, [sp, #8]
   b923a:	9303      	str	r3, [sp, #12]
   b923c:	429a      	cmp	r2, r3
   b923e:	d80c      	bhi.n	b925a <__multiply+0x9e>
   b9240:	2e00      	cmp	r6, #0
   b9242:	dd03      	ble.n	b924c <__multiply+0x90>
   b9244:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   b9248:	2b00      	cmp	r3, #0
   b924a:	d05a      	beq.n	b9302 <__multiply+0x146>
   b924c:	6106      	str	r6, [r0, #16]
   b924e:	b005      	add	sp, #20
   b9250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9254:	f843 2b04 	str.w	r2, [r3], #4
   b9258:	e7d8      	b.n	b920c <__multiply+0x50>
   b925a:	f8b3 a000 	ldrh.w	sl, [r3]
   b925e:	f1ba 0f00 	cmp.w	sl, #0
   b9262:	d024      	beq.n	b92ae <__multiply+0xf2>
   b9264:	f104 0e14 	add.w	lr, r4, #20
   b9268:	46a9      	mov	r9, r5
   b926a:	f04f 0c00 	mov.w	ip, #0
   b926e:	f85e 2b04 	ldr.w	r2, [lr], #4
   b9272:	f8d9 1000 	ldr.w	r1, [r9]
   b9276:	fa1f fb82 	uxth.w	fp, r2
   b927a:	b289      	uxth	r1, r1
   b927c:	fb0a 110b 	mla	r1, sl, fp, r1
   b9280:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   b9284:	f8d9 2000 	ldr.w	r2, [r9]
   b9288:	4461      	add	r1, ip
   b928a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b928e:	fb0a c20b 	mla	r2, sl, fp, ip
   b9292:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   b9296:	b289      	uxth	r1, r1
   b9298:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   b929c:	4577      	cmp	r7, lr
   b929e:	f849 1b04 	str.w	r1, [r9], #4
   b92a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b92a6:	d8e2      	bhi.n	b926e <__multiply+0xb2>
   b92a8:	9a01      	ldr	r2, [sp, #4]
   b92aa:	f845 c002 	str.w	ip, [r5, r2]
   b92ae:	9a03      	ldr	r2, [sp, #12]
   b92b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   b92b4:	3304      	adds	r3, #4
   b92b6:	f1b9 0f00 	cmp.w	r9, #0
   b92ba:	d020      	beq.n	b92fe <__multiply+0x142>
   b92bc:	6829      	ldr	r1, [r5, #0]
   b92be:	f104 0c14 	add.w	ip, r4, #20
   b92c2:	46ae      	mov	lr, r5
   b92c4:	f04f 0a00 	mov.w	sl, #0
   b92c8:	f8bc b000 	ldrh.w	fp, [ip]
   b92cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
   b92d0:	fb09 220b 	mla	r2, r9, fp, r2
   b92d4:	4492      	add	sl, r2
   b92d6:	b289      	uxth	r1, r1
   b92d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   b92dc:	f84e 1b04 	str.w	r1, [lr], #4
   b92e0:	f85c 2b04 	ldr.w	r2, [ip], #4
   b92e4:	f8be 1000 	ldrh.w	r1, [lr]
   b92e8:	0c12      	lsrs	r2, r2, #16
   b92ea:	fb09 1102 	mla	r1, r9, r2, r1
   b92ee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   b92f2:	4567      	cmp	r7, ip
   b92f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   b92f8:	d8e6      	bhi.n	b92c8 <__multiply+0x10c>
   b92fa:	9a01      	ldr	r2, [sp, #4]
   b92fc:	50a9      	str	r1, [r5, r2]
   b92fe:	3504      	adds	r5, #4
   b9300:	e79a      	b.n	b9238 <__multiply+0x7c>
   b9302:	3e01      	subs	r6, #1
   b9304:	e79c      	b.n	b9240 <__multiply+0x84>
   b9306:	bf00      	nop
   b9308:	000ba0b1 	.word	0x000ba0b1
   b930c:	000ba15c 	.word	0x000ba15c

000b9310 <__pow5mult>:
   b9310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9314:	4615      	mov	r5, r2
   b9316:	f012 0203 	ands.w	r2, r2, #3
   b931a:	4606      	mov	r6, r0
   b931c:	460f      	mov	r7, r1
   b931e:	d007      	beq.n	b9330 <__pow5mult+0x20>
   b9320:	4c25      	ldr	r4, [pc, #148]	; (b93b8 <__pow5mult+0xa8>)
   b9322:	3a01      	subs	r2, #1
   b9324:	2300      	movs	r3, #0
   b9326:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   b932a:	f7ff fe51 	bl	b8fd0 <__multadd>
   b932e:	4607      	mov	r7, r0
   b9330:	10ad      	asrs	r5, r5, #2
   b9332:	d03d      	beq.n	b93b0 <__pow5mult+0xa0>
   b9334:	6a74      	ldr	r4, [r6, #36]	; 0x24
   b9336:	b97c      	cbnz	r4, b9358 <__pow5mult+0x48>
   b9338:	2010      	movs	r0, #16
   b933a:	f7fc f99f 	bl	b567c <malloc>
   b933e:	4602      	mov	r2, r0
   b9340:	6270      	str	r0, [r6, #36]	; 0x24
   b9342:	b928      	cbnz	r0, b9350 <__pow5mult+0x40>
   b9344:	4b1d      	ldr	r3, [pc, #116]	; (b93bc <__pow5mult+0xac>)
   b9346:	481e      	ldr	r0, [pc, #120]	; (b93c0 <__pow5mult+0xb0>)
   b9348:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   b934c:	f7fc f9ce 	bl	b56ec <__assert_func>
   b9350:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b9354:	6004      	str	r4, [r0, #0]
   b9356:	60c4      	str	r4, [r0, #12]
   b9358:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   b935c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   b9360:	b94c      	cbnz	r4, b9376 <__pow5mult+0x66>
   b9362:	f240 2171 	movw	r1, #625	; 0x271
   b9366:	4630      	mov	r0, r6
   b9368:	f7ff ff12 	bl	b9190 <__i2b>
   b936c:	2300      	movs	r3, #0
   b936e:	f8c8 0008 	str.w	r0, [r8, #8]
   b9372:	4604      	mov	r4, r0
   b9374:	6003      	str	r3, [r0, #0]
   b9376:	f04f 0900 	mov.w	r9, #0
   b937a:	07eb      	lsls	r3, r5, #31
   b937c:	d50a      	bpl.n	b9394 <__pow5mult+0x84>
   b937e:	4639      	mov	r1, r7
   b9380:	4622      	mov	r2, r4
   b9382:	4630      	mov	r0, r6
   b9384:	f7ff ff1a 	bl	b91bc <__multiply>
   b9388:	4639      	mov	r1, r7
   b938a:	4680      	mov	r8, r0
   b938c:	4630      	mov	r0, r6
   b938e:	f7ff fdfd 	bl	b8f8c <_Bfree>
   b9392:	4647      	mov	r7, r8
   b9394:	106d      	asrs	r5, r5, #1
   b9396:	d00b      	beq.n	b93b0 <__pow5mult+0xa0>
   b9398:	6820      	ldr	r0, [r4, #0]
   b939a:	b938      	cbnz	r0, b93ac <__pow5mult+0x9c>
   b939c:	4622      	mov	r2, r4
   b939e:	4621      	mov	r1, r4
   b93a0:	4630      	mov	r0, r6
   b93a2:	f7ff ff0b 	bl	b91bc <__multiply>
   b93a6:	6020      	str	r0, [r4, #0]
   b93a8:	f8c0 9000 	str.w	r9, [r0]
   b93ac:	4604      	mov	r4, r0
   b93ae:	e7e4      	b.n	b937a <__pow5mult+0x6a>
   b93b0:	4638      	mov	r0, r7
   b93b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b93b6:	bf00      	nop
   b93b8:	000ba2d0 	.word	0x000ba2d0
   b93bc:	000b9ec2 	.word	0x000b9ec2
   b93c0:	000ba15c 	.word	0x000ba15c

000b93c4 <__lshift>:
   b93c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b93c8:	460c      	mov	r4, r1
   b93ca:	6849      	ldr	r1, [r1, #4]
   b93cc:	6923      	ldr	r3, [r4, #16]
   b93ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
   b93d2:	68a3      	ldr	r3, [r4, #8]
   b93d4:	4607      	mov	r7, r0
   b93d6:	4691      	mov	r9, r2
   b93d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   b93dc:	f108 0601 	add.w	r6, r8, #1
   b93e0:	42b3      	cmp	r3, r6
   b93e2:	db0b      	blt.n	b93fc <__lshift+0x38>
   b93e4:	4638      	mov	r0, r7
   b93e6:	f7ff fd91 	bl	b8f0c <_Balloc>
   b93ea:	4605      	mov	r5, r0
   b93ec:	b948      	cbnz	r0, b9402 <__lshift+0x3e>
   b93ee:	4602      	mov	r2, r0
   b93f0:	4b2a      	ldr	r3, [pc, #168]	; (b949c <__lshift+0xd8>)
   b93f2:	482b      	ldr	r0, [pc, #172]	; (b94a0 <__lshift+0xdc>)
   b93f4:	f240 11d9 	movw	r1, #473	; 0x1d9
   b93f8:	f7fc f978 	bl	b56ec <__assert_func>
   b93fc:	3101      	adds	r1, #1
   b93fe:	005b      	lsls	r3, r3, #1
   b9400:	e7ee      	b.n	b93e0 <__lshift+0x1c>
   b9402:	2300      	movs	r3, #0
   b9404:	f100 0114 	add.w	r1, r0, #20
   b9408:	f100 0210 	add.w	r2, r0, #16
   b940c:	4618      	mov	r0, r3
   b940e:	4553      	cmp	r3, sl
   b9410:	db37      	blt.n	b9482 <__lshift+0xbe>
   b9412:	6920      	ldr	r0, [r4, #16]
   b9414:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   b9418:	f104 0314 	add.w	r3, r4, #20
   b941c:	f019 091f 	ands.w	r9, r9, #31
   b9420:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   b9424:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b9428:	d02f      	beq.n	b948a <__lshift+0xc6>
   b942a:	f1c9 0e20 	rsb	lr, r9, #32
   b942e:	468a      	mov	sl, r1
   b9430:	f04f 0c00 	mov.w	ip, #0
   b9434:	681a      	ldr	r2, [r3, #0]
   b9436:	fa02 f209 	lsl.w	r2, r2, r9
   b943a:	ea42 020c 	orr.w	r2, r2, ip
   b943e:	f84a 2b04 	str.w	r2, [sl], #4
   b9442:	f853 2b04 	ldr.w	r2, [r3], #4
   b9446:	4298      	cmp	r0, r3
   b9448:	fa22 fc0e 	lsr.w	ip, r2, lr
   b944c:	d8f2      	bhi.n	b9434 <__lshift+0x70>
   b944e:	1b03      	subs	r3, r0, r4
   b9450:	3b15      	subs	r3, #21
   b9452:	f023 0303 	bic.w	r3, r3, #3
   b9456:	3304      	adds	r3, #4
   b9458:	f104 0215 	add.w	r2, r4, #21
   b945c:	4290      	cmp	r0, r2
   b945e:	bf38      	it	cc
   b9460:	2304      	movcc	r3, #4
   b9462:	f841 c003 	str.w	ip, [r1, r3]
   b9466:	f1bc 0f00 	cmp.w	ip, #0
   b946a:	d001      	beq.n	b9470 <__lshift+0xac>
   b946c:	f108 0602 	add.w	r6, r8, #2
   b9470:	3e01      	subs	r6, #1
   b9472:	4638      	mov	r0, r7
   b9474:	612e      	str	r6, [r5, #16]
   b9476:	4621      	mov	r1, r4
   b9478:	f7ff fd88 	bl	b8f8c <_Bfree>
   b947c:	4628      	mov	r0, r5
   b947e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9482:	f842 0f04 	str.w	r0, [r2, #4]!
   b9486:	3301      	adds	r3, #1
   b9488:	e7c1      	b.n	b940e <__lshift+0x4a>
   b948a:	3904      	subs	r1, #4
   b948c:	f853 2b04 	ldr.w	r2, [r3], #4
   b9490:	f841 2f04 	str.w	r2, [r1, #4]!
   b9494:	4298      	cmp	r0, r3
   b9496:	d8f9      	bhi.n	b948c <__lshift+0xc8>
   b9498:	e7ea      	b.n	b9470 <__lshift+0xac>
   b949a:	bf00      	nop
   b949c:	000ba0b1 	.word	0x000ba0b1
   b94a0:	000ba15c 	.word	0x000ba15c

000b94a4 <__mcmp>:
   b94a4:	b530      	push	{r4, r5, lr}
   b94a6:	6902      	ldr	r2, [r0, #16]
   b94a8:	690c      	ldr	r4, [r1, #16]
   b94aa:	1b12      	subs	r2, r2, r4
   b94ac:	d10e      	bne.n	b94cc <__mcmp+0x28>
   b94ae:	f100 0314 	add.w	r3, r0, #20
   b94b2:	3114      	adds	r1, #20
   b94b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   b94b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   b94bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   b94c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   b94c4:	42a5      	cmp	r5, r4
   b94c6:	d003      	beq.n	b94d0 <__mcmp+0x2c>
   b94c8:	d305      	bcc.n	b94d6 <__mcmp+0x32>
   b94ca:	2201      	movs	r2, #1
   b94cc:	4610      	mov	r0, r2
   b94ce:	bd30      	pop	{r4, r5, pc}
   b94d0:	4283      	cmp	r3, r0
   b94d2:	d3f3      	bcc.n	b94bc <__mcmp+0x18>
   b94d4:	e7fa      	b.n	b94cc <__mcmp+0x28>
   b94d6:	f04f 32ff 	mov.w	r2, #4294967295
   b94da:	e7f7      	b.n	b94cc <__mcmp+0x28>

000b94dc <__mdiff>:
   b94dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b94e0:	460c      	mov	r4, r1
   b94e2:	4606      	mov	r6, r0
   b94e4:	4611      	mov	r1, r2
   b94e6:	4620      	mov	r0, r4
   b94e8:	4690      	mov	r8, r2
   b94ea:	f7ff ffdb 	bl	b94a4 <__mcmp>
   b94ee:	1e05      	subs	r5, r0, #0
   b94f0:	d110      	bne.n	b9514 <__mdiff+0x38>
   b94f2:	4629      	mov	r1, r5
   b94f4:	4630      	mov	r0, r6
   b94f6:	f7ff fd09 	bl	b8f0c <_Balloc>
   b94fa:	b930      	cbnz	r0, b950a <__mdiff+0x2e>
   b94fc:	4b3a      	ldr	r3, [pc, #232]	; (b95e8 <__mdiff+0x10c>)
   b94fe:	4602      	mov	r2, r0
   b9500:	f240 2132 	movw	r1, #562	; 0x232
   b9504:	4839      	ldr	r0, [pc, #228]	; (b95ec <__mdiff+0x110>)
   b9506:	f7fc f8f1 	bl	b56ec <__assert_func>
   b950a:	2301      	movs	r3, #1
   b950c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   b9510:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9514:	bfa4      	itt	ge
   b9516:	4643      	movge	r3, r8
   b9518:	46a0      	movge	r8, r4
   b951a:	4630      	mov	r0, r6
   b951c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   b9520:	bfa6      	itte	ge
   b9522:	461c      	movge	r4, r3
   b9524:	2500      	movge	r5, #0
   b9526:	2501      	movlt	r5, #1
   b9528:	f7ff fcf0 	bl	b8f0c <_Balloc>
   b952c:	b920      	cbnz	r0, b9538 <__mdiff+0x5c>
   b952e:	4b2e      	ldr	r3, [pc, #184]	; (b95e8 <__mdiff+0x10c>)
   b9530:	4602      	mov	r2, r0
   b9532:	f44f 7110 	mov.w	r1, #576	; 0x240
   b9536:	e7e5      	b.n	b9504 <__mdiff+0x28>
   b9538:	f8d8 7010 	ldr.w	r7, [r8, #16]
   b953c:	6926      	ldr	r6, [r4, #16]
   b953e:	60c5      	str	r5, [r0, #12]
   b9540:	f104 0914 	add.w	r9, r4, #20
   b9544:	f108 0514 	add.w	r5, r8, #20
   b9548:	f100 0e14 	add.w	lr, r0, #20
   b954c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   b9550:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   b9554:	f108 0210 	add.w	r2, r8, #16
   b9558:	46f2      	mov	sl, lr
   b955a:	2100      	movs	r1, #0
   b955c:	f859 3b04 	ldr.w	r3, [r9], #4
   b9560:	f852 bf04 	ldr.w	fp, [r2, #4]!
   b9564:	fa1f f883 	uxth.w	r8, r3
   b9568:	fa11 f18b 	uxtah	r1, r1, fp
   b956c:	0c1b      	lsrs	r3, r3, #16
   b956e:	eba1 0808 	sub.w	r8, r1, r8
   b9572:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   b9576:	eb03 4328 	add.w	r3, r3, r8, asr #16
   b957a:	fa1f f888 	uxth.w	r8, r8
   b957e:	1419      	asrs	r1, r3, #16
   b9580:	454e      	cmp	r6, r9
   b9582:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   b9586:	f84a 3b04 	str.w	r3, [sl], #4
   b958a:	d8e7      	bhi.n	b955c <__mdiff+0x80>
   b958c:	1b33      	subs	r3, r6, r4
   b958e:	3b15      	subs	r3, #21
   b9590:	f023 0303 	bic.w	r3, r3, #3
   b9594:	3304      	adds	r3, #4
   b9596:	3415      	adds	r4, #21
   b9598:	42a6      	cmp	r6, r4
   b959a:	bf38      	it	cc
   b959c:	2304      	movcc	r3, #4
   b959e:	441d      	add	r5, r3
   b95a0:	4473      	add	r3, lr
   b95a2:	469e      	mov	lr, r3
   b95a4:	462e      	mov	r6, r5
   b95a6:	4566      	cmp	r6, ip
   b95a8:	d30e      	bcc.n	b95c8 <__mdiff+0xec>
   b95aa:	f10c 0203 	add.w	r2, ip, #3
   b95ae:	1b52      	subs	r2, r2, r5
   b95b0:	f022 0203 	bic.w	r2, r2, #3
   b95b4:	3d03      	subs	r5, #3
   b95b6:	45ac      	cmp	ip, r5
   b95b8:	bf38      	it	cc
   b95ba:	2200      	movcc	r2, #0
   b95bc:	441a      	add	r2, r3
   b95be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   b95c2:	b17b      	cbz	r3, b95e4 <__mdiff+0x108>
   b95c4:	6107      	str	r7, [r0, #16]
   b95c6:	e7a3      	b.n	b9510 <__mdiff+0x34>
   b95c8:	f856 8b04 	ldr.w	r8, [r6], #4
   b95cc:	fa11 f288 	uxtah	r2, r1, r8
   b95d0:	1414      	asrs	r4, r2, #16
   b95d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   b95d6:	b292      	uxth	r2, r2
   b95d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   b95dc:	f84e 2b04 	str.w	r2, [lr], #4
   b95e0:	1421      	asrs	r1, r4, #16
   b95e2:	e7e0      	b.n	b95a6 <__mdiff+0xca>
   b95e4:	3f01      	subs	r7, #1
   b95e6:	e7ea      	b.n	b95be <__mdiff+0xe2>
   b95e8:	000ba0b1 	.word	0x000ba0b1
   b95ec:	000ba15c 	.word	0x000ba15c

000b95f0 <__ulp>:
   b95f0:	b082      	sub	sp, #8
   b95f2:	ed8d 0b00 	vstr	d0, [sp]
   b95f6:	9b01      	ldr	r3, [sp, #4]
   b95f8:	4912      	ldr	r1, [pc, #72]	; (b9644 <__ulp+0x54>)
   b95fa:	4019      	ands	r1, r3
   b95fc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   b9600:	2900      	cmp	r1, #0
   b9602:	dd05      	ble.n	b9610 <__ulp+0x20>
   b9604:	2200      	movs	r2, #0
   b9606:	460b      	mov	r3, r1
   b9608:	ec43 2b10 	vmov	d0, r2, r3
   b960c:	b002      	add	sp, #8
   b960e:	4770      	bx	lr
   b9610:	4249      	negs	r1, r1
   b9612:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   b9616:	ea4f 5021 	mov.w	r0, r1, asr #20
   b961a:	f04f 0200 	mov.w	r2, #0
   b961e:	f04f 0300 	mov.w	r3, #0
   b9622:	da04      	bge.n	b962e <__ulp+0x3e>
   b9624:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   b9628:	fa41 f300 	asr.w	r3, r1, r0
   b962c:	e7ec      	b.n	b9608 <__ulp+0x18>
   b962e:	f1a0 0114 	sub.w	r1, r0, #20
   b9632:	291e      	cmp	r1, #30
   b9634:	bfda      	itte	le
   b9636:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   b963a:	fa20 f101 	lsrle.w	r1, r0, r1
   b963e:	2101      	movgt	r1, #1
   b9640:	460a      	mov	r2, r1
   b9642:	e7e1      	b.n	b9608 <__ulp+0x18>
   b9644:	7ff00000 	.word	0x7ff00000

000b9648 <__b2d>:
   b9648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b964a:	6905      	ldr	r5, [r0, #16]
   b964c:	f100 0714 	add.w	r7, r0, #20
   b9650:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   b9654:	1f2e      	subs	r6, r5, #4
   b9656:	f855 4c04 	ldr.w	r4, [r5, #-4]
   b965a:	4620      	mov	r0, r4
   b965c:	f7ff fd48 	bl	b90f0 <__hi0bits>
   b9660:	f1c0 0320 	rsb	r3, r0, #32
   b9664:	280a      	cmp	r0, #10
   b9666:	f8df c07c 	ldr.w	ip, [pc, #124]	; b96e4 <__b2d+0x9c>
   b966a:	600b      	str	r3, [r1, #0]
   b966c:	dc14      	bgt.n	b9698 <__b2d+0x50>
   b966e:	f1c0 0e0b 	rsb	lr, r0, #11
   b9672:	fa24 f10e 	lsr.w	r1, r4, lr
   b9676:	42b7      	cmp	r7, r6
   b9678:	ea41 030c 	orr.w	r3, r1, ip
   b967c:	bf34      	ite	cc
   b967e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b9682:	2100      	movcs	r1, #0
   b9684:	3015      	adds	r0, #21
   b9686:	fa04 f000 	lsl.w	r0, r4, r0
   b968a:	fa21 f10e 	lsr.w	r1, r1, lr
   b968e:	ea40 0201 	orr.w	r2, r0, r1
   b9692:	ec43 2b10 	vmov	d0, r2, r3
   b9696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9698:	42b7      	cmp	r7, r6
   b969a:	bf3a      	itte	cc
   b969c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b96a0:	f1a5 0608 	subcc.w	r6, r5, #8
   b96a4:	2100      	movcs	r1, #0
   b96a6:	380b      	subs	r0, #11
   b96a8:	d017      	beq.n	b96da <__b2d+0x92>
   b96aa:	f1c0 0c20 	rsb	ip, r0, #32
   b96ae:	fa04 f500 	lsl.w	r5, r4, r0
   b96b2:	42be      	cmp	r6, r7
   b96b4:	fa21 f40c 	lsr.w	r4, r1, ip
   b96b8:	ea45 0504 	orr.w	r5, r5, r4
   b96bc:	bf8c      	ite	hi
   b96be:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   b96c2:	2400      	movls	r4, #0
   b96c4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   b96c8:	fa01 f000 	lsl.w	r0, r1, r0
   b96cc:	fa24 f40c 	lsr.w	r4, r4, ip
   b96d0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   b96d4:	ea40 0204 	orr.w	r2, r0, r4
   b96d8:	e7db      	b.n	b9692 <__b2d+0x4a>
   b96da:	ea44 030c 	orr.w	r3, r4, ip
   b96de:	460a      	mov	r2, r1
   b96e0:	e7d7      	b.n	b9692 <__b2d+0x4a>
   b96e2:	bf00      	nop
   b96e4:	3ff00000 	.word	0x3ff00000

000b96e8 <__d2b>:
   b96e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b96ec:	4689      	mov	r9, r1
   b96ee:	2101      	movs	r1, #1
   b96f0:	ec57 6b10 	vmov	r6, r7, d0
   b96f4:	4690      	mov	r8, r2
   b96f6:	f7ff fc09 	bl	b8f0c <_Balloc>
   b96fa:	4604      	mov	r4, r0
   b96fc:	b930      	cbnz	r0, b970c <__d2b+0x24>
   b96fe:	4602      	mov	r2, r0
   b9700:	4b25      	ldr	r3, [pc, #148]	; (b9798 <__d2b+0xb0>)
   b9702:	4826      	ldr	r0, [pc, #152]	; (b979c <__d2b+0xb4>)
   b9704:	f240 310a 	movw	r1, #778	; 0x30a
   b9708:	f7fb fff0 	bl	b56ec <__assert_func>
   b970c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   b9710:	f3c7 0313 	ubfx	r3, r7, #0, #20
   b9714:	bb35      	cbnz	r5, b9764 <__d2b+0x7c>
   b9716:	2e00      	cmp	r6, #0
   b9718:	9301      	str	r3, [sp, #4]
   b971a:	d028      	beq.n	b976e <__d2b+0x86>
   b971c:	4668      	mov	r0, sp
   b971e:	9600      	str	r6, [sp, #0]
   b9720:	f7ff fd06 	bl	b9130 <__lo0bits>
   b9724:	9900      	ldr	r1, [sp, #0]
   b9726:	b300      	cbz	r0, b976a <__d2b+0x82>
   b9728:	9a01      	ldr	r2, [sp, #4]
   b972a:	f1c0 0320 	rsb	r3, r0, #32
   b972e:	fa02 f303 	lsl.w	r3, r2, r3
   b9732:	430b      	orrs	r3, r1
   b9734:	40c2      	lsrs	r2, r0
   b9736:	6163      	str	r3, [r4, #20]
   b9738:	9201      	str	r2, [sp, #4]
   b973a:	9b01      	ldr	r3, [sp, #4]
   b973c:	61a3      	str	r3, [r4, #24]
   b973e:	2b00      	cmp	r3, #0
   b9740:	bf14      	ite	ne
   b9742:	2202      	movne	r2, #2
   b9744:	2201      	moveq	r2, #1
   b9746:	6122      	str	r2, [r4, #16]
   b9748:	b1d5      	cbz	r5, b9780 <__d2b+0x98>
   b974a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   b974e:	4405      	add	r5, r0
   b9750:	f8c9 5000 	str.w	r5, [r9]
   b9754:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   b9758:	f8c8 0000 	str.w	r0, [r8]
   b975c:	4620      	mov	r0, r4
   b975e:	b003      	add	sp, #12
   b9760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b9764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b9768:	e7d5      	b.n	b9716 <__d2b+0x2e>
   b976a:	6161      	str	r1, [r4, #20]
   b976c:	e7e5      	b.n	b973a <__d2b+0x52>
   b976e:	a801      	add	r0, sp, #4
   b9770:	f7ff fcde 	bl	b9130 <__lo0bits>
   b9774:	9b01      	ldr	r3, [sp, #4]
   b9776:	6163      	str	r3, [r4, #20]
   b9778:	2201      	movs	r2, #1
   b977a:	6122      	str	r2, [r4, #16]
   b977c:	3020      	adds	r0, #32
   b977e:	e7e3      	b.n	b9748 <__d2b+0x60>
   b9780:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   b9784:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   b9788:	f8c9 0000 	str.w	r0, [r9]
   b978c:	6918      	ldr	r0, [r3, #16]
   b978e:	f7ff fcaf 	bl	b90f0 <__hi0bits>
   b9792:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   b9796:	e7df      	b.n	b9758 <__d2b+0x70>
   b9798:	000ba0b1 	.word	0x000ba0b1
   b979c:	000ba15c 	.word	0x000ba15c

000b97a0 <__ratio>:
   b97a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b97a4:	4688      	mov	r8, r1
   b97a6:	4669      	mov	r1, sp
   b97a8:	4681      	mov	r9, r0
   b97aa:	f7ff ff4d 	bl	b9648 <__b2d>
   b97ae:	a901      	add	r1, sp, #4
   b97b0:	4640      	mov	r0, r8
   b97b2:	ec55 4b10 	vmov	r4, r5, d0
   b97b6:	f7ff ff47 	bl	b9648 <__b2d>
   b97ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b97be:	f8d8 2010 	ldr.w	r2, [r8, #16]
   b97c2:	eba3 0c02 	sub.w	ip, r3, r2
   b97c6:	e9dd 3200 	ldrd	r3, r2, [sp]
   b97ca:	1a9b      	subs	r3, r3, r2
   b97cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   b97d0:	ec51 0b10 	vmov	r0, r1, d0
   b97d4:	2b00      	cmp	r3, #0
   b97d6:	bfd6      	itet	le
   b97d8:	460a      	movle	r2, r1
   b97da:	462a      	movgt	r2, r5
   b97dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   b97e0:	468b      	mov	fp, r1
   b97e2:	462f      	mov	r7, r5
   b97e4:	bfd4      	ite	le
   b97e6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   b97ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   b97ee:	4620      	mov	r0, r4
   b97f0:	ee10 2a10 	vmov	r2, s0
   b97f4:	465b      	mov	r3, fp
   b97f6:	4639      	mov	r1, r7
   b97f8:	f7fd fe1a 	bl	b7430 <__aeabi_ddiv>
   b97fc:	ec41 0b10 	vmov	d0, r0, r1
   b9800:	b003      	add	sp, #12
   b9802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9806 <__copybits>:
   b9806:	3901      	subs	r1, #1
   b9808:	b570      	push	{r4, r5, r6, lr}
   b980a:	1149      	asrs	r1, r1, #5
   b980c:	6914      	ldr	r4, [r2, #16]
   b980e:	3101      	adds	r1, #1
   b9810:	f102 0314 	add.w	r3, r2, #20
   b9814:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   b9818:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b981c:	1f05      	subs	r5, r0, #4
   b981e:	42a3      	cmp	r3, r4
   b9820:	d30c      	bcc.n	b983c <__copybits+0x36>
   b9822:	1aa3      	subs	r3, r4, r2
   b9824:	3b11      	subs	r3, #17
   b9826:	f023 0303 	bic.w	r3, r3, #3
   b982a:	3211      	adds	r2, #17
   b982c:	42a2      	cmp	r2, r4
   b982e:	bf88      	it	hi
   b9830:	2300      	movhi	r3, #0
   b9832:	4418      	add	r0, r3
   b9834:	2300      	movs	r3, #0
   b9836:	4288      	cmp	r0, r1
   b9838:	d305      	bcc.n	b9846 <__copybits+0x40>
   b983a:	bd70      	pop	{r4, r5, r6, pc}
   b983c:	f853 6b04 	ldr.w	r6, [r3], #4
   b9840:	f845 6f04 	str.w	r6, [r5, #4]!
   b9844:	e7eb      	b.n	b981e <__copybits+0x18>
   b9846:	f840 3b04 	str.w	r3, [r0], #4
   b984a:	e7f4      	b.n	b9836 <__copybits+0x30>

000b984c <__any_on>:
   b984c:	f100 0214 	add.w	r2, r0, #20
   b9850:	6900      	ldr	r0, [r0, #16]
   b9852:	114b      	asrs	r3, r1, #5
   b9854:	4298      	cmp	r0, r3
   b9856:	b510      	push	{r4, lr}
   b9858:	db11      	blt.n	b987e <__any_on+0x32>
   b985a:	dd0a      	ble.n	b9872 <__any_on+0x26>
   b985c:	f011 011f 	ands.w	r1, r1, #31
   b9860:	d007      	beq.n	b9872 <__any_on+0x26>
   b9862:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   b9866:	fa24 f001 	lsr.w	r0, r4, r1
   b986a:	fa00 f101 	lsl.w	r1, r0, r1
   b986e:	428c      	cmp	r4, r1
   b9870:	d10b      	bne.n	b988a <__any_on+0x3e>
   b9872:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   b9876:	4293      	cmp	r3, r2
   b9878:	d803      	bhi.n	b9882 <__any_on+0x36>
   b987a:	2000      	movs	r0, #0
   b987c:	bd10      	pop	{r4, pc}
   b987e:	4603      	mov	r3, r0
   b9880:	e7f7      	b.n	b9872 <__any_on+0x26>
   b9882:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   b9886:	2900      	cmp	r1, #0
   b9888:	d0f5      	beq.n	b9876 <__any_on+0x2a>
   b988a:	2001      	movs	r0, #1
   b988c:	e7f6      	b.n	b987c <__any_on+0x30>

000b988e <_calloc_r>:
   b988e:	b513      	push	{r0, r1, r4, lr}
   b9890:	434a      	muls	r2, r1
   b9892:	4611      	mov	r1, r2
   b9894:	9201      	str	r2, [sp, #4]
   b9896:	f7fb ff21 	bl	b56dc <_malloc_r>
   b989a:	4604      	mov	r4, r0
   b989c:	b118      	cbz	r0, b98a6 <_calloc_r+0x18>
   b989e:	9a01      	ldr	r2, [sp, #4]
   b98a0:	2100      	movs	r1, #0
   b98a2:	f7fe f886 	bl	b79b2 <memset>
   b98a6:	4620      	mov	r0, r4
   b98a8:	b002      	add	sp, #8
   b98aa:	bd10      	pop	{r4, pc}
   b98ac:	0000      	movs	r0, r0
	...

000b98b0 <nan>:
   b98b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; b98b8 <nan+0x8>
   b98b4:	4770      	bx	lr
   b98b6:	bf00      	nop
   b98b8:	00000000 	.word	0x00000000
   b98bc:	7ff80000 	.word	0x7ff80000

000b98c0 <__ascii_wctomb>:
   b98c0:	b149      	cbz	r1, b98d6 <__ascii_wctomb+0x16>
   b98c2:	2aff      	cmp	r2, #255	; 0xff
   b98c4:	bf85      	ittet	hi
   b98c6:	238a      	movhi	r3, #138	; 0x8a
   b98c8:	6003      	strhi	r3, [r0, #0]
   b98ca:	700a      	strbls	r2, [r1, #0]
   b98cc:	f04f 30ff 	movhi.w	r0, #4294967295
   b98d0:	bf98      	it	ls
   b98d2:	2001      	movls	r0, #1
   b98d4:	4770      	bx	lr
   b98d6:	4608      	mov	r0, r1
   b98d8:	4770      	bx	lr
	...

000b98dc <__aeabi_d2lz>:
   b98dc:	b538      	push	{r3, r4, r5, lr}
   b98de:	2200      	movs	r2, #0
   b98e0:	2300      	movs	r3, #0
   b98e2:	4604      	mov	r4, r0
   b98e4:	460d      	mov	r5, r1
   b98e6:	f7fd feeb 	bl	b76c0 <__aeabi_dcmplt>
   b98ea:	b928      	cbnz	r0, b98f8 <__aeabi_d2lz+0x1c>
   b98ec:	4620      	mov	r0, r4
   b98ee:	4629      	mov	r1, r5
   b98f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b98f4:	f7fd bfee 	b.w	b78d4 <__aeabi_d2ulz>
   b98f8:	4620      	mov	r0, r4
   b98fa:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b98fe:	f7fd ffe9 	bl	b78d4 <__aeabi_d2ulz>
   b9902:	4240      	negs	r0, r0
   b9904:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9908:	bd38      	pop	{r3, r4, r5, pc}
   b990a:	bf00      	nop

000b990c <dynalib_user>:
   b990c:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b991c:	0000 0000 7055 6164 6574 2064 6564 616c     ....Updated dela
   b992c:	2079 6974 656d 7420 3a6f 0020 7055 6164     y time to: .Upda
   b993c:	6574 2064 7473 7261 2074 6172 676e 2065     ted start range 
   b994c:	6f74 203a 5500 6470 7461 6465 7220 6e61     to: .Updated ran
   b995c:	6567 6520 646e 7420 3a6f 0020 6e45 6574     ge end to: .Ente
   b996c:	6972 676e 7320 7465 7075 6620 6e75 7463     ring setup funct
   b997c:	6f69 2e6e 5300 7465 7075 6620 6e69 7369     ion..Setup finis
   b998c:	6568 2164 6800 6f6f 2d6b 6572 7073 6e6f     hed!.hook-respon
   b999c:	6573 552f 6470 7461 0065 6f68 6b6f 722d     se/Update.hook-r
   b99ac:	7365 6f70 736e 2f65 6552 6461 6e69 0067     esponse/Reading.
   b99bc:	7564 6d6d 5f79 6164 6174 4300 6e6f 6964     dummy_data.Condi
   b99cc:	6974 6e6f 2073 656d 2c74 7020 6572 6170     tions met, prepa
   b99dc:	6972 676e 7420 206f 6174 656b 6120 6d20     ring to take a m
   b99ec:	6165 7573 6572 656d 746e 0021 6157 7469     easurement!.Wait
   b99fc:	6e69 2067 6f66 2072 2061 656d 7361 7275     ing for a measur
   b9a0c:	6d65 6e65 2c74 6220 7475 6920 2074 6168     ement, but it ha
   b9a1c:	6e73 7427 6220 6565 206e 6f6c 676e 6520     sn't been long e
   b9a2c:	6f6e 6775 2068 6579 2e74 5700 6961 6974     nough yet..Waiti
   b9a3c:	676e 6620 726f 6120 6d20 6165 7573 6572     ng for a measure
   b9a4c:	656d 746e 202c 7562 2074 7469 7327 6e20     ment, but it's n
   b9a5c:	746f 6920 206e 6874 2065 6361 6563 7470     ot in the accept
   b9a6c:	6261 656c 7420 6d69 2065 7266 6d61 2e65     able time frame.
   b9a7c:	4320 7275 6572 746e 7420 6d69 3a65 0020      Current time: .
   b9a8c:	6552 7571 7365 6974 676e 6120 6d20 6165     Requesting a mea
   b9a9c:	7573 6572 656d 746e 2d20 7020 616c 6563     surement - place
   b9aac:	6620 6e69 6567 2072 6e6f 7320 6e65 6f73      finger on senso
   b9abc:	2e72 4600 6e69 6567 2072 6564 6574 7463     r..Finger detect
   b9acc:	6465 6f20 206e 6573 736e 726f 002e 6e45     ed on sensor..En
   b9adc:	6574 6972 676e 6d20 6165 7573 6572 656d     tering measureme
   b9aec:	746e 6c20 6f6f 0070 6156 696c 2064 656d     nt loop.Valid me
   b9afc:	7361 7275 6d65 6e65 2c74 7320 6e65 6964     asurement, sendi
   b9b0c:	676e 6420 7461 2e61 4e00 746f 6120 7620     ng data..Not a v
   b9b1c:	6c61 6469 6d20 6165 7573 6572 656d 746e     alid measurement
   b9b2c:	202e 5248 203a 2000 5053 324f 203a 7b00     . HR: . SPO2: .{
   b9b3c:	2220 6562 7461 3a22 2220 2c00 2220 786f      "beat": "., "ox
   b9b4c:	3a22 2220 2c00 2220 6974 656d 3a22 2220     ": "., "time": "
   b9b5c:	2200 007d 6144 6174 7320 6375 6563 7373     ."}.Data success
   b9b6c:	7566 6c6c 2079 6573 746e 002e 6553 746e     fully sent..Sent
   b9b7c:	7320 6f74 6572 2064 6f70 6e69 3a74 0020      stored point: .
   b9b8c:	7453 726f 6465 6420 7461 2061 6f70 6e69     Stored data poin
   b9b9c:	2074 6f74 206f 6c6f 2064 202d 6f6e 2074     t too old - not 
   b9bac:	6573 746e 002e 6c41 206c 7473 726f 6465     sent..All stored
   b9bbc:	6420 7461 2061 6f70 6e69 7374 7320 6e65      data points sen
   b9bcc:	2e74 4e00 206f 6e69 6574 6e72 7465 2d20     t..No internet -
   b9bdc:	7320 7661 6e69 2067 6164 6174 6620 726f      saving data for
   b9bec:	6c20 7461 7265 002e                          later..

000b9bf4 <_ZTVN8particle9LEDStatusE>:
	...
   b9bfc:	40c9 000b 40e5 000b 40b3 000b               .@...@...@..

000b9c08 <_ZL14uch_spo2_table>:
   b9c08:	5f5f 605f 6060 6161 6161 6261 6262 6262     ___```aaaaabbbbb
   b9c18:	6363 6363 6363 6363 6464 6464 6464 6464     ccccccccdddddddd
   b9c28:	6464 6464 6464 6464 6464 6464 6363 6363     ddddddddddddcccc
   b9c38:	6363 6363 6262 6262 6262 6161 6161 6060     ccccbbbbbbaaaa``
   b9c48:	6060 5f5f 5e5f 5e5e 5d5d 5c5d 5c5c 5b5b     ``___^^^]]]\\\[[
   b9c58:	5a5a 5959 5859 5758 5657 5556 5455 5354     ZZYYYXXWWVVUUTTS
   b9c68:	5252 5151 5050 4e4f 4d4e 4c4c 4a4b 494a     RRQQPPONNMLLKJJI
   b9c78:	4848 4647 4545 4344 4242 4041 3e3f 3d3e     HHGFEEDCBBA@?>>=
   b9c88:	3b3c 393a 3838 3637 3435 3233 3031 2e2f     <;:98876543210/.
   b9c98:	2c2d 2a2b 2829 2627 2425 2223 1f21 1d1e     -,+*)('&%$#"!...
   b9ca8:	1b1c 191a 1617 1415 1113 0f10 0c0e 0a0b     ................
   b9cb8:	0709 0506 0203 0001                         ........

000b9cc0 <_ZTVN5spark13EthernetClassE>:
	...
   b9cc8:	578b 000b 5781 000b 5777 000b 576d 000b     .W...W..wW..mW..
   b9cd8:	5761 000b 5755 000b 6c35 000b 6c3d 000b     aW..UW..5l..=l..
   b9ce8:	5749 000b 5741 000b 5737 000b 572d 000b     IW..AW..7W..-W..
   b9cf8:	6c6d 000b 616e 006e 6e69 0066 766f 0066     ml..nan.inf.ovf.
   b9d08:	7061 0070 005a 2b25 3330 3a64 3025 7532     app.Z.%+03d:%02u
   b9d18:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   b9d28:	5325 7a25 6100 6373 6974 656d 0000 0000     %S%z.asctime....

000b9d38 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9d40:	6275 000b 627b 000b 62b9 000b 6289 000b     ub..{b...b...b..
   b9d50:	6277 000b                                   wb..

000b9d54 <_ZTV9IPAddress>:
	...
   b9d5c:	67b5 000b 67a5 000b 67a7 000b               .g...g...g..

000b9d68 <_ZTV9USBSerial>:
	...
   b9d70:	689b 000b 6903 000b 68d9 000b 5b55 000b     .h...i...h..U[..
   b9d80:	68cb 000b 689d 000b 68ad 000b 68fd 000b     .h...h...h...h..
   b9d90:	68bd 000b 6895 000b                         .h...h..

000b9d98 <_ZTV11USARTSerial>:
	...
   b9da0:	699d 000b 6a09 000b 69e1 000b 5b55 000b     .i...j...i..U[..
   b9db0:	69b1 000b 69cd 000b 69bf 000b 69db 000b     .i...i...i...i..
   b9dc0:	699f 000b 69a3 000b                         .i...i..

000b9dc8 <_ZTV7TwoWire>:
	...
   b9dd0:	6a69 000b 6ab3 000b 6a8b 000b 6a6b 000b     ij...j...j..kj..
   b9de0:	6a93 000b 6a9b 000b 6aa3 000b 6aab 000b     .j...j...j...j..

000b9df0 <_ZTVN5spark9WiFiClassE>:
	...
   b9df8:	6bd5 000b 6bcb 000b 6bc1 000b 6b77 000b     .k...k...k..wk..
   b9e08:	6bb5 000b 6ba9 000b 6c35 000b 6c3d 000b     .k...k..5l..=l..
   b9e18:	6b9d 000b 6b95 000b 6b8b 000b 6b81 000b     .k...k...k...k..
   b9e28:	6c6d 000b                                   ml..

000b9e2c <_ZTVN5spark12NetworkClassE>:
	...
   b9e34:	6bf5 000b 6bff 000b 6c09 000b 6c13 000b     .k...k...l...l..
   b9e44:	6c1d 000b 6c29 000b 6c35 000b 6c3d 000b     .l..)l..5l..=l..
   b9e54:	6c45 000b 6c51 000b 6c59 000b 6c63 000b     El..Ql..Yl..cl..
   b9e64:	6c6d 000b                                   ml..

000b9e68 <_ZSt7nothrow>:
   b9e68:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   b9e78:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000b9e89 <day_name.1>:
   b9e89:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   b9e99:	6972 6153                                    riSat

000b9e9e <mon_name.0>:
   b9e9e:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   b9eae:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   b9ebe:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   b9ece:	7320 6375 6563 6465 6465 2f00 6e6d 2f74      succeeded./mnt/
   b9ede:	6f77 6b72 7073 6361 2f65 6f77 6b72 7073     workspace/worksp
   b9eee:	6361 2f65 4347 2d43 3031 702d 7069 6c65     ace/GCC-10-pipel
   b9efe:	6e69 2f65 656a 6b6e 6e69 2d73 4347 2d43     ine/jenkins-GCC-
   b9f0e:	3031 702d 7069 6c65 6e69 2d65 3834 325f     10-pipeline-48_2
   b9f1e:	3230 3130 3231 5f34 3631 3630 3831 3630     0201124_16061806
   b9f2e:	3134 732f 6372 6e2f 7765 696c 2f62 656e     41/src/newlib/ne
   b9f3e:	6c77 6269 6c2f 6269 2f63 7473 6c64 6269     wlib/libc/stdlib
   b9f4e:	722f 6e61 2e64 0063 6e69 7469 0079          /rand.c.inity.

000b9f5c <fpi.1>:
   b9f5c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   b9f6c:	0000 0000                                   ....

000b9f70 <fpinan.0>:
   b9f70:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000b9f88 <tinytens>:
   b9f88:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   b9f98:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   b9fa8:	6f43 64ac 0628 1168                         Co.d(.h.

000b9fb0 <_ctype_>:
   b9fb0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b9fc0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b9fd0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b9fe0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b9ff0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   ba000:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   ba010:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   ba020:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   ba030:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   ba0b0:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   ba0c0:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   ba0d0:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   ba0e0:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   ba0f0:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   ba100:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   ba110:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   ba120:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   ba130:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   ba140:	6874 7865 632e 0000                         thex.c..

000ba148 <_C_numeric_locale>:
   ba148:	9b13 000b 9e88 000b ddf0 2003 0043 4f50     ........... C.PO
   ba158:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   ba168:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   ba178:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   ba188:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   ba198:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   ba1a8:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   ba1b8:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   ba1c8:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   ba1d8:	0063 0000 0000 0000                         c.......

000ba1e0 <__mprec_bigtens>:
   ba1e0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   ba1f0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   ba200:	bf3c 7f73 4fdd 7515                         <.s..O.u

000ba208 <__mprec_tens>:
   ba208:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   ba218:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   ba228:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   ba238:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   ba248:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   ba258:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   ba268:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   ba278:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   ba288:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   ba298:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   ba2a8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   ba2b8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   ba2c8:	9db4 79d9 7843 44ea                         ...yCx.D

000ba2d0 <p05.0>:
   ba2d0:	0005 0000 0019 0000 007d 0000               ........}...

000ba2dc <link_const_variable_data_end>:
   ba2dc:	000b4935 	.word	0x000b4935
   ba2e0:	000b5795 	.word	0x000b5795
   ba2e4:	000b57f9 	.word	0x000b57f9
   ba2e8:	000b5b45 	.word	0x000b5b45
   ba2ec:	000b5de1 	.word	0x000b5de1
   ba2f0:	000b6115 	.word	0x000b6115
   ba2f4:	000b6131 	.word	0x000b6131
   ba2f8:	000b6be1 	.word	0x000b6be1
   ba2fc:	000b6d45 	.word	0x000b6d45
