
c:/Users/nicky/OneDrive/Documents/GitHub/513_project/Particle/PW_Project/target/1.4.4/argon/PW_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001e74  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00015f30  2**0
                  CONTENTS
  4 .data         00000074  2003e33c  000d5e90  0000e33c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000440  2003e3b0  2003e3b0  0001e3b0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5f04  000d5f04  00015f04  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5f2c  000d5f2c  00015f2c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d72f4  00000000  00000000  00015f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00010852  00000000  00000000  000ed224  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001b74f  00000000  00000000  000fda76  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002228  00000000  00000000  001191c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004108  00000000  00000000  0011b3ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00034a01  00000000  00000000  0011f4f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00026ef4  00000000  00000000  00153ef6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00100b97  00000000  00000000  0017adea  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c4b4  00000000  00000000  0027b984  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fd15 	bl	d5a5c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fd1a 	bl	d5a72 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e33c 	.word	0x2003e33c
   d4048:	000d5e90 	.word	0x000d5e90
   d404c:	2003e3b0 	.word	0x2003e3b0
   d4050:	2003e3b0 	.word	0x2003e3b0
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 fcb7 	bl	d49cc <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d5e90 	.word	0x000d5e90
   d4080:	000d5e54 	.word	0x000d5e54

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b816 	b.w	d40b4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8e5 	bl	d4258 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bc69 	b.w	d4968 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bb15 	b.w	d46c4 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bb1b 	b.w	d46d4 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bb19 	b.w	d46d4 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <setup>:

bool beamBroken = false; // This flag will be used to mark if we have a new status or now. We will use it in the loop.

// We start with the setup function.

void setup() {
   d40b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  // This part is mostly the same:
  pinMode(led,OUTPUT); // Our LED pin is output (lighting up the LED)
   d40b8:	4d55      	ldr	r5, [pc, #340]	; (d4210 <setup+0x15c>)
  pinMode(boardLed,OUTPUT); // Our on-board LED is output as well
   d40ba:	4c56      	ldr	r4, [pc, #344]	; (d4214 <setup+0x160>)
  pinMode(photoresistor,INPUT);  // Our photoresistor pin is input (reading the photoresistor)
   d40bc:	4f56      	ldr	r7, [pc, #344]	; (d4218 <setup+0x164>)

// We start with the setup function.

void setup() {
  // This part is mostly the same:
  pinMode(led,OUTPUT); // Our LED pin is output (lighting up the LED)
   d40be:	8828      	ldrh	r0, [r5, #0]
  pinMode(boardLed,OUTPUT); // Our on-board LED is output as well
  pinMode(photoresistor,INPUT);  // Our photoresistor pin is input (reading the photoresistor)
  pinMode(power_pin,OUTPUT); // The pin powering the photoresistor is output (sending out consistent power)
   d40c0:	4e56      	ldr	r6, [pc, #344]	; (d421c <setup+0x168>)

// We start with the setup function.

void setup() {
  // This part is mostly the same:
  pinMode(led,OUTPUT); // Our LED pin is output (lighting up the LED)
   d40c2:	2101      	movs	r1, #1
   d40c4:	f001 fae6 	bl	d5694 <pinMode>
  pinMode(boardLed,OUTPUT); // Our on-board LED is output as well
   d40c8:	2101      	movs	r1, #1
   d40ca:	8820      	ldrh	r0, [r4, #0]
   d40cc:	f001 fae2 	bl	d5694 <pinMode>
  pinMode(photoresistor,INPUT);  // Our photoresistor pin is input (reading the photoresistor)
   d40d0:	2100      	movs	r1, #0
   d40d2:	8838      	ldrh	r0, [r7, #0]
   d40d4:	f001 fade 	bl	d5694 <pinMode>
  pinMode(power_pin,OUTPUT); // The pin powering the photoresistor is output (sending out consistent power)
   d40d8:	8830      	ldrh	r0, [r6, #0]
   d40da:	2101      	movs	r1, #1
   d40dc:	f001 fada 	bl	d5694 <pinMode>

  // Next, write the power of the photoresistor to be the maximum possible, which is 4095 in analog.
  digitalWrite(power_pin,HIGH);
   d40e0:	8830      	ldrh	r0, [r6, #0]
   d40e2:	2101      	movs	r1, #1
   d40e4:	f001 fae7 	bl	d56b6 <digitalWrite>

  // Since everyone sets up their leds differently, we are also going to start by calibrating our photoresistor.
  // This one is going to require some input from the user!

  // First, the D7 LED will go on to tell you to put your hand in front of the beam.
  digitalWrite(boardLed,HIGH);
   d40e8:	2101      	movs	r1, #1
   d40ea:	8820      	ldrh	r0, [r4, #0]
   d40ec:	f001 fae3 	bl	d56b6 <digitalWrite>
  delay(2000);
   d40f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d40f4:	f000 fbea 	bl	d48cc <delay>

  // Then, the D7 LED will go off and the LED will turn on.
  digitalWrite(boardLed,LOW);
   d40f8:	2100      	movs	r1, #0
   d40fa:	8820      	ldrh	r0, [r4, #0]
   d40fc:	f001 fadb 	bl	d56b6 <digitalWrite>
  digitalWrite(led,HIGH);
   d4100:	2101      	movs	r1, #1
   d4102:	8828      	ldrh	r0, [r5, #0]
   d4104:	f001 fad7 	bl	d56b6 <digitalWrite>
  delay(500);
   d4108:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d410c:	f000 fbde 	bl	d48cc <delay>

  // Now we'll take some readings...
  int on_1 = analogRead(photoresistor); // read photoresistor
   d4110:	8838      	ldrh	r0, [r7, #0]
   d4112:	f001 fae9 	bl	d56e8 <analogRead>
   d4116:	4681      	mov	r9, r0
  delay(200); // wait 200 milliseconds
   d4118:	20c8      	movs	r0, #200	; 0xc8
   d411a:	f000 fbd7 	bl	d48cc <delay>
  int on_2 = analogRead(photoresistor); // read photoresistor
   d411e:	8838      	ldrh	r0, [r7, #0]
   d4120:	f001 fae2 	bl	d56e8 <analogRead>
   d4124:	4606      	mov	r6, r0
  delay(300); // wait 300 milliseconds
   d4126:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d412a:	f000 fbcf 	bl	d48cc <delay>

  // Now flash to let us know that you've taken the readings...
  digitalWrite(boardLed,HIGH);
   d412e:	2101      	movs	r1, #1
   d4130:	8820      	ldrh	r0, [r4, #0]
   d4132:	f001 fac0 	bl	d56b6 <digitalWrite>
  delay(100);
   d4136:	2064      	movs	r0, #100	; 0x64
   d4138:	f000 fbc8 	bl	d48cc <delay>
  digitalWrite(boardLed,LOW);
   d413c:	2100      	movs	r1, #0
   d413e:	8820      	ldrh	r0, [r4, #0]
   d4140:	f001 fab9 	bl	d56b6 <digitalWrite>
  delay(100);
   d4144:	2064      	movs	r0, #100	; 0x64
   d4146:	f000 fbc1 	bl	d48cc <delay>
  digitalWrite(boardLed,HIGH);
   d414a:	2101      	movs	r1, #1
   d414c:	8820      	ldrh	r0, [r4, #0]
   d414e:	f001 fab2 	bl	d56b6 <digitalWrite>
  delay(100);
   d4152:	2064      	movs	r0, #100	; 0x64
   d4154:	f000 fbba 	bl	d48cc <delay>
  digitalWrite(boardLed,LOW);
   d4158:	2100      	movs	r1, #0
   d415a:	8820      	ldrh	r0, [r4, #0]
   d415c:	f001 faab 	bl	d56b6 <digitalWrite>
  delay(100);
   d4160:	2064      	movs	r0, #100	; 0x64
   d4162:	f000 fbb3 	bl	d48cc <delay>

  // Now the D7 LED will go on to tell you to remove your hand...
  digitalWrite(boardLed,HIGH);
   d4166:	2101      	movs	r1, #1
   d4168:	8820      	ldrh	r0, [r4, #0]
   d416a:	f001 faa4 	bl	d56b6 <digitalWrite>
  delay(2000);
   d416e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4172:	f000 fbab 	bl	d48cc <delay>

  // The D7 LED will turn off...
  digitalWrite(boardLed,LOW);
   d4176:	2100      	movs	r1, #0
   d4178:	8820      	ldrh	r0, [r4, #0]
   d417a:	f001 fa9c 	bl	d56b6 <digitalWrite>

  // ...And we will take two more readings.
  int off_1 = analogRead(photoresistor); // read photoresistor
   d417e:	8838      	ldrh	r0, [r7, #0]
   d4180:	f001 fab2 	bl	d56e8 <analogRead>
   d4184:	4680      	mov	r8, r0
  delay(200); // wait 200 milliseconds
   d4186:	20c8      	movs	r0, #200	; 0xc8
   d4188:	f000 fba0 	bl	d48cc <delay>
  int off_2 = analogRead(photoresistor); // read photoresistor
   d418c:	8838      	ldrh	r0, [r7, #0]
   d418e:	f001 faab 	bl	d56e8 <analogRead>
   d4192:	4605      	mov	r5, r0
  delay(1000); // wait 1 second
   d4194:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4198:	f000 fb98 	bl	d48cc <delay>

  // Now flash the D7 LED on and off three times to let us know that we're ready to go!
  digitalWrite(boardLed,HIGH);
   d419c:	2101      	movs	r1, #1
   d419e:	8820      	ldrh	r0, [r4, #0]
   d41a0:	f001 fa89 	bl	d56b6 <digitalWrite>
  delay(100);
   d41a4:	2064      	movs	r0, #100	; 0x64
   d41a6:	f000 fb91 	bl	d48cc <delay>
  digitalWrite(boardLed,LOW);
   d41aa:	2100      	movs	r1, #0
   d41ac:	8820      	ldrh	r0, [r4, #0]
   d41ae:	f001 fa82 	bl	d56b6 <digitalWrite>
  delay(100);
   d41b2:	2064      	movs	r0, #100	; 0x64
   d41b4:	f000 fb8a 	bl	d48cc <delay>
  digitalWrite(boardLed,HIGH);
   d41b8:	2101      	movs	r1, #1
   d41ba:	8820      	ldrh	r0, [r4, #0]
   d41bc:	f001 fa7b 	bl	d56b6 <digitalWrite>
  delay(100);
   d41c0:	2064      	movs	r0, #100	; 0x64
   d41c2:	f000 fb83 	bl	d48cc <delay>
  digitalWrite(boardLed,LOW);
   d41c6:	2100      	movs	r1, #0
   d41c8:	8820      	ldrh	r0, [r4, #0]
   d41ca:	f001 fa74 	bl	d56b6 <digitalWrite>
  delay(100);
   d41ce:	2064      	movs	r0, #100	; 0x64
   d41d0:	f000 fb7c 	bl	d48cc <delay>
  digitalWrite(boardLed,HIGH);
   d41d4:	2101      	movs	r1, #1
   d41d6:	8820      	ldrh	r0, [r4, #0]
   d41d8:	f001 fa6d 	bl	d56b6 <digitalWrite>
  delay(100);
   d41dc:	2064      	movs	r0, #100	; 0x64
   d41de:	f000 fb75 	bl	d48cc <delay>
  digitalWrite(boardLed,LOW);
   d41e2:	2100      	movs	r1, #0
   d41e4:	8820      	ldrh	r0, [r4, #0]
   d41e6:	f001 fa66 	bl	d56b6 <digitalWrite>


  // Now we average the "on" and "off" values to get an idea of what the resistance will be when the LED is on and off
  intactValue = (on_1+on_2)/2;
   d41ea:	4b0d      	ldr	r3, [pc, #52]	; (d4220 <setup+0x16c>)
  brokenValue = (off_1+off_2)/2;
   d41ec:	490d      	ldr	r1, [pc, #52]	; (d4224 <setup+0x170>)
  delay(100);
  digitalWrite(boardLed,LOW);


  // Now we average the "on" and "off" values to get an idea of what the resistance will be when the LED is on and off
  intactValue = (on_1+on_2)/2;
   d41ee:	2202      	movs	r2, #2
   d41f0:	eb09 0006 	add.w	r0, r9, r6
  brokenValue = (off_1+off_2)/2;
   d41f4:	4445      	add	r5, r8
  delay(100);
  digitalWrite(boardLed,LOW);


  // Now we average the "on" and "off" values to get an idea of what the resistance will be when the LED is on and off
  intactValue = (on_1+on_2)/2;
   d41f6:	fb90 f0f2 	sdiv	r0, r0, r2
   d41fa:	6018      	str	r0, [r3, #0]
  brokenValue = (off_1+off_2)/2;
   d41fc:	fb95 f3f2 	sdiv	r3, r5, r2
   d4200:	600b      	str	r3, [r1, #0]

  // Let's also calculate the value between ledOn and ledOff, above which we will assume the led is on and below which we assume the led is off.
  beamThreshold = (intactValue+brokenValue)/2;
   d4202:	4403      	add	r3, r0
   d4204:	fb93 f3f2 	sdiv	r3, r3, r2
   d4208:	4a07      	ldr	r2, [pc, #28]	; (d4228 <setup+0x174>)
   d420a:	6013      	str	r3, [r2, #0]
   d420c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4210:	2003e3bc 	.word	0x2003e3bc
   d4214:	2003e33c 	.word	0x2003e33c
   d4218:	2003e344 	.word	0x2003e344
   d421c:	2003e340 	.word	0x2003e340
   d4220:	2003e3b8 	.word	0x2003e3b8
   d4224:	2003e3c4 	.word	0x2003e3c4
   d4228:	2003e3b4 	.word	0x2003e3b4

000d422c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d422c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d422e:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4230:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4232:	b17c      	cbz	r4, d4254 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4234:	6863      	ldr	r3, [r4, #4]
   d4236:	3b01      	subs	r3, #1
   d4238:	6063      	str	r3, [r4, #4]
   d423a:	b95b      	cbnz	r3, d4254 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d423c:	6823      	ldr	r3, [r4, #0]
   d423e:	4620      	mov	r0, r4
   d4240:	689b      	ldr	r3, [r3, #8]
   d4242:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4244:	68a3      	ldr	r3, [r4, #8]
   d4246:	3b01      	subs	r3, #1
   d4248:	60a3      	str	r3, [r4, #8]
   d424a:	b91b      	cbnz	r3, d4254 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d424c:	6823      	ldr	r3, [r4, #0]
   d424e:	4620      	mov	r0, r4
   d4250:	68db      	ldr	r3, [r3, #12]
   d4252:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4254:	4628      	mov	r0, r5
   d4256:	bd38      	pop	{r3, r4, r5, pc}

000d4258 <loop>:
}


// Now for the loop.

void loop() {
   d4258:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  so that if we want to, we can check from other devices when the LED is on or off.

  We'll also turn the D7 LED on when the Photoresistor detects a beam breakagse.
  */

  if (analogRead(photoresistor)>beamThreshold) {
   d425a:	4b24      	ldr	r3, [pc, #144]	; (d42ec <loop+0x94>)
   d425c:	4c24      	ldr	r4, [pc, #144]	; (d42f0 <loop+0x98>)
   d425e:	8818      	ldrh	r0, [r3, #0]
   d4260:	f001 fa42 	bl	d56e8 <analogRead>
   d4264:	4b23      	ldr	r3, [pc, #140]	; (d42f4 <loop+0x9c>)
   d4266:	681b      	ldr	r3, [r3, #0]
   d4268:	4298      	cmp	r0, r3
   d426a:	dd1e      	ble.n	d42aa <loop+0x52>
    This flag monitors the current status of the beam.
    After the beam is broken, it is set TRUE
    and when the beam reconnects it is set to FALSE.
    */

    if (beamBroken==true) {
   d426c:	7823      	ldrb	r3, [r4, #0]
   d426e:	2b00      	cmp	r3, #0
   d4270:	d039      	beq.n	d42e6 <loop+0x8e>
   d4272:	4b21      	ldr	r3, [pc, #132]	; (d42f8 <loop+0xa0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4274:	4a21      	ldr	r2, [pc, #132]	; (d42fc <loop+0xa4>)
   d4276:	781b      	ldrb	r3, [r3, #0]
   d4278:	4921      	ldr	r1, [pc, #132]	; (d4300 <loop+0xa8>)
   d427a:	f88d 3000 	strb.w	r3, [sp]
   d427e:	a802      	add	r0, sp, #8
   d4280:	233c      	movs	r3, #60	; 0x3c
        // We will send a publish to the cloud and turn the LED on.

        // Send a publish to your devices...
        Particle.publish("beamStatus","intact",60,PRIVATE);
        // And flash the on-board LED on and off.
        digitalWrite(boardLed,HIGH);
   d4282:	4d20      	ldr	r5, [pc, #128]	; (d4304 <loop+0xac>)
   d4284:	f000 fcfe 	bl	d4c84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4288:	a803      	add	r0, sp, #12
   d428a:	f7ff ffcf 	bl	d422c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d428e:	2101      	movs	r1, #1
   d4290:	8828      	ldrh	r0, [r5, #0]
   d4292:	f001 fa10 	bl	d56b6 <digitalWrite>
        delay(500);
   d4296:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d429a:	f000 fb17 	bl	d48cc <delay>
        digitalWrite(boardLed,LOW);
   d429e:	2100      	movs	r1, #0
   d42a0:	8828      	ldrh	r0, [r5, #0]
   d42a2:	f001 fa08 	bl	d56b6 <digitalWrite>

        // Finally, set the flag to reflect the current status of the beam.
        beamBroken=false;
   d42a6:	2300      	movs	r3, #0
   d42a8:	e01c      	b.n	d42e4 <loop+0x8c>
    }
  }

  else {
      // If you are below the threshold, the beam is probably broken.
      if (beamBroken==false) {
   d42aa:	7826      	ldrb	r6, [r4, #0]
   d42ac:	b9de      	cbnz	r6, d42e6 <loop+0x8e>
   d42ae:	4b12      	ldr	r3, [pc, #72]	; (d42f8 <loop+0xa0>)
   d42b0:	4a15      	ldr	r2, [pc, #84]	; (d4308 <loop+0xb0>)
   d42b2:	781b      	ldrb	r3, [r3, #0]
   d42b4:	4912      	ldr	r1, [pc, #72]	; (d4300 <loop+0xa8>)
   d42b6:	f88d 3000 	strb.w	r3, [sp]
   d42ba:	a802      	add	r0, sp, #8
   d42bc:	233c      	movs	r3, #60	; 0x3c

        // Send a publish...
        Particle.publish("beamStatus","broken",60,PRIVATE);
        // And flash the on-board LED on and off.
        digitalWrite(boardLed,HIGH);
   d42be:	4d11      	ldr	r5, [pc, #68]	; (d4304 <loop+0xac>)
   d42c0:	f000 fce0 	bl	d4c84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d42c4:	a803      	add	r0, sp, #12
   d42c6:	f7ff ffb1 	bl	d422c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d42ca:	2101      	movs	r1, #1
   d42cc:	8828      	ldrh	r0, [r5, #0]
   d42ce:	f001 f9f2 	bl	d56b6 <digitalWrite>
        delay(500);
   d42d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d42d6:	f000 faf9 	bl	d48cc <delay>
        digitalWrite(boardLed,LOW);
   d42da:	4631      	mov	r1, r6
   d42dc:	8828      	ldrh	r0, [r5, #0]
   d42de:	f001 f9ea 	bl	d56b6 <digitalWrite>

        // Finally, set the flag to reflect the current status of the beam.
        beamBroken=true;
   d42e2:	2301      	movs	r3, #1
   d42e4:	7023      	strb	r3, [r4, #0]
      else {
          // Otherwise, this isn't a new status, and we don't have to do anything.
      }
  }

}
   d42e6:	b004      	add	sp, #16
   d42e8:	bd70      	pop	{r4, r5, r6, pc}
   d42ea:	bf00      	nop
   d42ec:	2003e344 	.word	0x2003e344
   d42f0:	2003e3c0 	.word	0x2003e3c0
   d42f4:	2003e3b4 	.word	0x2003e3b4
   d42f8:	2003e3c1 	.word	0x2003e3c1
   d42fc:	000d5b30 	.word	0x000d5b30
   d4300:	000d5b37 	.word	0x000d5b37
   d4304:	2003e33c 	.word	0x2003e33c
   d4308:	000d5b42 	.word	0x000d5b42

000d430c <_GLOBAL__sub_I_led>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d430c:	4b02      	ldr	r3, [pc, #8]	; (d4318 <_GLOBAL__sub_I_led+0xc>)
   d430e:	2201      	movs	r2, #1
   d4310:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4312:	f000 b813 	b.w	d433c <HAL_Pin_Map>
   d4316:	bf00      	nop
   d4318:	2003e3c1 	.word	0x2003e3c1

000d431c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d431c:	b508      	push	{r3, lr}
   d431e:	4b02      	ldr	r3, [pc, #8]	; (d4328 <netdb_freeaddrinfo+0xc>)
   d4320:	681b      	ldr	r3, [r3, #0]
   d4322:	689b      	ldr	r3, [r3, #8]
   d4324:	9301      	str	r3, [sp, #4]
   d4326:	bd08      	pop	{r3, pc}
   d4328:	00030268 	.word	0x00030268

000d432c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d432c:	b508      	push	{r3, lr}
   d432e:	4b02      	ldr	r3, [pc, #8]	; (d4338 <netdb_getaddrinfo+0xc>)
   d4330:	681b      	ldr	r3, [r3, #0]
   d4332:	68db      	ldr	r3, [r3, #12]
   d4334:	9301      	str	r3, [sp, #4]
   d4336:	bd08      	pop	{r3, pc}
   d4338:	00030268 	.word	0x00030268

000d433c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d433c:	b508      	push	{r3, lr}
   d433e:	4b02      	ldr	r3, [pc, #8]	; (d4348 <HAL_Pin_Map+0xc>)
   d4340:	681b      	ldr	r3, [r3, #0]
   d4342:	681b      	ldr	r3, [r3, #0]
   d4344:	9301      	str	r3, [sp, #4]
   d4346:	bd08      	pop	{r3, pc}
   d4348:	0003022c 	.word	0x0003022c

000d434c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d434c:	b508      	push	{r3, lr}
   d434e:	4b02      	ldr	r3, [pc, #8]	; (d4358 <HAL_Validate_Pin_Function+0xc>)
   d4350:	681b      	ldr	r3, [r3, #0]
   d4352:	685b      	ldr	r3, [r3, #4]
   d4354:	9301      	str	r3, [sp, #4]
   d4356:	bd08      	pop	{r3, pc}
   d4358:	0003022c 	.word	0x0003022c

000d435c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d435c:	b508      	push	{r3, lr}
   d435e:	4b02      	ldr	r3, [pc, #8]	; (d4368 <HAL_Pin_Mode+0xc>)
   d4360:	681b      	ldr	r3, [r3, #0]
   d4362:	689b      	ldr	r3, [r3, #8]
   d4364:	9301      	str	r3, [sp, #4]
   d4366:	bd08      	pop	{r3, pc}
   d4368:	0003022c 	.word	0x0003022c

000d436c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d436c:	b508      	push	{r3, lr}
   d436e:	4b02      	ldr	r3, [pc, #8]	; (d4378 <HAL_Get_Pin_Mode+0xc>)
   d4370:	681b      	ldr	r3, [r3, #0]
   d4372:	68db      	ldr	r3, [r3, #12]
   d4374:	9301      	str	r3, [sp, #4]
   d4376:	bd08      	pop	{r3, pc}
   d4378:	0003022c 	.word	0x0003022c

000d437c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d437c:	b508      	push	{r3, lr}
   d437e:	4b02      	ldr	r3, [pc, #8]	; (d4388 <HAL_GPIO_Write+0xc>)
   d4380:	681b      	ldr	r3, [r3, #0]
   d4382:	691b      	ldr	r3, [r3, #16]
   d4384:	9301      	str	r3, [sp, #4]
   d4386:	bd08      	pop	{r3, pc}
   d4388:	0003022c 	.word	0x0003022c

000d438c <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d438c:	b508      	push	{r3, lr}
   d438e:	4b02      	ldr	r3, [pc, #8]	; (d4398 <HAL_ADC_Read+0xc>)
   d4390:	681b      	ldr	r3, [r3, #0]
   d4392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4394:	9301      	str	r3, [sp, #4]
   d4396:	bd08      	pop	{r3, pc}
   d4398:	0003022c 	.word	0x0003022c

000d439c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d439c:	b508      	push	{r3, lr}
   d439e:	4b02      	ldr	r3, [pc, #8]	; (d43a8 <HAL_SPI_Init+0xc>)
   d43a0:	681b      	ldr	r3, [r3, #0]
   d43a2:	69db      	ldr	r3, [r3, #28]
   d43a4:	9301      	str	r3, [sp, #4]
   d43a6:	bd08      	pop	{r3, pc}
   d43a8:	00030230 	.word	0x00030230

000d43ac <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d43ac:	b508      	push	{r3, lr}
   d43ae:	4b02      	ldr	r3, [pc, #8]	; (d43b8 <HAL_SPI_Is_Enabled+0xc>)
   d43b0:	681b      	ldr	r3, [r3, #0]
   d43b2:	6a1b      	ldr	r3, [r3, #32]
   d43b4:	9301      	str	r3, [sp, #4]
   d43b6:	bd08      	pop	{r3, pc}
   d43b8:	00030230 	.word	0x00030230

000d43bc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d43bc:	b508      	push	{r3, lr}
   d43be:	4b02      	ldr	r3, [pc, #8]	; (d43c8 <HAL_RNG_GetRandomNumber+0xc>)
   d43c0:	681b      	ldr	r3, [r3, #0]
   d43c2:	685b      	ldr	r3, [r3, #4]
   d43c4:	9301      	str	r3, [sp, #4]
   d43c6:	bd08      	pop	{r3, pc}
   d43c8:	00030218 	.word	0x00030218

000d43cc <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d43cc:	b508      	push	{r3, lr}
   d43ce:	4b02      	ldr	r3, [pc, #8]	; (d43d8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d43d0:	681b      	ldr	r3, [r3, #0]
   d43d2:	695b      	ldr	r3, [r3, #20]
   d43d4:	9301      	str	r3, [sp, #4]
   d43d6:	bd08      	pop	{r3, pc}
   d43d8:	00030218 	.word	0x00030218

000d43dc <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d43dc:	b508      	push	{r3, lr}
   d43de:	4b02      	ldr	r3, [pc, #8]	; (d43e8 <os_thread_is_current+0xc>)
   d43e0:	681b      	ldr	r3, [r3, #0]
   d43e2:	689b      	ldr	r3, [r3, #8]
   d43e4:	9301      	str	r3, [sp, #4]
   d43e6:	bd08      	pop	{r3, pc}
   d43e8:	00030248 	.word	0x00030248

000d43ec <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d43ec:	b508      	push	{r3, lr}
   d43ee:	4b02      	ldr	r3, [pc, #8]	; (d43f8 <os_thread_join+0xc>)
   d43f0:	681b      	ldr	r3, [r3, #0]
   d43f2:	691b      	ldr	r3, [r3, #16]
   d43f4:	9301      	str	r3, [sp, #4]
   d43f6:	bd08      	pop	{r3, pc}
   d43f8:	00030248 	.word	0x00030248

000d43fc <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d43fc:	b508      	push	{r3, lr}
   d43fe:	4b02      	ldr	r3, [pc, #8]	; (d4408 <os_thread_cleanup+0xc>)
   d4400:	681b      	ldr	r3, [r3, #0]
   d4402:	695b      	ldr	r3, [r3, #20]
   d4404:	9301      	str	r3, [sp, #4]
   d4406:	bd08      	pop	{r3, pc}
   d4408:	00030248 	.word	0x00030248

000d440c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d440c:	b508      	push	{r3, lr}
   d440e:	4b02      	ldr	r3, [pc, #8]	; (d4418 <os_mutex_create+0xc>)
   d4410:	681b      	ldr	r3, [r3, #0]
   d4412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4414:	9301      	str	r3, [sp, #4]
   d4416:	bd08      	pop	{r3, pc}
   d4418:	00030248 	.word	0x00030248

000d441c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d441c:	b508      	push	{r3, lr}
   d441e:	4b02      	ldr	r3, [pc, #8]	; (d4428 <os_mutex_recursive_create+0xc>)
   d4420:	681b      	ldr	r3, [r3, #0]
   d4422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4424:	9301      	str	r3, [sp, #4]
   d4426:	bd08      	pop	{r3, pc}
   d4428:	00030248 	.word	0x00030248

000d442c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d442c:	b508      	push	{r3, lr}
   d442e:	4b02      	ldr	r3, [pc, #8]	; (d4438 <inet_inet_ntop+0xc>)
   d4430:	681b      	ldr	r3, [r3, #0]
   d4432:	695b      	ldr	r3, [r3, #20]
   d4434:	9301      	str	r3, [sp, #4]
   d4436:	bd08      	pop	{r3, pc}
   d4438:	00030264 	.word	0x00030264

000d443c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d443c:	b508      	push	{r3, lr}
   d443e:	4b02      	ldr	r3, [pc, #8]	; (d4448 <HAL_USART_Init+0xc>)
   d4440:	681b      	ldr	r3, [r3, #0]
   d4442:	681b      	ldr	r3, [r3, #0]
   d4444:	9301      	str	r3, [sp, #4]
   d4446:	bd08      	pop	{r3, pc}
   d4448:	0003023c 	.word	0x0003023c

000d444c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d444c:	b508      	push	{r3, lr}
   d444e:	4b02      	ldr	r3, [pc, #8]	; (d4458 <HAL_USART_Write_Data+0xc>)
   d4450:	681b      	ldr	r3, [r3, #0]
   d4452:	68db      	ldr	r3, [r3, #12]
   d4454:	9301      	str	r3, [sp, #4]
   d4456:	bd08      	pop	{r3, pc}
   d4458:	0003023c 	.word	0x0003023c

000d445c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d445c:	b508      	push	{r3, lr}
   d445e:	4b02      	ldr	r3, [pc, #8]	; (d4468 <HAL_USART_Available_Data+0xc>)
   d4460:	681b      	ldr	r3, [r3, #0]
   d4462:	691b      	ldr	r3, [r3, #16]
   d4464:	9301      	str	r3, [sp, #4]
   d4466:	bd08      	pop	{r3, pc}
   d4468:	0003023c 	.word	0x0003023c

000d446c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d446c:	b508      	push	{r3, lr}
   d446e:	4b02      	ldr	r3, [pc, #8]	; (d4478 <HAL_USART_Read_Data+0xc>)
   d4470:	681b      	ldr	r3, [r3, #0]
   d4472:	695b      	ldr	r3, [r3, #20]
   d4474:	9301      	str	r3, [sp, #4]
   d4476:	bd08      	pop	{r3, pc}
   d4478:	0003023c 	.word	0x0003023c

000d447c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d447c:	b508      	push	{r3, lr}
   d447e:	4b02      	ldr	r3, [pc, #8]	; (d4488 <HAL_USART_Peek_Data+0xc>)
   d4480:	681b      	ldr	r3, [r3, #0]
   d4482:	699b      	ldr	r3, [r3, #24]
   d4484:	9301      	str	r3, [sp, #4]
   d4486:	bd08      	pop	{r3, pc}
   d4488:	0003023c 	.word	0x0003023c

000d448c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d448c:	b508      	push	{r3, lr}
   d448e:	4b02      	ldr	r3, [pc, #8]	; (d4498 <HAL_USART_Flush_Data+0xc>)
   d4490:	681b      	ldr	r3, [r3, #0]
   d4492:	69db      	ldr	r3, [r3, #28]
   d4494:	9301      	str	r3, [sp, #4]
   d4496:	bd08      	pop	{r3, pc}
   d4498:	0003023c 	.word	0x0003023c

000d449c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d449c:	b508      	push	{r3, lr}
   d449e:	4b02      	ldr	r3, [pc, #8]	; (d44a8 <HAL_USART_Is_Enabled+0xc>)
   d44a0:	681b      	ldr	r3, [r3, #0]
   d44a2:	6a1b      	ldr	r3, [r3, #32]
   d44a4:	9301      	str	r3, [sp, #4]
   d44a6:	bd08      	pop	{r3, pc}
   d44a8:	0003023c 	.word	0x0003023c

000d44ac <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d44ac:	b508      	push	{r3, lr}
   d44ae:	4b02      	ldr	r3, [pc, #8]	; (d44b8 <HAL_USART_Available_Data_For_Write+0xc>)
   d44b0:	681b      	ldr	r3, [r3, #0]
   d44b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d44b4:	9301      	str	r3, [sp, #4]
   d44b6:	bd08      	pop	{r3, pc}
   d44b8:	0003023c 	.word	0x0003023c

000d44bc <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d44bc:	b508      	push	{r3, lr}
   d44be:	4b02      	ldr	r3, [pc, #8]	; (d44c8 <HAL_I2C_Write_Data+0xc>)
   d44c0:	681b      	ldr	r3, [r3, #0]
   d44c2:	6a1b      	ldr	r3, [r3, #32]
   d44c4:	9301      	str	r3, [sp, #4]
   d44c6:	bd08      	pop	{r3, pc}
   d44c8:	00030228 	.word	0x00030228

000d44cc <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d44cc:	b508      	push	{r3, lr}
   d44ce:	4b02      	ldr	r3, [pc, #8]	; (d44d8 <HAL_I2C_Available_Data+0xc>)
   d44d0:	681b      	ldr	r3, [r3, #0]
   d44d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d44d4:	9301      	str	r3, [sp, #4]
   d44d6:	bd08      	pop	{r3, pc}
   d44d8:	00030228 	.word	0x00030228

000d44dc <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d44dc:	b508      	push	{r3, lr}
   d44de:	4b02      	ldr	r3, [pc, #8]	; (d44e8 <HAL_I2C_Read_Data+0xc>)
   d44e0:	681b      	ldr	r3, [r3, #0]
   d44e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d44e4:	9301      	str	r3, [sp, #4]
   d44e6:	bd08      	pop	{r3, pc}
   d44e8:	00030228 	.word	0x00030228

000d44ec <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d44ec:	b508      	push	{r3, lr}
   d44ee:	4b02      	ldr	r3, [pc, #8]	; (d44f8 <HAL_I2C_Peek_Data+0xc>)
   d44f0:	681b      	ldr	r3, [r3, #0]
   d44f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d44f4:	9301      	str	r3, [sp, #4]
   d44f6:	bd08      	pop	{r3, pc}
   d44f8:	00030228 	.word	0x00030228

000d44fc <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d44fc:	b508      	push	{r3, lr}
   d44fe:	4b02      	ldr	r3, [pc, #8]	; (d4508 <HAL_I2C_Flush_Data+0xc>)
   d4500:	681b      	ldr	r3, [r3, #0]
   d4502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4504:	9301      	str	r3, [sp, #4]
   d4506:	bd08      	pop	{r3, pc}
   d4508:	00030228 	.word	0x00030228

000d450c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d450c:	b508      	push	{r3, lr}
   d450e:	4b02      	ldr	r3, [pc, #8]	; (d4518 <HAL_I2C_Is_Enabled+0xc>)
   d4510:	681b      	ldr	r3, [r3, #0]
   d4512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4514:	9301      	str	r3, [sp, #4]
   d4516:	bd08      	pop	{r3, pc}
   d4518:	00030228 	.word	0x00030228

000d451c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d451c:	b508      	push	{r3, lr}
   d451e:	4b02      	ldr	r3, [pc, #8]	; (d4528 <HAL_I2C_Init+0xc>)
   d4520:	681b      	ldr	r3, [r3, #0]
   d4522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4524:	9301      	str	r3, [sp, #4]
   d4526:	bd08      	pop	{r3, pc}
   d4528:	00030228 	.word	0x00030228

000d452c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d452c:	b508      	push	{r3, lr}
   d452e:	4b02      	ldr	r3, [pc, #8]	; (d4538 <HAL_USB_USART_Init+0xc>)
   d4530:	681b      	ldr	r3, [r3, #0]
   d4532:	681b      	ldr	r3, [r3, #0]
   d4534:	9301      	str	r3, [sp, #4]
   d4536:	bd08      	pop	{r3, pc}
   d4538:	0003024c 	.word	0x0003024c

000d453c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d453c:	b508      	push	{r3, lr}
   d453e:	4b02      	ldr	r3, [pc, #8]	; (d4548 <HAL_USB_USART_Available_Data+0xc>)
   d4540:	681b      	ldr	r3, [r3, #0]
   d4542:	691b      	ldr	r3, [r3, #16]
   d4544:	9301      	str	r3, [sp, #4]
   d4546:	bd08      	pop	{r3, pc}
   d4548:	0003024c 	.word	0x0003024c

000d454c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d454c:	b508      	push	{r3, lr}
   d454e:	4b02      	ldr	r3, [pc, #8]	; (d4558 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4550:	681b      	ldr	r3, [r3, #0]
   d4552:	695b      	ldr	r3, [r3, #20]
   d4554:	9301      	str	r3, [sp, #4]
   d4556:	bd08      	pop	{r3, pc}
   d4558:	0003024c 	.word	0x0003024c

000d455c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d455c:	b508      	push	{r3, lr}
   d455e:	4b02      	ldr	r3, [pc, #8]	; (d4568 <HAL_USB_USART_Receive_Data+0xc>)
   d4560:	681b      	ldr	r3, [r3, #0]
   d4562:	699b      	ldr	r3, [r3, #24]
   d4564:	9301      	str	r3, [sp, #4]
   d4566:	bd08      	pop	{r3, pc}
   d4568:	0003024c 	.word	0x0003024c

000d456c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d456c:	b508      	push	{r3, lr}
   d456e:	4b02      	ldr	r3, [pc, #8]	; (d4578 <HAL_USB_USART_Send_Data+0xc>)
   d4570:	681b      	ldr	r3, [r3, #0]
   d4572:	69db      	ldr	r3, [r3, #28]
   d4574:	9301      	str	r3, [sp, #4]
   d4576:	bd08      	pop	{r3, pc}
   d4578:	0003024c 	.word	0x0003024c

000d457c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d457c:	b508      	push	{r3, lr}
   d457e:	4b02      	ldr	r3, [pc, #8]	; (d4588 <HAL_USB_USART_Flush_Data+0xc>)
   d4580:	681b      	ldr	r3, [r3, #0]
   d4582:	6a1b      	ldr	r3, [r3, #32]
   d4584:	9301      	str	r3, [sp, #4]
   d4586:	bd08      	pop	{r3, pc}
   d4588:	0003024c 	.word	0x0003024c

000d458c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d458c:	b508      	push	{r3, lr}
   d458e:	4b02      	ldr	r3, [pc, #8]	; (d4598 <set_system_mode+0xc>)
   d4590:	681b      	ldr	r3, [r3, #0]
   d4592:	685b      	ldr	r3, [r3, #4]
   d4594:	9301      	str	r3, [sp, #4]
   d4596:	bd08      	pop	{r3, pc}
   d4598:	00030220 	.word	0x00030220

000d459c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d459c:	b508      	push	{r3, lr}
   d459e:	4b02      	ldr	r3, [pc, #8]	; (d45a8 <system_delay_ms+0xc>)
   d45a0:	681b      	ldr	r3, [r3, #0]
   d45a2:	695b      	ldr	r3, [r3, #20]
   d45a4:	9301      	str	r3, [sp, #4]
   d45a6:	bd08      	pop	{r3, pc}
   d45a8:	00030220 	.word	0x00030220

000d45ac <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d45ac:	b508      	push	{r3, lr}
   d45ae:	4b02      	ldr	r3, [pc, #8]	; (d45b8 <application_thread_current+0xc>)
   d45b0:	681b      	ldr	r3, [r3, #0]
   d45b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d45b4:	9301      	str	r3, [sp, #4]
   d45b6:	bd08      	pop	{r3, pc}
   d45b8:	00030220 	.word	0x00030220

000d45bc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d45bc:	b508      	push	{r3, lr}
   d45be:	4b02      	ldr	r3, [pc, #8]	; (d45c8 <application_thread_invoke+0xc>)
   d45c0:	681b      	ldr	r3, [r3, #0]
   d45c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d45c4:	9301      	str	r3, [sp, #4]
   d45c6:	bd08      	pop	{r3, pc}
   d45c8:	00030220 	.word	0x00030220

000d45cc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d45cc:	b508      	push	{r3, lr}
   d45ce:	4b03      	ldr	r3, [pc, #12]	; (d45dc <system_ctrl_set_app_request_handler+0x10>)
   d45d0:	681b      	ldr	r3, [r3, #0]
   d45d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d45d6:	9301      	str	r3, [sp, #4]
   d45d8:	bd08      	pop	{r3, pc}
   d45da:	0000      	.short	0x0000
   d45dc:	00030220 	.word	0x00030220

000d45e0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d45e0:	b508      	push	{r3, lr}
   d45e2:	4b03      	ldr	r3, [pc, #12]	; (d45f0 <system_ctrl_set_result+0x10>)
   d45e4:	681b      	ldr	r3, [r3, #0]
   d45e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d45ea:	9301      	str	r3, [sp, #4]
   d45ec:	bd08      	pop	{r3, pc}
   d45ee:	0000      	.short	0x0000
   d45f0:	00030220 	.word	0x00030220

000d45f4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <network_connect+0xc>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	685b      	ldr	r3, [r3, #4]
   d45fc:	9301      	str	r3, [sp, #4]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	00030240 	.word	0x00030240

000d4604 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b02      	ldr	r3, [pc, #8]	; (d4610 <network_connecting+0xc>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	689b      	ldr	r3, [r3, #8]
   d460c:	9301      	str	r3, [sp, #4]
   d460e:	bd08      	pop	{r3, pc}
   d4610:	00030240 	.word	0x00030240

000d4614 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <network_disconnect+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	68db      	ldr	r3, [r3, #12]
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	00030240 	.word	0x00030240

000d4624 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b02      	ldr	r3, [pc, #8]	; (d4630 <network_ready+0xc>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	691b      	ldr	r3, [r3, #16]
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	bd08      	pop	{r3, pc}
   d4630:	00030240 	.word	0x00030240

000d4634 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <network_on+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	695b      	ldr	r3, [r3, #20]
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	00030240 	.word	0x00030240

000d4644 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <network_off+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	699b      	ldr	r3, [r3, #24]
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	00030240 	.word	0x00030240

000d4654 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <network_listen+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	69db      	ldr	r3, [r3, #28]
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	00030240 	.word	0x00030240

000d4664 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <network_listening+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	6a1b      	ldr	r3, [r3, #32]
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	00030240 	.word	0x00030240

000d4674 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <network_set_listen_timeout+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	00030240 	.word	0x00030240

000d4684 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <network_get_listen_timeout+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	00030240 	.word	0x00030240

000d4694 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b02      	ldr	r3, [pc, #8]	; (d46a0 <spark_cloud_flag_connected+0xc>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	695b      	ldr	r3, [r3, #20]
   d469c:	9301      	str	r3, [sp, #4]
   d469e:	bd08      	pop	{r3, pc}
   d46a0:	00030244 	.word	0x00030244

000d46a4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b02      	ldr	r3, [pc, #8]	; (d46b0 <spark_send_event+0xc>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	6a1b      	ldr	r3, [r3, #32]
   d46ac:	9301      	str	r3, [sp, #4]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	00030244 	.word	0x00030244

000d46b4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	00030244 	.word	0x00030244

000d46c4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <malloc+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	681b      	ldr	r3, [r3, #0]
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	0003021c 	.word	0x0003021c

000d46d4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <free+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	685b      	ldr	r3, [r3, #4]
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	0003021c 	.word	0x0003021c

000d46e4 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <abort+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	0003021c 	.word	0x0003021c

000d46f4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <_malloc_r+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	0003021c 	.word	0x0003021c

000d4704 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4704:	2200      	movs	r2, #0
   d4706:	4611      	mov	r1, r2
   d4708:	6840      	ldr	r0, [r0, #4]
   d470a:	f7ff bfab 	b.w	d4664 <network_listening>

000d470e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d470e:	2200      	movs	r2, #0
   d4710:	4611      	mov	r1, r2
   d4712:	6840      	ldr	r0, [r0, #4]
   d4714:	f7ff bfb6 	b.w	d4684 <network_get_listen_timeout>

000d4718 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4718:	2200      	movs	r2, #0
   d471a:	6840      	ldr	r0, [r0, #4]
   d471c:	f7ff bfaa 	b.w	d4674 <network_set_listen_timeout>

000d4720 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4720:	2200      	movs	r2, #0
   d4722:	f081 0101 	eor.w	r1, r1, #1
   d4726:	6840      	ldr	r0, [r0, #4]
   d4728:	f7ff bf94 	b.w	d4654 <network_listen>

000d472c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d472c:	2300      	movs	r3, #0
   d472e:	461a      	mov	r2, r3
   d4730:	4619      	mov	r1, r3
   d4732:	6840      	ldr	r0, [r0, #4]
   d4734:	f7ff bf86 	b.w	d4644 <network_off>

000d4738 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4738:	2300      	movs	r3, #0
   d473a:	461a      	mov	r2, r3
   d473c:	4619      	mov	r1, r3
   d473e:	6840      	ldr	r0, [r0, #4]
   d4740:	f7ff bf78 	b.w	d4634 <network_on>

000d4744 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4744:	2200      	movs	r2, #0
   d4746:	4611      	mov	r1, r2
   d4748:	6840      	ldr	r0, [r0, #4]
   d474a:	f7ff bf6b 	b.w	d4624 <network_ready>

000d474e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d474e:	2200      	movs	r2, #0
   d4750:	4611      	mov	r1, r2
   d4752:	6840      	ldr	r0, [r0, #4]
   d4754:	f7ff bf56 	b.w	d4604 <network_connecting>

000d4758 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4758:	2200      	movs	r2, #0
   d475a:	2102      	movs	r1, #2
   d475c:	6840      	ldr	r0, [r0, #4]
   d475e:	f7ff bf59 	b.w	d4614 <network_disconnect>

000d4762 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4762:	2300      	movs	r3, #0
   d4764:	461a      	mov	r2, r3
   d4766:	6840      	ldr	r0, [r0, #4]
   d4768:	f7ff bf44 	b.w	d45f4 <network_connect>

000d476c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d476c:	4b02      	ldr	r3, [pc, #8]	; (d4778 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d476e:	2203      	movs	r2, #3
   d4770:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4772:	4a02      	ldr	r2, [pc, #8]	; (d477c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4774:	601a      	str	r2, [r3, #0]
   d4776:	4770      	bx	lr
   d4778:	2003e3c8 	.word	0x2003e3c8
   d477c:	000d5b54 	.word	0x000d5b54

000d4780 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4780:	4770      	bx	lr

000d4782 <_ZN8SPIClassD0Ev>:
   d4782:	b510      	push	{r4, lr}
   d4784:	2110      	movs	r1, #16
   d4786:	4604      	mov	r4, r0
   d4788:	f001 f80d 	bl	d57a6 <_ZdlPvj>
   d478c:	4620      	mov	r0, r4
   d478e:	bd10      	pop	{r4, pc}

000d4790 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4790:	b570      	push	{r4, r5, r6, lr}
   d4792:	4b08      	ldr	r3, [pc, #32]	; (d47b4 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4794:	6003      	str	r3, [r0, #0]
   d4796:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4798:	2500      	movs	r5, #0
   d479a:	460e      	mov	r6, r1
   d479c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d47a0:	f7ff fe34 	bl	d440c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d47a4:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d47a6:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d47a8:	f7ff fdf8 	bl	d439c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d47ac:	60a5      	str	r5, [r4, #8]
}
   d47ae:	4620      	mov	r0, r4
   d47b0:	bd70      	pop	{r4, r5, r6, pc}
   d47b2:	bf00      	nop
   d47b4:	000d5b88 	.word	0x000d5b88

000d47b8 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d47b8:	7900      	ldrb	r0, [r0, #4]
   d47ba:	f7ff bdf7 	b.w	d43ac <HAL_SPI_Is_Enabled>
	...

000d47c0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d47c0:	4b04      	ldr	r3, [pc, #16]	; (d47d4 <_GLOBAL__sub_I_System+0x14>)
   d47c2:	2000      	movs	r0, #0
   d47c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d47c8:	7018      	strb	r0, [r3, #0]
   d47ca:	8058      	strh	r0, [r3, #2]
   d47cc:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d47ce:	f7ff bedd 	b.w	d458c <set_system_mode>
   d47d2:	bf00      	nop
   d47d4:	2003e3d0 	.word	0x2003e3d0

000d47d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d47d8:	680b      	ldr	r3, [r1, #0]
   d47da:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d47dc:	b113      	cbz	r3, d47e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d47de:	685a      	ldr	r2, [r3, #4]
   d47e0:	3201      	adds	r2, #1
   d47e2:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d47e4:	4770      	bx	lr
	...

000d47e8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d47e8:	4802      	ldr	r0, [pc, #8]	; (d47f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d47ea:	2300      	movs	r3, #0
   d47ec:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d47ee:	f7ff be15 	b.w	d441c <os_mutex_recursive_create>
   d47f2:	bf00      	nop
   d47f4:	2003e3d8 	.word	0x2003e3d8

000d47f8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d47f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d47fa:	4606      	mov	r6, r0
   d47fc:	460d      	mov	r5, r1
   d47fe:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4800:	2400      	movs	r4, #0
  while (size--) {
   d4802:	42bd      	cmp	r5, r7
   d4804:	d00c      	beq.n	d4820 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4806:	6833      	ldr	r3, [r6, #0]
   d4808:	f815 1b01 	ldrb.w	r1, [r5], #1
   d480c:	689b      	ldr	r3, [r3, #8]
   d480e:	4630      	mov	r0, r6
   d4810:	4798      	blx	r3
     if (chunk>=0)
   d4812:	2800      	cmp	r0, #0
   d4814:	db01      	blt.n	d481a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4816:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4818:	e7f3      	b.n	d4802 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d481a:	2c00      	cmp	r4, #0
   d481c:	bf08      	it	eq
   d481e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4820:	4620      	mov	r0, r4
   d4822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4824 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4824:	b570      	push	{r4, r5, r6, lr}
   d4826:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4828:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d482a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d482c:	b149      	cbz	r1, d4842 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d482e:	f001 f96c 	bl	d5b0a <strlen>
   d4832:	682b      	ldr	r3, [r5, #0]
   d4834:	4602      	mov	r2, r0
   d4836:	4621      	mov	r1, r4
   d4838:	4628      	mov	r0, r5
   d483a:	68db      	ldr	r3, [r3, #12]
    }
   d483c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4840:	4718      	bx	r3
    }
   d4842:	bd70      	pop	{r4, r5, r6, pc}

000d4844 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4844:	6803      	ldr	r3, [r0, #0]
   d4846:	689b      	ldr	r3, [r3, #8]
   d4848:	4718      	bx	r3

000d484a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d484a:	b530      	push	{r4, r5, lr}
   d484c:	b08b      	sub	sp, #44	; 0x2c
   d484e:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4850:	2100      	movs	r1, #0
   d4852:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4856:	2a01      	cmp	r2, #1
   d4858:	bf98      	it	ls
   d485a:	220a      	movls	r2, #10
   d485c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d4860:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d4864:	fb05 3312 	mls	r3, r5, r2, r3
   d4868:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d486c:	2b09      	cmp	r3, #9
   d486e:	bf94      	ite	ls
   d4870:	3330      	addls	r3, #48	; 0x30
   d4872:	3337      	addhi	r3, #55	; 0x37
   d4874:	b2db      	uxtb	r3, r3
   d4876:	4621      	mov	r1, r4
   d4878:	f804 3901 	strb.w	r3, [r4], #-1
   d487c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d487e:	2d00      	cmp	r5, #0
   d4880:	d1ee      	bne.n	d4860 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4882:	f7ff ffcf 	bl	d4824 <_ZN5Print5writeEPKc>
}
   d4886:	b00b      	add	sp, #44	; 0x2c
   d4888:	bd30      	pop	{r4, r5, pc}

000d488a <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d488a:	b410      	push	{r4}
  if (base == 0) return write(n);
   d488c:	b92a      	cbnz	r2, d489a <_ZN5Print5printEmi+0x10>
   d488e:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d4890:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d4894:	689b      	ldr	r3, [r3, #8]
   d4896:	b2c9      	uxtb	r1, r1
   d4898:	4718      	bx	r3
  else return printNumber(n, base);
   d489a:	b2d2      	uxtb	r2, r2
}
   d489c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d48a0:	f7ff bfd3 	b.w	d484a <_ZN5Print11printNumberEmh>

000d48a4 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d48a4:	f7ff bff1 	b.w	d488a <_ZN5Print5printEmi>

000d48a8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d48a8:	4b01      	ldr	r3, [pc, #4]	; (d48b0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d48aa:	4a02      	ldr	r2, [pc, #8]	; (d48b4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d48ac:	601a      	str	r2, [r3, #0]
   d48ae:	4770      	bx	lr
   d48b0:	2003e3dc 	.word	0x2003e3dc
   d48b4:	000d5c03 	.word	0x000d5c03

000d48b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d48b8:	4b02      	ldr	r3, [pc, #8]	; (d48c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d48ba:	681a      	ldr	r2, [r3, #0]
   d48bc:	4b02      	ldr	r3, [pc, #8]	; (d48c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d48be:	601a      	str	r2, [r3, #0]
   d48c0:	4770      	bx	lr
   d48c2:	bf00      	nop
   d48c4:	2003e348 	.word	0x2003e348
   d48c8:	2003e3e0 	.word	0x2003e3e0

000d48cc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d48cc:	2100      	movs	r1, #0
   d48ce:	f7ff be65 	b.w	d459c <system_delay_ms>

000d48d2 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d48d2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d48d4:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d48d6:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d48d8:	b113      	cbz	r3, d48e0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d48da:	2203      	movs	r2, #3
   d48dc:	4601      	mov	r1, r0
   d48de:	4798      	blx	r3
    }
   d48e0:	4620      	mov	r0, r4
   d48e2:	bd10      	pop	{r4, pc}

000d48e4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d48e4:	b510      	push	{r4, lr}
   d48e6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d48e8:	f7ff fff3 	bl	d48d2 <_ZNSt14_Function_baseD1Ev>
   d48ec:	4620      	mov	r0, r4
   d48ee:	bd10      	pop	{r4, pc}

000d48f0 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d48f0:	b513      	push	{r0, r1, r4, lr}
   d48f2:	460b      	mov	r3, r1
   d48f4:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d48f6:	c803      	ldmia	r0, {r0, r1}
   d48f8:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d48fc:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4900:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4904:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4908:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d490c:	b002      	add	sp, #8
   d490e:	bd10      	pop	{r4, pc}

000d4910 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4910:	4803      	ldr	r0, [pc, #12]	; (d4920 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4912:	4a04      	ldr	r2, [pc, #16]	; (d4924 <_GLOBAL__sub_I_RGB+0x14>)
   d4914:	4904      	ldr	r1, [pc, #16]	; (d4928 <_GLOBAL__sub_I_RGB+0x18>)
   d4916:	2300      	movs	r3, #0
   d4918:	6083      	str	r3, [r0, #8]
   d491a:	f000 bf3f 	b.w	d579c <__aeabi_atexit>
   d491e:	bf00      	nop
   d4920:	2003e3e4 	.word	0x2003e3e4
   d4924:	2003e3b0 	.word	0x2003e3b0
   d4928:	000d48e5 	.word	0x000d48e5

000d492c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d492c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d492e:	4b0c      	ldr	r3, [pc, #48]	; (d4960 <serialEventRun+0x34>)
   d4930:	b133      	cbz	r3, d4940 <serialEventRun+0x14>
   d4932:	f000 fbf9 	bl	d5128 <_Z16_fetch_usbserialv>
   d4936:	6803      	ldr	r3, [r0, #0]
   d4938:	691b      	ldr	r3, [r3, #16]
   d493a:	4798      	blx	r3
   d493c:	2800      	cmp	r0, #0
   d493e:	dc09      	bgt.n	d4954 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4940:	4b08      	ldr	r3, [pc, #32]	; (d4964 <serialEventRun+0x38>)
   d4942:	b163      	cbz	r3, d495e <serialEventRun+0x32>
   d4944:	f000 fc72 	bl	d522c <_Z22__fetch_global_Serial1v>
   d4948:	6803      	ldr	r3, [r0, #0]
   d494a:	691b      	ldr	r3, [r3, #16]
   d494c:	4798      	blx	r3
   d494e:	2800      	cmp	r0, #0
   d4950:	dc03      	bgt.n	d495a <serialEventRun+0x2e>
   d4952:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4954:	f3af 8000 	nop.w
   d4958:	e7f2      	b.n	d4940 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d495a:	f3af 8000 	nop.w
   d495e:	bd08      	pop	{r3, pc}
	...

000d4968 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4968:	b508      	push	{r3, lr}
	serialEventRun();
   d496a:	f7ff ffdf 	bl	d492c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d496e:	f7ff fd2d 	bl	d43cc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4972:	4b01      	ldr	r3, [pc, #4]	; (d4978 <_post_loop+0x10>)
   d4974:	6018      	str	r0, [r3, #0]
   d4976:	bd08      	pop	{r3, pc}
   d4978:	2003e734 	.word	0x2003e734

000d497c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d497c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d497e:	2300      	movs	r3, #0
   d4980:	9300      	str	r3, [sp, #0]
   d4982:	461a      	mov	r2, r3
   d4984:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4988:	f7ff fe2a 	bl	d45e0 <system_ctrl_set_result>
}
   d498c:	b003      	add	sp, #12
   d498e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4994 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4994:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4996:	8843      	ldrh	r3, [r0, #2]
   d4998:	2b0a      	cmp	r3, #10
   d499a:	d008      	beq.n	d49ae <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d499c:	2b50      	cmp	r3, #80	; 0x50
   d499e:	d109      	bne.n	d49b4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d49a0:	4b09      	ldr	r3, [pc, #36]	; (d49c8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d49a2:	681b      	ldr	r3, [r3, #0]
   d49a4:	b13b      	cbz	r3, d49b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d49a6:	b003      	add	sp, #12
   d49a8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d49ac:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d49ae:	f7ff ffe5 	bl	d497c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d49b2:	e006      	b.n	d49c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d49b4:	2300      	movs	r3, #0
   d49b6:	9300      	str	r3, [sp, #0]
   d49b8:	461a      	mov	r2, r3
   d49ba:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d49be:	f7ff fe0f 	bl	d45e0 <system_ctrl_set_result>
        break;
    }
}
   d49c2:	b003      	add	sp, #12
   d49c4:	f85d fb04 	ldr.w	pc, [sp], #4
   d49c8:	2003e3f4 	.word	0x2003e3f4

000d49cc <module_user_init_hook>:

void module_user_init_hook()
{
   d49cc:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d49ce:	f7ff fcf5 	bl	d43bc <HAL_RNG_GetRandomNumber>
   d49d2:	4604      	mov	r4, r0
    srand(seed);
   d49d4:	f001 f856 	bl	d5a84 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d49d8:	4b07      	ldr	r3, [pc, #28]	; (d49f8 <module_user_init_hook+0x2c>)
   d49da:	b113      	cbz	r3, d49e2 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d49dc:	4620      	mov	r0, r4
   d49de:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d49e2:	2100      	movs	r1, #0
   d49e4:	4804      	ldr	r0, [pc, #16]	; (d49f8 <module_user_init_hook+0x2c>)
   d49e6:	f7ff fe65 	bl	d46b4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d49ea:	2100      	movs	r1, #0
   d49ec:	4803      	ldr	r0, [pc, #12]	; (d49fc <module_user_init_hook+0x30>)
}
   d49ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d49f2:	f7ff bdeb 	b.w	d45cc <system_ctrl_set_app_request_handler>
   d49f6:	bf00      	nop
   d49f8:	00000000 	.word	0x00000000
   d49fc:	000d4995 	.word	0x000d4995

000d4a00 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4a00:	4770      	bx	lr

000d4a02 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4a02:	2000      	movs	r0, #0
   d4a04:	4770      	bx	lr

000d4a06 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4a06:	b510      	push	{r4, lr}
   d4a08:	2110      	movs	r1, #16
   d4a0a:	4604      	mov	r4, r0
   d4a0c:	f000 fecb 	bl	d57a6 <_ZdlPvj>
   d4a10:	4620      	mov	r0, r4
   d4a12:	bd10      	pop	{r4, pc}

000d4a14 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4a14:	b508      	push	{r3, lr}
      { delete this; }
   d4a16:	b108      	cbz	r0, d4a1c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4a18:	f7ff fff5 	bl	d4a06 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4a1c:	bd08      	pop	{r3, pc}

000d4a1e <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4a1e:	2200      	movs	r2, #0
   d4a20:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4a22:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4a24:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d4a28:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4a2a:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d4a2e:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4a30:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4a32:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4a34:	680c      	ldr	r4, [r1, #0]
   d4a36:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4a38:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d4a3a:	bd10      	pop	{r4, pc}

000d4a3c <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4a3c:	b510      	push	{r4, lr}
   d4a3e:	4604      	mov	r4, r0
    free((void*)msg_);
   d4a40:	6800      	ldr	r0, [r0, #0]
   d4a42:	f7ff fe47 	bl	d46d4 <free>
}
   d4a46:	4620      	mov	r0, r4
   d4a48:	bd10      	pop	{r4, pc}

000d4a4a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4a4a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4a4c:	68c4      	ldr	r4, [r0, #12]
   d4a4e:	b1f4      	cbz	r4, d4a8e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4a50:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4a52:	2b02      	cmp	r3, #2
   d4a54:	d103      	bne.n	d4a5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4a56:	f104 000c 	add.w	r0, r4, #12
   d4a5a:	f7ff ffef 	bl	d4a3c <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4a5e:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4a60:	b135      	cbz	r5, d4a70 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4a62:	4628      	mov	r0, r5
   d4a64:	f7ff ff35 	bl	d48d2 <_ZNSt14_Function_baseD1Ev>
   d4a68:	2110      	movs	r1, #16
   d4a6a:	4628      	mov	r0, r5
   d4a6c:	f000 fe9b 	bl	d57a6 <_ZdlPvj>
   d4a70:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4a72:	b135      	cbz	r5, d4a82 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4a74:	4628      	mov	r0, r5
   d4a76:	f7ff ff2c 	bl	d48d2 <_ZNSt14_Function_baseD1Ev>
   d4a7a:	2110      	movs	r1, #16
   d4a7c:	4628      	mov	r0, r5
   d4a7e:	f000 fe92 	bl	d57a6 <_ZdlPvj>
   d4a82:	4620      	mov	r0, r4
   d4a84:	2114      	movs	r1, #20
   d4a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4a8a:	f000 be8c 	b.w	d57a6 <_ZdlPvj>
   d4a8e:	bd38      	pop	{r3, r4, r5, pc}

000d4a90 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4a90:	b513      	push	{r0, r1, r4, lr}
   d4a92:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4a94:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4a98:	2300      	movs	r3, #0
   d4a9a:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4a9c:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4a9e:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4aa0:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4aa2:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4aa4:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4aa6:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4aa8:	f7ff fbc0 	bl	d422c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4aac:	4620      	mov	r0, r4
   d4aae:	b002      	add	sp, #8
   d4ab0:	bd10      	pop	{r4, pc}

000d4ab2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4ab2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4ab4:	460c      	mov	r4, r1
   d4ab6:	ad02      	add	r5, sp, #8
   d4ab8:	f854 3b04 	ldr.w	r3, [r4], #4
   d4abc:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4ac0:	4606      	mov	r6, r0
   d4ac2:	460f      	mov	r7, r1
   d4ac4:	a801      	add	r0, sp, #4
   d4ac6:	4621      	mov	r1, r4
   d4ac8:	f7ff fe86 	bl	d47d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4acc:	4629      	mov	r1, r5
   d4ace:	4630      	mov	r0, r6
   d4ad0:	f7ff ffde 	bl	d4a90 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4ad4:	a801      	add	r0, sp, #4
   d4ad6:	f7ff fba9 	bl	d422c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ada:	4620      	mov	r0, r4
   d4adc:	f7ff fba6 	bl	d422c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4ae0:	4638      	mov	r0, r7
   d4ae2:	2108      	movs	r1, #8
   d4ae4:	f000 fe5f 	bl	d57a6 <_ZdlPvj>
        return p;
    }
   d4ae8:	4630      	mov	r0, r6
   d4aea:	b003      	add	sp, #12
   d4aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4af0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4af0:	b538      	push	{r3, r4, r5, lr}
   d4af2:	2300      	movs	r3, #0
   d4af4:	4604      	mov	r4, r0
   d4af6:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4af8:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4afa:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4afc:	f7ff facb 	bl	d4096 <_Znwj>
   d4b00:	b128      	cbz	r0, d4b0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4b02:	2301      	movs	r3, #1
   d4b04:	6043      	str	r3, [r0, #4]
   d4b06:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4b08:	4b02      	ldr	r3, [pc, #8]	; (d4b14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4b0a:	6003      	str	r3, [r0, #0]
   d4b0c:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4b0e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d4b10:	4620      	mov	r0, r4
   d4b12:	bd38      	pop	{r3, r4, r5, pc}
   d4b14:	000d5ca4 	.word	0x000d5ca4

000d4b18 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4b18:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4b1a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4b1c:	b90a      	cbnz	r2, d4b22 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4b1e:	f000 fe44 	bl	d57aa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4b22:	68c3      	ldr	r3, [r0, #12]
    }
   d4b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4b28:	4718      	bx	r3

000d4b2a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4b2a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4b2c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4b2e:	f100 0110 	add.w	r1, r0, #16
   d4b32:	f7ff fff1 	bl	d4b18 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4b36:	bd08      	pop	{r3, pc}

000d4b38 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4b38:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4b3a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4b3c:	b90a      	cbnz	r2, d4b42 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4b3e:	f000 fe34 	bl	d57aa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4b42:	68c3      	ldr	r3, [r0, #12]
    }
   d4b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4b48:	4718      	bx	r3

000d4b4a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4b4a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4b4c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4b4e:	f100 0110 	add.w	r1, r0, #16
   d4b52:	f7ff fff1 	bl	d4b38 <_ZNKSt8functionIFvRKbEEclES1_>
   d4b56:	bd08      	pop	{r3, pc}

000d4b58 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4b58:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4b5a:	2300      	movs	r3, #0
   d4b5c:	6083      	str	r3, [r0, #8]
   d4b5e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4b60:	4604      	mov	r4, r0
   d4b62:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4b64:	b12b      	cbz	r3, d4b72 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4b66:	2202      	movs	r2, #2
   d4b68:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4b6a:	68eb      	ldr	r3, [r5, #12]
   d4b6c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4b6e:	68ab      	ldr	r3, [r5, #8]
   d4b70:	60a3      	str	r3, [r4, #8]
	}
    }
   d4b72:	4620      	mov	r0, r4
   d4b74:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4b78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d4b78:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4b7a:	b089      	sub	sp, #36	; 0x24
   d4b7c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4b7e:	4668      	mov	r0, sp
   d4b80:	f7ff ff4d 	bl	d4a1e <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4b84:	2300      	movs	r3, #0
   d4b86:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4b8a:	f04f 0202 	mov.w	r2, #2
   d4b8e:	e8d4 3f4f 	ldrexb	r3, [r4]
   d4b92:	2b00      	cmp	r3, #0
   d4b94:	d103      	bne.n	d4b9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d4b96:	e8c4 2f41 	strexb	r1, r2, [r4]
   d4b9a:	2900      	cmp	r1, #0
   d4b9c:	d1f7      	bne.n	d4b8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d4b9e:	d002      	beq.n	d4ba6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d4ba0:	f88d 3008 	strb.w	r3, [sp, #8]
   d4ba4:	e063      	b.n	d4c6e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4ba6:	f114 050c 	adds.w	r5, r4, #12
   d4baa:	d003      	beq.n	d4bb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d4bac:	4669      	mov	r1, sp
   d4bae:	4628      	mov	r0, r5
   d4bb0:	f7ff ff35 	bl	d4a1e <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4bb4:	f3bf 8f5f 	dmb	sy
   d4bb8:	2301      	movs	r3, #1
   d4bba:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4bbc:	2000      	movs	r0, #0
   d4bbe:	f104 0308 	add.w	r3, r4, #8
   d4bc2:	f3bf 8f5f 	dmb	sy
   d4bc6:	e853 6f00 	ldrex	r6, [r3]
   d4bca:	e843 0200 	strex	r2, r0, [r3]
   d4bce:	2a00      	cmp	r2, #0
   d4bd0:	d1f9      	bne.n	d4bc6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d4bd2:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4bd6:	2e00      	cmp	r6, #0
   d4bd8:	d049      	beq.n	d4c6e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4bda:	f7ff fce7 	bl	d45ac <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4bde:	b120      	cbz	r0, d4bea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4be0:	4629      	mov	r1, r5
   d4be2:	4630      	mov	r0, r6
   d4be4:	f7ff ff98 	bl	d4b18 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4be8:	e03a      	b.n	d4c60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4bea:	4631      	mov	r1, r6
   d4bec:	a802      	add	r0, sp, #8
   d4bee:	f7ff ffb3 	bl	d4b58 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4bf2:	68e0      	ldr	r0, [r4, #12]
   d4bf4:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4bf8:	b108      	cbz	r0, d4bfe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d4bfa:	f000 ff6b 	bl	d5ad4 <strdup>
   d4bfe:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4c00:	2010      	movs	r0, #16
   d4c02:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4c06:	f7ff fa46 	bl	d4096 <_Znwj>
   d4c0a:	4605      	mov	r5, r0
   d4c0c:	b1e8      	cbz	r0, d4c4a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4c0e:	2700      	movs	r7, #0
   d4c10:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4c12:	2018      	movs	r0, #24
   d4c14:	f7ff fa3f 	bl	d4096 <_Znwj>
   d4c18:	4604      	mov	r4, r0
   d4c1a:	b188      	cbz	r0, d4c40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4c1c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4c1e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4c20:	a802      	add	r0, sp, #8
   d4c22:	f7ff fe65 	bl	d48f0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4c26:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4c28:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4c2a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4c2c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4c2e:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4c30:	a906      	add	r1, sp, #24
   d4c32:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4c34:	60e3      	str	r3, [r4, #12]
   d4c36:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4c3a:	9205      	str	r2, [sp, #20]
   d4c3c:	f7ff feef 	bl	d4a1e <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4c40:	4b0d      	ldr	r3, [pc, #52]	; (d4c78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d4c42:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4c44:	4b0d      	ldr	r3, [pc, #52]	; (d4c7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4c46:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4c48:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d4c4a:	a806      	add	r0, sp, #24
   d4c4c:	f7ff fef6 	bl	d4a3c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4c50:	a802      	add	r0, sp, #8
   d4c52:	f7ff fe3e 	bl	d48d2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4c56:	2200      	movs	r2, #0
   d4c58:	4629      	mov	r1, r5
   d4c5a:	4809      	ldr	r0, [pc, #36]	; (d4c80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d4c5c:	f7ff fcae 	bl	d45bc <application_thread_invoke>
   d4c60:	4630      	mov	r0, r6
   d4c62:	f7ff fe36 	bl	d48d2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4c66:	2110      	movs	r1, #16
   d4c68:	4630      	mov	r0, r6
   d4c6a:	f000 fd9c 	bl	d57a6 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d4c6e:	4668      	mov	r0, sp
   d4c70:	f7ff fee4 	bl	d4a3c <_ZN8particle5ErrorD1Ev>
    }
   d4c74:	b009      	add	sp, #36	; 0x24
   d4c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4c78:	000d4b2b 	.word	0x000d4b2b
   d4c7c:	000d4da1 	.word	0x000d4da1
   d4c80:	000d5279 	.word	0x000d5279

000d4c84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4c88:	b08b      	sub	sp, #44	; 0x2c
   d4c8a:	4606      	mov	r6, r0
   d4c8c:	460f      	mov	r7, r1
   d4c8e:	4690      	mov	r8, r2
   d4c90:	4699      	mov	r9, r3
   d4c92:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4c96:	f7ff fcfd 	bl	d4694 <spark_cloud_flag_connected>
   d4c9a:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d4c9c:	4683      	mov	fp, r0
   d4c9e:	bb30      	cbnz	r0, d4cee <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4ca0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d4ca4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4ca6:	a905      	add	r1, sp, #20
   d4ca8:	4628      	mov	r0, r5
   d4caa:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4cae:	f7ff feb6 	bl	d4a1e <_ZN8particle5ErrorC1EOS0_>
   d4cb2:	2014      	movs	r0, #20
   d4cb4:	f7ff f9ef 	bl	d4096 <_Znwj>
   d4cb8:	4604      	mov	r4, r0
   d4cba:	b158      	cbz	r0, d4cd4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4cbc:	2302      	movs	r3, #2
   d4cbe:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4cc0:	2301      	movs	r3, #1
   d4cc2:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4cc4:	f8c0 b004 	str.w	fp, [r0, #4]
   d4cc8:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d4ccc:	4629      	mov	r1, r5
   d4cce:	300c      	adds	r0, #12
   d4cd0:	f7ff fea5 	bl	d4a1e <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d4cd4:	4630      	mov	r0, r6
   d4cd6:	4621      	mov	r1, r4
   d4cd8:	f840 4b04 	str.w	r4, [r0], #4
   d4cdc:	f7ff ff08 	bl	d4af0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4ce0:	4628      	mov	r0, r5
   d4ce2:	f7ff feab 	bl	d4a3c <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d4ce6:	a805      	add	r0, sp, #20
   d4ce8:	f7ff fea8 	bl	d4a3c <_ZN8particle5ErrorD1Ev>
   d4cec:	e052      	b.n	d4d94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4cee:	2400      	movs	r4, #0
   d4cf0:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4cf2:	2014      	movs	r0, #20
   d4cf4:	606c      	str	r4, [r5, #4]
   d4cf6:	60ac      	str	r4, [r5, #8]
   d4cf8:	9307      	str	r3, [sp, #28]
   d4cfa:	f7ff f9cc 	bl	d4096 <_Znwj>
   d4cfe:	4601      	mov	r1, r0
   d4d00:	b118      	cbz	r0, d4d0a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d4d02:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4d04:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4d06:	6044      	str	r4, [r0, #4]
   d4d08:	6084      	str	r4, [r0, #8]
   d4d0a:	a804      	add	r0, sp, #16
   d4d0c:	9103      	str	r1, [sp, #12]
   d4d0e:	f7ff feef 	bl	d4af0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d4d12:	4b22      	ldr	r3, [pc, #136]	; (d4d9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d4d14:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4d16:	2008      	movs	r0, #8
   d4d18:	f7ff f9bd 	bl	d4096 <_Znwj>
   d4d1c:	4604      	mov	r4, r0
   d4d1e:	b128      	cbz	r0, d4d2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4d20:	9b03      	ldr	r3, [sp, #12]
   d4d22:	f840 3b04 	str.w	r3, [r0], #4
   d4d26:	a904      	add	r1, sp, #16
   d4d28:	f7ff fd56 	bl	d47d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4d2c:	9500      	str	r5, [sp, #0]
   d4d2e:	fa5f f38a 	uxtb.w	r3, sl
   d4d32:	464a      	mov	r2, r9
   d4d34:	4641      	mov	r1, r8
   d4d36:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d4d38:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4d3a:	f7ff fcb3 	bl	d46a4 <spark_send_event>
   d4d3e:	b920      	cbnz	r0, d4d4a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d4d40:	9b03      	ldr	r3, [sp, #12]
   d4d42:	785b      	ldrb	r3, [r3, #1]
   d4d44:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4d48:	b183      	cbz	r3, d4d6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d4d4a:	9b03      	ldr	r3, [sp, #12]
   d4d4c:	9305      	str	r3, [sp, #20]
   d4d4e:	a904      	add	r1, sp, #16
   d4d50:	a806      	add	r0, sp, #24
   d4d52:	f7ff fd41 	bl	d47d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d4d56:	a905      	add	r1, sp, #20
   d4d58:	4630      	mov	r0, r6
   d4d5a:	f7ff fe99 	bl	d4a90 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4d5e:	a806      	add	r0, sp, #24
   d4d60:	f7ff fa64 	bl	d422c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d64:	a804      	add	r0, sp, #16
   d4d66:	f7ff fa61 	bl	d422c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d6a:	e013      	b.n	d4d94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d4d6c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d4d70:	a905      	add	r1, sp, #20
   d4d72:	a803      	add	r0, sp, #12
   d4d74:	9205      	str	r2, [sp, #20]
   d4d76:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4d7a:	f7ff fefd 	bl	d4b78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4d7e:	a805      	add	r0, sp, #20
   d4d80:	f7ff fe5c 	bl	d4a3c <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4d84:	a805      	add	r0, sp, #20
   d4d86:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4d88:	f7ff fe93 	bl	d4ab2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d4d8c:	a806      	add	r0, sp, #24
   d4d8e:	f7ff fa4d 	bl	d422c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d92:	e7da      	b.n	d4d4a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d4d94:	4630      	mov	r0, r6
   d4d96:	b00b      	add	sp, #44	; 0x2c
   d4d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4d9c:	000d4f11 	.word	0x000d4f11

000d4da0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4da0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4da4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4da6:	d006      	beq.n	d4db6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d4da8:	2a03      	cmp	r2, #3
   d4daa:	d017      	beq.n	d4ddc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d4dac:	2a01      	cmp	r2, #1
   d4dae:	d122      	bne.n	d4df6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4db0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4db2:	6003      	str	r3, [r0, #0]
	      break;
   d4db4:	e01f      	b.n	d4df6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4db6:	2018      	movs	r0, #24
   d4db8:	680e      	ldr	r6, [r1, #0]
   d4dba:	f7ff f96c 	bl	d4096 <_Znwj>
   d4dbe:	4605      	mov	r5, r0
   d4dc0:	b150      	cbz	r0, d4dd8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4dc2:	4631      	mov	r1, r6
   d4dc4:	f7ff fec8 	bl	d4b58 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4dc8:	6930      	ldr	r0, [r6, #16]
   d4dca:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4dce:	b108      	cbz	r0, d4dd4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d4dd0:	f000 fe80 	bl	d5ad4 <strdup>
   d4dd4:	6128      	str	r0, [r5, #16]
   d4dd6:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4dd8:	6025      	str	r5, [r4, #0]
   d4dda:	e00c      	b.n	d4df6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4ddc:	6804      	ldr	r4, [r0, #0]
   d4dde:	b154      	cbz	r4, d4df6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d4de0:	f104 0010 	add.w	r0, r4, #16
   d4de4:	f7ff fe2a 	bl	d4a3c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4de8:	4620      	mov	r0, r4
   d4dea:	f7ff fd72 	bl	d48d2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4dee:	2118      	movs	r1, #24
   d4df0:	4620      	mov	r0, r4
   d4df2:	f000 fcd8 	bl	d57a6 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4df6:	2000      	movs	r0, #0
   d4df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4dfa <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4dfa:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4dfc:	2300      	movs	r3, #0
   d4dfe:	6083      	str	r3, [r0, #8]
   d4e00:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4e02:	4604      	mov	r4, r0
   d4e04:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4e06:	b12b      	cbz	r3, d4e14 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4e08:	2202      	movs	r2, #2
   d4e0a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4e0c:	68eb      	ldr	r3, [r5, #12]
   d4e0e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4e10:	68ab      	ldr	r3, [r5, #8]
   d4e12:	60a3      	str	r3, [r4, #8]
	}
    }
   d4e14:	4620      	mov	r0, r4
   d4e16:	bd38      	pop	{r3, r4, r5, pc}

000d4e18 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4e18:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4e1a:	b570      	push	{r4, r5, r6, lr}
   d4e1c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4e1e:	d006      	beq.n	d4e2e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d4e20:	2a03      	cmp	r2, #3
   d4e22:	d011      	beq.n	d4e48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d4e24:	2a01      	cmp	r2, #1
   d4e26:	d118      	bne.n	d4e5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4e28:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4e2a:	6003      	str	r3, [r0, #0]
	      break;
   d4e2c:	e015      	b.n	d4e5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4e2e:	2014      	movs	r0, #20
   d4e30:	680e      	ldr	r6, [r1, #0]
   d4e32:	f7ff f930 	bl	d4096 <_Znwj>
   d4e36:	4605      	mov	r5, r0
   d4e38:	b120      	cbz	r0, d4e44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4e3a:	4631      	mov	r1, r6
   d4e3c:	f7ff ffdd 	bl	d4dfa <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d4e40:	7c33      	ldrb	r3, [r6, #16]
   d4e42:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4e44:	6025      	str	r5, [r4, #0]
   d4e46:	e008      	b.n	d4e5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4e48:	6804      	ldr	r4, [r0, #0]
   d4e4a:	b134      	cbz	r4, d4e5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4e4c:	4620      	mov	r0, r4
   d4e4e:	f7ff fd40 	bl	d48d2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4e52:	2114      	movs	r1, #20
   d4e54:	4620      	mov	r0, r4
   d4e56:	f000 fca6 	bl	d57a6 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4e5a:	2000      	movs	r0, #0
   d4e5c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4e60 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d4e60:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4e62:	2300      	movs	r3, #0
   d4e64:	b087      	sub	sp, #28
   d4e66:	460c      	mov	r4, r1
   d4e68:	f3bf 8f5f 	dmb	sy
   d4e6c:	e850 6f00 	ldrex	r6, [r0]
   d4e70:	e840 3200 	strex	r2, r3, [r0]
   d4e74:	2a00      	cmp	r2, #0
   d4e76:	d1f9      	bne.n	d4e6c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d4e78:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4e7c:	2e00      	cmp	r6, #0
   d4e7e:	d03f      	beq.n	d4f00 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4e80:	4618      	mov	r0, r3
   d4e82:	f7ff fb93 	bl	d45ac <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4e86:	4607      	mov	r7, r0
   d4e88:	b120      	cbz	r0, d4e94 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4e8a:	4621      	mov	r1, r4
   d4e8c:	4630      	mov	r0, r6
   d4e8e:	f7ff fe53 	bl	d4b38 <_ZNKSt8functionIFvRKbEEclES1_>
   d4e92:	e02e      	b.n	d4ef2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4e94:	4631      	mov	r1, r6
   d4e96:	a801      	add	r0, sp, #4
   d4e98:	f7ff ffaf 	bl	d4dfa <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4e9c:	7823      	ldrb	r3, [r4, #0]
   d4e9e:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4ea2:	2010      	movs	r0, #16
   d4ea4:	f7ff f8f7 	bl	d4096 <_Znwj>
   d4ea8:	4605      	mov	r5, r0
   d4eaa:	b1d0      	cbz	r0, d4ee2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4eac:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4eae:	2014      	movs	r0, #20
   d4eb0:	f7ff f8f1 	bl	d4096 <_Znwj>
   d4eb4:	4604      	mov	r4, r0
   d4eb6:	b178      	cbz	r0, d4ed8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4eb8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4eba:	4601      	mov	r1, r0
   d4ebc:	a801      	add	r0, sp, #4
   d4ebe:	f7ff fd17 	bl	d48f0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4ec2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4ec4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ec6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4ec8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4eca:	9203      	str	r2, [sp, #12]
   d4ecc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ece:	60e3      	str	r3, [r4, #12]
   d4ed0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4ed4:	9204      	str	r2, [sp, #16]
   d4ed6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4ed8:	4b0a      	ldr	r3, [pc, #40]	; (d4f04 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d4eda:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4edc:	4b0a      	ldr	r3, [pc, #40]	; (d4f08 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4ede:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4ee0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4ee2:	a801      	add	r0, sp, #4
   d4ee4:	f7ff fcf5 	bl	d48d2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4ee8:	2200      	movs	r2, #0
   d4eea:	4629      	mov	r1, r5
   d4eec:	4807      	ldr	r0, [pc, #28]	; (d4f0c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d4eee:	f7ff fb65 	bl	d45bc <application_thread_invoke>
   d4ef2:	4630      	mov	r0, r6
   d4ef4:	f7ff fced 	bl	d48d2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4ef8:	2110      	movs	r1, #16
   d4efa:	4630      	mov	r0, r6
   d4efc:	f000 fc53 	bl	d57a6 <_ZdlPvj>
        }
    }
   d4f00:	b007      	add	sp, #28
   d4f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4f04:	000d4b4b 	.word	0x000d4b4b
   d4f08:	000d4e19 	.word	0x000d4e19
   d4f0c:	000d5279 	.word	0x000d5279

000d4f10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d4f10:	b530      	push	{r4, r5, lr}
   d4f12:	b085      	sub	sp, #20
   d4f14:	4604      	mov	r4, r0
   d4f16:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d4f18:	4668      	mov	r0, sp
   d4f1a:	4611      	mov	r1, r2
   d4f1c:	f7ff fdc9 	bl	d4ab2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d4f20:	b17c      	cbz	r4, d4f42 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d4f22:	b224      	sxth	r4, r4
   d4f24:	4628      	mov	r0, r5
   d4f26:	b10d      	cbz	r5, d4f2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d4f28:	f000 fdd4 	bl	d5ad4 <strdup>
   d4f2c:	9002      	str	r0, [sp, #8]
   d4f2e:	a902      	add	r1, sp, #8
   d4f30:	4668      	mov	r0, sp
   d4f32:	f8ad 400c 	strh.w	r4, [sp, #12]
   d4f36:	f7ff fe1f 	bl	d4b78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4f3a:	a802      	add	r0, sp, #8
   d4f3c:	f7ff fd7e 	bl	d4a3c <_ZN8particle5ErrorD1Ev>
   d4f40:	e01d      	b.n	d4f7e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d4f42:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4f44:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4f48:	f04f 0201 	mov.w	r2, #1
   d4f4c:	e8d0 3f4f 	ldrexb	r3, [r0]
   d4f50:	42a3      	cmp	r3, r4
   d4f52:	d103      	bne.n	d4f5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d4f54:	e8c0 2f41 	strexb	r1, r2, [r0]
   d4f58:	2900      	cmp	r1, #0
   d4f5a:	d1f7      	bne.n	d4f4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d4f5c:	d002      	beq.n	d4f64 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d4f5e:	f88d 3008 	strb.w	r3, [sp, #8]
   d4f62:	e00c      	b.n	d4f7e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d4f64:	f110 010c 	adds.w	r1, r0, #12
   d4f68:	f04f 0301 	mov.w	r3, #1
   d4f6c:	bf18      	it	ne
   d4f6e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4f70:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d4f74:	3004      	adds	r0, #4
   d4f76:	f800 3c03 	strb.w	r3, [r0, #-3]
   d4f7a:	f7ff ff71 	bl	d4e60 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d4f7e:	a801      	add	r0, sp, #4
   d4f80:	f7ff f954 	bl	d422c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d4f84:	b005      	add	sp, #20
   d4f86:	bd30      	pop	{r4, r5, pc}

000d4f88 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4f88:	4770      	bx	lr

000d4f8a <_ZN9IPAddressD0Ev>:
   d4f8a:	b510      	push	{r4, lr}
   d4f8c:	2118      	movs	r1, #24
   d4f8e:	4604      	mov	r4, r0
   d4f90:	f000 fc09 	bl	d57a6 <_ZdlPvj>
   d4f94:	4620      	mov	r0, r4
   d4f96:	bd10      	pop	{r4, pc}

000d4f98 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4f98:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4f9a:	7d03      	ldrb	r3, [r0, #20]
   d4f9c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4f9e:	b08d      	sub	sp, #52	; 0x34
   d4fa0:	460e      	mov	r6, r1
   d4fa2:	f100 0704 	add.w	r7, r0, #4
   d4fa6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4faa:	d002      	beq.n	d4fb2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4fac:	f100 0508 	add.w	r5, r0, #8
   d4fb0:	e018      	b.n	d4fe4 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4fb2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4fb4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4fb6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4fba:	232f      	movs	r3, #47	; 0x2f
   d4fbc:	462a      	mov	r2, r5
   d4fbe:	200a      	movs	r0, #10
   d4fc0:	f7ff fa34 	bl	d442c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4fc4:	4628      	mov	r0, r5
   d4fc6:	f000 fda0 	bl	d5b0a <strlen>
   d4fca:	6833      	ldr	r3, [r6, #0]
   d4fcc:	4602      	mov	r2, r0
   d4fce:	68db      	ldr	r3, [r3, #12]
   d4fd0:	4629      	mov	r1, r5
   d4fd2:	4630      	mov	r0, r6
   d4fd4:	4798      	blx	r3
   d4fd6:	e00f      	b.n	d4ff8 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4fd8:	b124      	cbz	r4, d4fe4 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4fda:	212e      	movs	r1, #46	; 0x2e
   d4fdc:	4630      	mov	r0, r6
   d4fde:	f7ff fc31 	bl	d4844 <_ZN5Print5printEc>
   d4fe2:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4fe4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4fe8:	220a      	movs	r2, #10
   d4fea:	4630      	mov	r0, r6
   d4fec:	f7ff fc5a 	bl	d48a4 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4ff0:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4ff2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4ff4:	d1f0      	bne.n	d4fd8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4ff6:	4620      	mov	r0, r4
    }
    return n;
}
   d4ff8:	b00d      	add	sp, #52	; 0x34
   d4ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4ffc <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4ffc:	b510      	push	{r4, lr}
   d4ffe:	4b05      	ldr	r3, [pc, #20]	; (d5014 <_ZN9IPAddressC1Ev+0x18>)
   d5000:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5002:	2211      	movs	r2, #17
   d5004:	f840 3b04 	str.w	r3, [r0], #4
   d5008:	2100      	movs	r1, #0
   d500a:	f000 fd32 	bl	d5a72 <memset>
{
    clear();
}
   d500e:	4620      	mov	r0, r4
   d5010:	bd10      	pop	{r4, pc}
   d5012:	bf00      	nop
   d5014:	000d5cc0 	.word	0x000d5cc0

000d5018 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5018:	4603      	mov	r3, r0
   d501a:	4a07      	ldr	r2, [pc, #28]	; (d5038 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d501c:	b510      	push	{r4, lr}
   d501e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5022:	f101 0210 	add.w	r2, r1, #16
   d5026:	f851 4b04 	ldr.w	r4, [r1], #4
   d502a:	f843 4b04 	str.w	r4, [r3], #4
   d502e:	4291      	cmp	r1, r2
   d5030:	d1f9      	bne.n	d5026 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5032:	780a      	ldrb	r2, [r1, #0]
   d5034:	701a      	strb	r2, [r3, #0]
}
   d5036:	bd10      	pop	{r4, pc}
   d5038:	000d5cc0 	.word	0x000d5cc0

000d503c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d503c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d503e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5042:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5046:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d504a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d504e:	2304      	movs	r3, #4
   d5050:	6041      	str	r1, [r0, #4]
   d5052:	7503      	strb	r3, [r0, #20]
   d5054:	bd10      	pop	{r4, pc}

000d5056 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5056:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5058:	780d      	ldrb	r5, [r1, #0]
   d505a:	788b      	ldrb	r3, [r1, #2]
   d505c:	784a      	ldrb	r2, [r1, #1]
   d505e:	78c9      	ldrb	r1, [r1, #3]
   d5060:	9100      	str	r1, [sp, #0]
   d5062:	4629      	mov	r1, r5
   d5064:	f7ff ffea 	bl	d503c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5068:	b003      	add	sp, #12
   d506a:	bd30      	pop	{r4, r5, pc}

000d506c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d506c:	7441      	strb	r1, [r0, #17]
   d506e:	4770      	bx	lr

000d5070 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5070:	4770      	bx	lr

000d5072 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5072:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5074:	2100      	movs	r1, #0
   d5076:	7c00      	ldrb	r0, [r0, #16]
   d5078:	f7ff fa70 	bl	d455c <HAL_USB_USART_Receive_Data>
}
   d507c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5080:	bf28      	it	cs
   d5082:	f04f 30ff 	movcs.w	r0, #4294967295
   d5086:	bd08      	pop	{r3, pc}

000d5088 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5088:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d508a:	2101      	movs	r1, #1
   d508c:	7c00      	ldrb	r0, [r0, #16]
   d508e:	f7ff fa65 	bl	d455c <HAL_USB_USART_Receive_Data>
}
   d5092:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5096:	bf28      	it	cs
   d5098:	f04f 30ff 	movcs.w	r0, #4294967295
   d509c:	bd08      	pop	{r3, pc}

000d509e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d509e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d50a0:	7c00      	ldrb	r0, [r0, #16]
   d50a2:	f7ff fa53 	bl	d454c <HAL_USB_USART_Available_Data_For_Write>
}
   d50a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d50aa:	bd08      	pop	{r3, pc}

000d50ac <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d50ac:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d50ae:	7c00      	ldrb	r0, [r0, #16]
   d50b0:	f7ff fa44 	bl	d453c <HAL_USB_USART_Available_Data>
}
   d50b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d50b8:	bd08      	pop	{r3, pc}

000d50ba <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d50ba:	7c00      	ldrb	r0, [r0, #16]
   d50bc:	f7ff ba5e 	b.w	d457c <HAL_USB_USART_Flush_Data>

000d50c0 <_ZN9USBSerialD0Ev>:
   d50c0:	b510      	push	{r4, lr}
   d50c2:	2114      	movs	r1, #20
   d50c4:	4604      	mov	r4, r0
   d50c6:	f000 fb6e 	bl	d57a6 <_ZdlPvj>
   d50ca:	4620      	mov	r0, r4
   d50cc:	bd10      	pop	{r4, pc}

000d50ce <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d50ce:	b538      	push	{r3, r4, r5, lr}
   d50d0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d50d2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d50d4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d50d6:	f7ff fa39 	bl	d454c <HAL_USB_USART_Available_Data_For_Write>
   d50da:	2800      	cmp	r0, #0
   d50dc:	dc01      	bgt.n	d50e2 <_ZN9USBSerial5writeEh+0x14>
   d50de:	7c60      	ldrb	r0, [r4, #17]
   d50e0:	b128      	cbz	r0, d50ee <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d50e2:	4629      	mov	r1, r5
   d50e4:	7c20      	ldrb	r0, [r4, #16]
   d50e6:	f7ff fa41 	bl	d456c <HAL_USB_USART_Send_Data>
   d50ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d50ee:	bd38      	pop	{r3, r4, r5, pc}

000d50f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d50f0:	b510      	push	{r4, lr}
   d50f2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d50f4:	2300      	movs	r3, #0
   d50f6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d50f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d50fc:	60a3      	str	r3, [r4, #8]
   d50fe:	4b05      	ldr	r3, [pc, #20]	; (d5114 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5100:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5102:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5104:	4608      	mov	r0, r1
{
  _serial = serial;
   d5106:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5108:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d510a:	4611      	mov	r1, r2
   d510c:	f7ff fa0e 	bl	d452c <HAL_USB_USART_Init>
}
   d5110:	4620      	mov	r0, r4
   d5112:	bd10      	pop	{r4, pc}
   d5114:	000d5cd4 	.word	0x000d5cd4

000d5118 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5118:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d511a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d511c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d511e:	2100      	movs	r1, #0
   d5120:	f000 fca7 	bl	d5a72 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5124:	4620      	mov	r0, r4
   d5126:	bd10      	pop	{r4, pc}

000d5128 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5128:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d512a:	4d0e      	ldr	r5, [pc, #56]	; (d5164 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d512c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d512e:	a801      	add	r0, sp, #4
   d5130:	f7ff fff2 	bl	d5118 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5134:	6829      	ldr	r1, [r5, #0]
   d5136:	f011 0401 	ands.w	r4, r1, #1
   d513a:	d110      	bne.n	d515e <_Z16_fetch_usbserialv+0x36>
   d513c:	4628      	mov	r0, r5
   d513e:	f7fe ffb0 	bl	d40a2 <__cxa_guard_acquire>
   d5142:	b160      	cbz	r0, d515e <_Z16_fetch_usbserialv+0x36>
   d5144:	aa01      	add	r2, sp, #4
   d5146:	4621      	mov	r1, r4
   d5148:	4807      	ldr	r0, [pc, #28]	; (d5168 <_Z16_fetch_usbserialv+0x40>)
   d514a:	f7ff ffd1 	bl	d50f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d514e:	4628      	mov	r0, r5
   d5150:	f7fe ffac 	bl	d40ac <__cxa_guard_release>
   d5154:	4a05      	ldr	r2, [pc, #20]	; (d516c <_Z16_fetch_usbserialv+0x44>)
   d5156:	4906      	ldr	r1, [pc, #24]	; (d5170 <_Z16_fetch_usbserialv+0x48>)
   d5158:	4803      	ldr	r0, [pc, #12]	; (d5168 <_Z16_fetch_usbserialv+0x40>)
   d515a:	f000 fb1f 	bl	d579c <__aeabi_atexit>
	return _usbserial;
}
   d515e:	4802      	ldr	r0, [pc, #8]	; (d5168 <_Z16_fetch_usbserialv+0x40>)
   d5160:	b007      	add	sp, #28
   d5162:	bd30      	pop	{r4, r5, pc}
   d5164:	2003e3f8 	.word	0x2003e3f8
   d5168:	2003e3fc 	.word	0x2003e3fc
   d516c:	2003e3b0 	.word	0x2003e3b0
   d5170:	000d5071 	.word	0x000d5071

000d5174 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5174:	4770      	bx	lr

000d5176 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5176:	7441      	strb	r1, [r0, #17]
   d5178:	4770      	bx	lr

000d517a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d517a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d517c:	7c00      	ldrb	r0, [r0, #16]
   d517e:	f7ff f995 	bl	d44ac <HAL_USART_Available_Data_For_Write>
}
   d5182:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5186:	bd08      	pop	{r3, pc}

000d5188 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5188:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d518a:	7c00      	ldrb	r0, [r0, #16]
   d518c:	f7ff f966 	bl	d445c <HAL_USART_Available_Data>
}
   d5190:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5194:	bd08      	pop	{r3, pc}

000d5196 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5196:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5198:	7c00      	ldrb	r0, [r0, #16]
   d519a:	f7ff f96f 	bl	d447c <HAL_USART_Peek_Data>
}
   d519e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d51a2:	bf28      	it	cs
   d51a4:	f04f 30ff 	movcs.w	r0, #4294967295
   d51a8:	bd08      	pop	{r3, pc}

000d51aa <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d51aa:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d51ac:	7c00      	ldrb	r0, [r0, #16]
   d51ae:	f7ff f95d 	bl	d446c <HAL_USART_Read_Data>
}
   d51b2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d51b6:	bf28      	it	cs
   d51b8:	f04f 30ff 	movcs.w	r0, #4294967295
   d51bc:	bd08      	pop	{r3, pc}

000d51be <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d51be:	7c00      	ldrb	r0, [r0, #16]
   d51c0:	f7ff b964 	b.w	d448c <HAL_USART_Flush_Data>

000d51c4 <_ZN11USARTSerialD0Ev>:
   d51c4:	b510      	push	{r4, lr}
   d51c6:	2114      	movs	r1, #20
   d51c8:	4604      	mov	r4, r0
   d51ca:	f000 faec 	bl	d57a6 <_ZdlPvj>
   d51ce:	4620      	mov	r0, r4
   d51d0:	bd10      	pop	{r4, pc}

000d51d2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d51d2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d51d4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d51d6:	4604      	mov	r4, r0
   d51d8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d51da:	b925      	cbnz	r5, d51e6 <_ZN11USARTSerial5writeEh+0x14>
   d51dc:	7c00      	ldrb	r0, [r0, #16]
   d51de:	f7ff f965 	bl	d44ac <HAL_USART_Available_Data_For_Write>
   d51e2:	2800      	cmp	r0, #0
   d51e4:	dd05      	ble.n	d51f2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d51e6:	4631      	mov	r1, r6
   d51e8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d51ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d51ee:	f7ff b92d 	b.w	d444c <HAL_USART_Write_Data>
  }
  return 0;
}
   d51f2:	4628      	mov	r0, r5
   d51f4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d51f8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d51f8:	b510      	push	{r4, lr}
   d51fa:	4604      	mov	r4, r0
   d51fc:	4608      	mov	r0, r1
   d51fe:	4611      	mov	r1, r2
   d5200:	2200      	movs	r2, #0
   d5202:	6062      	str	r2, [r4, #4]
   d5204:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5208:	60a2      	str	r2, [r4, #8]
   d520a:	4a05      	ldr	r2, [pc, #20]	; (d5220 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d520c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d520e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5210:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5212:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5214:	461a      	mov	r2, r3
   d5216:	f7ff f911 	bl	d443c <HAL_USART_Init>
}
   d521a:	4620      	mov	r0, r4
   d521c:	bd10      	pop	{r4, pc}
   d521e:	bf00      	nop
   d5220:	000d5d04 	.word	0x000d5d04

000d5224 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5224:	7c00      	ldrb	r0, [r0, #16]
   d5226:	f7ff b939 	b.w	d449c <HAL_USART_Is_Enabled>
	...

000d522c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d522c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d522e:	4d0c      	ldr	r5, [pc, #48]	; (d5260 <_Z22__fetch_global_Serial1v+0x34>)
   d5230:	6829      	ldr	r1, [r5, #0]
   d5232:	f011 0401 	ands.w	r4, r1, #1
   d5236:	d111      	bne.n	d525c <_Z22__fetch_global_Serial1v+0x30>
   d5238:	4628      	mov	r0, r5
   d523a:	f7fe ff32 	bl	d40a2 <__cxa_guard_acquire>
   d523e:	b168      	cbz	r0, d525c <_Z22__fetch_global_Serial1v+0x30>
   d5240:	4a08      	ldr	r2, [pc, #32]	; (d5264 <_Z22__fetch_global_Serial1v+0x38>)
   d5242:	4b09      	ldr	r3, [pc, #36]	; (d5268 <_Z22__fetch_global_Serial1v+0x3c>)
   d5244:	4809      	ldr	r0, [pc, #36]	; (d526c <_Z22__fetch_global_Serial1v+0x40>)
   d5246:	4621      	mov	r1, r4
   d5248:	f7ff ffd6 	bl	d51f8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d524c:	4628      	mov	r0, r5
   d524e:	f7fe ff2d 	bl	d40ac <__cxa_guard_release>
   d5252:	4a07      	ldr	r2, [pc, #28]	; (d5270 <_Z22__fetch_global_Serial1v+0x44>)
   d5254:	4907      	ldr	r1, [pc, #28]	; (d5274 <_Z22__fetch_global_Serial1v+0x48>)
   d5256:	4805      	ldr	r0, [pc, #20]	; (d526c <_Z22__fetch_global_Serial1v+0x40>)
   d5258:	f000 faa0 	bl	d579c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d525c:	4803      	ldr	r0, [pc, #12]	; (d526c <_Z22__fetch_global_Serial1v+0x40>)
   d525e:	bd38      	pop	{r3, r4, r5, pc}
   d5260:	2003e4a8 	.word	0x2003e4a8
   d5264:	2003e4ac 	.word	0x2003e4ac
   d5268:	2003e424 	.word	0x2003e424
   d526c:	2003e410 	.word	0x2003e410
   d5270:	2003e3b0 	.word	0x2003e3b0
   d5274:	000d5175 	.word	0x000d5175

000d5278 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5278:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d527a:	6883      	ldr	r3, [r0, #8]
   d527c:	4604      	mov	r4, r0
   d527e:	b90b      	cbnz	r3, d5284 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5280:	f000 fa93 	bl	d57aa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5284:	68c3      	ldr	r3, [r0, #12]
   d5286:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5288:	68a3      	ldr	r3, [r4, #8]
   d528a:	b11b      	cbz	r3, d5294 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d528c:	2203      	movs	r2, #3
   d528e:	4621      	mov	r1, r4
   d5290:	4620      	mov	r0, r4
   d5292:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5294:	4620      	mov	r0, r4
   d5296:	2110      	movs	r1, #16
}
   d5298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d529c:	f000 ba83 	b.w	d57a6 <_ZdlPvj>

000d52a0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d52a0:	4770      	bx	lr

000d52a2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d52a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d52a4:	4606      	mov	r6, r0
   d52a6:	4615      	mov	r5, r2
   d52a8:	460c      	mov	r4, r1
   d52aa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d52ac:	42bc      	cmp	r4, r7
   d52ae:	d006      	beq.n	d52be <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d52b0:	6833      	ldr	r3, [r6, #0]
   d52b2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d52b6:	689b      	ldr	r3, [r3, #8]
   d52b8:	4630      	mov	r0, r6
   d52ba:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d52bc:	e7f6      	b.n	d52ac <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d52be:	4628      	mov	r0, r5
   d52c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d52c2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d52c2:	2200      	movs	r2, #0
   d52c4:	7c00      	ldrb	r0, [r0, #16]
   d52c6:	f7ff b8f9 	b.w	d44bc <HAL_I2C_Write_Data>

000d52ca <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d52ca:	2100      	movs	r1, #0
   d52cc:	7c00      	ldrb	r0, [r0, #16]
   d52ce:	f7ff b8fd 	b.w	d44cc <HAL_I2C_Available_Data>

000d52d2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d52d2:	2100      	movs	r1, #0
   d52d4:	7c00      	ldrb	r0, [r0, #16]
   d52d6:	f7ff b901 	b.w	d44dc <HAL_I2C_Read_Data>

000d52da <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d52da:	2100      	movs	r1, #0
   d52dc:	7c00      	ldrb	r0, [r0, #16]
   d52de:	f7ff b905 	b.w	d44ec <HAL_I2C_Peek_Data>

000d52e2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d52e2:	2100      	movs	r1, #0
   d52e4:	7c00      	ldrb	r0, [r0, #16]
   d52e6:	f7ff b909 	b.w	d44fc <HAL_I2C_Flush_Data>

000d52ea <_ZN7TwoWireD0Ev>:
   d52ea:	b510      	push	{r4, lr}
   d52ec:	2114      	movs	r1, #20
   d52ee:	4604      	mov	r4, r0
   d52f0:	f000 fa59 	bl	d57a6 <_ZdlPvj>
   d52f4:	4620      	mov	r0, r4
   d52f6:	bd10      	pop	{r4, pc}

000d52f8 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d52f8:	b510      	push	{r4, lr}
   d52fa:	4604      	mov	r4, r0
   d52fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5300:	4608      	mov	r0, r1
   d5302:	60a3      	str	r3, [r4, #8]
   d5304:	2100      	movs	r1, #0
   d5306:	4b04      	ldr	r3, [pc, #16]	; (d5318 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5308:	7420      	strb	r0, [r4, #16]
   d530a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d530c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d530e:	f7ff f905 	bl	d451c <HAL_I2C_Init>

}
   d5312:	4620      	mov	r0, r4
   d5314:	bd10      	pop	{r4, pc}
   d5316:	bf00      	nop
   d5318:	000d5d34 	.word	0x000d5d34

000d531c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d531c:	2100      	movs	r1, #0
   d531e:	7c00      	ldrb	r0, [r0, #16]
   d5320:	f7ff b8f4 	b.w	d450c <HAL_I2C_Is_Enabled>

000d5324 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5324:	2200      	movs	r2, #0
   d5326:	4611      	mov	r1, r2
   d5328:	6840      	ldr	r0, [r0, #4]
   d532a:	f7ff b99b 	b.w	d4664 <network_listening>

000d532e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d532e:	2200      	movs	r2, #0
   d5330:	4611      	mov	r1, r2
   d5332:	6840      	ldr	r0, [r0, #4]
   d5334:	f7ff b9a6 	b.w	d4684 <network_get_listen_timeout>

000d5338 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5338:	2200      	movs	r2, #0
   d533a:	6840      	ldr	r0, [r0, #4]
   d533c:	f7ff b99a 	b.w	d4674 <network_set_listen_timeout>

000d5340 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5340:	2200      	movs	r2, #0
   d5342:	f081 0101 	eor.w	r1, r1, #1
   d5346:	6840      	ldr	r0, [r0, #4]
   d5348:	f7ff b984 	b.w	d4654 <network_listen>

000d534c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d534c:	2300      	movs	r3, #0
   d534e:	461a      	mov	r2, r3
   d5350:	2101      	movs	r1, #1
   d5352:	6840      	ldr	r0, [r0, #4]
   d5354:	f7ff b976 	b.w	d4644 <network_off>

000d5358 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5358:	2300      	movs	r3, #0
   d535a:	461a      	mov	r2, r3
   d535c:	4619      	mov	r1, r3
   d535e:	6840      	ldr	r0, [r0, #4]
   d5360:	f7ff b968 	b.w	d4634 <network_on>

000d5364 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5364:	2200      	movs	r2, #0
   d5366:	4611      	mov	r1, r2
   d5368:	6840      	ldr	r0, [r0, #4]
   d536a:	f7ff b95b 	b.w	d4624 <network_ready>

000d536e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d536e:	2200      	movs	r2, #0
   d5370:	4611      	mov	r1, r2
   d5372:	6840      	ldr	r0, [r0, #4]
   d5374:	f7ff b946 	b.w	d4604 <network_connecting>

000d5378 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5378:	2200      	movs	r2, #0
   d537a:	2102      	movs	r1, #2
   d537c:	6840      	ldr	r0, [r0, #4]
   d537e:	f7ff b949 	b.w	d4614 <network_disconnect>

000d5382 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5382:	2300      	movs	r3, #0
   d5384:	461a      	mov	r2, r3
   d5386:	6840      	ldr	r0, [r0, #4]
   d5388:	f7ff b934 	b.w	d45f4 <network_connect>

000d538c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d538c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d538e:	4605      	mov	r5, r0
   d5390:	b188      	cbz	r0, d53b6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5392:	6804      	ldr	r4, [r0, #0]
   d5394:	b14c      	cbz	r4, d53aa <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5396:	68a3      	ldr	r3, [r4, #8]
   d5398:	b11b      	cbz	r3, d53a2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d539a:	2203      	movs	r2, #3
   d539c:	4621      	mov	r1, r4
   d539e:	4620      	mov	r0, r4
   d53a0:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d53a2:	2110      	movs	r1, #16
   d53a4:	4620      	mov	r0, r4
   d53a6:	f000 f9fe 	bl	d57a6 <_ZdlPvj>
   d53aa:	4628      	mov	r0, r5
   d53ac:	2114      	movs	r1, #20
      }
   d53ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d53b2:	f000 b9f8 	b.w	d57a6 <_ZdlPvj>
   d53b6:	bd38      	pop	{r3, r4, r5, pc}

000d53b8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d53b8:	b110      	cbz	r0, d53c0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d53ba:	6803      	ldr	r3, [r0, #0]
   d53bc:	685b      	ldr	r3, [r3, #4]
   d53be:	4718      	bx	r3
   d53c0:	4770      	bx	lr

000d53c2 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d53c2:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d53c4:	6803      	ldr	r3, [r0, #0]
   d53c6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d53c8:	b1bb      	cbz	r3, d53fa <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d53ca:	6858      	ldr	r0, [r3, #4]
   d53cc:	f7ff f806 	bl	d43dc <os_thread_is_current>
   d53d0:	b978      	cbnz	r0, d53f2 <_ZN6ThreadD1Ev+0x30>
   d53d2:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d53d4:	7c5a      	ldrb	r2, [r3, #17]
   d53d6:	b912      	cbnz	r2, d53de <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d53d8:	6858      	ldr	r0, [r3, #4]
   d53da:	f7ff f807 	bl	d43ec <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d53de:	6823      	ldr	r3, [r4, #0]
   d53e0:	6858      	ldr	r0, [r3, #4]
   d53e2:	f7ff f80b 	bl	d43fc <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53e6:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d53e8:	2300      	movs	r3, #0
   d53ea:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d53ec:	b128      	cbz	r0, d53fa <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d53ee:	f7ff ffcd 	bl	d538c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d53f2:	6820      	ldr	r0, [r4, #0]
   d53f4:	b108      	cbz	r0, d53fa <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d53f6:	f7ff ffc9 	bl	d538c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d53fa:	4620      	mov	r0, r4
   d53fc:	bd10      	pop	{r4, pc}
	...

000d5400 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5400:	b538      	push	{r3, r4, r5, lr}
   d5402:	4b0c      	ldr	r3, [pc, #48]	; (d5434 <_ZN5spark9MeshClassD1Ev+0x34>)
   d5404:	6003      	str	r3, [r0, #0]
   d5406:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5408:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d540c:	b108      	cbz	r0, d5412 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d540e:	f7fe fe46 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5412:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5416:	b135      	cbz	r5, d5426 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5418:	4628      	mov	r0, r5
   d541a:	f7ff ffd2 	bl	d53c2 <_ZN6ThreadD1Ev>
   d541e:	2104      	movs	r1, #4
   d5420:	4628      	mov	r0, r5
   d5422:	f000 f9c0 	bl	d57a6 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5426:	68a0      	ldr	r0, [r4, #8]
   d5428:	b108      	cbz	r0, d542e <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d542a:	f7ff ffc5 	bl	d53b8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d542e:	4620      	mov	r0, r4
   d5430:	bd38      	pop	{r3, r4, r5, pc}
   d5432:	bf00      	nop
   d5434:	000d5d5c 	.word	0x000d5d5c

000d5438 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5438:	b538      	push	{r3, r4, r5, lr}
   d543a:	4c0e      	ldr	r4, [pc, #56]	; (d5474 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d543c:	4b0e      	ldr	r3, [pc, #56]	; (d5478 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d543e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5440:	2500      	movs	r5, #0
   d5442:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5444:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5448:	6063      	str	r3, [r4, #4]
   d544a:	60a5      	str	r5, [r4, #8]
   d544c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5450:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5454:	f7fe ffe2 	bl	d441c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5458:	4b08      	ldr	r3, [pc, #32]	; (d547c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d545a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d545e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5462:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5464:	4620      	mov	r0, r4
   d5466:	4a06      	ldr	r2, [pc, #24]	; (d5480 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5468:	4906      	ldr	r1, [pc, #24]	; (d5484 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d546a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d546e:	f000 b995 	b.w	d579c <__aeabi_atexit>
   d5472:	bf00      	nop
   d5474:	2003e530 	.word	0x2003e530
   d5478:	000d5dc4 	.word	0x000d5dc4
   d547c:	000d5d5c 	.word	0x000d5d5c
   d5480:	2003e3b0 	.word	0x2003e3b0
   d5484:	000d5401 	.word	0x000d5401

000d5488 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5488:	2200      	movs	r2, #0
   d548a:	4611      	mov	r1, r2
   d548c:	6840      	ldr	r0, [r0, #4]
   d548e:	f7ff b8c9 	b.w	d4624 <network_ready>

000d5492 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5492:	2200      	movs	r2, #0
   d5494:	4611      	mov	r1, r2
   d5496:	6840      	ldr	r0, [r0, #4]
   d5498:	f7ff b8e4 	b.w	d4664 <network_listening>

000d549c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d549c:	2200      	movs	r2, #0
   d549e:	4611      	mov	r1, r2
   d54a0:	6840      	ldr	r0, [r0, #4]
   d54a2:	f7ff b8ef 	b.w	d4684 <network_get_listen_timeout>

000d54a6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d54a6:	2200      	movs	r2, #0
   d54a8:	6840      	ldr	r0, [r0, #4]
   d54aa:	f7ff b8e3 	b.w	d4674 <network_set_listen_timeout>

000d54ae <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d54ae:	2200      	movs	r2, #0
   d54b0:	f081 0101 	eor.w	r1, r1, #1
   d54b4:	6840      	ldr	r0, [r0, #4]
   d54b6:	f7ff b8cd 	b.w	d4654 <network_listen>

000d54ba <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d54ba:	2300      	movs	r3, #0
   d54bc:	461a      	mov	r2, r3
   d54be:	4619      	mov	r1, r3
   d54c0:	6840      	ldr	r0, [r0, #4]
   d54c2:	f7ff b8bf 	b.w	d4644 <network_off>

000d54c6 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d54c6:	2300      	movs	r3, #0
   d54c8:	461a      	mov	r2, r3
   d54ca:	4619      	mov	r1, r3
   d54cc:	6840      	ldr	r0, [r0, #4]
   d54ce:	f7ff b8b1 	b.w	d4634 <network_on>

000d54d2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d54d2:	2200      	movs	r2, #0
   d54d4:	4611      	mov	r1, r2
   d54d6:	6840      	ldr	r0, [r0, #4]
   d54d8:	f7ff b894 	b.w	d4604 <network_connecting>

000d54dc <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d54dc:	2200      	movs	r2, #0
   d54de:	2102      	movs	r1, #2
   d54e0:	6840      	ldr	r0, [r0, #4]
   d54e2:	f7ff b897 	b.w	d4614 <network_disconnect>

000d54e6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d54e6:	2300      	movs	r3, #0
   d54e8:	461a      	mov	r2, r3
   d54ea:	6840      	ldr	r0, [r0, #4]
   d54ec:	f7ff b882 	b.w	d45f4 <network_connect>

000d54f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d54f0:	4b02      	ldr	r3, [pc, #8]	; (d54fc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d54f2:	2204      	movs	r2, #4
   d54f4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d54f6:	4a02      	ldr	r2, [pc, #8]	; (d5500 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d54f8:	601a      	str	r2, [r3, #0]
   d54fa:	4770      	bx	lr
   d54fc:	2003e704 	.word	0x2003e704
   d5500:	000d5d90 	.word	0x000d5d90

000d5504 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5504:	2300      	movs	r3, #0
   d5506:	461a      	mov	r2, r3
   d5508:	6840      	ldr	r0, [r0, #4]
   d550a:	f7ff b873 	b.w	d45f4 <network_connect>

000d550e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d550e:	2200      	movs	r2, #0
   d5510:	2102      	movs	r1, #2
   d5512:	6840      	ldr	r0, [r0, #4]
   d5514:	f7ff b87e 	b.w	d4614 <network_disconnect>

000d5518 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5518:	2200      	movs	r2, #0
   d551a:	4611      	mov	r1, r2
   d551c:	6840      	ldr	r0, [r0, #4]
   d551e:	f7ff b871 	b.w	d4604 <network_connecting>

000d5522 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5522:	2200      	movs	r2, #0
   d5524:	4611      	mov	r1, r2
   d5526:	6840      	ldr	r0, [r0, #4]
   d5528:	f7ff b87c 	b.w	d4624 <network_ready>

000d552c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d552c:	2300      	movs	r3, #0
   d552e:	461a      	mov	r2, r3
   d5530:	4619      	mov	r1, r3
   d5532:	6840      	ldr	r0, [r0, #4]
   d5534:	f7ff b87e 	b.w	d4634 <network_on>

000d5538 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5538:	2300      	movs	r3, #0
   d553a:	461a      	mov	r2, r3
   d553c:	4619      	mov	r1, r3
   d553e:	6840      	ldr	r0, [r0, #4]
   d5540:	f7ff b880 	b.w	d4644 <network_off>

000d5544 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5544:	2200      	movs	r2, #0
   d5546:	f081 0101 	eor.w	r1, r1, #1
   d554a:	6840      	ldr	r0, [r0, #4]
   d554c:	f7ff b882 	b.w	d4654 <network_listen>

000d5550 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5550:	2200      	movs	r2, #0
   d5552:	6840      	ldr	r0, [r0, #4]
   d5554:	f7ff b88e 	b.w	d4674 <network_set_listen_timeout>

000d5558 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5558:	2200      	movs	r2, #0
   d555a:	4611      	mov	r1, r2
   d555c:	6840      	ldr	r0, [r0, #4]
   d555e:	f7ff b891 	b.w	d4684 <network_get_listen_timeout>

000d5562 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5562:	2200      	movs	r2, #0
   d5564:	4611      	mov	r1, r2
   d5566:	6840      	ldr	r0, [r0, #4]
   d5568:	f7ff b87c 	b.w	d4664 <network_listening>

000d556c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d556c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5570:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5572:	b095      	sub	sp, #84	; 0x54
   d5574:	4616      	mov	r6, r2
   d5576:	460d      	mov	r5, r1
   d5578:	4607      	mov	r7, r0
    IPAddress addr;
   d557a:	f7ff fd3f 	bl	d4ffc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d557e:	4621      	mov	r1, r4
   d5580:	2220      	movs	r2, #32
   d5582:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5584:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5586:	f000 fa74 	bl	d5a72 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d558a:	2340      	movs	r3, #64	; 0x40
   d558c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d558e:	4621      	mov	r1, r4
   d5590:	466b      	mov	r3, sp
   d5592:	aa0c      	add	r2, sp, #48	; 0x30
   d5594:	4630      	mov	r0, r6
   d5596:	f7fe fec9 	bl	d432c <netdb_getaddrinfo>
    if (!r) {
   d559a:	4604      	mov	r4, r0
   d559c:	2800      	cmp	r0, #0
   d559e:	d144      	bne.n	d562a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d55a0:	4602      	mov	r2, r0
   d55a2:	2101      	movs	r1, #1
   d55a4:	6868      	ldr	r0, [r5, #4]
   d55a6:	f7ff f83d 	bl	d4624 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d55aa:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d55ac:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d55ae:	4622      	mov	r2, r4
   d55b0:	6868      	ldr	r0, [r5, #4]
   d55b2:	f7ff f837 	bl	d4624 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d55b6:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d55b8:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d55ba:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d55bc:	2e00      	cmp	r6, #0
   d55be:	d034      	beq.n	d562a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d55c0:	2900      	cmp	r1, #0
   d55c2:	d132      	bne.n	d562a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d55c4:	6873      	ldr	r3, [r6, #4]
   d55c6:	2b02      	cmp	r3, #2
   d55c8:	d002      	beq.n	d55d0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d55ca:	2b0a      	cmp	r3, #10
   d55cc:	d009      	beq.n	d55e2 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d55ce:	e02a      	b.n	d5626 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d55d0:	f1b8 0f00 	cmp.w	r8, #0
   d55d4:	d027      	beq.n	d5626 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d55d6:	6971      	ldr	r1, [r6, #20]
   d55d8:	4638      	mov	r0, r7
   d55da:	3104      	adds	r1, #4
   d55dc:	f7ff fd3b 	bl	d5056 <_ZN9IPAddressaSEPKh>
   d55e0:	e020      	b.n	d5624 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d55e2:	f1b9 0f00 	cmp.w	r9, #0
   d55e6:	d01e      	beq.n	d5626 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d55e8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d55ea:	2211      	movs	r2, #17
   d55ec:	a801      	add	r0, sp, #4
   d55ee:	f000 fa40 	bl	d5a72 <memset>
                    a.v = 6;
   d55f2:	2306      	movs	r3, #6
   d55f4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d55f8:	ad01      	add	r5, sp, #4
   d55fa:	f104 0308 	add.w	r3, r4, #8
   d55fe:	3418      	adds	r4, #24
   d5600:	6818      	ldr	r0, [r3, #0]
   d5602:	6859      	ldr	r1, [r3, #4]
   d5604:	462a      	mov	r2, r5
   d5606:	c203      	stmia	r2!, {r0, r1}
   d5608:	3308      	adds	r3, #8
   d560a:	42a3      	cmp	r3, r4
   d560c:	4615      	mov	r5, r2
   d560e:	d1f7      	bne.n	d5600 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5610:	a901      	add	r1, sp, #4
   d5612:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5614:	ad07      	add	r5, sp, #28
   d5616:	f7ff fcff 	bl	d5018 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d561a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d561c:	1d3c      	adds	r4, r7, #4
   d561e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5620:	682b      	ldr	r3, [r5, #0]
   d5622:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5624:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5626:	69f6      	ldr	r6, [r6, #28]
   d5628:	e7c8      	b.n	d55bc <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d562a:	9800      	ldr	r0, [sp, #0]
   d562c:	f7fe fe76 	bl	d431c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5630:	4638      	mov	r0, r7
   d5632:	b015      	add	sp, #84	; 0x54
   d5634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5638 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5638:	4b02      	ldr	r3, [pc, #8]	; (d5644 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d563a:	4a03      	ldr	r2, [pc, #12]	; (d5648 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d563c:	601a      	str	r2, [r3, #0]
   d563e:	2200      	movs	r2, #0
   d5640:	605a      	str	r2, [r3, #4]
   d5642:	4770      	bx	lr
   d5644:	2003e70c 	.word	0x2003e70c
   d5648:	000d5dc4 	.word	0x000d5dc4

000d564c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d564c:	b510      	push	{r4, lr}
   d564e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5650:	480f      	ldr	r0, [pc, #60]	; (d5690 <pinAvailable+0x44>)
   d5652:	f7ff f8b1 	bl	d47b8 <_ZN8SPIClass9isEnabledEv>
   d5656:	b128      	cbz	r0, d5664 <pinAvailable+0x18>
   d5658:	f1a4 030b 	sub.w	r3, r4, #11
   d565c:	2b02      	cmp	r3, #2
   d565e:	d801      	bhi.n	d5664 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d5660:	2000      	movs	r0, #0
   d5662:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5664:	f000 f87a 	bl	d575c <_Z19__fetch_global_Wirev>
   d5668:	f7ff fe58 	bl	d531c <_ZN7TwoWire9isEnabledEv>
   d566c:	b108      	cbz	r0, d5672 <pinAvailable+0x26>
   d566e:	2c01      	cmp	r4, #1
   d5670:	d9f6      	bls.n	d5660 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5672:	f7ff fddb 	bl	d522c <_Z22__fetch_global_Serial1v>
   d5676:	f7ff fdd5 	bl	d5224 <_ZN11USARTSerial9isEnabledEv>
   d567a:	b118      	cbz	r0, d5684 <pinAvailable+0x38>
   d567c:	f1a4 0309 	sub.w	r3, r4, #9
   d5680:	2b01      	cmp	r3, #1
   d5682:	d9ed      	bls.n	d5660 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5684:	2c23      	cmp	r4, #35	; 0x23
   d5686:	bf8c      	ite	hi
   d5688:	2000      	movhi	r0, #0
   d568a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d568c:	bd10      	pop	{r4, pc}
   d568e:	bf00      	nop
   d5690:	2003e714 	.word	0x2003e714

000d5694 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5694:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5696:	b538      	push	{r3, r4, r5, lr}
   d5698:	4604      	mov	r4, r0
   d569a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d569c:	d80a      	bhi.n	d56b4 <pinMode+0x20>
   d569e:	29ff      	cmp	r1, #255	; 0xff
   d56a0:	d008      	beq.n	d56b4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d56a2:	f7ff ffd3 	bl	d564c <pinAvailable>
   d56a6:	b128      	cbz	r0, d56b4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d56a8:	4629      	mov	r1, r5
   d56aa:	4620      	mov	r0, r4
}
   d56ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d56b0:	f7fe be54 	b.w	d435c <HAL_Pin_Mode>
   d56b4:	bd38      	pop	{r3, r4, r5, pc}

000d56b6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d56b6:	b538      	push	{r3, r4, r5, lr}
   d56b8:	4604      	mov	r4, r0
   d56ba:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d56bc:	f7fe fe56 	bl	d436c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d56c0:	28ff      	cmp	r0, #255	; 0xff
   d56c2:	d010      	beq.n	d56e6 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d56c4:	2806      	cmp	r0, #6
   d56c6:	d804      	bhi.n	d56d2 <digitalWrite+0x1c>
   d56c8:	234d      	movs	r3, #77	; 0x4d
   d56ca:	fa23 f000 	lsr.w	r0, r3, r0
   d56ce:	07c3      	lsls	r3, r0, #31
   d56d0:	d409      	bmi.n	d56e6 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d56d2:	4620      	mov	r0, r4
   d56d4:	f7ff ffba 	bl	d564c <pinAvailable>
   d56d8:	b128      	cbz	r0, d56e6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d56da:	4629      	mov	r1, r5
   d56dc:	4620      	mov	r0, r4
}
   d56de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d56e2:	f7fe be4b 	b.w	d437c <HAL_GPIO_Write>
   d56e6:	bd38      	pop	{r3, r4, r5, pc}

000d56e8 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d56e8:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d56ea:	b510      	push	{r4, lr}
   d56ec:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d56ee:	bf9c      	itt	ls
   d56f0:	340e      	addls	r4, #14
   d56f2:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d56f4:	4620      	mov	r0, r4
   d56f6:	f7ff ffa9 	bl	d564c <pinAvailable>
   d56fa:	b150      	cbz	r0, d5712 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d56fc:	2103      	movs	r1, #3
   d56fe:	4620      	mov	r0, r4
   d5700:	f7fe fe24 	bl	d434c <HAL_Validate_Pin_Function>
   d5704:	2803      	cmp	r0, #3
   d5706:	d104      	bne.n	d5712 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5708:	4620      	mov	r0, r4
}
   d570a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d570e:	f7fe be3d 	b.w	d438c <HAL_ADC_Read>
}
   d5712:	2000      	movs	r0, #0
   d5714:	bd10      	pop	{r4, pc}
	...

000d5718 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5718:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d571a:	4c0c      	ldr	r4, [pc, #48]	; (d574c <_GLOBAL__sub_I_SPI+0x34>)
   d571c:	4e0c      	ldr	r6, [pc, #48]	; (d5750 <_GLOBAL__sub_I_SPI+0x38>)
   d571e:	4d0d      	ldr	r5, [pc, #52]	; (d5754 <_GLOBAL__sub_I_SPI+0x3c>)
   d5720:	2100      	movs	r1, #0
   d5722:	4620      	mov	r0, r4
   d5724:	f7ff f834 	bl	d4790 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5728:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d572a:	4c0b      	ldr	r4, [pc, #44]	; (d5758 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d572c:	4632      	mov	r2, r6
   d572e:	4629      	mov	r1, r5
   d5730:	f000 f834 	bl	d579c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5734:	2101      	movs	r1, #1
   d5736:	4620      	mov	r0, r4
   d5738:	f7ff f82a 	bl	d4790 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d573c:	4632      	mov	r2, r6
   d573e:	4629      	mov	r1, r5
   d5740:	4620      	mov	r0, r4
   d5742:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5746:	f000 b829 	b.w	d579c <__aeabi_atexit>
   d574a:	bf00      	nop
   d574c:	2003e714 	.word	0x2003e714
   d5750:	2003e3b0 	.word	0x2003e3b0
   d5754:	000d4781 	.word	0x000d4781
   d5758:	2003e724 	.word	0x2003e724

000d575c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d575c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d575e:	4d0b      	ldr	r5, [pc, #44]	; (d578c <_Z19__fetch_global_Wirev+0x30>)
   d5760:	6829      	ldr	r1, [r5, #0]
   d5762:	f011 0401 	ands.w	r4, r1, #1
   d5766:	d10f      	bne.n	d5788 <_Z19__fetch_global_Wirev+0x2c>
   d5768:	4628      	mov	r0, r5
   d576a:	f7fe fc9a 	bl	d40a2 <__cxa_guard_acquire>
   d576e:	b158      	cbz	r0, d5788 <_Z19__fetch_global_Wirev+0x2c>
   d5770:	4621      	mov	r1, r4
   d5772:	4807      	ldr	r0, [pc, #28]	; (d5790 <_Z19__fetch_global_Wirev+0x34>)
   d5774:	f7ff fdc0 	bl	d52f8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d5778:	4628      	mov	r0, r5
   d577a:	f7fe fc97 	bl	d40ac <__cxa_guard_release>
   d577e:	4a05      	ldr	r2, [pc, #20]	; (d5794 <_Z19__fetch_global_Wirev+0x38>)
   d5780:	4905      	ldr	r1, [pc, #20]	; (d5798 <_Z19__fetch_global_Wirev+0x3c>)
   d5782:	4803      	ldr	r0, [pc, #12]	; (d5790 <_Z19__fetch_global_Wirev+0x34>)
   d5784:	f000 f80a 	bl	d579c <__aeabi_atexit>
	return wire;
}
   d5788:	4801      	ldr	r0, [pc, #4]	; (d5790 <_Z19__fetch_global_Wirev+0x34>)
   d578a:	bd38      	pop	{r3, r4, r5, pc}
   d578c:	2003e738 	.word	0x2003e738
   d5790:	2003e73c 	.word	0x2003e73c
   d5794:	2003e3b0 	.word	0x2003e3b0
   d5798:	000d52a1 	.word	0x000d52a1

000d579c <__aeabi_atexit>:
   d579c:	460b      	mov	r3, r1
   d579e:	4601      	mov	r1, r0
   d57a0:	4618      	mov	r0, r3
   d57a2:	f000 b94d 	b.w	d5a40 <__cxa_atexit>

000d57a6 <_ZdlPvj>:
   d57a6:	f7fe bc78 	b.w	d409a <_ZdlPv>

000d57aa <_ZSt25__throw_bad_function_callv>:
   d57aa:	b508      	push	{r3, lr}
   d57ac:	f7fe ff9a 	bl	d46e4 <abort>

000d57b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d57b0:	4b18      	ldr	r3, [pc, #96]	; (d5814 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d57b2:	681a      	ldr	r2, [r3, #0]
   d57b4:	07d1      	lsls	r1, r2, #31
   d57b6:	bf5c      	itt	pl
   d57b8:	2201      	movpl	r2, #1
   d57ba:	601a      	strpl	r2, [r3, #0]
   d57bc:	4b16      	ldr	r3, [pc, #88]	; (d5818 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d57be:	681a      	ldr	r2, [r3, #0]
   d57c0:	07d2      	lsls	r2, r2, #31
   d57c2:	bf5c      	itt	pl
   d57c4:	2201      	movpl	r2, #1
   d57c6:	601a      	strpl	r2, [r3, #0]
   d57c8:	4b14      	ldr	r3, [pc, #80]	; (d581c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d57ca:	681a      	ldr	r2, [r3, #0]
   d57cc:	07d0      	lsls	r0, r2, #31
   d57ce:	bf5c      	itt	pl
   d57d0:	2201      	movpl	r2, #1
   d57d2:	601a      	strpl	r2, [r3, #0]
   d57d4:	4b12      	ldr	r3, [pc, #72]	; (d5820 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d57d6:	681a      	ldr	r2, [r3, #0]
   d57d8:	07d1      	lsls	r1, r2, #31
   d57da:	bf5c      	itt	pl
   d57dc:	2201      	movpl	r2, #1
   d57de:	601a      	strpl	r2, [r3, #0]
   d57e0:	4b10      	ldr	r3, [pc, #64]	; (d5824 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d57e2:	681a      	ldr	r2, [r3, #0]
   d57e4:	07d2      	lsls	r2, r2, #31
   d57e6:	bf5c      	itt	pl
   d57e8:	2201      	movpl	r2, #1
   d57ea:	601a      	strpl	r2, [r3, #0]
   d57ec:	4b0e      	ldr	r3, [pc, #56]	; (d5828 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d57ee:	681a      	ldr	r2, [r3, #0]
   d57f0:	07d0      	lsls	r0, r2, #31
   d57f2:	bf5c      	itt	pl
   d57f4:	2201      	movpl	r2, #1
   d57f6:	601a      	strpl	r2, [r3, #0]
   d57f8:	4b0c      	ldr	r3, [pc, #48]	; (d582c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d57fa:	681a      	ldr	r2, [r3, #0]
   d57fc:	07d1      	lsls	r1, r2, #31
   d57fe:	bf5c      	itt	pl
   d5800:	2201      	movpl	r2, #1
   d5802:	601a      	strpl	r2, [r3, #0]
   d5804:	4b0a      	ldr	r3, [pc, #40]	; (d5830 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5806:	681a      	ldr	r2, [r3, #0]
   d5808:	07d2      	lsls	r2, r2, #31
   d580a:	bf5c      	itt	pl
   d580c:	2201      	movpl	r2, #1
   d580e:	601a      	strpl	r2, [r3, #0]
   d5810:	4770      	bx	lr
   d5812:	bf00      	nop
   d5814:	2003e76c 	.word	0x2003e76c
   d5818:	2003e768 	.word	0x2003e768
   d581c:	2003e764 	.word	0x2003e764
   d5820:	2003e760 	.word	0x2003e760
   d5824:	2003e75c 	.word	0x2003e75c
   d5828:	2003e758 	.word	0x2003e758
   d582c:	2003e754 	.word	0x2003e754
   d5830:	2003e750 	.word	0x2003e750

000d5834 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5834:	4b24      	ldr	r3, [pc, #144]	; (d58c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5836:	681a      	ldr	r2, [r3, #0]
   d5838:	07d0      	lsls	r0, r2, #31
   d583a:	bf5c      	itt	pl
   d583c:	2201      	movpl	r2, #1
   d583e:	601a      	strpl	r2, [r3, #0]
   d5840:	4b22      	ldr	r3, [pc, #136]	; (d58cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5842:	681a      	ldr	r2, [r3, #0]
   d5844:	07d1      	lsls	r1, r2, #31
   d5846:	bf5c      	itt	pl
   d5848:	2201      	movpl	r2, #1
   d584a:	601a      	strpl	r2, [r3, #0]
   d584c:	4b20      	ldr	r3, [pc, #128]	; (d58d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d584e:	681a      	ldr	r2, [r3, #0]
   d5850:	07d2      	lsls	r2, r2, #31
   d5852:	bf5c      	itt	pl
   d5854:	2201      	movpl	r2, #1
   d5856:	601a      	strpl	r2, [r3, #0]
   d5858:	4b1e      	ldr	r3, [pc, #120]	; (d58d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d585a:	681a      	ldr	r2, [r3, #0]
   d585c:	07d0      	lsls	r0, r2, #31
   d585e:	bf5c      	itt	pl
   d5860:	2201      	movpl	r2, #1
   d5862:	601a      	strpl	r2, [r3, #0]
   d5864:	4b1c      	ldr	r3, [pc, #112]	; (d58d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5866:	681a      	ldr	r2, [r3, #0]
   d5868:	07d1      	lsls	r1, r2, #31
   d586a:	bf5c      	itt	pl
   d586c:	2201      	movpl	r2, #1
   d586e:	601a      	strpl	r2, [r3, #0]
   d5870:	4b1a      	ldr	r3, [pc, #104]	; (d58dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5872:	681a      	ldr	r2, [r3, #0]
   d5874:	07d2      	lsls	r2, r2, #31
   d5876:	bf5c      	itt	pl
   d5878:	2201      	movpl	r2, #1
   d587a:	601a      	strpl	r2, [r3, #0]
   d587c:	4b18      	ldr	r3, [pc, #96]	; (d58e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d587e:	681a      	ldr	r2, [r3, #0]
   d5880:	07d0      	lsls	r0, r2, #31
   d5882:	bf5c      	itt	pl
   d5884:	2201      	movpl	r2, #1
   d5886:	601a      	strpl	r2, [r3, #0]
   d5888:	4b16      	ldr	r3, [pc, #88]	; (d58e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d588a:	681a      	ldr	r2, [r3, #0]
   d588c:	07d1      	lsls	r1, r2, #31
   d588e:	bf5c      	itt	pl
   d5890:	2201      	movpl	r2, #1
   d5892:	601a      	strpl	r2, [r3, #0]
   d5894:	4b14      	ldr	r3, [pc, #80]	; (d58e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5896:	681a      	ldr	r2, [r3, #0]
   d5898:	07d2      	lsls	r2, r2, #31
   d589a:	bf5c      	itt	pl
   d589c:	2201      	movpl	r2, #1
   d589e:	601a      	strpl	r2, [r3, #0]
   d58a0:	4b12      	ldr	r3, [pc, #72]	; (d58ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d58a2:	681a      	ldr	r2, [r3, #0]
   d58a4:	07d0      	lsls	r0, r2, #31
   d58a6:	bf5c      	itt	pl
   d58a8:	2201      	movpl	r2, #1
   d58aa:	601a      	strpl	r2, [r3, #0]
   d58ac:	4b10      	ldr	r3, [pc, #64]	; (d58f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d58ae:	681a      	ldr	r2, [r3, #0]
   d58b0:	07d1      	lsls	r1, r2, #31
   d58b2:	bf5c      	itt	pl
   d58b4:	2201      	movpl	r2, #1
   d58b6:	601a      	strpl	r2, [r3, #0]
   d58b8:	4b0e      	ldr	r3, [pc, #56]	; (d58f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d58ba:	681a      	ldr	r2, [r3, #0]
   d58bc:	07d2      	lsls	r2, r2, #31
   d58be:	bf5c      	itt	pl
   d58c0:	2201      	movpl	r2, #1
   d58c2:	601a      	strpl	r2, [r3, #0]
   d58c4:	4770      	bx	lr
   d58c6:	bf00      	nop
   d58c8:	2003e79c 	.word	0x2003e79c
   d58cc:	2003e798 	.word	0x2003e798
   d58d0:	2003e794 	.word	0x2003e794
   d58d4:	2003e790 	.word	0x2003e790
   d58d8:	2003e78c 	.word	0x2003e78c
   d58dc:	2003e788 	.word	0x2003e788
   d58e0:	2003e784 	.word	0x2003e784
   d58e4:	2003e780 	.word	0x2003e780
   d58e8:	2003e77c 	.word	0x2003e77c
   d58ec:	2003e778 	.word	0x2003e778
   d58f0:	2003e774 	.word	0x2003e774
   d58f4:	2003e770 	.word	0x2003e770

000d58f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d58f8:	4b24      	ldr	r3, [pc, #144]	; (d598c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d58fa:	681a      	ldr	r2, [r3, #0]
   d58fc:	07d0      	lsls	r0, r2, #31
   d58fe:	bf5c      	itt	pl
   d5900:	2201      	movpl	r2, #1
   d5902:	601a      	strpl	r2, [r3, #0]
   d5904:	4b22      	ldr	r3, [pc, #136]	; (d5990 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5906:	681a      	ldr	r2, [r3, #0]
   d5908:	07d1      	lsls	r1, r2, #31
   d590a:	bf5c      	itt	pl
   d590c:	2201      	movpl	r2, #1
   d590e:	601a      	strpl	r2, [r3, #0]
   d5910:	4b20      	ldr	r3, [pc, #128]	; (d5994 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5912:	681a      	ldr	r2, [r3, #0]
   d5914:	07d2      	lsls	r2, r2, #31
   d5916:	bf5c      	itt	pl
   d5918:	2201      	movpl	r2, #1
   d591a:	601a      	strpl	r2, [r3, #0]
   d591c:	4b1e      	ldr	r3, [pc, #120]	; (d5998 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d591e:	681a      	ldr	r2, [r3, #0]
   d5920:	07d0      	lsls	r0, r2, #31
   d5922:	bf5c      	itt	pl
   d5924:	2201      	movpl	r2, #1
   d5926:	601a      	strpl	r2, [r3, #0]
   d5928:	4b1c      	ldr	r3, [pc, #112]	; (d599c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d592a:	681a      	ldr	r2, [r3, #0]
   d592c:	07d1      	lsls	r1, r2, #31
   d592e:	bf5c      	itt	pl
   d5930:	2201      	movpl	r2, #1
   d5932:	601a      	strpl	r2, [r3, #0]
   d5934:	4b1a      	ldr	r3, [pc, #104]	; (d59a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5936:	681a      	ldr	r2, [r3, #0]
   d5938:	07d2      	lsls	r2, r2, #31
   d593a:	bf5c      	itt	pl
   d593c:	2201      	movpl	r2, #1
   d593e:	601a      	strpl	r2, [r3, #0]
   d5940:	4b18      	ldr	r3, [pc, #96]	; (d59a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5942:	681a      	ldr	r2, [r3, #0]
   d5944:	07d0      	lsls	r0, r2, #31
   d5946:	bf5c      	itt	pl
   d5948:	2201      	movpl	r2, #1
   d594a:	601a      	strpl	r2, [r3, #0]
   d594c:	4b16      	ldr	r3, [pc, #88]	; (d59a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d594e:	681a      	ldr	r2, [r3, #0]
   d5950:	07d1      	lsls	r1, r2, #31
   d5952:	bf5c      	itt	pl
   d5954:	2201      	movpl	r2, #1
   d5956:	601a      	strpl	r2, [r3, #0]
   d5958:	4b14      	ldr	r3, [pc, #80]	; (d59ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d595a:	681a      	ldr	r2, [r3, #0]
   d595c:	07d2      	lsls	r2, r2, #31
   d595e:	bf5c      	itt	pl
   d5960:	2201      	movpl	r2, #1
   d5962:	601a      	strpl	r2, [r3, #0]
   d5964:	4b12      	ldr	r3, [pc, #72]	; (d59b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5966:	681a      	ldr	r2, [r3, #0]
   d5968:	07d0      	lsls	r0, r2, #31
   d596a:	bf5c      	itt	pl
   d596c:	2201      	movpl	r2, #1
   d596e:	601a      	strpl	r2, [r3, #0]
   d5970:	4b10      	ldr	r3, [pc, #64]	; (d59b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5972:	681a      	ldr	r2, [r3, #0]
   d5974:	07d1      	lsls	r1, r2, #31
   d5976:	bf5c      	itt	pl
   d5978:	2201      	movpl	r2, #1
   d597a:	601a      	strpl	r2, [r3, #0]
   d597c:	4b0e      	ldr	r3, [pc, #56]	; (d59b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d597e:	681a      	ldr	r2, [r3, #0]
   d5980:	07d2      	lsls	r2, r2, #31
   d5982:	bf5c      	itt	pl
   d5984:	2201      	movpl	r2, #1
   d5986:	601a      	strpl	r2, [r3, #0]
   d5988:	4770      	bx	lr
   d598a:	bf00      	nop
   d598c:	2003e7cc 	.word	0x2003e7cc
   d5990:	2003e7c8 	.word	0x2003e7c8
   d5994:	2003e7c4 	.word	0x2003e7c4
   d5998:	2003e7c0 	.word	0x2003e7c0
   d599c:	2003e7bc 	.word	0x2003e7bc
   d59a0:	2003e7b8 	.word	0x2003e7b8
   d59a4:	2003e7b4 	.word	0x2003e7b4
   d59a8:	2003e7b0 	.word	0x2003e7b0
   d59ac:	2003e7ac 	.word	0x2003e7ac
   d59b0:	2003e7a8 	.word	0x2003e7a8
   d59b4:	2003e7a4 	.word	0x2003e7a4
   d59b8:	2003e7a0 	.word	0x2003e7a0

000d59bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d59bc:	4b18      	ldr	r3, [pc, #96]	; (d5a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d59be:	681a      	ldr	r2, [r3, #0]
   d59c0:	07d1      	lsls	r1, r2, #31
   d59c2:	bf5c      	itt	pl
   d59c4:	2201      	movpl	r2, #1
   d59c6:	601a      	strpl	r2, [r3, #0]
   d59c8:	4b16      	ldr	r3, [pc, #88]	; (d5a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d59ca:	681a      	ldr	r2, [r3, #0]
   d59cc:	07d2      	lsls	r2, r2, #31
   d59ce:	bf5c      	itt	pl
   d59d0:	2201      	movpl	r2, #1
   d59d2:	601a      	strpl	r2, [r3, #0]
   d59d4:	4b14      	ldr	r3, [pc, #80]	; (d5a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d59d6:	681a      	ldr	r2, [r3, #0]
   d59d8:	07d0      	lsls	r0, r2, #31
   d59da:	bf5c      	itt	pl
   d59dc:	2201      	movpl	r2, #1
   d59de:	601a      	strpl	r2, [r3, #0]
   d59e0:	4b12      	ldr	r3, [pc, #72]	; (d5a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d59e2:	681a      	ldr	r2, [r3, #0]
   d59e4:	07d1      	lsls	r1, r2, #31
   d59e6:	bf5c      	itt	pl
   d59e8:	2201      	movpl	r2, #1
   d59ea:	601a      	strpl	r2, [r3, #0]
   d59ec:	4b10      	ldr	r3, [pc, #64]	; (d5a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d59ee:	681a      	ldr	r2, [r3, #0]
   d59f0:	07d2      	lsls	r2, r2, #31
   d59f2:	bf5c      	itt	pl
   d59f4:	2201      	movpl	r2, #1
   d59f6:	601a      	strpl	r2, [r3, #0]
   d59f8:	4b0e      	ldr	r3, [pc, #56]	; (d5a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d59fa:	681a      	ldr	r2, [r3, #0]
   d59fc:	07d0      	lsls	r0, r2, #31
   d59fe:	bf5c      	itt	pl
   d5a00:	2201      	movpl	r2, #1
   d5a02:	601a      	strpl	r2, [r3, #0]
   d5a04:	4b0c      	ldr	r3, [pc, #48]	; (d5a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5a06:	681a      	ldr	r2, [r3, #0]
   d5a08:	07d1      	lsls	r1, r2, #31
   d5a0a:	bf5c      	itt	pl
   d5a0c:	2201      	movpl	r2, #1
   d5a0e:	601a      	strpl	r2, [r3, #0]
   d5a10:	4b0a      	ldr	r3, [pc, #40]	; (d5a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5a12:	681a      	ldr	r2, [r3, #0]
   d5a14:	07d2      	lsls	r2, r2, #31
   d5a16:	bf5c      	itt	pl
   d5a18:	2201      	movpl	r2, #1
   d5a1a:	601a      	strpl	r2, [r3, #0]
   d5a1c:	4770      	bx	lr
   d5a1e:	bf00      	nop
   d5a20:	2003e7ec 	.word	0x2003e7ec
   d5a24:	2003e7e8 	.word	0x2003e7e8
   d5a28:	2003e7e4 	.word	0x2003e7e4
   d5a2c:	2003e7e0 	.word	0x2003e7e0
   d5a30:	2003e7dc 	.word	0x2003e7dc
   d5a34:	2003e7d8 	.word	0x2003e7d8
   d5a38:	2003e7d4 	.word	0x2003e7d4
   d5a3c:	2003e7d0 	.word	0x2003e7d0

000d5a40 <__cxa_atexit>:
   d5a40:	b510      	push	{r4, lr}
   d5a42:	4c05      	ldr	r4, [pc, #20]	; (d5a58 <__cxa_atexit+0x18>)
   d5a44:	4613      	mov	r3, r2
   d5a46:	b12c      	cbz	r4, d5a54 <__cxa_atexit+0x14>
   d5a48:	460a      	mov	r2, r1
   d5a4a:	4601      	mov	r1, r0
   d5a4c:	2002      	movs	r0, #2
   d5a4e:	f3af 8000 	nop.w
   d5a52:	bd10      	pop	{r4, pc}
   d5a54:	4620      	mov	r0, r4
   d5a56:	bd10      	pop	{r4, pc}
   d5a58:	00000000 	.word	0x00000000

000d5a5c <memcpy>:
   d5a5c:	b510      	push	{r4, lr}
   d5a5e:	1e43      	subs	r3, r0, #1
   d5a60:	440a      	add	r2, r1
   d5a62:	4291      	cmp	r1, r2
   d5a64:	d004      	beq.n	d5a70 <memcpy+0x14>
   d5a66:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5a6a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5a6e:	e7f8      	b.n	d5a62 <memcpy+0x6>
   d5a70:	bd10      	pop	{r4, pc}

000d5a72 <memset>:
   d5a72:	4402      	add	r2, r0
   d5a74:	4603      	mov	r3, r0
   d5a76:	4293      	cmp	r3, r2
   d5a78:	d002      	beq.n	d5a80 <memset+0xe>
   d5a7a:	f803 1b01 	strb.w	r1, [r3], #1
   d5a7e:	e7fa      	b.n	d5a76 <memset+0x4>
   d5a80:	4770      	bx	lr
	...

000d5a84 <srand>:
   d5a84:	b538      	push	{r3, r4, r5, lr}
   d5a86:	4b12      	ldr	r3, [pc, #72]	; (d5ad0 <srand+0x4c>)
   d5a88:	681c      	ldr	r4, [r3, #0]
   d5a8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5a8c:	4605      	mov	r5, r0
   d5a8e:	b9d3      	cbnz	r3, d5ac6 <srand+0x42>
   d5a90:	2018      	movs	r0, #24
   d5a92:	f7fe fe17 	bl	d46c4 <malloc>
   d5a96:	f243 330e 	movw	r3, #13070	; 0x330e
   d5a9a:	63a0      	str	r0, [r4, #56]	; 0x38
   d5a9c:	8003      	strh	r3, [r0, #0]
   d5a9e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5aa2:	8043      	strh	r3, [r0, #2]
   d5aa4:	f241 2334 	movw	r3, #4660	; 0x1234
   d5aa8:	8083      	strh	r3, [r0, #4]
   d5aaa:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5aae:	80c3      	strh	r3, [r0, #6]
   d5ab0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5ab4:	8103      	strh	r3, [r0, #8]
   d5ab6:	2305      	movs	r3, #5
   d5ab8:	8143      	strh	r3, [r0, #10]
   d5aba:	230b      	movs	r3, #11
   d5abc:	8183      	strh	r3, [r0, #12]
   d5abe:	2201      	movs	r2, #1
   d5ac0:	2300      	movs	r3, #0
   d5ac2:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5ac6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5ac8:	2200      	movs	r2, #0
   d5aca:	611d      	str	r5, [r3, #16]
   d5acc:	615a      	str	r2, [r3, #20]
   d5ace:	bd38      	pop	{r3, r4, r5, pc}
   d5ad0:	2003e3ac 	.word	0x2003e3ac

000d5ad4 <strdup>:
   d5ad4:	4b02      	ldr	r3, [pc, #8]	; (d5ae0 <strdup+0xc>)
   d5ad6:	4601      	mov	r1, r0
   d5ad8:	6818      	ldr	r0, [r3, #0]
   d5ada:	f000 b803 	b.w	d5ae4 <_strdup_r>
   d5ade:	bf00      	nop
   d5ae0:	2003e3ac 	.word	0x2003e3ac

000d5ae4 <_strdup_r>:
   d5ae4:	b570      	push	{r4, r5, r6, lr}
   d5ae6:	4606      	mov	r6, r0
   d5ae8:	4608      	mov	r0, r1
   d5aea:	460c      	mov	r4, r1
   d5aec:	f000 f80d 	bl	d5b0a <strlen>
   d5af0:	1c45      	adds	r5, r0, #1
   d5af2:	4629      	mov	r1, r5
   d5af4:	4630      	mov	r0, r6
   d5af6:	f7fe fdfd 	bl	d46f4 <_malloc_r>
   d5afa:	4606      	mov	r6, r0
   d5afc:	b118      	cbz	r0, d5b06 <_strdup_r+0x22>
   d5afe:	462a      	mov	r2, r5
   d5b00:	4621      	mov	r1, r4
   d5b02:	f7ff ffab 	bl	d5a5c <memcpy>
   d5b06:	4630      	mov	r0, r6
   d5b08:	bd70      	pop	{r4, r5, r6, pc}

000d5b0a <strlen>:
   d5b0a:	4603      	mov	r3, r0
   d5b0c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5b10:	2a00      	cmp	r2, #0
   d5b12:	d1fb      	bne.n	d5b0c <strlen+0x2>
   d5b14:	1a18      	subs	r0, r3, r0
   d5b16:	3801      	subs	r0, #1
   d5b18:	4770      	bx	lr

000d5b1a <link_code_end>:
	...

000d5b1c <dynalib_user>:
   d5b1c:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5b2c:	0000 0000 6e69 6174 7463 6200 6165 536d     ....intact.beamS
   d5b3c:	6174 7574 0073 7262 6b6f 6e65 0000 0000     tatus.broken....

000d5b4c <_ZTVN5spark13EthernetClassE>:
	...
   d5b54:	4763 000d 4759 000d 474f 000d 4745 000d     cG..YG..OG..EG..
   d5b64:	4739 000d 472d 000d 4721 000d 4719 000d     9G..-G..!G...G..
   d5b74:	470f 000d 4705 000d 556d 000d               .G...G..mU..

000d5b80 <_ZTV8SPIClass>:
	...
   d5b88:	4781 000d 4783 000d 6162 6475 5300 7265     .G...G..baud.Ser
   d5b98:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d5ba8:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d5bb8:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d5bc8:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d5bd8:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d5be8:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d5bf8:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d5c08:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d5c18:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d5c28:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d5c38:	0066 6e6c 6600 006e 6f63 6564 6400 7465     f.ln.fn.code.det
   d5c48:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   d5c58:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   d5c68:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
   d5c78:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   d5c88:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d5c98:	0065 0000                                   e...

000d5c9c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d5ca4:	4a01 000d 4a07 000d 4a4b 000d 4a15 000d     .J...J..KJ...J..
   d5cb4:	4a03 000d                                   .J..

000d5cb8 <_ZTV9IPAddress>:
	...
   d5cc0:	4f99 000d 4f89 000d 4f8b 000d               .O...O...O..

000d5ccc <_ZTV9USBSerial>:
	...
   d5cd4:	5071 000d 50c1 000d 50cf 000d 47f9 000d     qP...P...P...G..
   d5ce4:	50ad 000d 5073 000d 5089 000d 50bb 000d     .P..sP...P...P..
   d5cf4:	509f 000d 506d 000d                         .P..mP..

000d5cfc <_ZTV11USARTSerial>:
	...
   d5d04:	5175 000d 51c5 000d 51d3 000d 47f9 000d     uQ...Q...Q...G..
   d5d14:	5189 000d 51ab 000d 5197 000d 51bf 000d     .Q...Q...Q...Q..
   d5d24:	5177 000d 517b 000d                         wQ..{Q..

000d5d2c <_ZTV7TwoWire>:
	...
   d5d34:	52a1 000d 52eb 000d 52c3 000d 52a3 000d     .R...R...R...R..
   d5d44:	52cb 000d 52d3 000d 52db 000d 52e3 000d     .R...R...R...R..

000d5d54 <_ZTVN5spark9MeshClassE>:
	...
   d5d5c:	5383 000d 5379 000d 536f 000d 5365 000d     .S..yS..oS..eS..
   d5d6c:	5359 000d 534d 000d 5341 000d 5339 000d     YS..MS..AS..9S..
   d5d7c:	532f 000d 5325 000d 556d 000d               /S..%S..mU..

000d5d88 <_ZTVN5spark9WiFiClassE>:
	...
   d5d90:	54e7 000d 54dd 000d 54d3 000d 5489 000d     .T...T...T...T..
   d5da0:	54c7 000d 54bb 000d 54af 000d 54a7 000d     .T...T...T...T..
   d5db0:	549d 000d 5493 000d 556d 000d               .T...T..mU..

000d5dbc <_ZTVN5spark12NetworkClassE>:
	...
   d5dc4:	5505 000d 550f 000d 5519 000d 5523 000d     .U...U...U..#U..
   d5dd4:	552d 000d 5539 000d 5545 000d 5551 000d     -U..9U..EU..QU..
   d5de4:	5559 000d 5563 000d 556d 000d               YU..cU..mU..

000d5df0 <__sf_fake_stdin>:
	...

000d5e10 <__sf_fake_stdout>:
	...

000d5e30 <__sf_fake_stderr>:
	...
   d5e50:	0043                                        C.

000d5e52 <link_const_variable_data_end>:
	...

000d5e54 <link_constructors_location>:
   d5e54:	000d430d 	.word	0x000d430d
   d5e58:	000d476d 	.word	0x000d476d
   d5e5c:	000d47c1 	.word	0x000d47c1
   d5e60:	000d47e9 	.word	0x000d47e9
   d5e64:	000d48a9 	.word	0x000d48a9
   d5e68:	000d48b9 	.word	0x000d48b9
   d5e6c:	000d4911 	.word	0x000d4911
   d5e70:	000d5439 	.word	0x000d5439
   d5e74:	000d54f1 	.word	0x000d54f1
   d5e78:	000d5639 	.word	0x000d5639
   d5e7c:	000d5719 	.word	0x000d5719
   d5e80:	000d57b1 	.word	0x000d57b1
   d5e84:	000d5835 	.word	0x000d5835
   d5e88:	000d58f9 	.word	0x000d58f9
   d5e8c:	000d59bd 	.word	0x000d59bd
